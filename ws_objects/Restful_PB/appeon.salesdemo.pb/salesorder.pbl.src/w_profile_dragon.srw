$PBExportHeader$w_profile_dragon.srw
$PBExportComments$/* AlonB   08/22/19 validation issue  11428  QA */ AlonB  issue 11531  errror message    AlonB  09/19/2019  #12298 ~r~nAlonB 09/21 12289# /* AlonB 10/03/2019  issue #12424 *///AlonB 10/04/2019  issue #12424 |AlonB #12424 Zach Fail 10/18 AlonB#12294 10/2
forward
global type w_profile_dragon from w_profile
end type
type st_class_name from statictext within w_profile_dragon
end type
type dw_recipe_update from datawindow within w_profile_dragon
end type
type dw_container_destination_cell from datawindow within w_profile_dragon
end type
type dw_container_destination_trench from datawindow within w_profile_dragon
end type
type dw_cwt_category_list from datawindow within w_profile_dragon
end type
type dw_profile_gen_contact_form from datawindow within w_profile_dragon
end type
type dw_shipping_unit from datawindow within w_profile_dragon
end type
type dw_receipt_ots_approval_list from datawindow within w_profile_dragon
end type
type dw_site_types_old from datawindow within w_profile_dragon
end type
type dw_copc_list from datawindow within w_profile_dragon
end type
type dw_profile_access from datawindow within w_profile_dragon
end type
type dw_profile_count from datawindow within w_profile_dragon
end type
type dw_tracking from datawindow within w_profile_dragon
end type
type tab_1 from tab within w_profile_dragon
end type
type tabpage_select from userobject within tab_1
end type
type pb_waste_code from picturebutton within tabpage_select
end type
type ddlb_labpack_template_flag from dropdownlistbox within tabpage_select
end type
type pb_process_code from picturebutton within tabpage_select
end type
type sle_process_code from singlelineedit within tabpage_select
end type
type ddlb_docs_pending from dropdownlistbox within tabpage_select
end type
type pb_recipe from picturebutton within tabpage_select
end type
type sle_recipe from singlelineedit within tabpage_select
end type
type pb_billing_project_id from picturebutton within tabpage_select
end type
type sle_billing_project_id from singlelineedit within tabpage_select
end type
type pb_consolidation_profile from picturebutton within tabpage_select
end type
type sle_consolidation_profile from singlelineedit within tabpage_select
end type
type ddlb_container_destination_cell from dropdownlistbox within tabpage_select
end type
type ddlb_container_destination_trench from dropdownlistbox within tabpage_select
end type
type ddlb_profile_consolidation_group from dropdownlistbox within tabpage_select
end type
type ddlb_cwt_category from dropdownlistbox within tabpage_select
end type
type pb_const_id from picturebutton within tabpage_select
end type
type sle_const_id from singlelineedit within tabpage_select
end type
type pb_tsdf_code_to from upb_quick_select_profile_approval within tabpage_select
end type
type pb_tsdf_code_from from upb_quick_select_profile_approval within tabpage_select
end type
type sle_tsdf_code_to from singlelineedit within tabpage_select
end type
type sle_tsdf_code_from from singlelineedit within tabpage_select
end type
type pb_tsdf_approval_code_to from upb_quick_select_profile_approval within tabpage_select
end type
type pb_tsdf_approval_code_from from upb_quick_select_profile_approval within tabpage_select
end type
type sle_tsdf_approval_code_to from singlelineedit within tabpage_select
end type
type sle_tsdf_approval_code_from from singlelineedit within tabpage_select
end type
type sle_treatment_to from singlelineedit within tabpage_select
end type
type sle_treatment_from from singlelineedit within tabpage_select
end type
type ddlb_copc from dropdownlistbox within tabpage_select
end type
type pb_location_to from upb_quick_select_locations within tabpage_select
end type
type pb_location_from from upb_quick_select_locations within tabpage_select
end type
type pb_approval_code_to from upb_quick_select_profile_approval within tabpage_select
end type
type pb_approval_code_from from upb_quick_select_profile_approval within tabpage_select
end type
type pb_territory_code from upb_quick_select_territory within tabpage_select
end type
type pb_contact from upb_quick_select_eq_contact within tabpage_select
end type
type pb_treatment_id_to from upb_quick_select_treatment within tabpage_select
end type
type pb_treatment_id_from from upb_quick_select_treatment within tabpage_select
end type
type pb_generator_id_to from upb_quick_select_generator within tabpage_select
end type
type pb_generator_name_to from upb_quick_select_generator within tabpage_select
end type
type pb_epa_id_to from upb_quick_select_generator within tabpage_select
end type
type pb_customer_to from upb_quick_select_customer within tabpage_select
end type
type pb_generator_id_from from upb_quick_select_generator within tabpage_select
end type
type pb_generator_name_from from upb_quick_select_generator within tabpage_select
end type
type pb_epa_id_from from upb_quick_select_generator within tabpage_select
end type
type pb_customer_from from upb_quick_select_customer within tabpage_select
end type
type sle_territory_code from singlelineedit within tabpage_select
end type
type sle_location_to from singlelineedit within tabpage_select
end type
type sle_location_from from singlelineedit within tabpage_select
end type
type sle_approval_code_to from singlelineedit within tabpage_select
end type
type sle_approval_code_from from singlelineedit within tabpage_select
end type
type sle_eq_contact from singlelineedit within tabpage_select
end type
type ddlb_profile_status from dropdownlistbox within tabpage_select
end type
type ddlb_ots_flag from dropdownlistbox within tabpage_select
end type
type sle_waste_code_to from singlelineedit within tabpage_select
end type
type sle_waste_code_from from singlelineedit within tabpage_select
end type
type dw_select from uo_dw_param within tabpage_select
end type
type tabpage_select from userobject within tab_1
pb_waste_code pb_waste_code
ddlb_labpack_template_flag ddlb_labpack_template_flag
pb_process_code pb_process_code
sle_process_code sle_process_code
ddlb_docs_pending ddlb_docs_pending
pb_recipe pb_recipe
sle_recipe sle_recipe
pb_billing_project_id pb_billing_project_id
sle_billing_project_id sle_billing_project_id
pb_consolidation_profile pb_consolidation_profile
sle_consolidation_profile sle_consolidation_profile
ddlb_container_destination_cell ddlb_container_destination_cell
ddlb_container_destination_trench ddlb_container_destination_trench
ddlb_profile_consolidation_group ddlb_profile_consolidation_group
ddlb_cwt_category ddlb_cwt_category
pb_const_id pb_const_id
sle_const_id sle_const_id
pb_tsdf_code_to pb_tsdf_code_to
pb_tsdf_code_from pb_tsdf_code_from
sle_tsdf_code_to sle_tsdf_code_to
sle_tsdf_code_from sle_tsdf_code_from
pb_tsdf_approval_code_to pb_tsdf_approval_code_to
pb_tsdf_approval_code_from pb_tsdf_approval_code_from
sle_tsdf_approval_code_to sle_tsdf_approval_code_to
sle_tsdf_approval_code_from sle_tsdf_approval_code_from
sle_treatment_to sle_treatment_to
sle_treatment_from sle_treatment_from
ddlb_copc ddlb_copc
pb_location_to pb_location_to
pb_location_from pb_location_from
pb_approval_code_to pb_approval_code_to
pb_approval_code_from pb_approval_code_from
pb_territory_code pb_territory_code
pb_contact pb_contact
pb_treatment_id_to pb_treatment_id_to
pb_treatment_id_from pb_treatment_id_from
pb_generator_id_to pb_generator_id_to
pb_generator_name_to pb_generator_name_to
pb_epa_id_to pb_epa_id_to
pb_customer_to pb_customer_to
pb_generator_id_from pb_generator_id_from
pb_generator_name_from pb_generator_name_from
pb_epa_id_from pb_epa_id_from
pb_customer_from pb_customer_from
sle_territory_code sle_territory_code
sle_location_to sle_location_to
sle_location_from sle_location_from
sle_approval_code_to sle_approval_code_to
sle_approval_code_from sle_approval_code_from
sle_eq_contact sle_eq_contact
ddlb_profile_status ddlb_profile_status
ddlb_ots_flag ddlb_ots_flag
sle_waste_code_to sle_waste_code_to
sle_waste_code_from sle_waste_code_from
dw_select dw_select
end type
type tabpage_view from userobject within tab_1
end type
type st_form_id_wcr from statictext within tabpage_view
end type
type st_1 from statictext within tabpage_view
end type
type tab_2 from tab within tabpage_view
end type
type tabpage_detail from userobject within tab_2
end type
type dw_approval from anc_dw within tabpage_detail
end type
type dw_detail from anc_dw within tabpage_detail
end type
type dw_quoteheader from datawindow within tabpage_detail
end type
type tabpage_detail from userobject within tab_2
dw_approval dw_approval
dw_detail dw_detail
dw_quoteheader dw_quoteheader
end type
type tabpage_comment from userobject within tab_2
end type
type dw_comment from datawindow within tabpage_comment
end type
type tabpage_comment from userobject within tab_2
dw_comment dw_comment
end type
type tabpage_technical from userobject within tab_2
end type
type tab_4 from tab within tabpage_technical
end type
type tabpage_active_waste_profile from userobject within tab_4
end type
type dw_active_profile_1 from anc_dw within tabpage_active_waste_profile
end type
type tabpage_active_waste_profile from userobject within tab_4
dw_active_profile_1 dw_active_profile_1
end type
type tabpage_compare from userobject within tab_4
end type
type dw_wcr_technical from anc_dw within tabpage_compare
end type
type dw_lab from anc_dw within tabpage_compare
end type
type dw_technical from anc_dw within tabpage_compare
end type
type tabpage_compare from userobject within tab_4
dw_wcr_technical dw_wcr_technical
dw_lab dw_lab
dw_technical dw_technical
end type
type tab_4 from tab within tabpage_technical
tabpage_active_waste_profile tabpage_active_waste_profile
tabpage_compare tabpage_compare
end type
type dw_active_profile from anc_dw within tabpage_technical
end type
type dw_profile_radioactive_waste from anc_dw within tabpage_technical
end type
type tabpage_technical from userobject within tab_2
tab_4 tab_4
dw_active_profile dw_active_profile
dw_profile_radioactive_waste dw_profile_radioactive_waste
end type
type tabpage_waste from userobject within tab_2
end type
type dw_wcr_waste from datawindow within tabpage_waste
end type
type dw_waste from datawindow within tabpage_waste
end type
type dw_waste_code_fed from datawindow within tabpage_waste
end type
type dw_waste_code_state from datawindow within tabpage_waste
end type
type dw_waste_code_eq from datawindow within tabpage_waste
end type
type dw_waste_profilelab from datawindow within tabpage_waste
end type
type dw_waste_other from anc_dw within tabpage_waste
end type
type tabpage_waste from userobject within tab_2
dw_wcr_waste dw_wcr_waste
dw_waste dw_waste
dw_waste_code_fed dw_waste_code_fed
dw_waste_code_state dw_waste_code_state
dw_waste_code_eq dw_waste_code_eq
dw_waste_profilelab dw_waste_profilelab
dw_waste_other dw_waste_other
end type
type tabpage_const from userobject within tab_2
end type
type dw_const from datawindow within tabpage_const
end type
type dw_wcr_const from datawindow within tabpage_const
end type
type ddlb_quick_fill_unit from dropdownlistbox within tabpage_const
end type
type ddlb_quick_fill_test_method from dropdownlistbox within tabpage_const
end type
type tabpage_const from userobject within tab_2
dw_const dw_const
dw_wcr_const dw_wcr_const
ddlb_quick_fill_unit ddlb_quick_fill_unit
ddlb_quick_fill_test_method ddlb_quick_fill_test_method
end type
type tabpage_composition from userobject within tab_2
end type
type dw_composition_other from anc_dw within tabpage_composition
end type
type dw_composition_epa from anc_dw within tabpage_composition
end type
type dw_composition from anc_dw within tabpage_composition
end type
type tabpage_composition from userobject within tab_2
dw_composition_other dw_composition_other
dw_composition_epa dw_composition_epa
dw_composition dw_composition
end type
type tabpage_shipping from userobject within tab_2
end type
type dw_wcr_facility from datawindow within tabpage_shipping
end type
type dw_ldr_subcategory from anc_dw within tabpage_shipping
end type
type dw_container_size from anc_dw within tabpage_shipping
end type
type dw_shipping from anc_dw within tabpage_shipping
end type
type tabpage_shipping from userobject within tab_2
dw_wcr_facility dw_wcr_facility
dw_ldr_subcategory dw_ldr_subcategory
dw_container_size dw_container_size
dw_shipping dw_shipping
end type
type tabpage_wcr from userobject within tab_2
end type
type dw_profile_fuels_blending from datawindow within tabpage_wcr
end type
type st_2 from statictext within tabpage_wcr
end type
type p_1 from picture within tabpage_wcr
end type
type dw_profile_wcr_sections from datawindow within tabpage_wcr
end type
type dw_wcr_display_3 from anc_dw within tabpage_wcr
end type
type dw_wcr_display_4 from anc_dw within tabpage_wcr
end type
type dw_wcr_display_2 from anc_dw within tabpage_wcr
end type
type dw_wcr_display_1 from anc_dw within tabpage_wcr
end type
type dw_wcr_display_5 from datawindow within tabpage_wcr
end type
type tabpage_wcr from userobject within tab_2
dw_profile_fuels_blending dw_profile_fuels_blending
st_2 st_2
p_1 p_1
dw_profile_wcr_sections dw_profile_wcr_sections
dw_wcr_display_3 dw_wcr_display_3
dw_wcr_display_4 dw_wcr_display_4
dw_wcr_display_2 dw_wcr_display_2
dw_wcr_display_1 dw_wcr_display_1
dw_wcr_display_5 dw_wcr_display_5
end type
type tabpage_price from userobject within tab_2
end type
type tab_price from tab within tabpage_price
end type
type tab_price from tab within tabpage_price
end type
type tabpage_price from userobject within tab_2
tab_price tab_price
end type
type tabpage_rules from userobject within tab_2
end type
type dw_rules from datawindow within tabpage_rules
end type
type tabpage_rules from userobject within tab_2
dw_rules dw_rules
end type
type tabpage_category from userobject within tab_2
end type
type dw_category from datawindow within tabpage_category
end type
type tabpage_category from userobject within tab_2
dw_category dw_category
end type
type tabpage_recipe from userobject within tab_2
end type
type dw_recipe from datawindow within tabpage_recipe
end type
type tabpage_recipe from userobject within tab_2
dw_recipe dw_recipe
end type
type tabpage_import from userobject within tab_2
end type
type tab_import_waste from tab within tabpage_import
end type
type tab_import_waste from tab within tabpage_import
end type
type tabpage_import from userobject within tab_2
tab_import_waste tab_import_waste
end type
type tabpage_statistics from userobject within tab_2
end type
type dw_statistics from datawindow within tabpage_statistics
end type
type tabpage_statistics from userobject within tab_2
dw_statistics dw_statistics
end type
type tabpage_note from userobject within tab_2
end type
type u_tabpage_note from uo_tabpage_note within tabpage_note
end type
type tabpage_note from userobject within tab_2
u_tabpage_note u_tabpage_note
end type
type tabpage_document from userobject within tab_2
end type
type tab_3 from tab within tabpage_document
end type
type tabpage_document_document from userobject within tab_3
end type
type uo_documents from udw_document within tabpage_document_document
end type
type tabpage_document_document from userobject within tab_3
uo_documents uo_documents
end type
type tabpage_form from userobject within tab_3
end type
type dw_form from datawindow within tabpage_form
end type
type tabpage_form from userobject within tab_3
dw_form dw_form
end type
type tabpage_availability from userobject within tab_3
end type
type dw_form_availability from datawindow within tabpage_availability
end type
type tabpage_availability from userobject within tab_3
dw_form_availability dw_form_availability
end type
type tab_3 from tab within tabpage_document
tabpage_document_document tabpage_document_document
tabpage_form tabpage_form
tabpage_availability tabpage_availability
end type
type tabpage_document from userobject within tab_2
tab_3 tab_3
end type
type tabpage_audit from userobject within tab_2
end type
type dw_audit from datawindow within tabpage_audit
end type
type tabpage_audit from userobject within tab_2
dw_audit dw_audit
end type
type tab_2 from tab within tabpage_view
tabpage_detail tabpage_detail
tabpage_comment tabpage_comment
tabpage_technical tabpage_technical
tabpage_waste tabpage_waste
tabpage_const tabpage_const
tabpage_composition tabpage_composition
tabpage_shipping tabpage_shipping
tabpage_wcr tabpage_wcr
tabpage_price tabpage_price
tabpage_rules tabpage_rules
tabpage_category tabpage_category
tabpage_recipe tabpage_recipe
tabpage_import tabpage_import
tabpage_statistics tabpage_statistics
tabpage_note tabpage_note
tabpage_document tabpage_document
tabpage_audit tabpage_audit
end type
type dw_header from anc_dw within tabpage_view
end type
type dw_profile_pharmaceutical_supplement from datawindow within tabpage_view
end type
type tabpage_view from userobject within tab_1
st_form_id_wcr st_form_id_wcr
st_1 st_1
tab_2 tab_2
dw_header dw_header
dw_profile_pharmaceutical_supplement dw_profile_pharmaceutical_supplement
end type
type tabpage_3 from userobject within tab_1
end type
type dw_list_prices from datawindow within tabpage_3
end type
type tabpage_3 from userobject within tab_1
dw_list_prices dw_list_prices
end type
type tabpage_4 from userobject within tab_1
end type
type dw_list from datawindow within tabpage_4
end type
type tabpage_4 from userobject within tab_1
dw_list dw_list
end type
type tab_1 from tab within w_profile_dragon
tabpage_select tabpage_select
tabpage_view tabpage_view
tabpage_3 tabpage_3
tabpage_4 tabpage_4
end type
type cb_view from commandbutton within w_profile_dragon
end type
type cb_select from commandbutton within w_profile_dragon
end type
type cb_list_prices from commandbutton within w_profile_dragon
end type
type cb_list from commandbutton within w_profile_dragon
end type
type dw_waste_import_supplement from datawindow within w_profile_dragon
end type
type dw_benzene_waste_ops_supplemen from datawindow within w_profile_dragon
end type
type dw_profile_thermal_supplement_form from datawindow within w_profile_dragon
end type
type dw_profile_cylinder_supplement_dragon from datawindow within w_profile_dragon
end type
type dw_profile_pcb_supplement_dragon from datawindow within w_profile_dragon
end type
type dw_profile_used_oil_supplement_dragon from datawindow within w_profile_dragon
end type
type dw_profile_debris_certification_dragon from datawindow within w_profile_dragon
end type
type dw_profile_illinois_disposal_supplemen from datawindow within w_profile_dragon
end type
type dw_profile_ldr_form_dragon from datawindow within w_profile_dragon
end type
type dw_profile_radioactive_supplement_page_3 from datawindow within w_profile_dragon
end type
type dw_profile_radioactive_supplement_page_1 from datawindow within w_profile_dragon
end type
type dw_profile_radioactive_supplement_page_2 from datawindow within w_profile_dragon
end type
type dw_profile_radioactive_supplement_3sub from datawindow within w_profile_dragon
end type
type dw_appr_notification from datawindow within w_profile_dragon
end type
type dw_appr_renewal_notification from datawindow within w_profile_dragon
end type
type dw_generator_locations from datawindow within w_profile_dragon
end type
type cb_pdf from commandbutton within w_profile_dragon
end type
type pb_pdf from picturebutton within w_profile_dragon
end type
type dw_profile_consolidation_group from datawindow within w_profile_dragon
end type
type dw_ship_volume from datawindow within w_profile_dragon
end type
type dw_gen_knowledge_supplement from datawindow within w_profile_dragon
end type
end forward

shared variables





end variables

global type w_profile_dragon from w_profile
integer width = 5042
integer height = 2688
string title = "Profile Tracking"
boolean clientedge = true
event ue_new ( )
event ue_save ( )
event ue_first ( )
event ue_goto ( )
event ue_last ( )
event ue_next ( )
event ue_previous ( )
event ue_sort ( )
event ue_wcr_help ( )
event ue_wcr_validate ( )
event ue_work_in_process ( )
event ue_cancel ( )
event ue_copy ( )
event ue_print ( )
event ue_manifest ( )
event ue_post_select ( )
event ue_document ( )
event ue_scan ( )
event ue_assign_wcr ( )
event ue_link ( )
event ue_compare_template ( )
event ue_wcr_cancel_rejected_close ( )
st_class_name st_class_name
dw_recipe_update dw_recipe_update
dw_container_destination_cell dw_container_destination_cell
dw_container_destination_trench dw_container_destination_trench
dw_cwt_category_list dw_cwt_category_list
dw_profile_gen_contact_form dw_profile_gen_contact_form
dw_shipping_unit dw_shipping_unit
dw_receipt_ots_approval_list dw_receipt_ots_approval_list
dw_site_types_old dw_site_types_old
dw_copc_list dw_copc_list
dw_profile_access dw_profile_access
dw_profile_count dw_profile_count
dw_tracking dw_tracking
tab_1 tab_1
cb_view cb_view
cb_select cb_select
cb_list_prices cb_list_prices
cb_list cb_list
dw_waste_import_supplement dw_waste_import_supplement
dw_benzene_waste_ops_supplemen dw_benzene_waste_ops_supplemen
dw_profile_thermal_supplement_form dw_profile_thermal_supplement_form
dw_profile_cylinder_supplement_dragon dw_profile_cylinder_supplement_dragon
dw_profile_pcb_supplement_dragon dw_profile_pcb_supplement_dragon
dw_profile_used_oil_supplement_dragon dw_profile_used_oil_supplement_dragon
dw_profile_debris_certification_dragon dw_profile_debris_certification_dragon
dw_profile_illinois_disposal_supplemen dw_profile_illinois_disposal_supplemen
dw_profile_ldr_form_dragon dw_profile_ldr_form_dragon
dw_profile_radioactive_supplement_page_3 dw_profile_radioactive_supplement_page_3
dw_profile_radioactive_supplement_page_1 dw_profile_radioactive_supplement_page_1
dw_profile_radioactive_supplement_page_2 dw_profile_radioactive_supplement_page_2
dw_profile_radioactive_supplement_3sub dw_profile_radioactive_supplement_3sub
dw_appr_notification dw_appr_notification
dw_appr_renewal_notification dw_appr_renewal_notification
dw_generator_locations dw_generator_locations
cb_pdf cb_pdf
pb_pdf pb_pdf
dw_profile_consolidation_group dw_profile_consolidation_group
dw_ship_volume dw_ship_volume
dw_gen_knowledge_supplement dw_gen_knowledge_supplement
end type
global w_profile_dragon w_profile_dragon

type variables
datawindow	idw_wcr_facility
	//COR2-AM
datawindow idw_waste_import_supplement
datawindow idw_benzene_waste_ops_supplemen
datawindow idw_profile_thermal_supplement_form
datawindow idw_profile_cylinder_supplement_dragon
datawindow idw_profile_debris_certification_dragon
datawindow idw_profile_used_oil_supplement_dragon
datawindow idw_profile_illinois_disposal_supplemen
datawindow idw_profile_ldr_form_dragon
datawindow idw_profile_radioactive_supplement_page_1
datawindow idw_profile_radioactive_supplement_page_2
datawindow idw_profile_radioactive_supplement_page_3
datawindow idw_profile_radioactive_supplement_3sub
datawindow idw_profile_radioactive_waste
datawindow idw_ship_volume_container
datawindow idw_ship_volume
datawindow idw_profile_pharmaceutical_supplement
datawindow idw_gen_knowledge_supplement, idw_profile_fuels_blending
//datawindow idw_profile_pcb_supplement_dragon //COR2-JXM

u_tabpage_profile_price_bundled iuo_bundled[]

// 20200331 jcb #14493/14995/14996 put literals into variable to circumvent Max-script-size-error
string is_profileradioactive_radium_226_flag  = 'profileradioactive_radium_226_flag' 
string is_profileradioactive_radium_226_concentration='profileradioactive_radium_226_concentration'
string is_profileradioactive_radium_228_flag  = 'profileradioactive_radium_228_flag'
string is_profileradioactive_radium_228_concentration='profileradioactive_radium_228_concentration'
string is_profileradioactive_potassium_40_flag  = 'profileradioactive_potassium_40_flag'
string is_profileradioactive_potassium_40_concentration='profileradioactive_potassium_40_concentration'
string is_profileradioactive_lead_210_flag  = 'profileradioactive_lead_210_flag'
string is_profileradioactive_lead_210_concentration='profileradioactive_lead_210_concentration'
string is_profileradioactive_uranium_thorium_flag = 'profileradioactive_uranium_thorium_flag'
String is_docs_pending, is_last_modified_by
String is_rb_3, is_rb_4
long  il_profile_form_compare = 0 // 03/04/2021 #19144
string is_name
string is_tracking_type
string is_data
string is_labpack_template_flag //DevOps 28728
string is_profile_creation //DevOps 16737
string is_docprocessing_comments //DevOps 26956
String is_nav_form_id,is_orig_value,is_routing
String is_copy_source
string is_rcra_waste_codes_for_g4[]
string is_tx_state_waste_codes
string is_po,is_info_basis_analysis,is_info_basis_msds,is_info_basis_knowledge
int ii_display_status_id
int ib_from_zero=0, ib_typical_zero=0
int ii_rejection=100
long il_old_scrollpos, il_current_wcr_display_2_pos, il_doc_type
long il_row
long il_copy_profile_id
string is_undo_modify

//string is_rcra_waste_code_flag
boolean ib_reject_resubmit_flag=FALSE
boolean ib_profile_creation=FALSE
boolean ib_edit=True
boolean ib_posted_docs_pending=False
boolean ib_save_in_process=FALSE
boolean ib_docs_pending=FALSE
//Boolean ib_in_CopyProfile=FALSE
Boolean ib_form_email_send = FALSE
boolean ib_hide_quick_select_new = false
boolean ib_copy_from_ldr_wcr = FALSE
boolean ib_append_rows = FALSE
Boolean ib_wcr_close = FALSE
Boolean ib_check_profile_origin = FALSE //DevOps 16737
Boolean ib_join_profitcenter = TRUE //COR2 JXM 08/02/2019
Boolean ib_LDR_setFilter =FALSE    // AlonB 10/03/2019 Issue #12424
boolean	ib_opened_from_wcr = FALSE 
boolean  ib_page_1_changed   = FALSE    // 20200413 jcb #14994 
boolean  ib_page_3_changed   = FALSE    // 20200414 jcb #14994 
boolean ib_shipping_volume  = TRUE 
boolean ib_retrieve_after_copy = FALSE
boolean ib_refresh_constituent = FALSE
boolean ib_tracking_type = FALSE
boolean ib_epa_id = FALSE
boolean ib_increase_search_criteria= FALSE
boolean ib_skip_validation_waste_code //Subhrajyoti For 38816 - -Profile Tracking - Modification to validation logic for pre-assigned outbound
long il_profile_waste_managed_id
string is_various_type //DevOps 10373
datawindow idw_generator_locations //DevOps 10373
tab_2  itab //DevOps #14709 
boolean lb_radioactive_mod=false
string is_profile_emergency_phone  //DevOps 13832 GDE 01/31/2020
long il_profile_id //DevOps 15186 GDE 04/15/2020
string is_ldr_validate_wcr, is_ldr_value=''
dropdownlistbox iddlb_labpack_template_flag //DevOps 28728
string is_first_column
string is_email, is_first_name, is_last_name //DevOps:57361
//Devops 21596 & 58318-Added By Venu for lazy load implementation.-Start	
integer ii_pre_sel_tab_index=0, ii_pre_sel_tab_newindex=0	
Boolean ib_save_facility_change=False
//Devops 21596 & 58318-Added By Venu for lazy load implementation.-End

Integer ii_filenum //Devops 18072 Venu for performance check	

Long il_waste_code_uid //Devops# 18099 added by Venu
String is_waste_code //Devops# 18099 added by Venu
/*
w_profile	iw_profile

transaction itr_share
transaction itr_forms
transaction	itr_image
boolean	ib_connected_share = FALSE
boolean	ib_connected_forms = FALSE
boolean	ib_connected_image = FALSE

tab	itab_price
tab    itab_recipe
tab    itab_import_waste

u_tabpage_profile_price itabpage_profile_price[]
u_tabpage_profile_import_waste  itabpage_profile_import_waste[]

integer	ii_tabpage_count, ii_sort_order, ii_dw_height_main = 1984
integer	ii_dw2_height, ii_dw_height, ii_version_id
integer	ii_price_modifiedcount = 0
integer ii_waste_modifiedcunt = 0
integer	ii_state_review_confirmation_type_id

String	is_rcra_listed_waste_codes, is_rcra_characteristic_waste_code
String	is_michigan_haz_waste_codes, is_michigan_non_haz_waste_codes
String	is_pa_state_waste_codes
String	is_rcra_waste_codes
String	is_state_waste_codes
String	is_eqai_test = "L:\EQAI\EQAITest\DocProcess"
String	is_listed_characteristic = ''
String is_waste_code_state = ''

String is_msg_waste_import

datetime	idt_save_date

u_price_adjustment_entry	iuo_price_adjustment
uo_tabpage_note	itp_note
uo_wcr_form			iuo_wcr_form

udw_document iudw_document

datawindow	idw_select
//datawindow	idw_header
datawindow	idw_tracking
datawindow	idw_detail

//datawindow	idw_approval
datawindow	idw_comment
datawindow	idw_technical
datawindow	idw_lab
datawindow	idw_waste
datawindow	idw_waste_other
datawindow	idw_waste_profilelab
datawindow	idw_const
datawindow	idw_quoteheader
datawindow	idw_shipping
datawindow	idw_ldr_subcategory
datawindow	idw_list_prices
datawindow	idw_list
datawindow	idw_active
datawindow	idw_note
datawindow	idw_display
datawindow	idw_form
datawindow	idw_form_availability
datawindow	idw_wcr_technical
datawindow	idw_wcr_const
datawindow	idw_wcr_waste
datawindow	idw_profile_gen_contact_form
datawindow idw_recipe
datawindow idw_recipe_update
// sk
datawindow	idw_composition
datawindow	idw_composition_other
datawindow	idw_composition_epa
datawindow	idw_section_select
datawindow	idw_wcr_display_1
datawindow	idw_wcr_display_2
datawindow	idw_wcr_display_3
datawindow	idw_wcr_display_4
// COR2-MPM
datawindow	idw_wcr_display_5
// rb - adding rules and categories
datawindow	idw_rules
datawindow	idw_category

datawindow	idw_audit
datawindow	idw_statistics
datawindow	idw_site_type

// SK-TX WC - 08/01/2013
datawindow	idw_waste_code_fed
datawindow  idw_waste_code_state
datawindow	idw_waste_code_eq

// COR2-MPM
datawindow idw_container_size

dropdownlistbox	iddlb_ots_flag
dropdownlistbox	iddlb_profile_status

boolean	ib_access_new = TRUE
boolean	ib_access_cancel = TRUE
boolean	ib_access_update = TRUE
boolean	ib_access_quote = TRUE
boolean	ib_access_note = TRUE
boolean	ib_new_record
boolean	ib_new_select
boolean	ib_has_retrieved
boolean	ib_retrieving
boolean	ib_can_update
boolean	ib_can_new
boolean	ib_can_navigate
boolean	ib_can_confirm
boolean	ib_can_quote
boolean	ib_can_copy
boolean	ib_can_void
boolean	ib_can_cancel
boolean	ib_can_sort
boolean	ib_can_print
boolean	ib_user_cancelled

boolean  ib_changed_waste
boolean	ib_changed_profile
boolean	ib_changed_const
boolean	ib_changed_document
boolean	ib_changed_comp
boolean 	ib_changed_ldr_subcat
boolean   ib_comp_insert_row

boolean	ib_changed_note
boolean	ib_changed_quote
boolean	ib_changed_waste_code
boolean	ib_changed_wcr
boolean	ib_changed_form
boolean	ib_changed_tracking
boolean	ib_changed_technical
boolean	ib_changed_lab
boolean	ib_changed_approval
boolean	ib_changed_primary_wcr
boolean  ib_no_audit
boolean	ib_added_wcr

boolean ib_retrieved_documents = FALSE

boolean	ib_join_generator
boolean	ib_join_customer
boolean	ib_copy = FALSE
boolean	ib_new_print
boolean	ib_retrieve
boolean	ib_update_failed
boolean	ib_user_closed_window
//boolean	ib_wcr
boolean	ib_wants_zero_price

integer	ii_tabpage_select 		= 1
integer	ii_tabpage_view 			= 2
integer	ii_tabpage_list_prices  = 3
integer	ii_tabpage_list 			= 4
integer	ii_clicked_tab1
integer	ii_clicked_tab2
integer	ii_clicked_tab3

integer	ii_tabpage_detail 	= 1
integer	ii_tabpage_comment 	= 2

integer	ii_tabpage_technical = 3
integer  ii_tabpage_technical_active_waste_profile = 1
integer  ii_tabpage_technical_compare = 2

integer	ii_tabpage_waste 		= 4
integer	ii_tabpage_const 		= 5
integer  ii_tabpage_composition= 6
integer	ii_tabpage_shipping 	= 7
integer  ii_tabpage_wcr 		= 8
integer	ii_tabpage_price 		= 9
integer	ii_tabpage_rules 		= 10
integer	ii_tabpage_category 	= 11
integer	ii_tabpage_statistics = 14
integer	ii_tabpage_note 		= 15
integer	ii_tabpage_document 	= 16
integer	ii_tabpage_audit 		= 17
integer   ii_tabpage_recipe   = 12
integer   ii_tabpage_import_waste   = 13

integer	ii_tabpage_document_document = 1
integer	ii_tabpage_form = 2
integer	ii_tabpage_form_availability  = 3

long		il_curr_row
long		il_newrow
long		il_newrow_tech
long		il_newrow_lab
long		il_form_id_wcr
long		il_wcr_revision_id
long		il_wcr_version_id

long  il_last_row_clicked_transporter

string	is_wcr_locked
string	is_document_source
string	is_access
string	is_access_to_scan
string	is_access_companies

string	is_select
string	is_ots_flag
string	is_profile_status
string	is_profile_status_orig
string	is_select_header
string	is_select_list
string	is_msg_validate_price
string	is_approval_readonly = "NO"

integer	ii_top6 = 6
integer	ii_company_id
integer	ii_profit_ctr_id
integer	ii_cwt_category_id
//long		il_customer_id
long		il_draggedrow

datastore ids_customer_dispositions
// rb 04/24/2012
str_wcr_profile_map istr_wcr_profile_map[]
datawindow idw_shipping_unit
// rb 05/29/2012
//datawindow idw_profile_wcr_facility
// SK 06/06/2012
string	is_msg_validate_wcr
//rb 05/30/2012
datastore ids_profile_validation
// sk 09/25/2012
datastore ids_template_data
datastore ids_profile_lock_item
datastore ids_form_wcr, ids_scan_wcr
// dz 08/29/2012
String	is_msg_validate_shipping

Integer	ii_consolidation_group_uid, ii_container_destination_trench_uid, ii_container_destination_cell_uid	// JCG 10/3/17 Consolidation Project

//COR2-JG
String is_table_name
*/
end variables

forward prototypes
public subroutine wf_reset_change_flags ()
public function integer wf_check_changes ()
public subroutine wf_accepttext ()
public subroutine wf_retrieve ()
public subroutine wf_query_mode ()
public subroutine wf_reset ()
public subroutine wf_set_criteria ()
public subroutine wf_cancel_edit (datawindow adw_name, long al_row)
public function string wf_reset_pdf_printer ()
public function integer wf_modifiedcount_quote ()
public function integer wf_modifiedcount ()
public function integer wf_modifiedcount_profile ()
public function integer wf_validate ()
public function integer wf_void ()
public function integer wf_select_check ()
public function integer wf_populate_wwa (long al_profile_id, string as_approval_code, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, long al_row_header, string as_new_or_update)
public function integer wf_save_documents ()
public function integer wf_get_srec_exempt_id (integer ai_company_id, integer ai_profit_ctr_id, string as_approval_code)
public function long wf_get_customer_id ()
public function integer wf_copy_wcr (str_wcr_params ast_params)
public function integer wf_new_wcr (str_wcr_params ast_params)
public function long wf_retrieve_primary_wcr (long al_form_id_wcr)
public function integer wf_validate_wcr ()
public function long wf_get_profile_id ()
public subroutine wf_insert_wcr (str_wcr_params astr_wcr_params)
public function integer wf_save_wcr (long al_profile_id)
public function long wf_get_generator_id ()
public function integer wf_price (string as_action, long al_row_approval)
public function integer wf_set_quote (long al_profile_id)
public function long wf_set_profile (integer al_row)
public function integer wf_lab_tech_itemchanged (datawindow adw_name, long al_row, string as_column, string as_data)
public subroutine wf_lab_sync_technical (string as_column)
public function integer wf_init_lab (long al_row, string as_type)
public function integer wf_init_header (long al_row)
public function integer wf_init_tracking (long al_row)
public function integer wf_init_quoteheader (long al_row)
public function integer wf_init_forms ()
public subroutine wf_top6_renumber ()
public subroutine wf_top6_show ()
public function long wf_get_orig_customer_id ()
public function string wf_validate_waste_code ()
public function string wf_build_waste_code_where ()
public function string wf_profile_access (integer ai_company_id)
public function integer wf_audit (datawindow adw_name, long al_profile_id, long al_row, boolean ab_delete)
public function integer wf_get_department_id (string as_user)
public function integer wf_audit_message (string as_note)
public function integer wf_getaccess ()
public function string wf_check_broker_access ()
public function integer wf_access_waste_const ()
public function long wf_retrieve_documents (long al_row_header, long al_profile_id)
public subroutine wf_reset_forms ()
public subroutine wf_reset_documents ()
public function integer wf_attach_doc (string as_file_path, string as_file_name, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, string as_approval_code, long al_profile_id, long al_customer_id, long al_generator_id)
public subroutine wf_billing_project_select (long al_row)
public function integer wf_validate_billing (long al_row, boolean ab_msg)
public function integer wf_setup_select_buttons ()
public function integer wf_calc_tracking_days (long al_profile)
public function integer wf_populate_pq (long al_profile_id, string as_approval_code, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, long al_row_header, string as_new_or_update, long al_ref_form_id, long al_tracking_id, long al_generator_id)
public function integer wf_clear_client_types ()
public function long wf_get_report (string as_report, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, integer ai_form_version_id, string as_approval_code, long al_profile_id, long al_contact_id, long al_generator_id)
public subroutine wf_save ()
public function integer wf_validate_dates ()
public subroutine wf_update_receipt_for_ots (long al_profile_id, integer ai_call_type)
public function long wf_get_salestax_count_customer (long al_customer_id)
public function long wf_get_salestax_count_generator (long al_generator_id)
public function integer wf_set_wcr_sect_display (integer ai_sect_id)
public subroutine wf_wcr_profile_map_create ()
public function boolean wf_wcr_profile_map_sync (datawindow adw, string as_column, long al_row, string as_data)
public subroutine wf_wcr_profile_map_load_wcr_sect ()
public function integer wf_populate_wcr (long al_form_id, long al_profile_id, integer ai_company_id, integer ai_profit_ctr_id)
public function integer wf_populate_srec (long al_profile_id, string as_approval_code, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, integer ai_exempt_id, string as_manifest, string as_new_or_update, boolean ab_insert)
public function string wf_wcr_profile_map_get_value (string as_profile_column)
public subroutine wf_populate_srec_exempt_reasons (integer ai_exempt_id)
public subroutine wf_populate_generator_info (long al_generator_id, string as_epa_id)
public function boolean wf_validate_adjoining (string as_string)
public subroutine wf_wcr_set_waste_code_answers ()
public function integer wf_copy_template (long al_form_id, integer ai_revision_id)
public function integer wf_populate_gwa (long al_profile_id, long al_form_id, integer ai_revision_id, string as_amendment, string as_new_or_update, boolean ab_insert, string as_ra_profile_change_type)
public subroutine wf_set_access ()
public subroutine wf_set_template_lock_fields (datawindow adw_display)
public function boolean wf_match_to_template (boolean ab_check_all, string as_col_name, string as_col_type, string as_data)
public function integer wf_copy_wcr (str_pass astr_pass)
public subroutine wf_set_ph_from_to ()
public subroutine wf_set_ignitability ()
public subroutine wf_sync_profile_waste_codes (string as_waste_code_type, string as_waste_code_list, str_waste_code astr_waste_code)
public function integer wf_sync_waste_code (long al_primary_waste_code_uid, string as_primary_waste_code, boolean ab_show_msg)
public subroutine wf_populate_wastecodes_wcr (string as_source)
public function string wf_waste_code_type (long al_waste_code_uid)
public subroutine wf_set_waste_code_sequence (datawindow adw)
public subroutine wf_set_primary_waste_code ()
public function integer wf_set_sr_type_code (string as_waste_code, long al_waste_code_uid, long al_row_approval)
public subroutine wf_build_dot_shipping_desc ()
public subroutine wf_set_composition_sequence_id ()
public subroutine wf_set_rcra_haz_flag ()
public subroutine wf_generator_knowledge_acceptable_check (long al_generator_id)
public subroutine wf_calculate_constituent ()
public subroutine wf_calculate_vapor_pressure_density ()
public subroutine wf_generator_foreign_generator (long al_generator_id)
public function string wf_validate_outbound_waste_codes ()
public function boolean wf_calculate_uts_constituent (boolean ab_get_answer)
public subroutine wf_filter_cwt_category (long al_row)
public subroutine wf_filter_consolidation_group (long al_row)
public subroutine wf_filter_default_disposal_location (long al_row)
public function long wf_get_contact_id (long al_customer_id)
public function string wf_validate_tx_waste_codes ()
public subroutine wf_filter_air_permit_code (long al_row)
public function integer wf_import_waste (string as_action, long al_row_approval)
public function integer wf_modifiedcount_waste_import ()
public function integer wf_copy_wcr_dragon (str_pass astr_pass)
public function integer wf_copy_wcr_dragon (str_wcr_params ast_params)
public subroutine wf_wcr_profile_map_create_2 (long al_i)
public subroutine wf_set_ldr_form ()
public function string wf_validate_benzene_waste_ops_form ()
public function string wf_validate_profile_thermal (string as_profile_status, long al_profile_id)
public function string wf_validate_profile_rad1 (string as_profile_status, long al_profile_id)
public function string wf_validate_profile_rad2 (string as_profile_status, long al_profile_id)
public function string wf_validate_profile_rad3 (string as_profile_status, long al_profile_id)
public function string wf_get_form_copy_source ()
public function integer wf_get_ssrs_report (string as_form_name, long al_profile_id)
public function boolean wf_opened_from_wcr ()
public subroutine wf_wcr_section_g3_modify (ref datawindow adw, string as_column_name, long al_row, string as_data)
public subroutine wf_wcr_illinois_disposal (long ar_form_id, long ar_rev_id, long ar_profile_id)
public subroutine wf_item_changed_profile_thermal (string as_data, integer ai_row, datawindow as_data_object)
public subroutine wf_profile_waste_import_supplement (string as_data, long al_row, datawindow adw)
public subroutine wf_item_changed_profile_illinois_disposa (long al_row, datawindow adw)
public subroutine wf_waste_contains_spec_hand_none (datawindow adw, long al_row)
public subroutine wf_modify_gen_addr ()
public function integer wf_set_rad_supplements_2 (string as_object, long row, string data)
public function integer wf_set_rad_supplements_3 (string as_object, long row, string data)
public subroutine wf_set_dot_shipping_name (string as_checked, long al_row, ref datawindow adw_datawindow)
public subroutine wf_3sub_supplement_data (long al_profile_id)
public function long wf_set_rad_supplement_page_1 (long al_row, string as_generated_in_particle_accelerator_fl, string as_approved_for_disposal_flag, string as_approved_by_nrc_flag, string as_approved_for_alternate_disposal_flag, string as_nrc_exempted_flag, string as_released_from_radiological_control_fl, string as_dod_non_licensed_disposal_flag)
public function long wf_validate_tenorm_fee (ref string as_warning_or_error, ref string as_message)
public subroutine wf_copy_benzenesupplement (long ar_form_id, long ar_rev_id, long ar_profile_id)
public function integer wf_specific_tech_requested (string as_object, long al_row, string as_data)
public subroutine wf_set_thermal_supplement_same_as_above ()
public subroutine wf_set_debris_certification_flag (string as_debris_certification_flag)
public subroutine wf_set_benzene_supplemen_same_as_above ()
public subroutine wf_clear_proper_shipping_name_fields (ref datawindow adw, long al_row)
public function integer wf_format_rows ()
public subroutine wf_check_trailing_comma (long al_row, string as_column_value, integer ai_case)
public subroutine wf_wcr_ldr_supplement (long ar_form_id, long ar_revision_id, long ar_profile_id)
public subroutine wf_set_other_billunit (datawindow adw_datawindow)
public function integer wf_validate_form_multiple_users (long al_form_id)
public subroutine wf_upd_copy_source ()
public subroutine wf_docs_pending_msg ()
public subroutine wait_seconds (integer pas_parameter)
public function integer wf_composition_empty_rows_check ()
public function integer wf_constituent_validate ()
public subroutine wf_update_cor_consts ()
public function integer wf_const_id_err (long arg_currow, string arg_col)
public function integer wf_const_id_fix ()
public subroutine wf_wcr_generator_knowledge_supplement (long ar_form_id, long ar_rev_id, long ar_profile_id)
public function string wf_validate_generator_knowledge (string as_profile_status, long al_profile_id)
public function integer wf_get_first_last_tabcol (datawindow adw_source)
public function integer wf_adj_list_tab_size ()
public function string wf_validate_inb_outb_fed_haz_mi_codes ()
public subroutine wf_set_caution_text ()
public function string wf_validate_caution_text ()
public subroutine wf_copy_fuels_blending (long ar_form_id, long ar_rev_id, long ar_profile_id)
public function string wf_validate_fuels_blending (string as_profile_status, long al_profile_id)
public subroutine wf_wcr_profile_map_create_3 (long al_i)
public subroutine wf_set_noneapply (boolean ab_flag, string as_colname, long al_row, datawindow adw)
public function long wf_item_changed_fuels_blending (long al_row, string as_col, ref string as_data, datawindow adw)
public function integer wf_validate_ib_with_preassigned_ob (long al_ob_eq_profile_id, long al_ob_company_id, long al_ob_profit_ctr_id)
public function long wf_audit_header (long al_profile_id)
end prototypes

event ue_new();integer	li_option, li_rc
long		ll_row, ll_rowcount, ll_row_tracking, ll_row_quote, ll_container_row, ll_profile_id  // 20200129 jcb fix1
string	ls_message

// Check 'can' status
IF ib_can_new = FALSE THEN
	RETURN
ELSEIF ib_access_new = FALSE THEN
	SetMicroHelp("No access to New")
	RETURN
END IF

// Save user's changes
IF wf_check_changes() < 0 THEN RETURN

idw_header.reset()

ib_new_record = TRUE
ib_no_audit = false
ib_can_update = TRUE
ib_can_confirm = TRUE
ib_can_new = TRUE
ib_can_navigate = TRUE
ls_message = ""

// Make sure the view tab is active
IF ii_clicked_tab1 <> ii_tabpage_view THEN
	tab_1.SelectedTab = ii_tabpage_view
END IF

// Create Profile Header, Detail, Comments, and Shipping SHARED record
il_newrow = idw_header.InsertRow(0)
//rg11072006 moved the scroll events to the end to allow objects to reset 
// before the rowfocus changed event fires.

//idw_header.ScrollToRow(il_newrow)

//Prakash - 05/09/2023 - Begin - Added for DevOps #61194
// Get a new Profile ID
ll_profile_id = f_sequence("Profile.profile_id")
idw_header.Object.profile_id[il_newrow] = ll_profile_id
//Prakash - 05/09/2023 - End - Added for DevOps #61194

idw_header.ShareData(idw_detail)
//idw_detail.ScrollToRow(il_newrow)

idw_header.ShareData(idw_comment)
//idw_comment.ScrollToRow(il_newrow)

idw_header.ShareData(idw_shipping)
//idw_shipping.ScrollToRow(il_newrow)

// SK 07242012
idw_header.ShareData(idw_composition_epa)
// SK 09202012
idw_header.ShareData(idw_waste_other)

// Setup default values
li_rc = wf_init_header(il_newrow)
IF li_rc = gi_failure THEN
	ls_message = "Creating new Profile Header failed."
	GOTO CANCEL
END IF

idw_technical.Reset()
// SK 07242012
idw_composition_other.Reset()
idw_technical.ShareData(idw_composition_other)
idw_technical.Sharedata(idw_waste_profilelab)
idw_lab.Reset()
idw_wcr_technical.Reset()
// SK 06202012 Following dws not used any longer
//idw_wcr_waste.Reset()
//idw_wcr_const.Reset()

// Create technical record
il_newrow_tech = idw_technical.InsertRow(0)
li_rc = wf_init_lab(il_newrow_tech, 'A')
IF li_rc = gi_failure THEN
	ls_message = "Creating new Technical record failed."
	GOTO CANCEL
END IF

// Create lab record
il_newrow_lab = idw_lab.InsertRow(0)
li_rc = wf_init_lab(il_newrow_lab, 'L')
IF li_rc = gi_failure THEN
	ls_message = "Creating new Lab record failed."
	GOTO CANCEL
END IF

// Create a tracking record
idw_tracking.Reset()
ll_row_tracking = idw_tracking.InsertRow(0)
li_rc = wf_init_tracking(ll_row_tracking)
IF li_rc = gi_failure THEN
	ls_message = "Creating new Profile Tracking record failed."
	GOTO CANCEL
END IF

// Create a quote header record; detail is created on pricing tab
idw_quoteHeader.Reset()
ll_row_quote = idw_quoteheader.InsertRow(0)
li_rc = wf_init_quoteheader(ll_row_quote)
IF li_rc = gi_failure THEN
	ls_message = "Creating new Quote Header failed."
	GOTO CANCEL
END IF

// Insert records into ProfileForm.  Set all checkboxes TRUE.
li_rc = wf_init_forms()
IF li_rc = gi_failure THEN
	ls_message = "Creating new Forms failed."
	GOTO CANCEL
END IF

IF il_curr_row = 0 THEN	il_curr_row = il_newrow

// Reset these windows

idw_approval.Reset()
idw_const.Reset()
idw_composition.Reset()
idw_ldr_subcategory.Reset()
idw_waste.Reset()
idw_waste_code_fed.Reset()
idw_waste_code_state.Reset()
idw_waste_code_eq.Reset()
idw_audit.Reset()
itp_note.uf_reset()
itp_note.uf_sleep()
wf_reset_documents()
wf_reset_forms()

tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"

// rb 04/27/2012
idw_wcr_display_1.Reset()
idw_wcr_display_2.Reset()
idw_wcr_display_3.Reset()
//idw_wcr_display_4.Reset()

idw_profile_radioactive_waste.Reset()

idw_shipping_unit.Reset()
idw_profile_gen_contact_form.Reset()
idw_ldr_subcategory.Reset()
// SK 06/06/2012
//idw_profile_wcr_facility.Reset()

// SK 09/20/2012 Profile Contacts
idw_profile_gen_contact_form.Insertrow(0)
idw_wcr_display_3.Insertrow(0)
//idw_wcr_display_4.Insertrow(0)
idw_wcr_display_5.Insertrow(0)
idw_wcr_display_1.Insertrow(0)

idw_profile_radioactive_waste.InsertRow(0)
ib_new_print = TRUE
ib_can_new = FALSE
wf_reset_change_flags()

idw_header.ScrollToRow(il_newrow)
idw_detail.ScrollToRow(il_newrow)
idw_comment.ScrollToRow(il_newrow)
idw_shipping.ScrollToRow(il_newrow)
idw_composition_epa.ScrollToRow(il_newrow)
idw_waste_other.ScrollToRow(il_newrow)
idw_wcr_display_1.ScrollToRow(il_newrow)
//SK 12/07/2012
wf_set_access()
wf_price("CLOSEPRICETABS", 0)

// MPM - 7/25/2023 - DevOps 68965
POST wf_set_caution_text()

//20200129 jcb fix1 
//DevOps:13787
ll_container_row =  idw_container_size.GetRow()
IF ll_container_row > 0 THEN 
	idw_container_size.DeleteRow(ll_container_row)
END IF

If len(trim(is_profile_creation))=0 then
	is_profile_creation='new' //DevOps 16737 info_gde 02/19/2021; PROD-EQAI-Maintenance-Profile Tracking-Audit
	ib_profile_creation=False
End If
idw_approval.Object.t_knowledge_acceptable.Visible = 0 // sagar 29969
idw_approval.Object.t_foreign_generator.Visible = 0 
idw_approval.Object.t_outbound_restricted.Visible = 0
idw_approval.Object.b_outbound_restricted_info.Visible = 0
SetMicroHelp("New Record")
RETURN

CANCEL:
	MessageBox(gs_app_name + ":  New Profile Error", ls_message + "~rPlease try again.", Exclamation!)
	wf_reset()
	wf_reset_change_flags()
	ib_new_record = FALSE
	ib_can_update = FALSE
	ib_can_confirm = FALSE
	ib_can_new = TRUE
	ib_can_navigate = TRUE
end event

event ue_save();//DevOps #14403 info_gde; 02/24/2020; EQAI - Maintenance - COR  - User Approval - Renewal - Accept
//DevOps #15074 info_gde 04/06/2020; EQAI Data Window Error
//20200413 jcb #14994 fix page-1 not saving problem
//20200414 jcb #14994 fix potential page-3 not saving problem
//20200414 jcb #15175 if user changed Doc-update_status, issue warning to check expire date
//DevOps #16088 FHC 6/24/2020 Multiple users accepting the same form validation

boolean	lb_price_adjustment, lb_enter_tracking_record=FALSE, lb_confirm_entered,lb_no_update = false
boolean	lb_tracking_status_comp, lb_tracking_status_scc, lb_set_primary
datetime	ldt_time_in, ldt_date_approved, ldt_new_exp_date, ldt_temp, ldt_annual_recert_date, ldt_epa_consent_date
integer	li_validate, li_rc, li_response, li_neshap_sic,i,li_rcc,li_cVetValue
long		ll_row, ll_rowcount, ll_customer_id, ll_profile_id, ll_tracking_id, ll_newrow_tracking,ll_container_size_count,ll_max_image_id, ll_audit_profile_id
long		ll_row_approval, ll_row_find, ll_company_id, ll_profit_ctr_id, ll_form_ctr, ll_contact_id,ll_container_profile, ll_line_id
long		ll_generator_id, ll_null, ll_rc, ll_business_minutes, ll_row_tracking, ll_rowcount_tracking,ls_curr_status_code
long		ll_rowcount_form, ll_row_form, ll_form_wcr_id,ll_supplement_profile,ll_supplement_count, ll_row_radioactive
string	ls_msg, ls_profile_status, ls_tracking_status, ls_find, ls_tracking_status_new, ls_null, ls_short_waste_code
string		ls_tracking_type, ls_label_type,ls_document_update_status,ls_copy_source,ls_document_source,ls_filter 
string     ls_document_update_status_original,ls_bill_unit, ls_doc_status_reason_original   // 20200414 jcb #15175 give warning if status changed
str_price_adjustment lstr_price_adjustment
long		ll_max_tracking_id, ll_waste_code_uid, ll_quote_id, ll_consolidation_profile_id,ll_wcr_profile_id,ll_source_form_id,ll_source_revision_id,ll_form_id_wcr
dwitemstatus idwitemstatus, ldw_lab_status, idw_technical_status,ldwItemStatus
int			li_idx, li_last_tab
long 		ll_count_radioactive, ll_display_status_uid, ll_profile_id_tmp
u_tabpage_profile_import_waste	ltabpage_profile_import_waste
long 		ll_count,ll_del_count,ll_ship_profile_id,ll_ship_count, ll_find
string 	ls_ship_bill_unit, ls_multiple_user_error_message, ls_added_by
decimal	ld_null
string ls_eqai_user_id 
string ls_form_type, ls_Sort, ls_filterstring
string ls_consistency_solid,ls_liquid_phase,ls_paint_filter_solid_flag,ls_consistency_dust,ls_consistency_liquid,ls_consistency_debris, ls_consistency_varies, ls_consistency_sludge
datetime ldt_new_consent_date,ldt_consent_date
		
IF ib_can_update = FALSE THEN
	RETURN
ELSEIF ib_access_update = FALSE THEN 
	SetMicroHelp("No access to Save")
	RETURN
END IF

SetPointer(HourGlass!)

wf_accepttext()
li_rc = gi_success
ib_update_failed = FALSE
ib_check_profile_origin = FALSE //DevOps 16737
ib_save_in_process=TRUE //DevOps 17332 info_gde 10/07/2020; Constituent Tab - First Line Wiping Value
idt_save_date = DateTime(Today(), Now())
SetNull(ll_null)
SetNUll(ls_null)
SetNull(ld_null)

//uf_rowcount(rowcount)

//DevOps 19974 info_gde 04/08/2021; Profile Tracking > Forms Tab - 'Last Profile Sync' Audit Timestamp
//DevOps 17364 info_gde 04/08/2021; Profile Tracking > Forms Tab - 'Last Profile Sync' Audit
If tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectedTab=ii_tabpage_form Then
	tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectTab(ii_tabpage_document_document)
	iudw_document.SetFocus()
End If

// Check generator site - Added getrow chcek
IF idw_header.GetRow() > 0 THEN 
 ll_generator_id=idw_header.object.generator_id[idw_header.GetRow()]
END IF

//DevOps:17192 - When save (failed to update datawindow) failed for some reason then user click on save again then profilelab not inserting type A record.
// idw_technical status becoming New from newmodified.
idw_technical_status =  idw_technical.GetItemStatus( idw_technical.GetRow(), 0, Primary!) 
ldw_lab_status =  idw_lab.GetItemStatus( idw_lab.GetRow(), 0, Primary!) 
IF ldw_lab_status = NewModified! AND idw_technical_status = New! THEN 
    idw_technical.SetItemStatus (idw_technical.GetRow(),0,Primary!,NewModified!)
END IF

//DevOps:23455 - free_liquid logic
// Dipankar - 4/12/2023 - Rearrnged ib_new_record IF condition as nested
IF  idw_technical.GetRow() > 0 THEN
	ls_consistency_solid 		=  idw_technical.Object.consistency_solid[idw_technical.GetRow() ] 		
	ls_liquid_phase 			=  idw_technical.Object.liquid_phase[idw_technical.GetRow() ] 
	ls_paint_filter_solid_flag 	=  idw_technical.Object.paint_filter_solid_flag[idw_technical.GetRow() ] 
	ls_consistency_dust 		=  idw_technical.Object.consistency_dust[idw_technical.GetRow() ]  
	ls_consistency_liquid 		=  idw_technical.Object.consistency_liquid[idw_technical.GetRow() ]  
	ls_consistency_debris 	= 	idw_technical.Object.consistency_debris[idw_technical.GetRow() ]
	ls_consistency_varies 	= 	idw_technical.Object.consistency_varies[idw_technical.GetRow() ] // Dipankar - 04/12/2023 - Added for DevOps #30312
	ls_consistency_sludge 	= 	idw_technical.Object.consistency_sludge[idw_technical.GetRow() ] // Dipankar - 04/12/2023 - Added for DevOps #30312
		
	IF ib_new_record = TRUE THEN
		//Scenario 1,Scenario 2,Scenario 3,Scenario 5
		 IF ls_paint_filter_solid_flag = 'T' AND ls_liquid_phase = 'N' AND (  ( ls_consistency_solid = 'T' OR ls_consistency_dust = 'T'  ) OR  ( ls_consistency_debris = 'T' AND ls_consistency_solid = 'T')  ) THEN 
			 idw_technical.Object.free_liquid[idw_technical.GetRow() ] = 'F'
		 END IF
		 
		 //Scenario 4
		IF ls_paint_filter_solid_flag = 'F' AND (ls_liquid_phase = 'S' or ls_liquid_phase = 'D' or ls_liquid_phase = 'M') AND  ls_consistency_liquid = 'T'  THEN 
			idw_technical.Object.free_liquid[idw_technical.GetRow() ] = 'T'
		END IF
	END IF
	
	// Dipankar - 04/12/2023 - Begin - Scenario 6 & 7 added for DevOps #30312	
	// Scenario 6 & 7
	IF ((ls_consistency_solid = 'T' AND ls_consistency_liquid = 'T') OR ls_consistency_dust = 'T' OR ls_consistency_debris = 'T' OR ls_consistency_sludge = 'T' &
	    OR ls_consistency_varies = 'T' ) AND (ls_liquid_phase = 'S' OR ls_liquid_phase = 'D' OR ls_liquid_phase = 'M') AND ls_paint_filter_solid_flag = 'F' THEN
		idw_technical.Object.free_liquid[idw_technical.GetRow() ] = 'T'
	END IF	
	// Dipankar - 04/12/2023 - End - Scenario 6 & 7 added for DevOps #30312
END IF

// EQAI DevOps #16088 FHC 6/24/2020 Multiple users accepting the same form validation - BEGIN
	/*	Before any validation or save, if there are multiple users updating the same Form id 
		simultaneously	and the display status uid = 5, it needs to be prevented.	*/
	IF ll_form_id_wcr > 0 THEN 
		IF wf_modifiedcount() > 0 then
			ll_form_id_wcr = idw_header.Object.form_id_wcr [idw_header.getrow() ]
			IF wf_validate_form_multiple_users(ll_form_id_wcr)	= -1 THEN
				 ls_multiple_user_error_message = 'This form has already been managed.' + '~r~n' + &
															'Please refresh the list to see the changes.' 
				Messagebox('Multiple User Concurrency Error', ls_multiple_user_error_message)
				ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020;
				RETURN
			END IF
		END IF	
	END IF
// EQAI DevOps #16088 FHC 6/24/2020 Multiple user accepting the same form validation - END

// MPM - 11/25/2020 - DevOps 17369 - Commented out the function call and IF block below
//	li_rc=wf_composition_empty_rows_check()
//	IF li_rc = gi_failure THEN
//		Messagebox('Composition', 'Please delete or complete all blank row(s)' )
//		//ls_msg = "Composition."
//		RETURN
//	ELSE 
//		li_rc = gi_success
//	END IF


IF NOT (ib_skip_validation_waste_code) THEN wf_validate_outbound_waste_codes() //Subhrajyoti -- Commenting out for Devops# 38816 - Profile Tracking - Modification to validation logic for pre-assigned outbound

// Check for modifications
IF wf_modifiedcount() = 0 THEN
	SetMicroHelp("Nothing to save")
	ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020;
	RETURN
ELSE
	// Identify the current row
	ll_row = il_curr_row
	IF ll_row > 0 AND idw_header.GetRoW() > 0 THEN
		ls_profile_status = idw_header.Object.curr_status_code[ll_row]
	END IF
	
	// SK 08132013
	//wf_set_waste_code_sequence(idw_waste_code_fed)
	wf_top6_renumber()
	wf_set_waste_code_sequence(idw_waste_code_state)
	wf_set_waste_code_sequence(idw_waste_code_eq)
	wf_set_primary_waste_code()
	
	IF idw_header.GetRow() > 0 THEN
		IF idw_detail.object.document_update_status[ll_row]='P' THEN wf_upd_copy_source()  //DevOps 16864 info_gde 07/22/2020; Docs Pending - Drop-down Option
			ll_waste_code_uid = idw_header.object.waste_code_uid[ll_row]
			ls_short_waste_code = idw_header.object.waste_code[ll_row]
	END IF
		
	IF wf_sync_waste_code(ll_waste_code_uid, ls_short_waste_code, FALSE) = gi_failure THEN 
		ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020;
		RETURN
	END IF
	// Validate
	IF wf_validate() = gi_failure THEN
		ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020;
		RETURN
	ELSE
		// 09/26/2012 Check if template is still applicable..
		IF idw_header.GetRow() > 0 THEN
			IF idw_header.Object.template_form_id[ll_row] > 0 THEN
				IF NOT wf_match_to_template(TRUE, ls_null, ls_null, ls_null) THEN 
					idw_header.Object.template_form_id[ll_row] = ll_null
				END IF
			END IF
		END IF
		// rb 6/28/2016 GEM:38066
		//Task:10096 - 463464-1, Dragon Profile ID 617178 
//		ls_find = Trim (idw_header.Object.un_na_flag[ll_row])
//		if IsNull (ls_find) or (ls_find <> "UN" and ls_find <> "NA") then
//			if not IsNull (idw_header.Object.un_na_number[ll_row]) then
//				ls_msg = "Please review the UN/NA flag on the Shipping tab. UN or NA must be set if a UN/NA number is entered."
//				li_rc = gi_failure
//			end if
//		end if

		if li_rc = gi_success then
			// Set Profile info
			ll_profile_id = wf_set_profile(ll_row)
			
			// Make sure all updates are successful
			itr_share.AutoCommit = FALSE
			itr_image.AutoCommit = FALSE
			
			idw_audit.SetRedraw(False)	
		end if
		
		// COR2 - MPM - Commenting out the following two IF blocks...
		/*
		// JAG Generator certification 1/2019
		IF li_rc = gi_success and (idw_wcr_display_1.dataobject = 'd_profile_regulatory_information_dragon_g') THEN
			idw_wcr_display_1.SetItemStatus( 1, 0, primary!, NotModified!)
		END IF
		
		// JAG regulatory information 1/2019
		IF li_rc = gi_success and (idw_wcr_display_1.dataobject = 'd_profile_generator_certification_dragon_h') THEN
			idw_wcr_display_1.SetItemStatus( 1, 0, primary!, NotModified!)
		END IF
		*/
		
//COR2 - AGC commented out JAG idw_wcr_display_1.update() code
//		// JAG 1/2019 5518
//		IF li_rc = gi_success and (idw_wcr_display_1.dataobject = 'd_profile_waste_import_supplement') THEN
//			is_table_name = 'ProfileWasteImport'
//			li_rc = wf_audit(idw_wcr_display_1, ll_profile_id, 0, True)
//			IF li_rc = gi_success THEN
//				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
//				idw_wcr_display_1.SetItem(1, 'modified_by', gs_user_id)
//				idw_wcr_display_1.SetItem(1, 'date_modified', DateTime(Today(), Now()))
//				li_rc = idw_wcr_display_1.Update(FALSE,FALSE)  // jag uncomment
////				li_rc = idw_wcr_display_1.Update(FALSE,true)  // jag remove
//				IF li_rc = gi_failure THEN
//					ls_msg = "Waste Import Supplement Form."
////				else     // jag remove
////					COMMIT USING itr_share; // jag remove
//				END IF
//			END IF
//		END IF
//		
//		// COR2 - JAG 1/5/2019 5516
//		IF li_rc = gi_success and (idw_wcr_display_1.dataobject = 'd_profile_thermal_supplement_form' ) THEN
//			is_table_name = 'profilethermal'
//			li_rc = wf_audit(idw_wcr_display_1, ll_profile_id, 0, True)
//			IF li_rc = gi_success THEN
//				idw_wcr_display_1.SetItem(1, 'profilethermal_profile_id', ll_profile_id)
//				idw_wcr_display_1.SetItem(1, 'profilethermal_modified_by', gs_user_id)
//				idw_wcr_display_1.SetItem(1, 'profilethermal_date_modified', DateTime(Today(), Now()))
//				li_rc = idw_wcr_display_1.Update(FALSE,FALSE)  // jag uncomment
////				li_rc = idw_wcr_display_1.Update(FALSE,true)  // jag remove
//				IF li_rc = gi_failure THEN
//					ls_msg = "profile thermal data."
////				else     // jag remove
////					COMMIT USING itr_share; // jag remove
//				END IF
//			END IF
//		END IF
//		
//		// JAG 1/5/2019 5513
//		IF li_rc = gi_success and (idw_wcr_display_1.dataobject = 'd_profile_benzene_waste_ops_supplement' ) THEN
//			is_table_name = 'profilebenzene'
//			li_rc = wf_audit(idw_wcr_display_1, ll_profile_id, 0, True)
//			IF li_rc = gi_success THEN
//				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
//				idw_wcr_display_1.SetItem(1, 'modified_by', gs_user_id)
//				idw_wcr_display_1.SetItem(1, 'date_modified', DateTime(Today(), Now()))
//				li_rc = idw_wcr_display_1.Update(FALSE,FALSE)  // jag uncomment
////				li_rc = idw_wcr_display_1.Update(FALSE,true)  // jag remove
//				IF li_rc = gi_failure THEN
//					ls_msg = "Benzene Waste Operations Supplement Form."
////				else     // jag remove
////					COMMIT USING itr_share; // jag remove
//				END IF
//			END IF
//		END IF

		
//		// COR2 - JXM 1/20/2019 5509
//		IF li_rc = gi_success and (idw_wcr_display_1.dataobject = 'd_profile_pcb_supplement_dragon' ) THEN
//			is_table_name = 'profilelab'
//			li_rc = wf_audit(idw_wcr_display_1, ll_profile_id, 0, True)
//			IF li_rc = gi_success THEN
//				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
//				idw_wcr_display_1.SetItem(1, 'modified_by', gs_user_id)
//				idw_wcr_display_1.SetItem(1, 'date_modified', DateTime(Today(), Now()))
//				li_rc = idw_wcr_display_1.Update(FALSE,FALSE)  
//				IF li_rc = gi_failure THEN
//					ls_msg = "profile pcb data."
//				END IF
//			END IF
//		END IF
//		
			//DevOps:15052
//		IF ls_document_update_status = 'P' AND ( is_copy_source = 'amendment' or is_copy_source = 'renewal' ) THEN
//		  idw_header.Object.document_update_status[idw_header.GetRow()] = 'A'
		//DevOps #14403 info_gde; 02/24/2020 -- Start
//		  
//	    ELSE
//		 idw_header.Object.doc_status_reason[idw_header.GetRow()] = ""
		//DevOps #14403 info_gde; 02/24/2020 --- End
//	    END IF
		 
		// MPM - 4/16/2019 - DevOps task 8856 - Additional Import Notification Requirements
		/* 
			Profile Expiration: On save, if the ‘EPA consent date’ is set, then use the following logic to update the profile expiration date.
			1.	Look at the Import tab for any entries that have a status of Active and an expiration date >= TODAY()
			2.	Of the entries that qualify, take the minimum (nearest date) to today
			3.	Set that date to the Detail tab EPA Consent Date Field (Profile.EPA_Consent_Date)
			4.	Look at the Profile.EPA_Consent_date field and Profile.Annual_Recertification_date field and see which is earlier.  
				Automatically set this to the Profile Expiration Date (Profile.ap_expiration_date)
		*/
		
		SetNull(ldt_new_exp_date)
		//Sailaja - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - Start
		//Sailaja - Devops#82663 - DevOps 73981 Rework (EPA Consent Number Logic) - 03/26/24 - Commented ldt_new_conset_date
		//SetNull(ldt_new_consent_date)
		//Sailaja - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - End
		li_last_tab = upperbound(itab_import_waste.control)
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible THEN
					SetNull(ldt_temp)
					//Sailaja - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - Start
					//Sailaja - Devops#82663 - DevOps 73981 Rework (EPA Consent Number Logic) - 03/26/24 - commented ldt_consent_date
					//SetNull(ldt_consent_date)
					//ldt_temp = ltabpage_profile_import_waste.uof_get_new_profile_expiration_date(ldt_consent_date)
					ldt_temp = ltabpage_profile_import_waste.uof_get_new_profile_expiration_date()
					//Sailaja - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - End
					IF NOT IsNull(ldt_temp) THEN
						IF IsNull(ldt_new_exp_date) THEN
							ldt_new_exp_date = ldt_temp
							//Sailaja - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - Start
							//Sailaja - Devops#82663 - DevOps 73981 Rework (EPA Consent Number Logic) - 03/26/24 - Commented ldt_new_consent_date
							//IF NOT IsNull(ldt_consent_date) THEN ldt_new_consent_date = ldt_consent_date
						ELSE
							//IF ldt_temp < ldt_new_exp_date THEN
							IF ldt_temp > ldt_new_exp_date THEN
								ldt_new_exp_date = ldt_temp
								//Sailaja - Devops#82663 - DevOps 73981 Rework (EPA Consent Number Logic) - 03/26/24 - Commented ldt_new_consent_date
								//IF NOT IsNull(ldt_consent_date) THEN ldt_new_consent_date = ldt_consent_date
							//Sailaja - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - End
							END IF
						END IF
					END IF
				END IF
			END IF
		NEXT
		
		//Sailaja  - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - start
		//Updating expiration date  as profile.expiration date and approval date as EPA consent date
		//Sailaja - Devops#82663 - DevOps 73981 Rework (EPA Consent Number Logic) - 03/26/24 - Reverting the change for 73981
		IF NOT IsNull(ldt_new_exp_date) THEN idw_header.Object.epa_consent_date[ll_row] = ldt_new_exp_date
	//	IF NOT IsNull(ldt_new_exp_date) THEN idw_header.Object.ap_expiration_date[ll_row] = ldt_new_exp_date
	//	IF NOT IsNull(ldt_new_consent_date) THEN idw_header.Object.epa_consent_date[ll_row] = ldt_new_consent_date				
		
		//Sailaja  - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - commenting the below code to change the existing logic
		// Update the profile expiration date
		//Sailaja - Devops#82663 - DevOps 73981 Rework (EPA Consent Number Logic) - 03/26/24 - Reverting change for 73981 - Start - Uncommenting the below code
		ldt_annual_recert_date = idw_header.Object.annual_recertification_date[ll_row]
		ldt_epa_consent_date = idw_header.Object.epa_consent_date[ll_row]
		// These dates have an edit mask on them, so if they're not set, the local datetime variable value is '1/1/1900 00:00:00'.
		// So, set the variable to null if it is '1/1/1900 00:00:00'
		IF ldt_annual_recert_date = DateTime('1/1/1900 00:00:00') THEN SetNull(ldt_annual_recert_date)
		IF ldt_epa_consent_date = DateTime('1/1/1900 00:00:00') THEN SetNull(ldt_epa_consent_date)
		IF NOT IsNull(ldt_annual_recert_date) AND NOT IsNull(ldt_epa_consent_date) THEN
			IF ldt_annual_recert_date < ldt_epa_consent_date THEN
				idw_header.Object.ap_expiration_date[ll_row] = ldt_annual_recert_date
			ELSE
				idw_header.Object.ap_expiration_date[ll_row] = ldt_epa_consent_date
			END IF
		ELSEIF NOT IsNull(ldt_annual_recert_date) THEN
			idw_header.Object.ap_expiration_date[ll_row] = ldt_annual_recert_date
		ELSEIF NOT IsNull(ldt_epa_consent_date) THEN
			idw_header.Object.ap_expiration_date[ll_row] = ldt_epa_consent_date
		END IF
		//Sailaja  - Devops#73981 - Update detail tab with the most recent consent number - 02/15/24 - End
		//Sailaja - Devops#82663 - DevOps 73981 Rework (EPA Consent Number Logic) - 03/26/24 - Reverting change for 73981 - End - Uncommenting the above code
			
		// Update audit - done before updating technical.  Updates the
		// technical datawindow with any lab changes.
		IF li_rc = gi_success THEN
			//DevOps 19943 info_gde; SQLSTATE = 23000 Error when Accepting Form; 
			li_rc = wf_audit(idw_lab, ll_profile_id, 0, True) // Ensure profile_id column is populated, else datawindow error 23000 cannot insert the value NULL will occur
			
			IF li_rc = gi_success THEN
				li_rc = idw_audit.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Lab data."
				END IF
			END IF
		END IF
		
		
		 //Update Lab - done before updating technical.  Updates the
		// technical datawindow with any lab changes.
		IF li_rc = gi_success THEN
			IF li_rc = gi_success THEN
				li_rc = idw_lab.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Lab data."
				END IF
			END IF
		END IF
	
	
		// Update Technical- Technical is now Active waste Profile
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_technical, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_technical.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Technical data."
				END IF
			END IF
		END IF
		
		// Update Waste
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_waste_code_fed, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_waste_code_fed.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Federal Waste Codes."
				END IF
			END IF
			li_rc = wf_audit(idw_waste_code_state, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_waste_code_state.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "State Waste Codes."
				END IF
			END IF
			li_rc = wf_audit(idw_waste_code_eq, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_waste_code_eq.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "EQ Waste Codes."
				END IF
			END IF
		END IF
		
	
		// Update Constituents
		IF li_rc = gi_success THEN
			    wf_const_id_fix()
				li_rc = wf_audit(idw_const, ll_profile_id, 0, True)
				IF li_rc = gi_success THEN
						li_rc = idw_const.Update(FALSE,FALSE) 
					IF li_rc = gi_failure THEN
						ls_msg = "Constituents."
					END IF
				END IF
		END IF

				
		// Update Composition
		IF li_rc = gi_success THEN
			wf_set_composition_sequence_id()
			li_rc = wf_audit(idw_composition, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				    li_rc = idw_composition.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Composition."
				END IF
			END IF
		END IF
		
			// Update shipping unit (section C 8 change)
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_ship_volume, ll_profile_id, 0, True)
		// MPM - DevOps 16428 - Update profile_id in wf_set_profile() instead
		// idw_ship_volume.object.profile_id[1] = ll_profile_id
			IF li_rc = gi_success THEN
				 li_rc = idw_ship_volume.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Shipping Unit."
				END IF
			END IF
		END IF
		
		// Update QuoteHeader
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_quoteheader, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_quoteheader.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Quote Header."
				END IF
			END IF
		END IF
		
		// Update Approvals
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_approval, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				// MPM - 11/12/2018 - Task 5205 - Consolidation profile management
				// If the consolidation_profile_id is modified and not null, then we need to increment the sub_profile_counter of the consolidation profile
				FOR li_idx = 1 TO idw_approval.RowCount()
					IF idw_approval.GetItemStatus(li_idx, 'consolidation_profile_id', Primary!) = NewModified! OR idw_approval.GetItemStatus(li_idx, 'consolidation_profile_id', Primary!) = DataModified! THEN
						ll_consolidation_profile_id = idw_approval.Object.consolidation_profile_id[li_idx]
						IF NOT IsNull(ll_consolidation_profile_id) THEN

							UPDATE ConsolidationProfile
							SET sub_profile_counter = sub_profile_counter + 1,
								date_modified = :idt_save_date,
								modified_by = :gs_user_id
							WHERE consolidation_profile_id = :ll_consolidation_profile_id
							USING itr_share;

							IF itr_share.SQLCode < 0 THEN
								MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLErrText, Exclamation!)
								li_rc = gi_failure
								ls_msg = "Approvals."
							ELSEIF itr_share.SQLCode = 100 THEN
								MessageBox(gs_app_name + ":  Save Error", "Consolidation profile ID " + String(ll_consolidation_profile_id) + " is not valid", Exclamation!)
								li_rc = gi_failure
								ls_msg = "Approvals."
							END IF
						END IF
					END IF
				NEXT
				li_rc = idw_approval.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Approvals."
				END IF
			END IF
		END IF
		
		// Update Prices
		IF li_rc = gi_success THEN
			li_rc = wf_price("AUDIT", 0)
			IF li_rc = gi_success THEN
				li_rc = wf_price("UPDATE", 0)
				IF li_rc = gi_failure THEN
					ls_msg = "Prices."
				END IF
			END IF
		END IF
		
		// Update import waste
		IF li_rc = gi_success THEN
			li_rc = wf_import_waste("AUDIT", 0)
			IF li_rc = gi_success THEN
				li_rc = wf_import_waste("UPDATE", 0)
				IF li_rc = gi_failure THEN
					ls_msg = "Import Waste."
				END IF
			END IF
		END IF
		
		// rb - add rules and category tabs
		// Update Rules
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_rules, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_rules.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Rules."
				END IF
			END IF
		END IF

		// Update Site Types
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_site_type, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_site_type.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Site Types."
				END IF
			END IF
		END IF

// agc 10/14/19 temp comment out
//		//DevOps 10373
//		// Update Generator Locations
//		IF li_rc = gi_success THEN
//			li_rc = wf_audit(idw_generator_locations, ll_profile_id, 0, True)
//			IF li_rc = gi_success THEN
//				li_rc = idw_generator_locations.Update(FALSE,FALSE) 
//				IF li_rc = gi_failure THEN
//					ls_msg = "Generator Locations."
//				END IF
//			END IF
//		END IF

		// Update Category
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_category, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_category.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Category."
				END IF
			END IF
		END IF

		// Update Recipe
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_recipe_update, ll_profile_id, 0, True) //idw_recipe
			IF li_rc = gi_success THEN
				li_rc = idw_recipe_update.Update(FALSE,FALSE) //idw_recipe
				IF li_rc = gi_failure THEN
					ls_msg = "Recipe."
				END IF
			END IF
		END IF
		
		// rb 04/27/2012 Update Shipping Unit
		IF li_rc = gi_success THEN
			ll_count = idw_shipping_unit.Rowcount()
			ll_del_count = idw_shipping_unit.DeletedCount()
			FOR i = ll_del_count to 1  step -1
				ls_ship_bill_unit = idw_shipping_unit.GetItemString(i,'bill_unit_code',Delete!,True)
				ll_ship_profile_id =  idw_shipping_unit.GetItemNumber(i,'profile_id',Delete!,True)
				
				Select count(*)
				Into :ll_ship_count
				from ProfileShippingUnit
				where bill_unit_code = :ls_ship_bill_unit
				and profile_id = :ll_ship_profile_id
				Using gtr_share;
				
				IF ll_ship_count = 0 THEN 
					idw_shipping_unit.RowsDiscard(i,i,Delete!)
				END IF
			NEXT 
			
			
			li_rc = wf_audit(idw_shipping_unit, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_shipping_unit.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					// MPM - 6/20/2020 - DevOps 16428 - Under DevOps 16466, idw_shipping_unit was changed from updating ProfileShippingUnit to
					// ProfileContainerSize
					ls_msg = "Container Size."
				END IF
			END IF
		END IF
		
		// SK 08/03/2012 Update LDR Subcategory
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_ldr_subcategory, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_ldr_subcategory.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "LDR Subcategory."
				END IF
			END IF
		END IF

			  // SK 08/03/2012 Update Contact Info 
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_profile_gen_contact_form, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_profile_gen_contact_form.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Technical Contact."
				END IF
			END IF
		END IF
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_wcr_display_3, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_wcr_display_3.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Invoicing Contact."
				END IF
			END IF
		END IF
//		IF li_rc = gi_success THEN
//			li_rc = wf_audit(idw_wcr_display_4, ll_profile_id, 0, True)
//			IF li_rc = gi_success THEN
//				li_rc = idw_wcr_display_4.Update(FALSE,FALSE) 
//				IF li_rc = gi_failure THEN
//					ls_msg = "Technical Contact."
//				END IF
//			END IF
//		END IF
		
		// COR2-MPM
		// Update Container Size
		IF li_rc = gi_success THEN
			ll_container_size_count = idw_container_size.Rowcount()
			 if ll_container_size_count > 0 THEN 
				 //DevOps:16715 - Changed for loop to step
				FOR i = ll_container_size_count to 1  step -1 
					ll_container_profile = idw_container_size.object.profile_id [i]
						if ll_container_profile = 0 OR isnull (ll_container_profile) THEN 
							 idw_container_size.object.profile_id [i] = ll_profile_id
						end if
						ls_bill_unit = idw_container_size.object.bill_unit_code [i]
						if isnull(ls_bill_unit) or ls_bill_unit = '' THEN 
							//DevOps:16715
							idw_container_size.Deleterow(i)
							lb_no_update = true
						end if
				next
			 end if
			 if lb_no_update = false then 
				li_rc = wf_audit(idw_container_size, ll_profile_id, 0, True)
				IF li_rc = gi_success THEN
					li_rc = idw_container_size.Update(FALSE,FALSE) 
					IF li_rc = gi_failure THEN
						ls_msg = "Container Size."
					END IF
				END IF
			end if
		END IF
		
			// COR2-MPM
		// Update WCR facility
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_wcr_facility, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_wcr_facility.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Requested WCR Facility."
				END IF
			END IF
		END IF
		
		// Dipankar - 05/29/2023 - Begin - Commented for #65683, being moved below 
		// Waste Import Supplement Data to be saved after Profile Save due to Foriegn Key Constraint
		////COR2-AM - Below 3 
		//IF li_rc = gi_success THEN
		//	 ll_supplement_count  = idw_waste_import_supplement.Rowcount()
		//	 if ll_supplement_count > 0 THEN 
		//		for i = 1 to ll_supplement_count
		//			ll_supplement_profile = idw_waste_import_supplement.object.profile_id [i]
		//				if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
		//					 idw_waste_import_supplement.object.profile_id [i] = ll_profile_id
		//				end if
		//		next
		//	 end if
		//	li_rc = wf_audit(idw_waste_import_supplement, ll_profile_id, 0, True)
		//	IF li_rc = gi_success THEN
		//		li_rc = idw_waste_import_supplement.Update(FALSE,FALSE) 
		//		IF li_rc = gi_failure THEN
		//			ls_msg = "Waste Import Supplement data."
		//		END IF
		//	END IF
		//END IF
		// Dipankar - 05/29/2023 - End - Commented for #65683, being moved below
		
		// DevOps:19924 - Added ldwItemStatus check to fix Copy profile issue 
	   IF li_rc = gi_success THEN
			ll_supplement_count  = idw_benzene_waste_ops_supplemen.Rowcount()
			 if ll_supplement_count > 0 THEN 
				for i = 1 to ll_supplement_count
				   ldwItemStatus = idw_benzene_waste_ops_supplemen.GetItemStatus(i, 0, Primary!)	
			         IF  ldwItemStatus <> NotModified! THEN 
					    ll_supplement_profile = idw_benzene_waste_ops_supplemen.object.profile_id [i]
							if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
								 idw_benzene_waste_ops_supplemen.object.profile_id [i] = ll_profile_id
							end if
					 END IF
				next
			 end if
		  li_rc = wf_audit(idw_benzene_waste_ops_supplemen, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				li_rc = idw_benzene_waste_ops_supplemen.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Benzene Waste Supplemen data."
				END IF
			END IF
		END IF
		// DevOps:19924 - Added ldwItemStatus check to fix Copy profile issue 
	   IF li_rc = gi_success THEN
			ll_supplement_count  = idw_profile_thermal_supplement_form.Rowcount()
			 if ll_supplement_count > 0 THEN 
				for i = 1 to ll_supplement_count
				   ldwItemStatus = idw_profile_thermal_supplement_form.GetItemStatus(i, 0, Primary!)	
			         IF  ldwItemStatus <> NotModified! THEN 
					    ll_supplement_profile = idw_profile_thermal_supplement_form.object.profilethermal_profile_id [i]
							if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
								 idw_profile_thermal_supplement_form.object.profilethermal_profile_id [i] = ll_profile_id
							end if
					 END IF
				next
			 end if
		  li_rc = wf_audit(idw_profile_thermal_supplement_form, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				li_rc = idw_profile_thermal_supplement_form.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Thermal Waste Supplemen data."
				END IF
			END IF
	   END IF
		//DevOps:19924 - Added new supplement 
	 IF li_rc = gi_success THEN
			ll_supplement_count  = idw_gen_knowledge_supplement.Rowcount()
			 if ll_supplement_count > 0 THEN 
				for i = 1 to ll_supplement_count
				   ldwItemStatus = idw_gen_knowledge_supplement.GetItemStatus(i, 0, Primary!)	
			         IF  ldwItemStatus <> NotModified! THEN 
				     	ll_supplement_profile = idw_gen_knowledge_supplement.object.profile_id [i]
						if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
							 idw_gen_knowledge_supplement.object.profile_id [i] = ll_profile_id
						end if
					END IF
				next
			 end if
		  li_rc = wf_audit(idw_gen_knowledge_supplement, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				li_rc = idw_gen_knowledge_supplement.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Generator Knowledge Supplement data."
				END IF
			END IF
	   END IF
		
			
	 IF li_rc = gi_success THEN
			ll_supplement_count  = idw_profile_cylinder_supplement_dragon.Rowcount()
			 if ll_supplement_count > 0 THEN 
				for i = 1 to ll_supplement_count
					ll_supplement_profile = idw_profile_cylinder_supplement_dragon.object.profile_id [i]
						if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
							 idw_profile_cylinder_supplement_dragon.object.profile_id [i] = ll_profile_id
						end if
				next
			 end if
		 li_rc = wf_audit(idw_profile_cylinder_supplement_dragon, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				li_rc = idw_profile_cylinder_supplement_dragon.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Cylinder Supplemen data."
				END IF
			END IF
	  END IF
	  
//	  IF li_rc = gi_success THEN
//			ll_supplement_count  = idw_profile_debris_certification_dragon.Rowcount()
//			 if ll_supplement_count > 0 THEN 
//				for i = 1 to ll_supplement_count
//					ll_supplement_profile = idw_profile_debris_certification_dragon.object.profile_id [i]
//						if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
//							 idw_profile_debris_certification_dragon.object.profile_id [i] = ll_profile_id
//						end if
//				next
//			 end if
//		 li_rc = wf_audit(idw_profile_debris_certification_dragon, ll_profile_id, 0, True)
//		  	IF li_rc = gi_success THEN
//				li_rc = idw_profile_debris_certification_dragon.Update(FALSE,FALSE) 
//				IF li_rc = gi_failure THEN
//					ls_msg = "Debris Supplemen data."
//				END IF
//			END IF
//	  END IF 
	  
//  	 IF li_rc = gi_success THEN
//				ll_supplement_count  = idw_profile_used_oil_supplement_dragon.Rowcount()
//			 if ll_supplement_count > 0 THEN 
//				for i = 1 to ll_supplement_count
//					ll_supplement_profile = idw_profile_used_oil_supplement_dragon.object.profile_id [i]
//						if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
//							 idw_profile_used_oil_supplement_dragon.object.profile_id [i] = ll_profile_id
//						end if
//				next
//			 end if
//		 li_rc = wf_audit(idw_profile_used_oil_supplement_dragon, ll_profile_id, 0, True)
//		  	IF li_rc = gi_success THEN
//				li_rc = idw_profile_used_oil_supplement_dragon.Update(FALSE,FALSE) 
//				IF li_rc = gi_failure THEN
//					ls_msg = "Used Oil Supplemen data."
//				END IF
//			END IF
//	  END IF  
//
//COR2 - JXM - 02/23/2019 commentted out save not working
//COR2 - JXM - 02/24/2019 uncomment out Add Illinois Mapping/Update
	 IF li_rc = gi_success THEN
			ll_supplement_count  = idw_profile_illinois_disposal_supplemen.Rowcount()
			 if ll_supplement_count > 0 THEN 
				for i = 1 to ll_supplement_count
					ll_supplement_profile = idw_profile_illinois_disposal_supplemen.object.profile_id [i]
						if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
							 idw_profile_illinois_disposal_supplemen.object.profile_id [i] = ll_profile_id
						end if
				next
			 end if
		 li_rc = wf_audit(idw_profile_illinois_disposal_supplemen, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				li_rc = idw_profile_illinois_disposal_supplemen.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Illinois Disposal Supplemen data."
				END IF
			END IF
	  END IF  
	 
//Task-9816
IF li_rc = gi_success THEN
	ll_supplement_count  = idw_profile_ldr_form_dragon.Rowcount()
	if ll_supplement_count > 0 THEN 
		for i = 1 to ll_supplement_count
			ll_supplement_profile = idw_profile_ldr_form_dragon.object.profile_id [i]
			if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
				 idw_profile_ldr_form_dragon.object.profile_id [i] = ll_profile_id
			end if
		next
	end if
//COR2 JXM Task 9816 04/10/2019 Add Update for LDR Disposal Supplement
//COMMENT out entire section, LDR do not need to save because it maps to other share datawindows
//	li_rc = wf_audit(idw_profile_ldr_form_dragon, ll_profile_id, 0, True)
//	IF li_rc = gi_success THEN
//		li_rc = idw_profile_ldr_form_dragon.Update(FALSE,FALSE) 
//		IF li_rc = gi_failure THEN
//			ls_msg = "LDR Disposal Supplemen data."
//		END IF
//	END IF
END IF 
			 

//COR2 - JXM - 02.23.2019 commentted out save not working
//	  IF li_rc = gi_success THEN
//		 li_rc = wf_audit(idw_profile_ldr_form_dragon, ll_profile_id, 0, True)
//		  	IF li_rc = gi_success THEN
//				li_rc = idw_profile_ldr_form_dragon.Update(FALSE,FALSE) 
//				IF li_rc = gi_failure THEN
//					ls_msg = "LDR Disposal Supplemen data."
//				END IF
//			END IF
//	  END IF  	  

//COR2 - JXM - 02.23.2019 commentted out save not working
	  //COR2-JXM 2/20/2019
//	   IF li_rc = gi_success THEN
//				ll_supplement_count  = idw_profile_pcb_supplement_dragon.Rowcount()
//			 if ll_supplement_count > 0 THEN 
//				for i = 1 to ll_supplement_count
//					ll_supplement_profile = idw_profile_pcb_supplement_dragon.object.profile_id [i]
//						if ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
//							 idw_profile_pcb_supplement_dragon.object.profile_id [i] = ll_profile_id
//						end if
//				next
//			 end if
//		 li_rc = wf_audit(idw_profile_pcb_supplement_dragon, ll_profile_id, 0, True)
//		  	IF li_rc = gi_success THEN
//				li_rc = idw_profile_pcb_supplement_dragon.Update(FALSE,FALSE) 
//				IF li_rc = gi_failure THEN
//					ls_msg = "PCB Supplement data."
//				END IF
//			END IF
//	  END IF

	 IF li_rc = gi_success THEN
		// MPM - 4/19/2020 - DevOps 15205 - Many changes for radioactive pages 1, 2, 3
		select count(1) into :ll_count_radioactive from plt_ai.dbo.profileradioactive where profile_id = :ll_profile_id using itr_share;
		idwItemStatus = idw_profile_radioactive_supplement_page_1.GetItemStatus( idw_profile_radioactive_supplement_page_1.Rowcount(), 0, Primary!)
		if ll_count_radioactive = 0 then
			if idwitemstatus = DataModified! then
				idw_profile_radioactive_supplement_page_1.setitemstatus(1,0,Primary!,NewModified!)
			end if
		else
			if idwitemstatus = NewModified! then
				idw_profile_radioactive_supplement_page_1.setitemstatus(1,0,Primary!,DataModified!)
			end if
		end if
		
		li_rc = wf_audit(idw_profile_radioactive_supplement_page_1, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				li_rc = idw_profile_radioactive_supplement_page_1.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Radioactive Page 1 Supplement data."  //COR2 JXM 04/03/2019 change to identify
				END IF
			END IF
	  END IF  

	 IF li_rc = gi_success THEN

		// MPM - 4/19/2020 - DevOps 15205
		FOR ll_row_radioactive = 1 TO idw_profile_radioactive_supplement_page_2.RowCount()
			ll_line_id = idw_profile_radioactive_supplement_page_2.Object.line_id[ll_row_radioactive]
			 //DevOps:61049 - AM - Added profile_id
			idw_profile_radioactive_supplement_page_2.object.profile_id[ll_row_radioactive]=ll_profile_id
			select count(1) into :ll_count_radioactive from plt_ai.dbo.profileradioactiveexempt where profile_id = :ll_profile_id and line_id = :ll_line_id using itr_share;
			idwItemStatus = idw_profile_radioactive_supplement_page_2.GetItemStatus(ll_row_radioactive, 0, Primary!)
			if ll_count_radioactive = 0 then
				if idwitemstatus = DataModified! then
					idw_profile_radioactive_supplement_page_2.setitemstatus(ll_row_radioactive,0,Primary!,NewModified!)
				end if
			else
				if idwitemstatus = NewModified! then
					idw_profile_radioactive_supplement_page_2.setitemstatus(ll_row_radioactive,0,Primary!,DataModified!)
				end if
			end if
		NEXT
		
		 li_rc = wf_audit(idw_profile_radioactive_supplement_page_2, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				li_rc = idw_profile_radioactive_supplement_page_2.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Radioactive Page 2 Supplement data."  //COR2 JXM 04/03/2019 change to identify
				END IF
			END IF
	  END IF  

// 10561 - COR2 JXM 05/01/2019 - RAD Sub3 dw now updates using code below
    IF li_rc = gi_success THEN
		 
		// MPM - 4/22/2020 - DevOps 15205
		FOR ll_row_radioactive = 1 TO idw_profile_radioactive_supplement_3sub.RowCount()
			ll_line_id = idw_profile_radioactive_supplement_3sub.Object.line_id[ll_row_radioactive]
			select count(1) into :ll_count_radioactive from plt_ai.dbo.profileradioactiveusei where profile_id = :ll_profile_id and line_id = :ll_line_id using itr_share;
			idwItemStatus = idw_profile_radioactive_supplement_3sub.GetItemStatus(ll_row_radioactive, 0, Primary!)
			if ll_count_radioactive = 0 then
				if idwitemstatus = DataModified! then
					idw_profile_radioactive_supplement_3sub.setitemstatus(ll_row_radioactive,0,Primary!,NewModified!)
				end if
			else
				if idwitemstatus = NewModified! then
					idw_profile_radioactive_supplement_3sub.setitemstatus(ll_row_radioactive,0,Primary!,DataModified!)
				end if
			end if
		NEXT
		 
		 li_rc = wf_audit(idw_profile_radioactive_supplement_3sub, ll_profile_id, 0, True)
		  	IF li_rc = gi_success THEN
				idw_profile_radioactive_supplement_3sub.SetRedraw(FALSE)
				li_rc = idw_profile_radioactive_supplement_3sub.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Radioactive Page 3sub Supplement data." //COR2 JXM 05/01/2019 change to identify 
				END IF
				idw_profile_radioactive_supplement_3sub.SetRedraw(TRUE)
			END IF
	  END IF  
	
		// SK 06/06/2012 Update ProfileWCRFacility
// SK 07112012 This is removed...
//		IF li_rc = gi_success THEN
//			li_rc = wf_audit(idw_profile_wcr_facility, ll_profile_id, 0, True)
//			IF li_rc = gi_success THEN
//				li_rc = idw_profile_wcr_facility.Update(FALSE,FALSE) 
//				IF li_rc = gi_failure THEN
//					ls_msg = "Waste Profile Form Facility."
//				END IF
//			END IF
//		END IF

//		// If this profile is Canceled, Rejected, or Voided, write a Complete ProfileTracking record
//		// If this profile is Approved without confirmation info, write a Sending Customer Confirmation ProfileTracking record
//		// If this profile is Approved with confirmation info, write a Complete ProfileTracking record
//		ls_profile_status = idw_header.Object.curr_status_code[ll_row]
//		IF (ls_profile_status = "A" OR ls_profile_status = "C" OR ls_profile_status = "R" OR ls_profile_status = "V") &
//			AND idw_tracking.RowCount() > 0 THEN
//			idw_tracking.Sort()
//			ls_tracking_status = Upper(idw_tracking.Object.tracking_status[1])
//			IF ls_tracking_status = "COMP" THEN
//				// Nothing to do, a final record has already been written
//			ELSE
//				IF (ls_profile_status = "C" OR ls_profile_status = "R" OR ls_profile_status = "V") THEN
//					lb_enter_tracking_record = TRUE
//					ls_tracking_status_new = "COMP"
//					
//				ELSEIF ls_profile_status = "A" THEN
//					ll_rowcount = idw_approval.RowCount()
//					lb_confirm_entered = FALSE
//					FOR ll_row_approval = 1 TO ll_rowcount
//						IF NOT (IsNull(idw_approval.Object.confirm_update_date[ll_row_approval])) THEN
//							lb_confirm_entered = TRUE
//							EXIT
//						END IF
//					NEXT
//
//					IF lb_confirm_entered THEN
//						IF ls_tracking_status = "REAP" OR ls_tracking_status = "SCC" THEN
//							// If any approval is confirmed and the current tracking is Reapproval or Sending Customer Confirmation, 
//							// ask the user if they want to enter a Complete record
//							li_response = MessageBox(gs_app_name + ":  Enter Complete Tracking Record", "Do you want to enter a 'Complete' Profile Tracking record for this Profile?", Question!, YesNo!, 1)
//							IF li_response = 1 THEN
//								lb_enter_tracking_record = TRUE
//								ls_tracking_status_new = "COMP"
//							ELSE
//								lb_enter_tracking_record = FALSE
//							END IF
//						ELSE
//							// If any approval is confirmed, enter a Complete ProfileTracking record
//							lb_enter_tracking_record = TRUE
//							ls_tracking_status_new = "COMP"
//						END IF
//					ELSE
//						IF ls_tracking_status = "SCC" THEN
//							// Don't enter another Sending CC ProfileTracking record if it's already there
//							lb_enter_tracking_record = FALSE
//						ELSE
//							lb_enter_tracking_record = TRUE
//							ls_tracking_status_new = "SCC"
//						END IF
//					END IF
//				END IF
		
		ls_profile_status = idw_header.Object.curr_status_code[ll_row]
		IF ls_profile_status = "A" AND idw_tracking.RowCount() > 0 THEN
			
			// This sorts the most recent ProfileTracking record to the top
			idw_tracking.Sort()
			// This sets ls_tracking_status for the most recent record
			ls_tracking_status = Upper(idw_tracking.Object.tracking_status[1])
			
			// This loop determines if there are any ProfileTracking records for Complete or Sending Customer Confirmation
			lb_tracking_status_comp = FALSE
			lb_tracking_status_scc = FALSE
			ll_rowcount_tracking = idw_tracking.RowCount()
			FOR ll_row_tracking = 1 TO ll_rowcount_tracking
				IF Upper(idw_tracking.Object.tracking_status[ll_row_tracking]) = "COMP" THEN
					lb_tracking_status_comp = TRUE
				ELSEIF Upper(idw_tracking.Object.tracking_status[ll_row_tracking]) = "SCC" THEN
					lb_tracking_status_scc = TRUE
				END IF
			NEXT
			
			// This loop determines if confirmation information has been entered on any approval(s)
			lb_confirm_entered = FALSE
			ll_rowcount = idw_approval.RowCount()
			FOR ll_row_approval = 1 TO ll_rowcount
				IF NOT (IsNull(idw_approval.Object.confirm_update_date[ll_row_approval])) THEN
					lb_confirm_entered = TRUE
					EXIT
				END IF
			NEXT

			// Enter Sending Customer Confirmation (SCC) ProfileTracking record
			IF is_profile_status_orig <> "A" &
				AND lb_tracking_status_comp = FALSE &
				AND lb_tracking_status_scc = FALSE &
				AND lb_confirm_entered = FALSE THEN
					lb_enter_tracking_record = TRUE
					ls_tracking_status_new = "SCC"
			END IF

			// Enter Complete (COMP) ProfileTracking record
			IF lb_tracking_status_comp = FALSE &
				AND lb_confirm_entered = TRUE THEN
					lb_enter_tracking_record = TRUE
					ls_tracking_status_new = "COMP"
					lb_tracking_status_comp = TRUE
					// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077
					//DevOps 18077 info_gde 02/01/2021; Profile Tracking Queue Issues 
					//idw_header.Object.tracking_EQ_contact[ll_row] = ""
			END IF
				
			IF lb_enter_tracking_record THEN
				// Close out the current record
				idw_tracking.Object.time_out[1] = idt_save_date
				idw_tracking.Object.modified_by[1] = gs_user_id
				idw_tracking.Object.date_modified[1] = idt_save_date
				ldt_time_in = idw_tracking.Object.time_in[1]
				ll_business_minutes = f_business_minutes(ldt_time_in, idt_save_date)
				IF ll_business_minutes < 0 THEN
					MessageBox(gs_app_name + ":  Error", "There was an error calculating business minutes for this profile.~r~rPlease contact the I.T. Department!", StopSign!)
					ll_business_minutes = 0
				END IF
				idw_tracking.Object.business_minutes[1] = ll_business_minutes
				ll_tracking_id = idw_tracking.Object.tracking_id[1] + 1
				
				// Add the final record
				ll_newrow_tracking = idw_tracking.InsertRow(0)
				IF ll_newrow_tracking > 0 THEN
					idw_tracking.Object.profile_id[ll_newrow_tracking] = ll_profile_id
					idw_tracking.Object.tracking_id[ll_newrow_tracking] = ll_tracking_id
					idw_tracking.Object.tracking_status[ll_newrow_tracking] = ls_tracking_status_new
					idw_tracking.Object.time_in[ll_newrow_tracking] = idt_save_date
					idw_tracking.Object.added_by[ll_newrow_tracking] = gs_user_id
					idw_tracking.Object.date_added[ll_newrow_tracking] = idt_save_date
					idw_tracking.Object.modified_by[ll_newrow_tracking] = gs_user_id
					idw_tracking.Object.date_modified[ll_newrow_tracking] = idt_save_date
					idw_tracking.Object.profile_curr_status_code[ll_newrow_tracking] = ls_profile_status
					
					IF ls_tracking_status_new = "SCC" THEN
						idw_tracking.Object.department_id[ll_newrow_tracking] = idw_tracking.Object.department_id[1]	// Copy department from last record
						idw_tracking.Object.EQ_contact[ll_newrow_tracking] = idw_tracking.Object.EQ_contact[1]			// Copy department from last record
					ELSEIF ls_tracking_status_new = "COMP" THEN
//						idw_tracking.Object.department_id[ll_newrow_tracking] = ll_null	// Leave NULL
//						idw_tracking.Object.EQ_contact[ll_newrow_tracking] = gs_user_id	// Leave NULL
						idw_tracking.Object.comment[ll_newrow_tracking] = "Completed"		// Only populate on Complete record
						idw_tracking.Object.business_minutes[ll_newrow_tracking] = 0		// Only populate on Complete record
						idw_tracking.Object.time_out[ll_newrow_tracking] = idt_save_date	// Only populate on Complete record
						// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
						//DevOps 18077 info_gde 02/01/2021; Profile Tracking Queue Issues 
						// MPM - 6/14/2021 - DevOps 21506 - If the new tracking status is "completed", then the profile is tracked to no one, so clear out
						// the "Tracking.." info in the header:
						idw_header.Object.tracking_EQ_contact[ll_row] = ""
					END IF
					
					// Set header profile_tracking_id and tracking_eq_contact
					idw_header.Object.profile_tracking_id[ll_row] = ll_tracking_id
					// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
					// MPM - 5/3/2021 - DevOps 19118 - Commented out the following line
					//idw_header.Object.tracking_EQ_contact[ll_row] = ""
					// MPM - 6/11/2021 - DevOps 21506 - Set "tracked from"
					idw_tracking.Object.tracked_from[ll_newrow_tracking] = gs_user_id			
				END IF
			END IF
		END IF
		
		// rb - attempted fix for duplicate Tracking IDs
		if idw_tracking.RowCount() > 0 then
			if idw_tracking.GetItemStatus (1, 0, Primary!) = NewModified! then
				ll_tracking_id = idw_tracking.Object.tracking_id[1]

				select isnull(max(tracking_id),0)
				into :ll_max_tracking_id
				from dbo.ProfileTracking
				where profile_id = :ll_profile_id
				using itr_share;
				
				if ll_max_tracking_id >= ll_tracking_id then
					ls_msg = "Tracking: Another user may have been editing this profile at the same time and a new tracking record cannot be created. Please close and repoen the Profile Tracking window and try again."

					li_rc = gi_failure
				end if
			end if
		end if
		
		// Update Tracking 
		IF li_rc = gi_success THEN
			li_rc = wf_audit(idw_tracking, ll_profile_id, 0, True)
			IF li_rc = gi_success THEN
				li_rc = idw_tracking.Update(FALSE,FALSE)
				IF li_rc = gi_failure THEN
					ls_msg = "Tracking."
				END IF
			END IF
		END IF

		// Update Document changes
		IF li_rc = gi_success THEN
			li_rc = wf_save_documents()
			IF li_rc = gi_failure THEN
				ls_msg = "Documents."
			END IF
		END IF
		
		// Save the WCR if one is open for editing
//		IF li_rc = gi_success THEN
//			IF ib_changed_wcr THEN
//				IF ib_wcr THEN
//					iuo_wcr_form.wf_save()
//					// 01052012 SK below not required
//					// iuo_wcr_form.SetPosition(ToBottom!)
//				END IF
//			END IF
//		END IF
	  
		IF li_rc = gi_success THEN
			li_rc = wf_save_wcr(ll_profile_id)
			IF li_rc = gi_failure THEN
				ls_msg = "Waste Profile Form."
			END IF
		END IF
		
		// Set primary WCR- SK 10/28/2013, Although with the introduction of multiple WCR's to a Profile
		// there is no good way of saying which is primary, the field form_id_wcr on profile needs to be populated for now
		
//	The below old code has a bug that sets any form to be primary WCR  even if it is an RA/GWA/LDR etc. Should be fixed
//		ll_rowcount_form = idw_form.RowCount()
//		IF ll_rowcount_form = 0 THEN
//			lb_set_primary = FALSE
//		ELSEIF ll_rowcount_form = 1 THEN
//			// If this is the only row, set it as primary
//			ll_form_wcr_id = idw_form.Object.form_id[1]
//			idw_form.Object.primary_wcr[1] = "T"
//		ELSEIF ll_rowcount_form > 1 THEN
//			FOR ll_row_form = 1 TO ll_rowcount_form
//				IF idw_form.Object.form_type[ll_row_form] = "WCR" THEN
//					IF idw_form.Object.primary_wcr[ll_row_form] = "T" THEN
//						// This profile already has a primary WCR
//						lb_set_primary = FALSE
//						ll_form_wcr_id = idw_form.Object.form_id[ll_row_form]
//						EXIT
//					END IF
//				END IF
//			NEXT
//		END IF
//		
//		IF lb_set_primary THEN
//			idw_header.Object.form_id_wcr[ll_row] = ll_form_wcr_id
//			tab_1.tabpage_view.st_form_id_wcr.Text = String(ll_form_wcr_id)
//		END IF

		// new code for Primary WCR - 10/28/2013 SK
		SetNull(ll_form_wcr_id)
		ls_find = "Upper(form_type) = 'WCR'"
		ll_rowcount = idw_form.rowcount()
		ll_rowcount_form = idw_form.Find(ls_find, 1, ll_rowcount+1) //this will set the latest WCR to be primary
		IF ll_rowcount_form > 0 THEN
			ll_form_wcr_id = idw_form.Object.form_id[ll_rowcount_form]
		END IF
			//Task 10096 - AM - Setting form_id_wcr in wf_copy_wcr_dragon for dragon change
		IF IsNull(ll_form_wcr_id)  THEN 
			IF (idw_header.Object.form_id_wcr[ll_row] <> ll_form_wcr_id) THEN // OR IsNull(ll_form_wcr_id) THEN
				idw_header.Object.form_id_wcr[ll_row] = ll_form_wcr_id
			END IF
		END IF	
// 05/25/2012 SK Tab page Form Availability is NOT USED, HIDDEN		
		// Update Form Availability
//		IF li_rc = gi_success THEN
//			idw_form_availability.SetRedraw(FALSE)			
//			FOR ll_form_ctr = 1 TO idw_form_availability.RowCount()
//				IF idw_form_availability.GetItemNumber(ll_form_ctr, "include", Primary!, TRUE) = 1 THEN
//					IF idw_form_availability.Object.include[ll_form_ctr] = 1 THEN
//						idw_form_availability.Object.profile_id[ll_form_ctr] = ll_profile_id
//						IF ib_new_record THEN
//							idw_form_availability.SetItemStatus(ll_form_ctr, 0, Primary!, NewModified!)
//						ELSE
//							idw_form_availability.SetItemStatus(ll_form_ctr, 0, Primary!, DataModified!)
//						END IF
//					ELSE
//						idw_form_availability.DeleteRow(ll_form_ctr)
//						ll_form_ctr = ll_form_ctr - 1
//					END IF
//				ELSE
//					IF idw_form_availability.Object.include[ll_form_ctr] = 1 THEN
//						idw_form_availability.SetItemStatus(ll_form_ctr, 0, Primary!, NewModified!)
//						idw_form_availability.Object.profile_id[ll_form_ctr] = ll_profile_id
//					ELSE
//						idw_form_availability.SetItemStatus(ll_form_ctr, 0, Primary!, NotModified!)
//					END IF
//				END IF
//			NEXT
//			li_rc = idw_form_availability.Update(FALSE,FALSE)
//			IF li_rc = gi_failure THEN
//				ls_msg = "Form Availability."
//			END IF
//	
//			idw_form_availability.SetRedraw(TRUE)	
//		END IF
		
		// Update Notes last after all audit records are created
		IF li_rc = gi_success THEN
			ll_row = idw_header.GetRow()
			ll_profile_id = idw_header.object.profile_id[ll_row]
			ll_customer_id = idw_header.object.customer_id[ll_row]
			ll_generator_id = idw_header.object.generator_id[ll_row]
			ll_contact_id = idw_header.object.contact_id[ll_row]
			itp_note.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, ll_contact_id, FALSE)
			li_rc = itp_note.uf_save()
			IF li_rc = gi_failure THEN
				ls_msg = "Notes."
			END IF
		END IF

	// moving header update code to all the way up
	
	/* 
		MPM - 1/25/2023 - DevOps 61272 - Who moved the block of code below, which updates idw_header, from about here (I'm guessing it used to be about here from the 
		"// moving header update code to all the way up" comment, just above) to begin way up at line 356?  That was causing changes made to idw_header after that point to not get saved...
		I moved that block of code to be where I think it was previously, and about where I think it needs to be, which is between the notes update and the ids_scan_wcr update.
	*/
	
	// Update Profile if everything else saved
		IF li_rc = gi_success THEN
			IF ls_profile_status = "A" THEN
				ldt_date_approved = idw_header.Object.date_approved[ll_row]
				IF IsNull(ldt_date_approved) THEN
					idw_header.Object.date_approved[ll_row] = idt_save_date
				END IF
			END IF
			
////DevOps 18063 info_gde 05/25/2021; Profile Audit - Inserting duplicated audit records for Profile table
//			li_rc = wf_audit(idw_audit, ll_profile_id, ll_row, True)
//			IF li_rc = gi_success THEN
//				li_rc = idw_audit.Update() 
//				IF li_rc = gi_failure THEN
//					ls_msg = "Profile Audit."
//				Else
//					ib_no_audit=FALSE
//				END IF
//			END IF
			
			//DevOps 16871 Set to null if value is 0 - fhc
			IF idw_header.object.profile_rq_threshold[ll_row] = 0 THEN idw_header.object.profile_rq_threshold[ll_row]=ld_null	
	
			li_rc = wf_audit(idw_header, ll_profile_id, ll_row, True)
			//Changed for DevOps #42054 - Kamendra - Start
			IF li_rc = gi_success AND wf_audit_header(ll_profile_id) = gi_success THEN
				li_rc = idw_header.Update(FALSE,FALSE) 
			ELSE
					ls_msg = "Header."
			END IF
			//Changed for DevOps #42054 - Kamendra - End
		END IF
	
		// make sure the wcr - profile link if any gets updated
		IF li_rc = gi_success THEN
// DevOps 17111 - Profile Link is an obsolete functionality after COR. It is Preventing the SCAN table from being updated if it fails. Commented. fhc 9/3/20
//			IF Isvalid(ids_form_wcr) THEN
//				IF ids_form_wcr.modifiedcount() > 0 THEN
//					li_rc = ids_form_wcr.Update(FALSE, FALSE)
//					IF li_rc = gi_failure THEN
//						ls_msg = "Form-Profile link."
//					END IF
//				END IF
//			END IF
			
//			IF li_rc = gi_success THEN
				IF Isvalid(ids_scan_wcr) THEN
					IF ids_scan_wcr.modifiedcount() > 0 THEN
						ids_scan_wcr.DisplayDBError = False
						li_rc = ids_scan_wcr.Update(FALSE, FALSE)
						IF li_rc = gi_failure THEN
//							ls_msg = "Scanned form-profile link."
							ls_msg = ids_scan_wcr.of_get_error_msg() 	+ "Scanned form."
						END IF
					END IF
				END IF
//			END IF
		END IF
		
		// Dipankar - 05/29/2023 - Begin - Added for #65683, moved from above 
	    // Waste Import Supplement Data to be save after Profile Save due to Foriegn Key Constraint
		IF li_rc = gi_success THEN
			ll_supplement_count  = idw_waste_import_supplement.Rowcount()
			
			IF ll_supplement_count > 0 THEN 
				FOR i = 1 TO ll_supplement_count
					ll_supplement_profile = idw_waste_import_supplement.object.profile_id [i]
					IF ll_supplement_profile = 0 OR isnull (ll_supplement_profile) THEN 
						 idw_waste_import_supplement.object.profile_id [i] = ll_profile_id
					END IF
				NEXT
			END IF
			
			li_rc = wf_audit(idw_waste_import_supplement, ll_profile_id, 0, True)
			
			IF li_rc = gi_success THEN
				li_rc = idw_waste_import_supplement.Update(FALSE,FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Waste Import Supplement data."
				END IF
			END IF
		END IF
		// Dipankar - 05/29/2023 - End - Added for #65683, moved from above
		
		// Dipankar - 8/31/2023 - Begin - Added for #69393
		IF li_rc = gi_success THEN
			ll_supplement_count  = idw_profile_fuels_blending.Rowcount()
			
			IF ll_supplement_count > 0 THEN 
				FOR i = 1 TO ll_supplement_count
					ldwItemStatus = idw_profile_fuels_blending.GetItemStatus(i, 0, Primary!)	
					IF  ldwItemStatus <> NotModified! THEN 
						ll_supplement_profile = idw_profile_fuels_blending.object.profile_id [i]
						IF ll_supplement_profile = 0 OR IsNull (ll_supplement_profile) THEN 
							 idw_profile_fuels_blending.Object.profile_id [i] = ll_profile_id
						END IF
					END IF
				NEXT
			END IF
			
			li_rc = wf_audit(idw_profile_fuels_blending, ll_profile_id, 0, TRUE)
			IF li_rc = gi_success THEN
				li_rc = idw_profile_fuels_blending.UPDATE (FALSE, FALSE) 
				IF li_rc = gi_failure THEN
					ls_msg = "Fuels Blending Supplement data."
				END IF
			END IF
		END IF
		// Dipankar - 8/31/2023 - End - Added for #69393	
		
//		ls_Sort = 'table_name A,column_name A, before_value A,after_value A'
//		idw_audit.SetSort(ls_Sort)
//		idw_audit.Sort()
//		li_rcc = idw_audit.rowcount()
//		ls_filterstring= "table_name = 'Profile' AND  ( getrow() = 1 or column_name[-1] <> column_name[0]) AND  (getrow() = 1 or before_value[-1] <> before_value[0]) AND  (getrow() = 1 or after_value[-1] <> after_value[0])"   
//		li_rcc = idw_audit.SetFilter(ls_filterstring )
//		li_rcc = idw_audit.Filter()
//		li_rcc = idw_audit.rowcount()
//		li_rcc = idw_audit.FilteredCount()
//		li_rcc = idw_audit.RowsDiscard(1,idw_audit.FilteredCount(),Filter!)
//		li_rcc = idw_audit.FilteredCount()
//		li_rcc = idw_audit.rowcount()
//		li_rcc = idw_audit.Setfilter("not isselected()")
//		li_rcc = idw_audit.Filter()
//		li_rcc = idw_audit.rowcount()
//		idw_audit.SetSort('')

		// Save the audits
		IF li_rc = gi_success THEN
			// Kamendra - Added for DevOps #42054 to ensure that audit isn't missing profile_id for any row - Begin
			// Kamendra - Added extra condition for table_name just to be sure that we are updating correct record' profile_id
			ll_find = idw_audit.Find("(IsNull(profile_id) OR profile_id <= 0) AND NOT IsNull(table_name)", 1, idw_audit.RowCount())
			DO WHILE ll_find > 0
				idw_audit.object.profile_id[ll_find]=wf_get_profile_id() //This will ensure the actuall profile_id
				// Kamendra - Added extra condition for table_name just to be sure that we are updating correct record' profile_id
				ll_find = idw_audit.Find("(IsNull(profile_id) OR profile_id <= 0) AND NOT IsNull(table_name)", ll_find, idw_audit.RowCount())
			LOOP
			// Kamendra - Added for DevOps #42054 to ensure that audit isn't missing profile_id for any row - End
			li_rc = idw_audit.Update(FALSE,FALSE)
			IF li_rc = gi_failure THEN
				ls_msg = "Audits."
			END IF
		END IF

		// Handle failure
		IF li_rc <> gi_success THEN
			MessageBox(gs_app_name + ":  Profile Save", "Cannot Update Profile: " + ls_msg, Exclamation!)
			ROLLBACK USING itr_share;
			ROLLBACK USING itr_image;
			
			iudw_document.uf_commit(false)
			itp_note.uf_commit(FALSE)
			ib_update_failed = TRUE
			
		// Handle success
		ELSE
			// Commit here
			SetMicroHelp("Working on Commit")
			COMMIT USING itr_share;
			
			IF itr_share.SQLCode = 0 THEN		
				IF Isvalid(ids_scan_wcr) THEN 
					COMMIT USING itr_image;
				END IF
				iudw_document.uf_commit(TRUE)	
				itp_note.uf_commit(TRUE)	
			END IF		
			
			IF itr_share.SQLCode <> 0 THEN
				ROLLBACK USING itr_share;
				
				iudw_document.uf_commit(FALSE)
				itp_note.uf_commit(FALSE)
				ib_update_failed = TRUE
				MessageBox(gs_app_name + ":  Profile Save", "Cannot commit Profile Changes.", Exclamation!)
				SetMicroHelp("Save failed")
			ELSE
			//TASK - 9962
			IF idw_header.getrow() > 0 THEN 
				//ll_source_form_id = idw_header.Object.form_id_wcr[idw_header.getrow()]
				SELECT source_form_id,source_revision_id
				INTO :ll_source_form_id,:ll_source_revision_id
				FROM Profile
				Where profile_id = :ll_profile_id
				USING itr_share;
				
				ll_form_id_wcr = idw_header.Object.form_id_wcr [idw_header.getrow() ]
				ls_tracking_type = idw_header.Object.tracking_type[idw_header.getrow() ]
			
				//DevOPs:15379
				IF ls_tracking_type = 'R' THEN 
					UPDATE  Profile 
					SET display_status_uid = 7
					WHERE profile_id = :ll_profile_id
					USING itr_share;
					COMMIT USING itr_share;
					
					
					Insert Into FormWCRStatusAudit values (:ll_profile_id,0,7,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
					
				END IF
				IF ls_tracking_type = 'R' AND NOT IsNull(ll_form_id_wcr) AND NOT IsNull(ll_source_revision_id) THEN
					UPDATE  FormWCR 
					SET display_status_uid = 7
					WHERE form_id = :ll_form_id_wcr
					AND  revision_id = :ll_source_revision_id
					USING itr_share;
					COMMIT USING itr_share;
					
					
					Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,7,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
			
				END IF 
				
				
				IF ll_source_form_id > 0  tHEN 
					SELECT profile_id , isnull (copy_source , '')
					INTO :ll_wcr_profile_id, :ls_copy_source
					FROM FormWCR
					WHERE form_id = :ll_form_id_wcr
					AND  revision_id = :ll_source_revision_id
					USING itr_share;
					
					// DevOps 16687 message box should only display if original status = Pending and original reason = Renewal in Process
					// 20200414 jcb #15175 give warning when doc-update-status changes
					ls_document_update_status             = idw_header.Object.document_update_status[idw_header.GetRow()]
					ls_document_update_status_original = idw_header.GetItemString(idw_header.GetRow(),'document_update_status',Primary!, TRUE)
					ls_doc_status_reason_original = idw_header.GetItemString(idw_header.GetRow(),'doc_status_reason',Primary!, TRUE)
	                  IF ls_document_update_status <> ls_document_update_status_original then
						if ls_document_update_status_original = 'P' and (lower(trim(ls_doc_status_reason_original)) = 'renewal in process' or lower(trim(ls_doc_status_reason_original)) = 'renewal in progress') then
						    MessageBox('Profile Save','An edit has been made to Docs Pending, please verify that the Profile Expiration Data is accurate')
						end if
					END IF
					
					//DevOps:15104 - If profile status is A and document_update_status is A(not pending docs) then update to 4
					//20200414 jcb #15175 moved up DLET ls_document_update_status             = idw_header.Object.document_update_status[idw_header.GetRow()]
					//DevOps 15970 added an else statement to handle when tracking type = A and document update status <> A
					IF ls_tracking_type = "A" THEN
						IF  ls_document_update_status = 'A' THEN  //DevOps 26959 info_gde 11/23/2021; PROD EQAI - Last Profile Sync - Missing
							IF ll_wcr_profile_id > 0 THEN 
								// MPM - 3/23/2020 - DevOps 14853 - Check that form_id_wcr and source_revision_id are not null
								IF NOT IsNull(ll_form_id_wcr) AND NOT IsNull(ll_source_revision_id) THEN
									UPDATE  FormWCR 
									SET display_status_uid = 4 , date_last_profile_sync = :idt_save_date
									WHERE form_id = :ll_form_id_wcr
									AND  revision_id = :ll_source_revision_id
									USING itr_share;
									COMMIT USING itr_share;
									//Task:10325 - Approved profile not showing in the COR
									UPDATE  Profile 
									SET display_status_uid = 4
									WHERE profile_id = :ll_wcr_profile_id
									USING itr_share;
									COMMIT USING itr_share;
									
									//DevOps 19974 info_gde 04/26/2021; Profile Tracking > Forms Tab - 'Last Profile Sync' Audit Timestamp
									ll_rowcount=idw_form.rowcount()						
									
									If ll_rowcount >0 Then
										If idw_form.object.date_last_profile_sync[1] < idt_save_date Then
								 			ls_added_by=idw_form.object.added_by[1]	
							 				Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,4,:idt_save_date,:ls_added_by) COMMIT USING itr_share;
										Else
											Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,4,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
										End if
									Else
										Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,4,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
									End If
								
								END IF
							END IF 
						ELSE
							
													
							//DevOps:18528 - Added date_last_profile_sync
							IF NOT IsNull(ll_form_id_wcr) AND NOT IsNull(ll_source_revision_id) AND  ls_tracking_type <> 'R' THEN
								UPDATE FormWCR 
									SET display_status_uid = 3  , profile_id = :ll_profile_id, date_last_profile_sync = :idt_save_date	/*DevOps 17111, set profile id here  */
								WHERE form_id = :ll_form_id_wcr
								AND  revision_id = :ll_source_revision_id
								and display_status_uid = 5 /*DevOps 15614 per Oswin */
								USING itr_share;
								COMMIT USING itr_share;
									//DevOps:18528 - Added date_last_profile_sync
									idw_form.object.b_compare.visible = FALSE
								UPDATE  Profile 
								SET display_status_uid = 3
								WHERE profile_id = :ll_profile_id
								USING itr_share;
								COMMIT USING itr_share;
								
								//DevOps 19974 info_gde 04/26/2021; Profile Tracking > Forms Tab - 'Last Profile Sync' Audit Timestamp		
								ll_rowcount=idw_form.rowcount()
									
								If ll_rowcount >0 Then
									If idw_form.object.date_last_profile_sync[1] < idt_save_date Then
								 		ls_added_by=idw_form.object.added_by[1]	
							 			Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,3,:idt_save_date,:ls_added_by) COMMIT USING itr_share;
									Else
										Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,3,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
									End If
								Else
									Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,3,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
								End If
								
								DECLARE Scan_csr CURSOR FOR  
										SELECT document_source
										FROM SCAN 							
										WHERE form_id = :ll_form_id_wcr
										Group By document_source
										USING itr_image;
										
								OPEN Scan_csr;
									
								DO WHILE itr_image.SQLCode = 0
									FETCH Scan_csr INTO :ls_document_source ;
									IF itr_image.SQLCode = 0 THEN	
										ll_max_image_id = 0 
										SELECT Max(image_id) 
										INTO :ll_max_image_id
										FROM SCAN 							
										WHERE form_id = :ll_form_id_wcr
										AND document_source = :ls_document_source
										AND upload_date < :idt_save_date
										HAVING Count (document_source) > 1
										USING itr_image;
												
										IF ll_max_image_id > 0  THEN 		
											UPDATE SCAN 
											SET //status = 'V',
											profile_id = :ll_profile_id
											WHERE form_id = :ll_form_id_wcr
											//AND image_id <> :ll_max_image_id
											AND document_source = :ls_document_source
											USING itr_image;	
										ELSE
												UPDATE SCAN 
												SET profile_id = :ll_profile_id
												WHERE form_id = :ll_form_id_wcr
												//AND image_id <> :ll_max_image_id
												AND document_source = :ls_document_source
												USING itr_image;														
										END IF
											COMMIT USING itr_image;
									ELSEIF itr_share.SQLCode = -1 THEN
										MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading Scan Update.", Exclamation!)
										CLOSE Scan_csr;
										ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020;
										RETURN
									END IF
								LOOP										
								CLOSE Scan_csr;	 
							END IF 
						END IF
					END IF
					
							//DevOps:14739 - No longer need this. Implemented for dragon
//							IF ls_copy_source = 'renewal' AND ib_form_email_send = FALSE THEN 
//							    	//Task:9269
//								dw_appr_renewal_notification.SetTransObject(gtr_share)
//								dw_appr_renewal_notification.retrieve(gi_company_id,ii_profit_ctr_id,string (ll_profile_id),0)
//								f_dw_print_to_email(dw_appr_renewal_notification)	
//								ib_form_email_send = TRUE
//							ELSEIF ( ls_copy_source <> "" AND ls_copy_source <> 'renewal' ) AND ib_form_email_send = FALSE THEN 
//								//Task:9269
//								dw_appr_notification.SetTransObject(gtr_share)
//								dw_appr_notification.retrieve(gi_company_id,ii_profit_ctr_id,string (ll_profile_id),0)
//								f_dw_print_to_email(dw_appr_notification)	
//								ib_form_email_send = TRUE
//							END IF
 
						  
						  						
							
						// MPM - 3/23/2020 - DevOps 14853 - Check that form_id_wcr and source_revision_id are not null
						IF NOT IsNull(ll_form_id_wcr) AND NOT IsNull(ll_source_revision_id) AND  ls_tracking_type <> "A" AND  ls_tracking_type <> 'R' THEN
							IF ib_reject_resubmit_flag THEN //DevOps 20789 info_gde 07/07/2021; Form Rejection - Bucket Table Update Process
									UPDATE FormWCR           //If user submits Form from CCor, Then accepts form in EQAI; then rejects form in EQAI, then goes back to CCOR and Re-submits the form 
									SET display_status_uid = 3 , profile_id = :ll_profile_id, date_last_profile_sync = :idt_save_date	//this results in two possibilies after going back to EQAI and using Docs Tab 'Compare' button to Accept the form again, 	 
									WHERE form_id = :ll_form_id_wcr	                                                                                         // the user may un-check Docs Pending box and then save the profile OR user may save profile first and then un-checksand then save the profile
									USING itr_share;                                                                                                                  // The first results in the Form/Profile going into CCOR's re-submitted bucket.  The Second results in the record suspended in the Pending bucket.
								 																															   // The problem is FormWCR table will have multiple rows (revision_id's) for this form_id with display_status_uid value other than 5.
								                                                                                                                                              //  The solution: if ib_reject_resubmit_flag=True, then the profile had been rejected and then resubmitted and acceepted
																				                                                                                      // Change the display_status_uid, which will no longer be a status of 5, for this Form_id's records to 3 and then the record will go to CCOR's bucket for Submitted.
									
									IF itr_share.SQLCode = -1 THEN
										Rollback Using itr_share;
										MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLErrText, Exclamation!)
										ls_msg = "Save Error Updating Status on Form ID: " +string(ll_form_id_wcr) +" for rejection and re-submittal ."
										li_rc = gi_failure
										
									ELSE
										COMMIT USING itr_share;
										ib_reject_resubmit_flag=FALSE       
										li_rc = gi_success
									END IF
							END IF
							
							UPDATE FormWCR 
							SET display_status_uid = 3 , profile_id = :ll_profile_id, date_last_profile_sync = :idt_save_date		/*DevOps 17111, set profile id here  */ 
							WHERE form_id = :ll_form_id_wcr
							AND  revision_id = :ll_source_revision_id
							and display_status_uid = 5 /*DevOps 15614 per Oswin */
							USING itr_share;
							COMMIT USING itr_share;
									//DevOps:18528 - Added date_last_profile_sync
									idw_form.object.b_compare.visible = FALSE
									
							UPDATE  Profile 
							SET display_status_uid = 3
							WHERE profile_id = :ll_profile_id
							USING itr_share;
							COMMIT USING itr_share;
							
							//DevOps 19974 info_gde 04/26/2021; Profile Tracking > Forms Tab - 'Last Profile Sync' Audit Timestamp						
							ll_rowcount=idw_form.rowcount()
									
							If ll_rowcount >0 then
								if idw_form.object.date_last_profile_sync[1] < idt_save_date Then
								 		ls_added_by=idw_form.object.added_by[1]	
							 			Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,3,:idt_save_date,:ls_added_by) COMMIT USING itr_share;
								Else
										Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,3,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
								End if
							Else
									Insert Into FormWCRStatusAudit values (:ll_form_id_wcr,:ll_source_revision_id,3,:idt_save_date,:gs_user_id) COMMIT USING itr_share;
							End If
								
							
								DECLARE Scan_cur CURSOR FOR  
										SELECT document_source
										FROM SCAN 							
										WHERE form_id = :ll_form_id_wcr
										Group By document_source
										USING itr_image;
										
										OPEN Scan_cur;
									
										DO WHILE itr_image.SQLCode = 0
											FETCH Scan_cur INTO :ls_document_source ;
											IF itr_image.SQLCode = 0 THEN	
												ll_max_image_id = 0 
												SELECT Max(image_id) 
												INTO :ll_max_image_id
												FROM SCAN 							
												WHERE form_id = :ll_form_id_wcr
												AND document_source = :ls_document_source
												AND upload_date < :idt_save_date
												HAVING Count (document_source) > 1
												USING itr_image;
												
											IF ll_max_image_id > 0  THEN 		
												UPDATE SCAN 
												SET// status = 'V',
												   profile_id = :ll_profile_id
												WHERE form_id = :ll_form_id_wcr
												//AND image_id <> :ll_max_image_id
												AND document_source = :ls_document_source
												USING itr_image;
											ELSE	
												UPDATE SCAN 
												SET profile_id = :ll_profile_id
												WHERE form_id = :ll_form_id_wcr
												//AND image_id <> :ll_max_image_id
												AND document_source = :ls_document_source
												USING itr_image;	
											END IF
											   COMMIT USING itr_image;
											ELSEIF itr_share.SQLCode = -1 THEN
												MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading Scan Update.", Exclamation!)
												CLOSE Scan_cur;
												ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020;
												RETURN
											END IF
										LOOP										
										CLOSE Scan_cur;	 
						END IF 
				END IF
			END IF
			

				// rb Reset update flags only after a successful save
				SetMicroHelp("Working on ResetUpdate")
				idw_lab.ResetUpdate() 
				idw_technical.ResetUpdate() 
				idw_waste.ResetUpdate() 
				idw_waste_code_fed.ResetUpdate()
				idw_waste_code_state.ResetUpdate()
				idw_waste_code_eq.ResetUpdate()
				idw_const.ResetUpdate() 
				idw_composition.ResetUpdate() 
				idw_quoteheader.ResetUpdate() 
				idw_approval.ResetUpdate() 
				idw_rules.ResetUpdate() 
				idw_category.ResetUpdate() 
				//idw_recipe.ResetUpdate() 
				idw_recipe_update.ResetUpdate() 
				idw_tracking.ResetUpdate()
				idw_form_availability.ResetUpdate()
				idw_header.ResetUpdate() 
				idw_audit.ResetUpdate()
				idw_site_type.ResetUpdate()
// agc 10/14/19 temp comment out
//				idw_generator_locations.ResetUpdate() //DevOps 10373
				// rb 04/27/2012
				idw_shipping_unit.ResetUpdate()
				//sk 08/03/2012
				idw_ldr_subcategory.ResetUpdate()
				// COR2-MPM
				idw_container_size.ResetUpdate()
				idw_wcr_facility.ResetUpdate()
				// SK 06/06/2012
//				idw_profile_wcr_facility.ResetUpdate()
				// SK 10/03/2012
				idw_profile_gen_contact_form.ResetUpdate()
				idw_wcr_display_3.ResetUpdate()
//				idw_wcr_display_4.ResetUpdate()
				idw_waste_import_supplement.ResetUpdate()
				idw_benzene_waste_ops_supplemen.ResetUpdate()
				idw_profile_thermal_supplement_form.ResetUpdate()
				idw_gen_knowledge_supplement.ResetUpdate()
				idw_profile_cylinder_supplement_dragon.ResetUpdate()
				idw_profile_debris_certification_dragon.ResetUpdate()
				idw_profile_used_oil_supplement_dragon.ResetUpdate()
				idw_profile_illinois_disposal_supplemen.ResetUpdate()
				idw_profile_ldr_form_dragon.ResetUpdate()
				idw_profile_pcb_supplement_dragon.ResetUpdate()
				idw_profile_radioactive_supplement_page_1.ResetUpdate()
				idw_profile_radioactive_supplement_page_2.ResetUpdate()
				idw_profile_radioactive_supplement_page_3.ResetUpdate()
				idw_profile_fuels_blending.ResetUpdate() // Dipankar - 09/08/2023 - Added for #69393
				// MPM - 4/26/2020 - DevOps 15205/15290
				idw_profile_radioactive_supplement_3sub.ResetUpdate()
				// DevOps 16433 added idw_ship_volume.resetupdate()
				idw_ship_volume.ResetUpdate()
				//idw_profile_pcb_supplement_dragon.ResetUpdate() //COR2-JXM 02/20/2019
				// SK 12/11/2012
				IF Isvalid(ids_form_wcr) THEN	ids_form_wcr.ResetUpdate()
				IF Isvalid(ids_scan_wcr) THEN ids_scan_wcr.ResetUpdate()
				// rb 12/27/2012 Pricing pages need to be reset here
				wf_price("UPDATE_CLEANUP", 0)
				wf_import_waste("UPDATE_CLEANUP", 0)
				if lb_tracking_status_comp then
					// Kamendra - DevOps #42054 - removed assignment of li_rc as we use that later as well.
					if wf_calc_tracking_days(ll_profile_id) < 0 then
						messagebox(this.title, "An error occurred while updating the profile for tracking days.  Please contact I.T.")
					end if
				end if
			
				// Sort and Group Audits
				SetMicroHelp("Working on Audit Sort and GroupCalc")
				idw_audit.Sort()
				idw_audit.GroupCalc()

				// Profile save succeeded
//				IF ls_profile_status = "A" AND idw_tracking.RowCount() > 0 THEN
//					// Check the last entry
//					idw_tracking.Sort()
//					ls_tracking_status = UPPER(idw_tracking.Object.tracking_status[1])
//					IF (ls_profile_status = "A" AND ls_tracking_status = "APPR") THEN
//						// nothing to do, a final record has already been written
//					ELSE
//						// Close out the current record
//						idw_tracking.Object.time_out[1] = idt_save_date
//						idw_tracking.Object.modified_by[1] = gs_user_id
//						idw_tracking.Object.date_modified[1] = idt_save_date
//						ll_tracking_id = idw_tracking.Object.tracking_id[1] + 1
//						
//						// Add the final record
//						ll_newrow_tracking = idw_tracking.InsertRow(0)
//						IF ll_newrow_tracking > 0 THEN
//							idw_tracking.Object.profile_id[ll_newrow_tracking] = ll_profile_id
//							idw_tracking.Object.tracking_id[ll_newrow_tracking] = ll_tracking_id
//							idw_tracking.Object.tracking_status[ll_newrow_tracking] = "APPR"
//							// Add user's department here:
//							idw_tracking.Object.department_id[ll_newrow_tracking] = 1
//							idw_tracking.Object.EQ_contact[ll_newrow_tracking] = gs_user_id
//							idw_tracking.Object.time_in[ll_newrow_tracking] = idt_save_date
//							idw_tracking.Object.time_out[ll_newrow_tracking] = idt_save_date
//							idw_tracking.Object.added_by[ll_newrow_tracking] = gs_user_id
//							idw_tracking.Object.date_added[ll_newrow_tracking] = idt_save_date
//							idw_tracking.Object.modified_by[ll_newrow_tracking] = gs_user_id
//							idw_tracking.Object.date_modified[ll_newrow_tracking] = idt_save_date
//
//							IF idw_tracking.Update() <> gi_success THEN
//								MessageBox(gs_app_name + ":  Profile Tracking", "Cannot write Approved tracking record.", Exclamation!)
//							ELSE
//								COMMIT USING itr_share;
//								IF itr_share.SQLcode <> 0 THEN
//									MessageBox(gs_app_name + ":  Profile Tracking", "Cannot commit Approved tracking record.", Exclamation!)
//								END IF
//							END IF
//						END IF
//					END IF
//				END IF
				
				// Reset control variables
				ib_user_closed_window = TRUE
				ib_new_record = FALSE
				ib_can_new = TRUE	
				ib_no_audit = false
				
				wf_reset_change_flags()

				// refresh notes and reset filter to what it was
				ll_profile_id = idw_header.object.profile_id[ll_row]
				ll_customer_id = idw_header.object.customer_id[ll_row]
				ll_generator_id = idw_header.object.generator_id[ll_row]
				ls_profile_status = idw_header.Object.curr_status_code[ll_row]
				ls_tracking_type = idw_header.Object.tracking_type[ll_row]
				ll_contact_id = idw_header.object.contact_id[ll_row]
				if ib_retrieved_documents then
					commit using itr_image; //DevOps 15614
					iudw_document.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, TRUE)
				end if
				
				itp_note.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, ll_contact_id, TRUE)
				itp_note.uf_filter()
				
				SetMicroHelp("Successfully saved")			
				
				// SK 08/26/2015 re-retrieve the label types
				FOR ll_row = 1 TO idw_approval.Rowcount()
					ll_company_id = idw_approval.object.company_id[ll_row]
					ll_profit_ctr_id = idw_approval.object.profit_ctr_id[ll_row]
					idw_approval.object.tracking_type[ll_row] 	= ls_tracking_type
					ls_label_type =  f_get_default_label_type('P', ll_profile_id, ll_company_id, ll_profit_ctr_id, ll_null, ll_generator_id)
					idw_approval.object.label_type[ll_row] 		= ls_label_type
					idw_approval.SetItemStatus(ll_row, 0, Primary!, Notmodified!)
				NEXT
			END IF
		END IF
	END IF
END IF


idw_audit.SetRedraw(True)
idw_audit.Sort()	
idw_audit.GroupCalc()

//SK 07/08/2013
idw_profile_ldr_form_dragon.SetRedraw(false)
IF tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr THEN
	wf_set_wcr_sect_display(ii_sort_order)
	// Above function use set items to below dw's is causing save going into loop
	idw_wcr_display_1.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_wcr_display_2.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_wcr_display_3.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_composition_other.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_waste_import_supplement.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_benzene_waste_ops_supplemen.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_cylinder_supplement_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_debris_certification_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_illinois_disposal_supplemen.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_ldr_form_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_pcb_supplement_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_radioactive_supplement_page_1.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_radioactive_supplement_page_2.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_radioactive_supplement_page_3.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_radioactive_supplement_3sub.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_thermal_supplement_form.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_used_oil_supplement_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_gen_knowledge_supplement.SetItemStatus (1 ,0 , Primary! , NotModified! )
	idw_profile_fuels_blending.SetItemStatus (1 ,0 , Primary! , NotModified! )
END IF
idw_profile_ldr_form_dragon.SetRedraw(true)

//DevOps 15614
if idw_header.getrow() > 0 then
	idw_detail.setredraw(false)
//	idw_header.reselectrow(idw_header.getrow())
//	idw_header.sharedata(idw_detail)
//	// MPM - 6/11/2020 - DevOps 16265 - The ReselectRow() call above reset the active row in the datawindows that are shared with idw_header,
//	// so I'm resetting the active row in those with ScrollToRow calls below:
//	idw_detail.ScrollToRow(idw_header.getrow())
//	idw_comment.ScrollToRow(idw_header.getrow())
//	idw_shipping.ScrollToRow(idw_header.getrow())
//	idw_composition_epa.ScrollToRow(idw_header.getrow())
//	idw_waste_other.ScrollToRow(idw_header.getrow())

	ll_row = idw_header.getrow()
	ll_profile_id = idw_header.Object.profile_id[ll_row]

	select max(form_id)
	into :ll_source_form_id
	from formwcr
	where profile_id = :ll_profile_id using itr_share;
		
	select max(revision_id)
	into :ll_source_revision_id
	from formwcr
	where profile_id = :ll_profile_id
	and form_id = :ll_source_form_id using itr_share;
	
	select display_status_uid
	into :ll_display_status_uid
	from formwcr
	where profile_id = :ll_profile_id
	and form_id = :ll_source_form_id
	and revision_id = :ll_source_revision_id using itr_share;
	
	if not isnull(ll_source_form_id) and ll_source_form_id > 0 then
		idw_header.setitem(ll_row,'display_status_form',ll_display_status_uid)
		idw_header.setitem(ll_row,'form_ids',string(ll_source_form_id) + '-' + string(ll_source_revision_id))
		idw_header.setitemstatus(ll_row,'display_status_form',Primary!,NotModified!)
		idw_header.setitemstatus(ll_row,'form_ids',Primary!,NotModified!)
	end if
	
	idw_detail.setredraw(true)
end if

	IF ib_new_record = TRUE THEN 
				//DevOps:16572
				ll_profile_id = idw_header.object.profile_id [idw_header.getrow()]
				ls_filter = "profile_id = "  + string (ll_profile_id)
				idw_header.SetFilter(ls_filter)
				idw_header.Filter()
			END IF

// Kamendra - Commented for DevOps #42054 - Begin
//IF li_rc = gi_success AND  not ib_copy THEN  // Do not execute if record is in copy mode;  The next Update audit - done after ALL updating is complete.  
//     //DevOps 39168 info_gde 05/13/2022; SQL - Profile Tracking > Adding New Profile Record
//     ll_rowcount=idw_audit.rowcount()
//     for li_idx =1 to ll_rowcount
//         ll_audit_profile_id=idw_audit.object.profile_id[li_idx] 
//         if isNull(ll_audit_profile_id) or ll_audit_profile_id <= 0 then
//            idw_audit.object.profile_id[li_idx]=ll_profile_id 
//            idw_audit.SetItemStatus(li_idx,0,Primary!,datamodified!)
//          end if
//      next
//END IF
//
//    // Update audit - done after updating all.  
//IF li_rc = gi_success THEN
//	li_rc = idw_audit.Update(FALSE,FALSE) 
//		IF li_rc = gi_failure THEN
//			ls_msg = "Audit data."
//		END IF
//END IF
// Kamendra - Commented for DevOps #42054 - End

//DevOps 29260 info_gde 12/15/2021; Profile Tracking > Expiration Date Audits
//DevOps 18063 info_gde 07/06/2021; Profile Audit - Inserting duplicated audit records for Profile table
//DECLARE lproc_handle_dups PROCEDURE FOR dbo.sp_ProfileAudit_Duplicates
//		@profile_id = :ll_profile_id
//USING itr_share;
//
//EXECUTE lproc_handle_dups;
//
//If itr_share.SQLCode < 0 Then
//   // MessageBox( "Error Calling lproc_handle_dups", &
//   // itr_share.SQLErrText, StopSign!)
//	CLOSE lproc_handle_dups;
//    ROLLBACK USING itr_share;
//    Return
//End If

//FETCH lproc_handle_dups INTO :li_cVetValue;
//messagebox("",li_cVetValue)

//CLOSE lproc_handle_dups;
//COMMIT USING itr_share;

ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020; Constituent Tab - First Line Wiping Value
ib_refresh_constituent=FALSE //DevOps 18322 info_gde 01/14/2021; EQAI-Compare Profile is not pulling over constituents correctly
is_profile_creation='' //DevOps 16737 info_gde 02/19/2021; PROD-EQAI-Maintenance-Profile Tracking-Audit
ib_profile_creation=FALSE
ib_new_record=FALSE
ib_copy=FALSE
SetPointer(Arrow!)
end event

event ue_first();IF NOT ib_can_navigate THEN RETURN

IF wf_check_changes() = 1 THEN
	idw_active.ScrollToRow(0)
	// SK 12/7/2012
	wf_set_access()
	
	// also clear out ids_form_wcr and ids_scan_wcr
	IF Isvalid(ids_form_wcr) THEN ids_form_wcr.reset()
	IF Isvalid(ids_scan_wcr) THEN ids_scan_wcr.reset()
END IF
end event

event ue_goto();string	ls_record

IF NOT ib_can_navigate THEN RETURN

// Get the record
Open(w_popup_goto)
ls_record = Message.StringParm
IF NOT IsNull(ls_record) THEN
	IF IsNumber(ls_record) THEN
		IF wf_check_changes() = 1 THEN
			idw_active.ScrollToRow(Long(ls_record))
			//12/07/2012 SK
			wf_set_access()
		END IF
	END IF
END IF
end event

event ue_last();IF NOT ib_can_navigate THEN RETURN

IF wf_check_changes() = 1 THEN
	idw_active.ScrollToRow(idw_active.RowCount())
	// SK 12/7/2012
	wf_set_access()
	// also clear out ids_form_wcr and ids_scan_wcr
	IF Isvalid(ids_form_wcr) THEN ids_form_wcr.reset()
	IF Isvalid(ids_scan_wcr) THEN ids_scan_wcr.reset()
END IF
end event

event ue_next();IF NOT ib_can_navigate THEN RETURN
// MPM - 11/30/2020 - DevOps 18101 - We no longer want to insert a blank composition row if there aren't any
//ib_comp_insert_row = TRUE

IF wf_check_changes() = 1 THEN
	IF (idw_active = idw_list_prices) OR (idw_active = idw_list) THEN
		idw_active.ScrollNextPage()
	ELSE
		idw_active.ScrollNextRow()
		// anitha
//	   IF ib_comp_insert_row = True and idw_composition.GetRow () <= 0 THEN 
//		   idw_composition.InsertRow (0) 
//		   ib_comp_insert_row = FALSE
//	   END IF
	END IF
	// sk 12072012 
	wf_set_access()
	// also clear out ids_form_wcr and ids_scan_wcr
	IF Isvalid(ids_form_wcr) THEN ids_form_wcr.reset()
	IF Isvalid(ids_scan_wcr) THEN ids_scan_wcr.reset()
END IF
end event

event ue_previous();IF NOT ib_can_navigate THEN RETURN

IF wf_check_changes() = 1 THEN
	IF (idw_active = idw_list_prices) OR (idw_active = idw_list) THEN
		idw_active.ScrollPriorPage()
	ELSE
		idw_active.ScrollPriorRow()
	END IF
	// sk 12/07/2012
	wf_set_access()
	// also clear out ids_form_wcr and ids_scan_wcr
	IF Isvalid(ids_form_wcr) THEN ids_form_wcr.reset()
	IF Isvalid(ids_scan_wcr) THEN ids_scan_wcr.reset()
END IF
end event

event ue_sort();string ls_null

IF NOT ib_can_sort THEN RETURN

SetNull(ls_null)
IF idw_active <> idw_header AND idw_active <> idw_select THEN
	idw_header.SetSort(ls_null)
	idw_header.Sort()
	idw_header.Retrieve()
	// DevOps 17204 - Blocking Issue Fix. fhc.8/29/20
	Commit using itr_share;
	
	idw_header.TriggerEvent(RowFocusChanged!)
END IF

//IF idw_active <> idw_header AND idw_active <> idw_select THEN
//	idw_active.SetSort(ls_null)
//	idw_active.Sort()
//END IF
end event

event ue_wcr_help();//IF ib_wcr THEN
//	iuo_wcr_form.TriggerEvent("ue_help")
//ELSE
//	MessageBox("WCR Help", "You must open a WCR to open the Resource Guide.")
//END IF
end event

event ue_wcr_validate();// Check access
//DevOps 17870 info_gde 11/09/2020; Remove 'Assign Waste Profile Form' from Production
//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
	MessageBox(gs_app_name+": Validate", "You do not have access to Waste Profile Form Validate.", Exclamation!)
	RETURN
//END IF

//IF ib_wcr THEN
//	iuo_wcr_form.TriggerEvent("ue_validate")
//ELSE
//	MessageBox("WCR Validate", "You must open a WCR to validate it.")
//END IF



// rb 06/12/2012 
if wf_validate_wcr () = gi_failure then
	MessageBox ("Validation", "Validation failed:~r~n~r~n" + is_msg_validate_wcr)
else
	MessageBox ("Validation", "Validation was successful!")
end if


end event

event ue_work_in_process();// The purpose of this event is to present Profile choices for the user
//DevOps #14709 info_gde 03/23/2020; Add New Profile - Section A. (Add New Generator)
integer	li_idx, li_return, li_pos
long		ll_profile_id, ll_rowcount, ll_row, ll_row_find, ll_row_header
string	ls_current_pg,ls_where, ls_sql_view, ls_tab_text, ls_tab_type, ls_tracking_EQ_contact_name, ls_find,ls_tracking_status
datetime ld_received_date, ldt_today
str_pick	lstr
datastore lds_tabs

ldt_today = DateTime (Today(), Now ()) 

// Check for changes
IF wf_check_changes() < 0 THEN RETURN
	
// Setup for quick select
lstr.s_window_title			= "Profile Work In Process"
lstr.source_window= 'Profile Work In Process' 
lstr.b_Multiline = TRUE
tab_1.tabpage_view.tab_2.SelectTab(1) //DevOps 16737 info_gde 02/19/2021; PROD-EQAI-Maintenance-Profile Tracking-Audit
tab_1.tabpage_view.tab_2.tabpage_detail.SetFocus()

lstr.i_window_width			=  5500 //4500 //DevOps 15335 info_gde 06/02/2020; Profile Waste Type pop up too narrow = 4500 //0
lstr.i_dataobject_width		= 5700//4700 //DevOps 15335 info_gde 06/02/2020; Profile Waste Type pop up too narrow = 4500 //0
lstr.b_multipick				= FALSE //DevOps 15335 info_gde 06/02/2020; Profile Waste Type pop up too narrow = 4500 //0 FALSE
lstr.to_transaction			= itr_share
lstr.i_return_column_count	= 1
li_idx = 0

// Put this user's work first
lds_tabs = CREATE DATASTORE
lds_tabs.DataObject = "d_profile_wip_tabs"
lds_tabs.SetTransObject(itr_share)

ll_rowcount = lds_tabs.Retrieve()
IF ll_rowcount > 0 THEN
	//sagar 29643
	IF POS(gs_user_name,"'") > 0 THEN
		li_pos = POS(gs_user_name,"'")
	END IF 
	IF li_pos > 0 THEN
		ls_find = "tab_text = ~"" + Left(gs_user_name, li_pos -1 ) + "~'" + Right ( gs_user_name, Len(gs_user_name) - li_pos ) + "~""
	ELSE
		ls_find = "tab_text = '" + gs_user_name + "'"
	END IF
	ll_row_find = lds_tabs.Find(ls_find, 1, lds_tabs.RowCount() + 1)
	IF ll_row_find > 0 THEN
		li_idx++
		ls_tab_text = lds_tabs.Object.tab_text[ll_row_find]
		ls_tab_type = lds_tabs.Object.tab_type[ll_row_find]
		lstr.s_tab_title[li_idx]		= ls_tab_text
		lstr.i_tabpage_type[li_idx]	= 1
		lstr.s_dataobject[li_idx]		= "d_quick_select_profile_tracking"
		// MPM - 5/3/2021 - DevOps 19118 - Corrected what appears in the user's tab
//		lstr.s_where[li_idx] = "ProfileTracking.eq_contact = '" + gs_user_id +"' AND Unconfirmed.unconfirmed_approval_count > 0"
		lstr.s_where[li_idx] = "ProfileTracking.eq_contact = '" + gs_user_id +"'"
		// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
//		lstr.s_where[li_idx]				= "((Profile.curr_status_code IN ('P', 'H')) OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) " &
//			+ " AND (ProfileTracking.eq_contact = '" + gs_user_id +"')"
		
//			+ " AND ( ProfileTracking.Tracking_Status<>'COMP' OR (ProfileTracking.Tracking_Status='COMP' AND (ProfileTracking.EQ_contact is NOT null OR ProfileTracking.EQ_contact<>'') )) AND (ProfileTracking.eq_contact = '" + gs_user_id +"')"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
//			+ "' OR Profile.eq_contact = '" + gs_user_id + "')" commented out per Gemini 12787

		lstr.s_retrieve_by[li_idx]		= ""
		lstr.s_new_reference[li_idx]	= ""
	END IF
END IF
//+ " AND Type2.description<>'Complete' AND (ProfileTracking.eq_contact = '" + gs_user_id +"')"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
//	DevOps 19118 info_gde 02/12/2021; Profile Tracking Logic Update		

// Urgent 
li_idx++
lstr.s_tab_title[li_idx]		= "Urgent"
lstr.i_tabpage_type[li_idx]	= 1
lstr.s_dataobject[li_idx]		= "d_quick_select_profile"
// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
//lstr.s_where[li_idx]			= "Profile.curr_status_code IN ('P', 'H') AND IsNull(Profile.urgent_flag, 'F') = 'T'"
lstr.s_where[li_idx]				= "((Profile.curr_status_code IN ('P', 'H')) OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND IsNull(Profile.urgent_flag, 'F') = 'T'"
lstr.s_retrieve_by[li_idx]		= ""
lstr.s_new_reference[li_idx]	= ""
//= "((Profile.curr_status_code IN ('P', 'H')) OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND Type2.description<>'Complete' AND IsNull(Profile.urgent_flag, 'F') = 'T'"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
//DevOps 19118 info_gde 02/12/2021; Profile Tracking Logic Update

// Pending
li_idx++
lstr.s_tab_title[li_idx]		= "Pending"
lstr.i_tabpage_type[li_idx]	= 1
lstr.s_dataobject[li_idx]		= "d_quick_select_profile"
// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
//lstr.s_where[li_idx]				= "Profile.curr_status_code = 'P' AND IsNull(Profile.urgent_flag, 'F') = 'F'"
//lstr.s_where[li_idx]				= "((Profile.curr_status_code = 'P') OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND ( ProfileTracking.Tracking_Status<>'COMP' OR (ProfileTracking.Tracking_Status='COMP' AND (ProfileTracking.EQ_contact is NOT null OR ProfileTracking.EQ_contact<>'') )) AND (ProfileTracking.EQ_contact is NOT null OR ProfileTracking.EQ_contact<>'') AND IsNull(Profile.urgent_flag, 'F') = 'F'"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
lstr.s_where[li_idx]				= "((Profile.curr_status_code = 'P') OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND IsNull(Profile.urgent_flag, 'F') = 'F'"
lstr.s_retrieve_by[li_idx]		= ""
lstr.s_new_reference[li_idx]	= ""
//"((Profile.curr_status_code = 'P') OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND Type2.description<>'Complete' AND IsNull(Profile.urgent_flag, 'F') = 'F'"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
//DevOps 19118 info_gde 02/12/2021; Profile Tracking Logic Update

// On Hold
li_idx++
lstr.s_tab_title[li_idx]		= "On Hold"
lstr.i_tabpage_type[li_idx]	= 1
lstr.s_dataobject[li_idx]		= "d_quick_select_profile"
// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
//lstr.s_where[li_idx]				= "Profile.curr_status_code = 'H' AND ( ProfileTracking.Tracking_Status<>'COMP' OR (ProfileTracking.Tracking_Status='COMP' AND (ProfileTracking.EQ_contact is NOT null OR ProfileTracking.EQ_contact<>'') )) AND IsNull(Profile.urgent_flag, 'F') = 'F'"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
lstr.s_where[li_idx]				= "Profile.curr_status_code = 'H' AND IsNull(Profile.urgent_flag, 'F') = 'F'"
lstr.s_retrieve_by[li_idx]		= ""
lstr.s_new_reference[li_idx]	= ""
//"Profile.curr_status_code = 'H' AND Type2.description<>'Complete' AND IsNull(Profile.urgent_flag, 'F') = 'F'"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
//DevOps 19118 info_gde 02/12/2021; Profile Tracking Logic Update

// Sample Queue
li_idx++
lstr.s_tab_title[li_idx]		= "Lab"
lstr.i_tabpage_type[li_idx]	= 1
lstr.s_dataobject[li_idx]		= "d_quick_select_profile_tracking"
//lstr.s_where[li_idx]				= "Profile.curr_status_code IN ('P', 'H') AND ProfileTracking.tracking_status = 'LAB' "
// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
//lstr.s_where[li_idx]				= "((Profile.curr_status_code = 'P') OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND ( ProfileTracking.Tracking_Status<>'COMP' OR (ProfileTracking.Tracking_Status='COMP' AND (ProfileTracking.EQ_contact is NOT null OR ProfileTracking.EQ_contact<>'') )) AND (ProfileTracking.EQ_contact is NOT null OR ProfileTracking.EQ_contact<>'') AND ProfileTracking.tracking_status = 'LAB' "  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
lstr.s_where[li_idx]				= "((Profile.curr_status_code = 'P') OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND ProfileTracking.tracking_status = 'LAB' "
lstr.s_retrieve_by[li_idx]		= ""
lstr.s_new_reference[li_idx]	= ""
//"((Profile.curr_status_code = 'P') OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) AND Type2.description<>'Complete' AND ProfileTracking.tracking_status = 'LAB' "  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
//DevOps 19118 info_gde 02/12/2021; Profile Tracking Logic Update

// Get the profile tabs for tracking department and EQ associates
FOR ll_row = 1 TO ll_rowcount
	IF ll_row = ll_row_find THEN
		// Don't add a second tab for this user
		CONTINUE
	ELSE
		ls_tab_text = lds_tabs.Object.tab_text[ll_row]
		ls_tab_type = lds_tabs.Object.tab_type[ll_row]
		IF ls_tab_type = "D" THEN
			li_idx++
			lstr.s_tab_title[li_idx]		= ls_tab_text

			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_retrieve_by[li_idx]		= ""
			lstr.s_new_reference[li_idx]	= ""
			lstr.s_dataobject[li_idx]		= "d_quick_select_profile_department"
			// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
//			lstr.s_where[li_idx]				= "((Profile.curr_status_code IN ('P', 'H')) OR (Profile.curr_status_code = 'A' AND ( ProfileTracking.Tracking_Status<>'COMP' OR (ProfileTracking.Tracking_Status='COMP' AND (ProfileTracking.EQ_contact is NOT null OR ProfileTracking.EQ_contact<>'') )) AND (ProfileTracking.EQ_contact is not null AND ProfileTracking.EQ_contact<>'') AND ISNULL(ProfileTracking.EQ_contact, '') > '')) " &
//													+ " AND Department.department_description = '" + ls_tab_text + "'"  //DevOps 18077 info_gde 01/25/2021; Profile Tracking Queue Issues 
			lstr.s_where[li_idx]				= "((Profile.curr_status_code IN ('P', 'H')) OR (Profile.curr_status_code = 'A' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) " &
													+ " AND Department.department_description = '" + ls_tab_text + "'"
		END IF
	END IF
NEXT
//"((Profile.curr_status_code IN ('P', 'H')) OR (Profile.curr_status_code = 'A' AND Type2.description<>'Complete' AND ISNULL(ProfileTracking.EQ_contact, '') > '')) " &
//DevOps 19118 info_gde 02/12/2021; Profile Tracking Logic Update

//// WCR - THIS IS JUST A PLACE HOLDER - REPLACE WITH REAL CODE
//li_idx++
//lstr.s_tab_title[li_idx]		= "WCR"
//lstr.i_tabpage_type[li_idx]	= 1
//lstr.s_dataobject[li_idx]		= "d_quick_select_profile"
//lstr.s_where[li_idx]				= "Profile.curr_status_code IN ('Z')"
//lstr.s_retrieve_by[li_idx]		= ""
//lstr.s_new_reference[li_idx]	= ""
lstr.i_tab_count = li_idx
DESTROY lds_tabs;

OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	FOR li_idx = 1 to lstr.i_return_record_count
		ib_new_record = TRUE
		// Make sure the view tab is active
		IF ii_clicked_tab1 <> ii_tabpage_view THEN
			tab_1.SelectedTab = ii_tabpage_view
		END IF
	
		ll_profile_id = Long(lstr.return1[li_idx])
		// Retrieve it
		ls_sql_view = Upper(is_select_header)
		ls_sql_view = ls_sql_view + " AND Profile.profile_id = " + String(ll_profile_id)
		idw_header.Modify('DataWindow.Table.Select="' + ls_sql_view + '"')
		SetPointer(HourGlass!)
		SetMicroHelp("Retrieving profile ...")
		li_return = idw_header.ShareData(idw_detail)
		li_return = idw_header.ShareData(idw_comment)
		li_return = idw_header.ShareData(idw_shipping)
		li_return = idw_header.Sharedata(idw_composition_epa)
		li_return = idw_header.Sharedata(idw_waste_other)
		
		ll_rowcount = idw_header.Retrieve()
		// DevOps 17204 - Blocking Issue Fix. fhc.8/29/20
			Commit using itr_share;
		
		// It is IMPORTANT to share data with the Lists AFTER setting the user code
		// So the access can control the price display per company
		li_return = idw_header.ShareData(idw_list_prices)
		li_return = idw_header.ShareData(idw_list)
	
		IF ll_rowcount > 0 THEN
			ib_has_retrieved = TRUE
			ib_can_quote = TRUE
			idw_header.TriggerEvent(RowFocusChanged!)
			
			ls_tracking_status = idw_header.Object.tracking_type[idw_header.getrow()]
			IF ls_tracking_status = 'A' THEN  
		      ib_form_email_send = TRUE
		    END IF
			wf_set_access()
		ELSE
			ib_can_quote = FALSE
		END IF
		ib_new_record = FALSE
	NEXT
	//DevOps #14709 info_gde 03/23/2020 - start
	wf_modify_gen_addr()
	//DevOps #14709 info_gde 03/23/2020 - end
END IF

//IF idw_detail.GetRow () > 0 THEN 
//    ld_received_date = idw_detail.Object.received_date[idw_detail.GetRow()] 
//    IF IsNull (ld_received_date ) THEN 
//	   idw_detail.Object.received_date[idw_detail.GetRow()] = ldt_today
//	   idw_detail.SetItemStatus(idw_detail.GetRow(), 0, Primary!, notmodified!)
//	END IF
//END IF


SetMicroHelp("Ready")
end event

event ue_cancel();// The purpose of this function is to cancel all profile changes
boolean	lb_changed
integer	li_rc, li_response, li_idx
long		ll_row, ll_match, ll_rowcount
long  	ll_generator_id, ll_customer_id, ll_profile_id, ll_contact_id
string	ls_find, ls_text
datawindow ldw
dwItemStatus ldwItemStatus

IF tab_1.SelectedTab = ii_tabpage_view THEN

	// Check 'can' status
	IF ib_can_cancel = FALSE THEN
		RETURN
	ELSEIF ib_access_cancel = FALSE THEN 
		SetMicroHelp("No access to Cancel")
		RETURN
	END IF
	
	ib_user_cancelled = TRUE
	wf_AcceptText()

	// If this is a new record, discard everything and start over
	IF ib_new_record THEN
		wf_reset()
	ELSE	
		FOR li_idx = 2 TO 12
			CHOOSE CASE li_idx
				CASE 2
					ldw = idw_technical
					lb_changed = ib_changed_technical			
				CASE 3
					ldw = idw_tracking
					lb_changed = ib_changed_tracking
				CASE 4
					ldw = idw_waste
					lb_changed = ib_changed_waste_code
				CASE 5
					ldw = idw_const
					lb_changed = ib_changed_const
				CASE 6
					ldw = idw_quoteheader
					lb_changed = ib_changed_quote
				CASE 7
					ldw = idw_approval
					lb_changed = ib_changed_approval
				CASE 8
					ldw = idw_header
					lb_changed = ib_changed_profile
				CASE 9
					ldw = idw_audit
					lb_changed = FALSE
				CASE 10
					ldw = idw_lab
					lb_changed = ib_changed_lab		
				CASE 11
					ldw = idw_composition
					lb_changed = ib_changed_comp
				CASE 12
					ldw = idw_ldr_subcategory
					lb_changed = ib_changed_ldr_subcat
				CASE ELSE
			END CHOOSE
			
			// Cancel changes
			IF lb_changed = TRUE OR ldw.ModifiedCount() > 0 THEN
				ldw.SetRedraw(False)
				ll_rowcount = ldw.RowCount()	
				FOR ll_row = ll_rowcount TO 1 STEP -1		
					ldwItemStatus = ldw.GetItemStatus(ll_row, 0, Primary!)
					IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
						ldw.RowsDiscard(ll_row, ll_row, Primary!)
					ELSE
						wf_cancel_edit(ldw, ll_row)
					END IF
				NEXT
				ldw.SetRedraw(True)
			END IF
		NEXT

		// rb - deleted rows //idw_recipe
		if (ldw = idw_rules or ldw = idw_category or ldw = idw_recipe_update ) and ldw.Deletedcount () > 0 then
			ldw.RowsMove (1, ldw.DeletedCount(), Delete!, ldw, 9999, Primary!)
			ldw.GroupCalc()
			ldw.Sort()
		end if
    		
		// Cancel price changes
		// retrieve will cancel updates and remove any deleted tabs
		ib_price_bund_ret_first_inst = FALSE   //Devops 21596 & 58318-Added By Venu for lazy load implementation.
		ii_pre_sel_tab_newindex=0 //Devops 21596 & 58318-Added By Venu for lazy load implementation.
		wf_price("RETRIEVE", 0)
		
		iudw_document.uf_reset()
		// Cancel Note changes
		ll_row = idw_header.GetRow()
	
		IF ll_row > 0 THEN
			ll_profile_id = idw_header.object.profile_id[ll_row]
			ll_customer_id = idw_header.object.customer_id[ll_row]
			ll_generator_id = idw_header.object.generator_id[ll_row]
			ll_contact_id = idw_header.object.contact_id[ll_row]
			itp_note.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, ll_contact_id, TRUE)
			if ib_retrieved_documents then
				iudw_document.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, TRUE)
			end if
		ELSE
			itp_note.uf_reset()
			wf_reset_documents()
			wf_reset_forms()
		END IF
	END IF
	
	// Reset control variables
	wf_reset_change_flags()
	ib_new_record = FALSE
	ib_user_cancelled = FALSE
	ib_update_failed = FALSE
	
	ib_can_update = TRUE
	ib_can_new = TRUE
	ib_can_navigate = TRUE
	
	ll_rowcount = idw_site_type.Rowcount()
	If ll_rowcount > 0 Then
		ls_text = String(ll_rowcount) + " Type(s).."
	Else
		ls_text = 'All Types..'
	End If
	idw_header.object.b_types.text = ls_text
	
// agc 10/14/19 temp comment out
//	//DevOps 10373
//	ll_rowcount = idw_generator_locations.Rowcount()
//	If ll_rowcount > 0 Then
//		ls_text = String(ll_rowcount) + " Loc(s).."
//	Else
//		ls_text = 'All Locs..'
//	End If
//	idw_header.object.b_locations.text = ls_text
	is_profile_creation='' //DevOps 16737
	ib_profile_creation=FALSE
END IF
end event

event ue_copy();boolean	lb_copy, lb_copy_treatment=FALSE, lb_copy_waste, lb_copy_site_types,ib_waste_copy
datetime	ldt_today, ldt_null
int		li_rc, li_idx, li_count, li_profit_ctr_id, li_company_id, li_copy, i
long		ll_row, ll_row_header, ll_row_header_orig, ll_rowcount, ll_row_copy, ll_row_form, ll_null, ll_row_wcr, ll_profile_id
long		ll_row_find, ll_row_quote_orig, ll_wc_count, ll_treatment_id
string	ls_approval_code, ls_null, ls_copy_section, ls_facility, ls_company, ls_profit_ctr, ls_filter,ls_labpack_template_flag
string	ls_find, ls_message, ls_text, ls_status, ls_treatment_treatment_desc,ls_waste_code_state,ls_texas_state_waste_code
string ls_msg,ls_approval_status
str_pass	lstr_pass
str_wcr_params lstr_wcr_params
boolean lb_copy_locations //DevOps 10373

// Check 'can' state
IF ib_can_copy = FALSE THEN RETURN

// Save before copy
IF wf_check_changes() < 0 THEN RETURN

// This feature makes a copy of the current profile
ll_row_header_orig = idw_header.GetRow()
IF ll_row_header_orig <= 0 THEN RETURN

SetNull(ls_null)
SetNull(ll_null)
SetNull(ldt_null)
SetPointer(HourGlass!)
ldt_today = DateTime(Today(), Now())
li_rc = gi_success

// Flip to the Detail tab to hide the copying of records
IF tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_price THEN
	tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_detail
END IF

// Get the sections the user wants to copy
li_count = 1
lstr_pass.s[li_count] = "Profile (Header, Detail, Comments, Shipping)"
li_count++
lstr_pass.s[li_count] = "Treatment"
li_count++
lstr_pass.s[li_count] = "Project Info"
li_count++
lstr_pass.s[li_count] = "Technical and Lab Sample"
li_count++
lstr_pass.s[li_count] = "Waste Codes"
li_count++
lstr_pass.s[li_count] = "Constituents"
li_count++
lstr_pass.s[li_count] = "Composition"
li_count++
lstr_pass.s[li_count] = "Profile ldr Sub"  //DevOps 18074 info_gde 12/07/2020; Profile Edits Occuring Without User Manipulation
//li_count++
//lstr_pass.s[li_count] = "Documents"



If idw_site_type.RowCount() > 0 Then
	li_count++
	lstr_pass.s[li_count] = "Generator Site Types"
End If

// agc 10/14/19 temp comment out
////DevOps 10373
//If idw_generator_locations.RowCount() > 0 Then
//	li_count++
//	lstr_pass.s[li_count] = "Generator Locations"
//End If

//li_count++
//lstr_pass.s[li_count] = "WCR (New Form)"

If idw_recipe.RowCount() > 0 Then
	li_count++
	lstr_pass.s[li_count] = "Recipe"
End If

//If idw_approval.RowCount() > 0 Then
//	li_count++
//	lstr_pass.s[li_count] = "Import Waste"
//End If

FOR ll_row = 1 TO idw_approval.RowCount()
	ls_approval_code = idw_approval.Object.approval_code[ll_row]
	li_company_id = idw_approval.Object.company_id[ll_row]
	li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row]
	li_count++
	// Devops 58155-Comented/modified By Venu for profile copy popup font color change for inactive approver (Devops 21596 & 58318 - Lazy load) --Start
	//lstr_pass.s[li_count] = String(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00") + " Approval and Pricing for " + ls_approval_code
	ls_approval_status = idw_approval.Object.status[ll_row]
	lstr_pass.s[li_count] = String(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00") + " Approval and Pricing for " + ls_approval_code + " Status-" + ls_approval_status	
	// Devops 58155-Comented/modified By Venu for profile copy popup font color change for inactive approver (Devops 21596 & 58318 - Lazy load) --End	
NEXT

// Initialize all checkboxes to 0
FOR li_idx = 1 TO li_count
	lstr_pass.i[li_idx] = 0
NEXT
lstr_pass.i_idx = li_count

// Set Title
ll_profile_id = idw_header.Object.profile_id[ll_row_header_orig]
il_copy_profile_id = ll_profile_id //DevOps 16737

//Devops:21586 - Copy -
ls_labpack_template_flag = idw_header.Object.labpack_template_flag[ll_row_header_orig]

lstr_pass.s_win_title = "Copy Profile " + string(ll_profile_id)

OpenWithParm(w_popup_copy, lstr_pass)
lstr_pass = Message.PowerObjectParm
IF NOT IsValid(lstr_pass) THEN
	// User cancelled copy
	RETURN
ELSE
	// Copy choices
	li_rc = gi_success
	
	// Check to see if anything is being copied
	lb_copy = FALSE
	FOR li_idx = 1 TO li_count
		li_copy = lstr_pass.i[li_idx]
		IF li_copy = 1 THEN
			lb_copy = TRUE
			EXIT
		END IF
	NEXT
	IF lb_copy = FALSE THEN
		MessageBox(gs_app_name + ":  Copy", "Nothing selected to Copy!", Exclamation!)
		RETURN
	ELSE
		// Prevent everything that happens with a RowFocusChange
		ib_copy = TRUE
		ib_no_audit = False
		//DevOps 12102 start
		idw_profile_radioactive_supplement_page_1.Reset()
		idw_profile_radioactive_supplement_page_2.Reset()
		idw_profile_radioactive_supplement_page_3.Reset()		
		idw_profile_radioactive_supplement_3sub.Reset()	
		idw_profile_radioactive_supplement_page_1.InsertRow(0)
		//DevOps 12102 end
		
	END IF
	
	ii_pre_sel_tab_newindex=0 //Devops 21596 & 58318-Added By Venu for lazy load implementation. 
	ii_pre_sel_tab_index=0 //Devops 21596 & 58318-Added By Venu for lazy load implementation.
	
	FOR li_idx = 1 TO li_count
		// Stop copying if anything failed
		IF li_rc = gi_failure THEN EXIT
		
		li_copy = lstr_pass.i[li_idx]
		ls_copy_section = lstr_pass.s[li_idx]
		
		// Profile
		IF li_rc = gi_success AND ls_copy_section = "Profile (Header, Detail, Comments, Shipping)" THEN
			
			ll_rowcount = idw_header.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, insert new
					ll_row_header = idw_header.InsertRow(0)
					// SK 12/20/2012 Insert new
					idw_wcr_display_3.Reset()
//					idw_wcr_display_4.Reset()
					idw_shipping_unit.Reset()
					idw_profile_gen_contact_form.Reset()
					//idw_shipping_unit.InsertRow(0)
					idw_wcr_display_3.InsertRow(0)
//					idw_wcr_display_4.InsertRow(0)
					idw_profile_gen_contact_form.InsertRow(0)
					li_rc = wf_init_header(ll_row_header)
					IF li_rc = gi_failure THEN
						ls_message = "Copying new Profile Header failed."
					END IF
				ELSE
					ll_row_header = ll_rowcount + 1
					li_rc = idw_header.RowsCopy(ll_row_header_orig, ll_row_header_orig, Primary!, idw_header, ll_row_header, Primary!)
					IF li_rc = 1 THEN

						idw_header.Object.profile_id[ll_row_header] = ll_null
						idw_header.Object.curr_status_code[ll_row_header] = "P"
						idw_header.Object.tracking_type[ll_row_header] = "NEW"
						idw_header.Object.quote_id[ll_row_header] = ll_null
						idw_header.Object.ap_start_date[ll_row_header] = ldt_today
						idw_header.Object.ap_expiration_date[ll_row_header] = RelativeDate(Date(ldt_today), 365)
						idw_header.Object.document_update_status[ll_row_header] = "A"
						idw_header.Object.max_load_start_date[ll_row_header] = ldt_today
						idw_header.Object.form_id_wcr[ll_row_header] = ll_null
						idw_header.Object.received_date[ll_row_header] = ldt_today
						tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"
						//DevOps 17812 info_gde 11/05/2020; Copy Profile - Do Not Copy 'exceed_ldr_standards'
						idw_header.Object.exceed_ldr_standards[ll_row_header] = ls_null
						
						idw_header.Object.added_by[ll_row_header] = ls_null
						idw_header.Object.date_added[ll_row_header] = ldt_null
						idw_header.Object.modified_by[ll_row_header] = ls_null
						idw_header.Object.date_modified[ll_row_header] = ldt_null
						idw_header.Object.date_approved[ll_row_header] = ldt_null
						//COR2 JXM 11461 07/17/2019 Null out the Signature date during Profle Copy Process
						idw_header.Object.wcr_sign_date[ll_row_header] = ldt_null
						// MPM - 5/13/2021 - DevOps 20750 - Null out inactive_flag, expired_not_received_date
						idw_header.Object.expired_not_received_date[ll_row_header] = ldt_null
						idw_header.Object.inactive_flag[ll_row_header] = ls_null
						//DevOps:20992 - When copy labpack profile, don't copy labpack_template_flag
						idw_header.Object.labpack_template_flag[ll_row_header] = ls_null
						idw_header.Object.inactive_flag[ll_row_header] = "F"  //DevOps:21238 - AM - When copy profile set inactive_flag as F to new profile
					
					//Devops:21586 - Copy - 
						if ls_labpack_template_flag = 'T' then
						   idw_header.Object.created_from_template_profile_id[ll_row_header] = ll_profile_id
					    else
						   idw_header.Object.created_from_template_profile_id[ll_row_header] = ll_null
					    end if
						// SK 12/19/2012 Corrected and placed here - Copy Shipping Units
						ll_rowcount = idw_shipping_unit.RowCount()
						
						// MPM - 3/1/2018
						IF ll_rowcount > 0 AND NOT(ll_rowcount = 1 AND idw_shipping_unit.GetItemStatus(1, 0, Primary!) = New!) THEN
							// Copy shipping units
							FOR ll_row = 1 TO ll_rowcount
								ll_row_copy = ll_rowcount + ll_row
								li_rc = idw_shipping_unit.RowsCopy(ll_row, ll_row, Primary!, idw_shipping_unit, ll_row_copy, Primary!)
								IF li_rc = 1 THEN
									idw_shipping_unit.Object.profile_id[ll_row_copy] = ll_null	
									idw_shipping_unit.Object.added_by[ll_row_copy] = ls_null
									idw_shipping_unit.Object.date_added[ll_row_copy] = ldt_null
									idw_shipping_unit.Object.modified_by[ll_row_copy] = ls_null
									idw_shipping_unit.Object.date_modified[ll_row_copy] = ldt_null
								END IF
							NEXT
						END IF
						// Discard the rows from the original lines
						idw_shipping_unit.RowsDiscard(1, ll_rowcount, Primary!)
						
						// SK 12/19/2012 Also copy Contacts
						ll_rowcount = idw_wcr_display_3.RowCount()
						IF ll_rowcount > 0 THEN
							// Copy Invoicing contact
							FOR ll_row = 1 TO ll_rowcount
								ll_row_copy = ll_rowcount + ll_row
								li_rc = idw_wcr_display_3.RowsCopy(ll_row, ll_row, Primary!, idw_wcr_display_3, ll_row_copy, Primary!)
								IF li_rc = 1 THEN
									idw_wcr_display_3.Object.profile_id[ll_row_copy] = ll_null	
									idw_wcr_display_3.Object.added_by[ll_row_copy] = ls_null
									idw_wcr_display_3.Object.date_added[ll_row_copy] = ldt_null
									idw_wcr_display_3.Object.modified_by[ll_row_copy] = ls_null
									idw_wcr_display_3.Object.date_modified[ll_row_copy] = ldt_null
								END IF
							NEXT
						END IF
						// Discard the rows from the original lines
						idw_wcr_display_3.RowsDiscard(1, ll_rowcount, Primary!)
						
//						ll_rowcount = idw_wcr_display_4.RowCount()
//						IF ll_rowcount > 0 THEN
//							// Copy Technical contact
//							FOR ll_row = 1 TO ll_rowcount
//								ll_row_copy = ll_rowcount + ll_row
//								li_rc = idw_wcr_display_4.RowsCopy(ll_row, ll_row, Primary!, idw_wcr_display_4, ll_row_copy, Primary!)
//								IF li_rc = 1 THEN
//									idw_wcr_display_4.Object.profile_id[ll_row_copy] = ll_null	
//									idw_wcr_display_4.Object.added_by[ll_row_copy] = ls_null
//									idw_wcr_display_4.Object.date_added[ll_row_copy] = ldt_null
//									idw_wcr_display_4.Object.modified_by[ll_row_copy] = ls_null
//									idw_wcr_display_4.Object.date_modified[ll_row_copy] = ldt_null
//								END IF
//							NEXT
//						END IF
//						// Discard the rows from the original lines
//						idw_wcr_display_4.RowsDiscard(1, ll_rowcount, Primary!)
						
						ll_rowcount = idw_profile_gen_contact_form.RowCount()
						IF ll_rowcount > 0 THEN
							// Copy Generator contact
							FOR ll_row = 1 TO ll_rowcount
								ll_row_copy = ll_rowcount + ll_row
								li_rc = idw_profile_gen_contact_form.RowsCopy(ll_row, ll_row, Primary!, idw_profile_gen_contact_form, ll_row_copy, Primary!)
								IF li_rc = 1 THEN
									idw_profile_gen_contact_form.Object.profile_id[ll_row_copy] = ll_null	
									idw_profile_gen_contact_form.Object.added_by[ll_row_copy] = ls_null
									idw_profile_gen_contact_form.Object.date_added[ll_row_copy] = ldt_null
									idw_profile_gen_contact_form.Object.modified_by[ll_row_copy] = ls_null
									idw_profile_gen_contact_form.Object.date_modified[ll_row_copy] = ldt_null
								END IF
							NEXT
						END IF
						// Discard the rows from the original lines
						idw_profile_gen_contact_form.RowsDiscard(1, ll_rowcount, Primary!)
						
						CONTINUE
					END IF
				END IF
			END IF
		END IF
		

		// Copy Generator Site Types
		IF li_rc = gi_success AND ls_copy_section = "Generator Site Types" THEN
			ll_rowcount = idw_site_type.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
					lb_copy_site_types = FALSE
				ELSE
					// Copy
					lb_copy_site_types = TRUE
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_site_type.RowsCopy(ll_row, ll_row, Primary!, idw_site_type, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							idw_site_type.Object.profile_id[ll_row_copy] = ll_null
							idw_site_type.Object.added_by[ll_row_copy] = ls_null
							idw_site_type.Object.date_added[ll_row_copy] = ldt_null
						END IF
					NEXT
				END IF
				
				// Discard the rows from the original lines
				idw_site_type.RowsDiscard(1, ll_rowcount, Primary!)
			END IF
			CONTINUE
		END IF
		
// agc 10/14/19 temp comment out
//		//DevOps 10373
//		// Copy Generator Locations
//		IF li_rc = gi_success AND ls_copy_section = "Generator Locations" THEN
//			ll_rowcount = idw_generator_locations.RowCount()
//			IF ll_rowcount > 0 THEN
//				IF li_copy = 0 THEN
//					// No copy, no records
//					lb_copy_locations = FALSE
//				ELSE
//					// Copy
//					lb_copy_locations = TRUE
//					FOR ll_row = 1 TO ll_rowcount
//						ll_row_copy = ll_rowcount + ll_row
//						li_rc = idw_generator_locations.RowsCopy(ll_row, ll_row, Primary!, idw_site_type, ll_row_copy, Primary!)
//						IF li_rc = 1 THEN
//							idw_generator_locations.Object.profile_id[ll_row_copy] = ll_null
//							idw_generator_locations.Object.added_by[ll_row_copy] = ls_null
//							idw_generator_locations.Object.date_added[ll_row_copy] = ldt_null
//						END IF
//					NEXT
//				END IF
//				
//				// Discard the rows from the original lines
//				idw_generator_locations.RowsDiscard(1, ll_rowcount, Primary!)
//			END IF
//			CONTINUE
//		END IF

    // Copy dw_recipe
		IF li_rc = gi_success AND ls_copy_section = "Recipe" THEN
			ll_rowcount = idw_recipe_update.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
					lb_copy_site_types = FALSE
				ELSE
					// Copy
					lb_copy_site_types = TRUE
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_recipe_update.RowsCopy(ll_row, ll_row, Primary!, idw_recipe_update, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							idw_recipe_update.Object.profile_id[ll_row_copy] = ll_null
							idw_recipe_update.Object.added_by[ll_row_copy] = ls_null
							idw_recipe_update.Object.date_added[ll_row_copy] = ldt_null
						END IF
					NEXT
				END IF
				
				// Discard the rows from the original lines
				idw_recipe_update.RowsDiscard(1, ll_rowcount, Primary!)
			END IF
			CONTINUE
		END IF


		// Copy Quote Header
		IF li_rc = gi_success AND ls_copy_section = "Project Info" THEN
			ll_row_quote_orig = idw_quoteheader.GetRow()
			ll_rowcount = idw_quoteheader.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, insert new, insert a new record
					ll_row_copy = idw_quoteheader.InsertRow(0)
					li_rc = wf_init_quoteheader(ll_row_copy)
					IF li_rc = gi_failure THEN
						ls_message = "Copying new Quote Header failed."
					END IF
				ELSE
					// Copy
					ll_row_copy = ll_rowcount + 1
					li_rc = idw_quoteheader.RowsCopy(ll_row_quote_orig, ll_row_quote_orig, Primary!, idw_quoteheader, ll_row_copy, Primary!)
					IF li_rc = 1 THEN
						idw_quoteheader.Object.profile_id[ll_row_copy] = ll_null
						idw_quoteheader.Object.quote_id[ll_row_copy] = ll_null
						idw_quoteheader.Object.quote_revision[ll_row_copy] = ll_null
						idw_quoteheader.Object.start_date[ll_row_copy] = ldt_today
						idw_quoteheader.Object.curr_status_code[ll_row_copy] = "A"
						idw_quoteheader.Object.print_confirm_flag[ll_row_copy] = "F"
						idw_quoteheader.Object.print_gen_flag[ll_row_copy] = "F"
						idw_quoteheader.Object.fax_flag[ll_row_copy] = "F"
						idw_quoteheader.Object.date_added[ll_row_copy] = ldt_null
						idw_quoteheader.Object.added_by[ll_row_copy] =  ls_null
						idw_quoteheader.Object.modified_by[ll_row_copy] = ls_null
						idw_quoteheader.Object.date_modified[ll_row_copy] = ldt_null
					END IF
				END IF
				// Discard the original QuoteHeader row
				idw_quoteheader.RowsDiscard(ll_row_quote_orig, ll_row_quote_orig, Primary!)
			END IF
			CONTINUE
		END IF

		// Copy Technical and Lab Sample
		IF li_rc = gi_success AND ls_copy_section = "Technical and Lab Sample" THEN
			// Technical
			ll_rowcount = idw_technical.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, insert new
					ll_row_copy = idw_technical.InsertRow(0)
					li_rc = wf_init_lab(ll_row_copy, 'A')
					IF li_rc = gi_failure THEN
						ls_message = "Copying new Technical record failed."
					END IF
				ELSE
					// Copy
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_technical.RowsCopy(ll_row, ll_row, Primary!, idw_technical, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							idw_technical.Object.profile_id[ll_row_copy] = ll_null
							idw_technical.Object.added_by[ll_row_copy] = ls_null
							idw_technical.Object.date_added[ll_row_copy] = ldt_null
							idw_technical.Object.modified_by[ll_row_copy] = ls_null   
							idw_technical.Object.date_modified[ll_row_copy] = ldt_null   
						END IF
					NEXT
				END IF
				
				// Discard the rows from the original lines
				idw_technical.RowsDiscard(1, ll_rowcount, Primary!)
			END IF

			// Copy Lab
			IF li_rc = gi_success THEN
				ll_rowcount = idw_lab.RowCount()
				IF ll_rowcount > 0 THEN
					IF li_copy = 0 THEN
						// No copy, insert new
						ll_row_copy = idw_lab.InsertRow(0)
						li_rc = wf_init_lab(ll_row_copy, 'L')
						IF li_rc = gi_failure THEN
							ls_message = "Copying new Lab record failed."
						END IF
					ELSE
						// Copy
						FOR ll_row = 1 TO ll_rowcount
							ll_row_copy = ll_rowcount + ll_row
							li_rc = idw_lab.RowsCopy(ll_row, ll_row, Primary!, idw_lab, ll_row_copy, Primary!)
							IF li_rc = 1 THEN
								idw_lab.Object.profile_id[ll_row_copy] = ll_null
								idw_lab.Object.added_by[ll_row_copy] = ls_null
								idw_lab.Object.date_added[ll_row_copy] = ldt_null
								idw_lab.Object.modified_by[ll_row_copy] = ls_null   
								idw_lab.Object.date_modified[ll_row_copy] = ldt_null   
							END IF
						NEXT
					END IF
					
					// Discard the rows from the original lines
					idw_lab.RowsDiscard(1, ll_rowcount, Primary!)
				END IF
			END IF
			CONTINUE
		END IF

		// Copy Waste
		IF li_rc = gi_success AND ls_copy_section = "Waste Codes" THEN
			ls_filter = "Upper(status) = 'A'"
			idw_waste_code_fed.SetFilter(ls_filter)
			idw_waste_code_fed.Filter()
			ll_rowcount = idw_waste_code_fed.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
					lb_copy_waste = FALSE
				ELSE
					lb_copy_waste = TRUE
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_waste_code_fed.RowsCopy(ll_row, ll_row, Primary!, idw_waste_code_fed, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							idw_waste_code_fed.Object.profile_id[ll_row_copy] = ll_null
							idw_waste_code_fed.Object.added_by[ll_row_copy] = ls_null
							idw_waste_code_fed.Object.date_added[ll_row_copy] = ldt_null
						END IF
					NEXT
				END IF
				// Discard the rows from the original lines
				idw_waste_code_fed.RowsDiscard(1, ll_rowcount, Primary!)
				idw_waste_code_fed.RowsDiscard(1, idw_waste_code_fed.FilteredCount(), Filter!)
				idw_waste_code_fed.SetFilter('')
				idw_waste_code_fed.Filter()
				
				//idw_waste_code_fed.RowsDiscard(1, ll_rowcount, Primary!)
			END IF
			
			ls_filter = "Upper(status) = 'A'"
			idw_waste_code_state.SetFilter(ls_filter)
			idw_waste_code_state.Filter()
			ll_rowcount = idw_waste_code_state.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
					lb_copy_waste = FALSE
				ELSE
					lb_copy_waste = TRUE
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_waste_code_state.RowsCopy(ll_row, ll_row, Primary!, idw_waste_code_state, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							ls_waste_code_state = idw_waste_code_state.Object.state[ll_row]
							IF ls_waste_code_state = 'TX' AND ll_row = 1 THEN 
								ls_texas_state_waste_code = idw_waste_code_state.Object.waste_code[ll_row]
							END IF
							idw_waste_code_state.Object.profile_id[ll_row_copy] = ll_null
							idw_waste_code_state.Object.added_by[ll_row_copy] = ls_null
							idw_waste_code_state.Object.date_added[ll_row_copy] = ldt_null
						END IF
					NEXT
				END IF
				// Discard the rows from the original lines
				idw_waste_code_state.RowsDiscard(1, ll_rowcount, Primary!)
				idw_waste_code_state.RowsDiscard(1, idw_waste_code_state.FilteredCount(), Filter!)
				idw_waste_code_state.SetFilter('')
				idw_waste_code_state.Filter()
			END IF
			
			ls_filter = "Upper(status) = 'A'"
			idw_waste_code_eq.SetFilter(ls_filter)
			idw_waste_code_eq.Filter()
			ll_rowcount = idw_waste_code_eq.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
					lb_copy_waste = FALSE
				ELSE
					lb_copy_waste = TRUE
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_waste_code_eq.RowsCopy(ll_row, ll_row, Primary!, idw_waste_code_eq, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							idw_waste_code_eq.Object.profile_id[ll_row_copy] = ll_null
							idw_waste_code_eq.Object.added_by[ll_row_copy] = ls_null
							idw_waste_code_eq.Object.date_added[ll_row_copy] = ldt_null
						END IF
					NEXT
				END IF
				// Discard the rows from the original lines
				idw_waste_code_eq.RowsDiscard(1, ll_rowcount, Primary!)
				idw_waste_code_eq.RowsDiscard(1, idw_waste_code_eq.FilteredCount(), Filter!)
				idw_waste_code_eq.SetFilter('')
				idw_waste_code_eq.Filter()
			END IF

//			ll_rowcount = idw_waste.RowCount()
//			IF ll_rowcount > 0 THEN
//				IF li_copy = 0 THEN
//					// No copy, no records
//					lb_copy_waste = FALSE
//				ELSE
//					// Copy
//					lb_copy_waste = TRUE
//					FOR ll_row = 1 TO ll_rowcount
//						ll_row_copy = ll_rowcount + ll_row
//						li_rc = idw_waste.RowsCopy(ll_row, ll_row, Primary!, idw_waste, ll_row_copy, Primary!)
//						IF li_rc = 1 THEN
//							idw_waste.Object.profile_id[ll_row_copy] = ll_null
//							idw_waste.Object.added_by[ll_row_copy] = ls_null
//							idw_waste.Object.date_added[ll_row_copy] = ldt_null
//						END IF
//					NEXT
//				END IF
//				
//				// Discard the rows from the original lines
//				idw_waste.RowsDiscard(1, ll_rowcount, Primary!)
//			END IF
			CONTINUE
		END IF

		// Copy Constituents
		IF li_rc = gi_success AND ls_copy_section = "Constituents" THEN
			ll_rowcount = idw_const.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
				ELSE
					// Copy
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_const.RowsCopy(ll_row, ll_row, Primary!, idw_const, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							idw_const.Object.profile_id[ll_row_copy] = ll_null
							idw_const.Object.added_by[ll_row_copy] = ls_null
							idw_const.Object.date_added[ll_row_copy] = ldt_null
							idw_const.Object.modified_by[ll_row_copy] = ls_null
							idw_const.Object.date_modified[ll_row_copy] = ldt_null
						END IF
					NEXT
				END IF
				// Discard the rows from the original lines
				idw_const.RowsDiscard(1, ll_rowcount, Primary!)
			END IF
			CONTINUE
		END IF
		
		// Copy Composition
		IF li_rc = gi_success AND Lower(ls_copy_section) = "composition" THEN
			ll_rowcount = idw_composition.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
				ELSE
					// Copy
					FOR ll_row = 1 TO ll_rowcount
						// MPM - 5/17/2021 - DevOps 18118 - Don't require a description when copying
						//IF NOT IsNull(idw_composition.object.comp_description[ll_row]) THEN
							ll_row_copy = ll_rowcount + ll_row
						
							 li_rc = idw_composition.RowsCopy(ll_row, ll_row, Primary!, idw_composition, ll_row_copy, Primary!)
						
							IF li_rc = 1 THEN
								idw_composition.Object.profile_id[ll_row_copy] = ll_null	
								idw_composition.Object.added_by[ll_row_copy] = ls_null
								idw_composition.Object.date_added[ll_row_copy] = ldt_null
								idw_composition.Object.modified_by[ll_row_copy] = ls_null
								idw_composition.Object.date_modified[ll_row_copy] = ldt_null
							END IF
						//END IF
					NEXT
				END IF
				// Discard the rows from the original lines
				idw_composition.RowsDiscard(1, ll_rowcount, Primary!)
			END IF
			CONTINUE
		END IF
		
		
//		IF li_rc = gi_success AND Lower(ls_copy_section) = "documents" THEN
//		tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_document
//		ll_rowcount = iudw_document.dw_document.RowCount()
//		ib_in_CopyProfile=TRUE
//		IF ll_rowcount > 0 THEN
//		IF li_copy = 0 THEN
//			// No copy, no records
//			ELSE
//				// Copy
//							 							
//				FOR ll_row = 1 TO ll_rowcount
//					//iudw_document.dw_document.object.data.filter[ll_row]=iudw_document.dw_document.object.data.primary[ll_row]
//					//iudw_document.dw_document.DeleteRow(ll_row)
//									ll_row_copy = ll_rowcount + ll_row
//									//ll_row_copy = ll_row
//								    
//									//li_rc = iudw_document.dw_document.RowsCopy(ll_row, ll_row, Primary!, iudw_document.dw_document, ll_row_copy, Primary!)
//									//iudw_document.dw_document.object.image_id[ll_row_copy]=iudw_document.dw_document.object.image_id[ll_row]
//									
//						li_rc = iudw_document.dw_document.RowsCopy(ll_row, ll_row, Primary!, iudw_document.dw_document, ll_row_copy, Primary!)
//									
//					IF li_rc = 1 THEN
//						iudw_document.dw_document.Object.profile_id[ll_row_copy] = ll_null	
//						iudw_document.dw_document.Object.added_by[ll_row_copy] = ls_null
//						iudw_document.dw_document.Object.date_added[ll_row_copy] = ldt_null
//						iudw_document.dw_document.Object.modified_by[ll_row_copy] = ls_null
//						iudw_document.dw_document.Object.date_modified[ll_row_copy] = ldt_null
//					END IF
//				NEXT
//			 END IF
//				int li_rr
//				// Discard the rows from the original lines
//				iudw_document.dw_document.RowsDiscard(1, ll_rowcount, Primary!)
//				// iudw_document.dw_document.object.data.primary=iudw_document.dw_document.object.data.filter
//			//	iudw_document.dw_document.SetFilter("")
//				//iudw_document.dw_document.Filter()
//							
//			END IF
//				CONTINUE
//			END IF
							
		// SK 08/06/2012 Copy LDR Subcategory
		IF li_rc = gi_success AND ls_copy_section = "Profile ldr Sub" THEN  //DevOps 18074 info_gde 12/07/2020; Profile Edits Occuring Without User Manipulation
			ll_rowcount = idw_ldr_subcategory.RowCount()
			IF ll_rowcount > 0 THEN
				IF li_copy = 0 THEN
					// No copy, no records
				ELSE
					// Copy
					FOR ll_row = 1 TO ll_rowcount
						ll_row_copy = ll_rowcount + ll_row
						li_rc = idw_ldr_subcategory.RowsCopy(ll_row, ll_row, Primary!, idw_ldr_subcategory, ll_row_copy, Primary!)
						IF li_rc = 1 THEN
							idw_ldr_subcategory.Object.profile_id[ll_row_copy] = ll_null	
							idw_ldr_subcategory.Object.added_by[ll_row_copy] = ls_null
							idw_ldr_subcategory.Object.date_added[ll_row_copy] = ldt_null
							idw_ldr_subcategory.Object.modified_by[ll_row_copy] = ls_null
							idw_ldr_subcategory.Object.date_modified[ll_row_copy] = ldt_null
						END IF
					NEXT
				END IF
				// Discard the rows from the original lines
				idw_ldr_subcategory.RowsDiscard(1, ll_rowcount, Primary!)
			END IF
			CONTINUE
		END IF
		
		// Copy Approvals
		IF li_rc = gi_success AND MID(ls_copy_section, 7, 8) = "Approval" THEN
			ls_facility = LEFT(ls_copy_section, 5)
			ls_company = LEFT(ls_facility, 2)
			ls_profit_ctr = RIGHT(ls_facility, 2)
			ls_find = "company_id = " + ls_company + " AND profit_ctr_id = " + ls_profit_ctr
			ll_row_find = idw_approval.Find(ls_find, 1, idw_approval.RowCount() + 1)
			IF ll_row_find > 0 THEN
				idw_approval.ScrollToRow(ll_row_find)
				IF li_copy = 0 THEN
					// No copy, discard prices and approval
					wf_price("DISCARD", ll_row_find)
					wf_import_waste("DISCARD", ll_row_find)
					idw_approval.RowsDiscard(ll_row_find, ll_row_find, Primary!)
				ELSE
					ll_row_copy = idw_approval.Rowcount() + 1
					li_rc = idw_approval.RowsCopy(ll_row_find, ll_row_find, Primary!, idw_approval, ll_row_copy, Primary!)
					IF li_rc = 1 THEN
						idw_approval.Object.profile_id[ll_row_copy] = ll_null
						idw_approval.Object.quote_id[ll_row_copy] = ll_null
						idw_approval.Object.approval_code[ll_row_copy] = "TBD"
						idw_approval.Object.confirm_author[ll_row_copy] = ls_null
						idw_approval.Object.confirm_update_by[ll_row_copy] = ls_null
						idw_approval.Object.confirm_update_date[ll_row_copy] = ldt_null
						idw_approval.Object.added_by[ll_row_copy] = ls_null
						idw_approval.Object.date_added[ll_row_copy] = ldt_null
						idw_approval.Object.modified_by[ll_row_copy] = ls_null
						idw_approval.Object.date_modified[ll_row_copy] = ldt_null
						// MPM 12/6/2018 - Task 5205 - Need to null out consolidation profile management fields
						idw_approval.Object.consolidation_profile_id[ll_row_copy] = ll_null
						idw_approval.Object.consolidation_profile_approval_code[ll_row_copy] = ls_null
						idw_approval.Object.state_reviewed_flag[ll_row_copy] = ls_null
						idw_approval.Object.date_state_reviewed[ll_row_copy] = ldt_null
						idw_approval.Object.catalyst_flag[ll_row_copy] = ls_null
						
						wf_price("COPY", ll_row_find)
//						     wf_import_waste("COPY", ll_row_find)
						// Discard the rows from the original lines
						idw_approval.RowsDiscard(ll_row_find, ll_row_find, Primary!)
					END IF
				END IF
			ELSE
				MessageBox(gs_app_name+": Internal Copy Approval Error", "Approval not found.", Exclamation!)
				li_rc = gi_failure
			END IF				
		END IF
		
	
		IF li_rc = gi_success AND ls_copy_section = "Treatment" AND li_copy = 1 THEN
			//43772
			FOR ll_row = 1 TO idw_approval.RowCount()
				 ll_treatment_id = idw_approval.Object.treatment_id[ll_row]
				 ls_approval_code = idw_approval.Object.approval_code[ll_row]
				 li_company_id = idw_approval.Object.company_id[ll_row]
				 li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row]
                   ls_treatment_treatment_desc =  idw_approval.Object.treatment_treatment_desc[ll_row] 
						 
				 SELECT status 
				 INTO :ls_status 
				 FROM treatment 
                   WHERE treatment_id = :ll_treatment_id
					AND company_id = :li_company_id
					AND profit_ctr_id = :li_profit_ctr_id
					Using gtr_share ;
					
					IF ls_status <> 'A' THEN 
						lb_copy_treatment = FALSE
						idw_approval.Object.treatment_id[ll_row] = ll_null
			             idw_approval.Object.treatment_treatment_desc[ll_row] = ls_null
						MEssageBox (gs_app_name+": Internal Copy Treatment Error", "Treatment is Invalid for " + String(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00") + " and Approval " + ls_approval_code, Exclamation!)
					ELSE 
						lb_copy_treatment = TRUE
						idw_approval.Object.treatment_id[ll_row] = ll_treatment_id
			             idw_approval.Object.treatment_treatment_desc[ll_row] = ls_treatment_treatment_desc
					END IF					
			NEXT
		END IF
		
//		IF li_rc = gi_success AND ls_copy_section = "WCR (New Form)" THEN
//			wf_copy_wcr(lstr_wcr_params)
//		END IF
	NEXT
END IF

// Successfully copied
IF li_rc = gi_success AND lb_copy = TRUE THEN
	// Reinitialize Forms
	wf_reset_documents()
	//wf_reset_documents()
	wf_reset_forms()
	idw_form_availability.Reset()
	li_rc = wf_init_forms()
	
	If idw_site_type.rowcount() > 0 Then
		ls_text = String(idw_site_type.rowcount()) + " Type(s).."
	Else
		//DevOps 10373
		if idw_header.getitemstring(ll_row_header,'generator_epa_id') = 'VARIOUS' and is_various_type = 'Site Types' then
			ls_text = 'All Types..'
		else
			ls_text = 'Types..'
		end if
	End If
	idw_header.object.b_types.text = ls_text
	
// agc 10/14/19 temp comment out
//	//DevOps 10373
//	If idw_generator_locations.rowcount() > 0 Then
//		ls_text = String(idw_generator_locations.rowcount()) + " Loc(s).."
//	Else
//		if idw_header.getitemstring(ll_row_header,'generator_epa_id') = 'VARIOUS' and is_various_type = 'Locations' then
//			ls_text = 'All Locs..'
//		else
//			ls_text = 'Locs..'
//		end if
//	End If
//	idw_header.object.b_locations.text = ls_text
	
	// Reset audits
	idw_audit.Reset()

	// Reset notes
	itp_note.uf_reset()
	itp_note.uf_sleep()

	// Create a tracking record
	idw_tracking.Reset()
	ll_row_copy = idw_tracking.InsertRow(0)
	li_rc = wf_init_tracking(ll_row_copy)
	IF li_rc = gi_failure THEN
		ls_message = "Copying new Profile Tracking record failed."
	END IF
	idw_header.Object.profile_tracking_id[ll_row_header] = 1

	// Adjust for things not copied
	IF lb_copy_waste = FALSE THEN
		idw_header.Object.waste_code[ll_row_header] = ls_null
	END IF
	IF lb_copy_waste = TRUE THEN
		idw_header.Object.texas_state_waste_code[ll_row_header] = ls_texas_state_waste_code
	END IF
	
	IF NOT lb_copy_waste THEN  idw_header.object.rcra_haz_flag[ll_row_header] = 'N'  //Subhrajyoti - Start 68224 - Profile - Copy and RCRA Hazardous flag issues
	
// this code has been Moved up
//	IF lb_copy_treatment = FALSE THEN
//		FOR ll_row = 1 TO idw_approval.RowCount()
//			idw_approval.Object.treatment_id[ll_row] = ll_null
//			idw_approval.Object.treatment_treatment_desc[ll_row] = ls_null
//		NEXT
//	END IF
END IF

// If anything failed, just cancel
IF li_rc <> gi_success THEN
	IF ls_message <> "" THEN
		ls_message = "~r" + ls_message
	END IF
	MessageBox(gs_app_name + ":  Copy Profile", "Cannot copy Profile." + ls_message, Exclamation!)
	iw_profile.TriggerEvent("ue_cancel")
ELSE
	
	
	ib_copy = TRUE
	idw_header.ScrollToRow(ll_row_header)
    
	 IF ib_copy = TRUE then 
	    ib_retrieve_after_copy = true 
	end if 
	
	ib_copy = FALSE
	ib_new_record = TRUE
	
	idw_header.SetColumn("tracking_type")
	idw_header.SetFocus()
	ll_row = idw_detail.Getrow ()
	IF ll_row > 0 THEN 
		idw_detail.Object.annual_recertification_date[ll_row] = ldt_null
		idw_detail.Object.epa_consent_date[ll_row] = ldt_null
		idw_detail.Object.process_code_uid[ll_row] = ll_null 
	END IF
	
	//DevOps 16737 info_gde 02/19/2021; PROD-EQAI-Maintenance-Profile Tracking-Audit
	//ll_row_header_orig = idw_header.GetRow()
	//is_profile_creation='copy'
	
	is_profile_creation='copy'//DevOps 16737 info_gde 02/19/2021; PROD-EQAI-Maintenance-Profile Tracking-Audit
	ib_profile_creation=FALSE
	tab_1.tabpage_view.tab_2.SelectTab(1)
	tab_1.tabpage_view.tab_2.tabpage_detail.SetFocus()
	
	ib_copy=TRUE //DevOps 39168 info_gde 05/17/2022
	
	// MPM - 7/25/2023 - DevOps 68965
	POST wf_set_caution_text()
	
	This.triggerevent("ue_save")
	
	//DevOps:16572
	ll_profile_id = idw_header.object.profile_id [idw_header.getrow()]
	
			
	//DevOps:17241 - Added if profile id is not null then do the filter. Thie is causing filter pop up comming up when there is no profile id 
	IF Not isnull( ll_profile_id ) THEN 
		ls_filter = "profile_id = "  + string (ll_profile_id)
		idw_header.SetFilter(ls_filter)
		idw_header.Filter()
	END IF
	
  
	// Show results
	SetPointer(Arrow!)
	
	SetMicroHelp("Profile successfully copied.")
END IF
end event

event ue_print();integer	li_count
long		ll_row, ll_profile_id, ll_customer_id, ll_generator_id
str_print_profile lstr_print

IF tab_1.SelectedTab = ii_tabpage_list THEN
	idw_list.Print()
ELSEIF tab_1.SelectedTab = ii_tabpage_list_prices THEN
	idw_list_prices.Print()
	
ELSEIF tab_1.SelectedTab = ii_tabpage_view THEN
	// Print Popup
	// Identify the current profile
	lstr_print.current_row = idw_header.GetRow()
	
	li_count = 0
	FOR ll_row = 1 TO idw_header.RowCount()
		ll_profile_id = idw_header.Object.profile_id[ll_row]
		ll_customer_id = idw_header.Object.customer_id[ll_row]
		ll_generator_id = idw_header.Object.generator_id[ll_row]

		li_count++
		lstr_print.profile_list[li_count] = ll_profile_id
		lstr_print.customer_list[li_count] = ll_customer_id
		lstr_print.generator_list[li_count] = ll_generator_id
	NEXT
	lstr_print.profile_count = li_count
	
	// Identify the scan types
	lstr_print.scan_types = "'approval','customer','generator'"
	lstr_print.scan_doc_count = iudw_document.uf_get_rowcount( )
	
	// Identify parent
	lstr_print.iw_parent = This
	lstr_print.tr_share = itr_share
	lstr_print.tr_forms = itr_forms
	lstr_print.tr_image = itr_image
	lstr_print.access = is_access
	
	OpenWithParm(w_popup_profile_print, lstr_print)
	
END IF

end event

event ue_manifest();integer	li_company_id, li_profit_ctr_id, li_idx, li_response
long		ll_row, ll_rowcount, ll_profile_id, ll_customer_id, ll_generator_id
string	ls_tsdf_code, ls_approval_code, ls_where, ls_status, ls_terms,ls_labpack_template_flag
str_manifest lstr
str_pick	lstr_pick
w_manifest lw_manifest
w_manifest_orig	lw_manifest_orig

// MPM - 3/30/2023 - DevOps 63423
// Must have a row
ll_row = idw_header.GetRow()
IF ll_row <= 0 THEN RETURN

// Save user's changes
IF wf_check_changes() < 0 THEN RETURN

// Load up the structure
lstr.source = "PROFILE"
lstr.waste_stream = "NONE"
lstr.tsdf_code = "NONE"
lstr.tsdf_approval_bill_unit_code = "NONE"

// Use the current approval OR none
ll_row = idw_header.GetRow()

//DevOps:20993 	
ls_labpack_template_flag =  idw_header.Object.labpack_template_flag[ll_row]

IF  ls_labpack_template_flag =  'T' THEN 
	MessageBox(gs_app_name + ":  Manifest", "Manifests and Labels cannot be generated for a Lab Pack Template", Exclamation!)
	RETURN
END IF

IF ll_row > 0 THEN
	ll_profile_id = idw_header.Object.profile_id[ll_row]
	ll_customer_id = idw_header.Object.customer_id[ll_row]
	ll_generator_id = idw_header.Object.generator_id[ll_row]
	ls_terms = idw_header.Object.customer_terms_code[ll_row]
	
	IF ls_terms = 'NOADMIT' THEN
		MessageBox(gs_app_name + ":  Validate", 'The manifest or labels may not be printed because the customer~'s terms are "No Admit".', Exclamation!)
		RETURN
	END IF
	
	ls_status = idw_header.Object.curr_status_code[ll_row]
	IF ls_status <> "A" THEN
		MessageBox(gs_app_name + ":  Validate", "This profile is not Approved.", Exclamation!)
		RETURN
	END IF
	
	ll_rowcount = idw_approval.RowCount()
	IF ll_rowcount = 1 THEN
		// There's only one approval
		ls_approval_code = idw_approval.Object.approval_code[1]
		li_company_id = idw_approval.Object.company_id[1]
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[1]
		
	ELSEIF ll_rowcount > 0 THEN
		// Allow user to pick which one they want to print
		ls_where = "Profile.profile_id = " + String(ll_profile_id)
		
		// Setup quick select popup
		lstr_pick.s_window_title			= "Approvals"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= FALSE
		lstr_pick.i_tab_count				= 1
		lstr_pick.i_return_column_count	= 9
		lstr_pick.to_transaction			= itr_share
		
		lstr_pick.s_tab_title[1]			= "Approvals"
		lstr_pick.i_tabpage_type[1]		= 1
		lstr_pick.s_dataobject[1]			= "d_quick_select_profile_approval"
		lstr_pick.s_where[1]					= ls_where
		lstr_pick.s_retrieve_by[1]			= ""
		lstr_pick.s_new_reference[1]		= ""
		
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				ls_approval_code = String(lstr_pick.return1[li_idx])
				li_company_id = lstr_pick.return8[li_idx]
				li_profit_ctr_id = lstr_pick.return9[li_idx]
			NEXT
		END IF
			
	ELSEIF ll_rowcount <= 0 THEN
		MessageBox(gs_app_name, "No approvals to print!", Exclamation!)
		RETURN
	END IF

	lstr.source_list[1] = ll_profile_id
	lstr.customer_id = ll_customer_id
	lstr.profile_generator_id = ll_generator_id
	lstr.approval_code = ls_approval_code
	lstr.company_id = li_company_id
	lstr.profit_ctr_id = li_profit_ctr_id
	
	
	// rb 03/18/2011
	if idw_shipping.GetRow() > 0 then
		lstr.transporter_code_1 = idw_shipping.Object.transporter_code_1[idw_shipping.GetRow()]
		lstr.transporter_code_2 = idw_shipping.Object.transporter_code_2[idw_shipping.GetRow()]
		lstr.source_list[2] =   idw_shipping.Object.profile_rq_threshold[idw_shipping.GetRow()] // sagar
	end if

ELSE
	// We don't have a header row
	lstr.source_list[1] = 0
	lstr.approval_code = "NONE"
END IF

OpenSheetWithParm(lw_manifest, lstr, w_frame, gi_win_menu_loc, Layered!)
end event

event ue_post_select();// Event:  ue_post_select
idw_select.SetColumn("profile_id_from")
idw_select.SetFocus()
end event

event ue_document();powerobject		la_any
boolean	lb_cancel, lb_insert = TRUE, lb_success
integer	li_return, li_form_version_id, li_revision_id, li_company_id, li_profit_ctr_id,li_header
integer	li_exempt_id, li_rc,li_idx, li_pos
long		ll_row_header, ll_profile_id, ll_form_id, ll_contact_id, ll_i, ll_j, ll_rows, ll_row
long		ll_customer_id, ll_generator_id, ll_null, ll_contact_count, ll_wpf_count, ll_count
string	ls_form_type, ls_document_list, ls_db_type, ls_terms, ls_where, ls_approval_code
string	ls_amendment, ls_manifest, ls_docpath[], ls_docname[], ls_class, ls_curr_status_code,ls_labpack_template_flag, ls_doc_file
string	ls_sql, ls_recipient_email, ls_first_name, ls_last_name, ls_web_userid, ls_form_copy_source,ls_approval_desc
string ls_form_revision_id, ls_form_id, ls_revision_id,ls_COR2_User_Notifications,ls_wcr_section = 'LDR Form'
argv		lstr_arg
str_pass	lstr, lstr_ldr, lstr_wcr //DevOps 15448
str_pick	lstr_pick
str_wcr_params	lst_params
String	ls_ra_profile_change_type
string ls_tracking_type //DevOps 15197
datetime ldt_ap_expiration_date //DevOps 15197
long ll_wcr_contact_id, ll_wcr_display_status //DevOps 15448
long ll_form_id_wcr
string ls_wcr_email, ls_wcr_first_name, ls_wcr_last_name, ls_wcr_web_userid //DevOps 15448
boolean lb_get_contact //DevOps 15448
datetime ldt_today, ldt_date_added
string ls_send_string, ls_email_address, ls_display_status
str_messagesender_email lstr_msg_sender
int	li_response

is_docprocessing_comments = ''
wf_accepttext()

//Prakash - 08/03/2023 - Begin - Added for DevOps #64296
ll_row_header = idw_header.GetRow()
IF IsNull(ll_row_header) OR ll_row_header = 0 THEN RETURN
//Prakash - 08/03/2023 - End - Added for DevOps #64296

li_header=idw_header.rowcount()
//DevOps:20993 	
ls_labpack_template_flag =  idw_header.Object.labpack_template_flag[li_header]

// Check access
IF is_access = "V" OR is_access = "P" THEN 
	MessageBox(gs_app_name + ":  Manage Documents", "You do not have access to manage documents.", Exclamation!)
	RETURN
END IF

IF  ls_labpack_template_flag =  'T' THEN 
	MessageBox(gs_app_name + ":  Manage Documents", "Forms cannot be generated for a Lab Pack Template.", Exclamation!)
	RETURN
END IF

//Prakash - 08/03/2023 - DevOps #64296 - Commented and moved the code above to avoid application termination in document management when there is no header row.
//ll_row_header = idw_header.GetRow()
//IF IsNull(ll_row_header) OR ll_row_header = 0 THEN RETURN

ll_profile_id = idw_header.Object.profile_id[ll_row_header]
IF ib_new_record OR IsNull(ll_profile_id) OR ll_profile_id = 0 THEN
	// Force save
	ib_changed_profile = TRUE
END IF

// MPM - 5/29/2020 - DevOps 16040 - Modified to require pending changes to be saved before continuing.
// Note:  wf_check_changes will cancel (i.e. UNDO) any pending changes if the user answers No to "do you want to save changes?" and THEN
// will continue with Document Management, so I replaced the call to wf_check_changes() with logic to require pending changes to be saved
// before continuing.

// If there are unsaved changes, return
//IF wf_check_changes() < 0 THEN RETURN
IF wf_modifiedcount() > 0 THEN
	// Prompt user to save
	li_response = MessageBox(gs_app_name + ":  Manage Documents", "Pending changes must be saved before you may manage documents.  Do you want to save changes?", Question!, YesNo!, 1)
	CHOOSE CASE li_response 
		CASE 1
			TriggerEvent("ue_save")
			IF wf_modifiedcount() > 0 THEN
				MessageBox(gs_app_name + ":  Manage Documents", "Pending changes were not saved.  Please contact the I.T. Department.", Exclamation!)
				RETURN
			END IF
		CASE 2
			// User doesn't want to save changes, so inform that they can't generate the PDF, then return
			MessageBox(gs_app_name + ":  Manage Documents", "Pending changes must be saved before you may manage documents.")
			RETURN
	END CHOOSE
END IF

// MPM - 4/3/2020 - DevOps 15088 -  Fix for app term error
ll_row_header = idw_header.GetRow()
IF IsNull(ll_row_header) OR ll_row_header = 0 THEN 
	MessageBox(gs_app_name + ":  Manage Documents", "Pending changes must be saved before you may manage documents.", Exclamation!)
	RETURN
END IF

ll_profile_id 		= idw_header.Object.profile_id[ll_row_header]
ls_approval_desc = idw_header.Object.approval_desc[ll_row_header] //DevOps 15771 info_gde 06/08/2020; COR2 User Notifications
ll_customer_id 	= idw_header.Object.customer_id[ll_row_header]
ll_generator_id 	= idw_header.Object.generator_id[ll_row_header]
ls_curr_status_code = idw_header.Object.curr_status_code[ll_row_header]
ls_terms = idw_header.Object.customer_terms_code[ll_row_header]
ls_tracking_type = idw_header.Object.tracking_type[ll_row_header]
ldt_ap_expiration_date = idw_header.Object.ap_expiration_date[ll_row_header]
il_profile_id=ll_profile_id //DevOps 15186 04/15/2020

If ls_curr_status_code = 'C' Or ls_curr_status_code = 'V' Then
	MessageBox("Can't create document!", "The profile status is Canceled or Void.")
	Return
End If

//DevOps 15771 info_gde 06/10/2020; COR2 User Notifications
SELECT waste_common_name,form_id
INTO :ls_approval_desc,:ll_form_id_wcr
FROM FormWCR
WHERE profile_id=:ll_profile_id
USING itr_forms;
//DevOps:18960 - For Amendment Forms  we need to get data from FormGWA
IF ll_form_id_wcr = 0 OR IsNull(ll_form_id_wcr)  THEN 
	SELECT waste_common_name,form_id
	INTO :ls_approval_desc,:ll_form_id_wcr
	FROM FormGWA
	WHERE profile_id=:ll_profile_id
	USING itr_forms;
END IF

ls_COR2_User_Notifications = 'COR2 User Notifications'
lstr.s_approval_desc = ls_approval_desc
lstr.sl_form_id = ll_form_id_wcr
//DevOps 15771 info_gde 06/10/2020; COR2 User Notifications
lstr.l[1] = ll_profile_id
lstr.l[2] = ll_generator_id
lstr.l[3] = ll_customer_id
lstr.s[1] = ls_curr_status_code
lstr.s[2] = ls_terms
lstr.s[3] = ls_tracking_type
lstr.sl_cor2_user_notifications = ls_COR2_User_Notifications
lstr.datetimes[1] = ldt_ap_expiration_date
// MPM - 4/30/2021 - DevOps 19944/20750 - Send in Profile.inactive_flag because, if it's 'T', don't let the user
// create a Waste Profile or ReApproval Notice
lstr.s[4] = idw_header.Object.inactive_flag[ll_row_header]
lstr.tr_trans = itr_forms
// MPM - 4/7/2022 - DevOps 30389
lstr.b[1] = FALSE
ll_row = idw_shipping.GetRow()
IF ll_row > 0 THEN 
	IF idw_shipping.Object.hazmat_class[ll_row] = '7' THEN lstr.b[1] = TRUE
END IF

SetNull(ll_null)

OpenWithParm(w_popup_profile_doc_new_dragon, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	li_return = lstr.i[1]
	il_doc_type = lstr.l_doc_type //DevOps 16762 info_gde 07/13/2020; PROD EQAI - Price Confirmation - Contact List Blank
	IF li_return = -1 THEN
		// User Cancelled
		RETURN
	ELSEIF li_return = 1 THEN
		// User chose to attach document(s)
		FOR ll_i = 1 TO UpperBound(lstr.s) STEP 2
			ll_j++
			//ls_docpath[ll_j] = lstr.s[ll_i]							     // Commented for DevOps #43045
			ls_docpath[ll_j] = lstr.s[ll_i] + "\" + lstr.s[ll_i + 1]		// Added by Uday for DevOps #43045
			ls_docname[ll_j] = lstr.s[ll_i + 1]

			li_rc = wf_attach_doc(ls_docpath[ll_j], ls_docname[ll_j], li_company_id, &
				li_profit_ctr_id, ll_form_id, li_revision_id, ls_approval_code, ll_profile_id, &
				ll_customer_id, ll_generator_id)
	
			IF li_rc = gi_success THEN
				lb_success = TRUE										//Added by Uday for DevOps #43045
				ls_doc_file+= ls_docpath[ll_j]  + "~r~n" //Prakash - 12/21/23 - Added for DevOps #66605
				//MessageBox("Success", "You have successfully attached " + ls_docpath[ll_j], Information!) //DevOps 30185 info_gde 02/21/2022; Successfully Attached Document > Auto-Refresh Docs Tab
				//Post function wf_retrieve_documents(il_curr_row, ll_profile_id)		   // Commented for DevOps43045
				//SetPointer(Arrow!)																   // Commented for DevOps43045
				
			ELSEIF li_rc = gi_failure THEN
				MessageBox(gs_app_name + ":  Error", "Document " + ls_docpath[ll_j] + " could not be attached.~r~rPlease contact I.T. immediately!", Exclamation!)
				//RETURN  // Commented for DevOps #66605
				CONTINUE //#66605
			ELSE
				MessageBox(gs_app_name + ":  Error", "Attaching Document " + ls_docpath[ll_j] + " timed out.~r~rPlease check later and if document is still pending, contact I.T.", Exclamation!)
				//RETURN  // Commented for DevOps #66605
				CONTINUE //#66605
			END IF
		NEXT
		// Added by Uday fro DevOps #43045 - Start
		IF lb_success = TRUE THEN
			MessageBox("Success", "You have successfully attached:" + "~r~n" + ls_doc_file, Information!) //#66605
			Post function wf_retrieve_documents(il_curr_row, ll_profile_id) 
			SetPointer(Arrow!)  
		END IF
	    // Added by Uday fro DevOps #43045 - End
	ELSEIF li_return = 2 THEN
		// User wants to create a new form
		ls_form_type = Upper(lstr.s[1])

		SetMicroHelp("Getting Report")
		IF gs_connect_type = "DEV" THEN
			ls_db_type = "dev"
		ELSEIF gs_connect_type = "TEST" THEN
			ls_db_type = "tst"
		ELSE
			ls_db_type = ""
		END IF
		
		SELECT current_form_version
			INTO :li_form_version_id
			FROM FormType
			WHERE form_type = :ls_form_type
		USING itr_forms;
				
		CHOOSE CASE Upper(ls_form_type)
			CASE "CC", "GN", "RA", "NORMTENORM"		// added NORM - 05/25/2012 SK
					//AM 26915 
				IF Upper(ls_form_type) =  "GN" THEN 
					IF IsNull(ll_customer_id) THEN
					   MessageBox(gs_app_name + ":  Error", "No Customer ID", StopSign!)
					   RETURN
					END IF
				END IF
				ll_form_id = 0
				li_revision_id = 1
				ll_contact_id = 0		
//				These forms no longer use co-pc, approval selection, so null it
				SetNull(li_company_id)
				SetNull(li_profit_ctr_id)
				SetNull(ls_approval_code)
				
				// MPM - 1/3/2018 - We are now allowing Reapproval Notifications to be generated if the customer is NOADMIT
				IF Upper(ls_form_type) <> "NORMTENORM" AND Upper(ls_form_type) <> 'RA' THEN 
//					ls_terms = idw_header.Object.customer_terms_code[ll_row_header]
					// Setup where clause to retrieve for this customer
					IF Upper(ls_terms) = "NOADMIT" THEN
						MessageBox(gs_app_name + ":  NOADMIT Customer", "This Customer is on NOADMIT", StopSign!)
						RETURN
					END IF
				END IF
			
				// For Generator Notification, if generator is Various, user should have chosen which in particular
				IF Upper(ls_form_type) = "GN" THEN ll_generator_id = lstr.l[2] 
		
				IF Upper(ls_form_type) = "CC" OR Upper(ls_form_type) = "RA" THEN
					// Setup where clause to retrieve for this customer
					IF IsNull(ll_customer_id) THEN
						MessageBox(gs_app_name + ":  Error", "No Customer ID", StopSign!)
						RETURN
					END IF
					
					if upper(ls_form_type) = 'CC' then ib_hide_quick_select_new = true
					ll_contact_id = wf_get_contact_id( ll_customer_id )  //DZ 08/08/2012
					ib_hide_quick_select_new = false
					
					
//					SELECT COUNT(*)
//						INTO :ll_contact_count
//						FROM ContactXRef
//						WHERE customer_id = :ll_customer_id
//					USING itr_share;
//					
//					IF ll_contact_count > 0 THEN
//						
//						ls_where = "ContactXRef.customer_id = " + String(ll_customer_id) &
//							+ " and ContactXRef.status = 'A'"
//						
//						// Setup quick select popup
//						lstr_pick.s_window_title			= "Contact Select"
//						lstr_pick.i_window_width			= 0
//						lstr_pick.b_multipick				= FALSE
//						lstr_pick.i_tab_count				= 1
//						lstr_pick.i_return_column_count	= 2
//						
//						lstr_pick.s_tab_title[1]			= "Contacts for Customer:  " + String(ll_customer_id)
//						lstr_pick.i_tabpage_type[1]		= 1
//						lstr_pick.s_dataobject[1]			= "d_quick_select_contact"
//						lstr_pick.s_where[1]					= ls_where
//						lstr_pick.s_retrieve_by[1]			= ""
//						lstr_pick.s_new_reference[1]		= "contact"
//
//												
//						OpenWithParm(w_popup_quick_select, lstr_pick)
//						
//						lstr_pick = Message.PowerObjectParm
//						IF isvalid(lstr_pick) THEN
//							ls_class = ClassName(lstr_pick)
//							IF Lower(ls_class) = "str_pick" THEN
//								IF UpperBound(lstr_pick.return1) = 0 THEN
//										ll_contact_id = 0
//								ELSE
//										ll_contact_id = lstr_pick.return1[1]
//								END IF
//							ELSE
//								lb_cancel = TRUE
//							END IF
//						ELSE
//							lb_cancel = true
//						END IF
//					ELSE
//						// Customer has no contacts
//						ll_contact_id = 0
//					END IF
				END IF
				
				//IF ll_contact_id >= 0 THEN //DevOps 16762 info_gde 07/13/2020; PROD EQAI - Price Confirmation - Contact List Blank
//				IF ll_contact_id > 0 THEN //DevOps 16881
				IF (Upper(ls_form_type) <> "CC" AND Upper(ls_form_type) <> "RA" AND ll_contact_id >= 0) OR ll_contact_id > 0 THEN
					SetPointer(Hourglass!)
					// Send to EQAIDocProcess so it can create -form_id
					ll_form_id = wf_get_report(ls_form_type + ls_db_type, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_form_version_id, ls_approval_code, ll_profile_id, ll_contact_id, ll_generator_id)

					IF ll_form_id < 0 THEN
						// pass this created form to view window
						lstr.s[1] = ls_form_type
						setnull(lstr.s[2])
						lstr.l[1] = ll_form_id
						lstr.l[2] = li_revision_id
						lstr.l[3] = ll_customer_id
						lstr.l[4] = ll_generator_id
						//DevOps 12427
						lstr.l[5] = ll_profile_id
						lstr.l[6] = ll_contact_id
						if upperbound(lstr.s) < 2 then
							setnull(lstr.s[2])
						end if
						if upper(ls_form_type) = "CC" then
							if upperbound(lstr.s) < 5 then //DevOps:57361
								 lstr.s[3]	=	is_email //DevOps:57361
								 lstr.s[4]	=  is_first_name //DevOps:57361
								 lstr.s[5]	=	is_last_name  //DevOps:57361
							end if
							OpenWithParm(w_popup_form_view_dragon, lstr)
						else
//							OpenWithParm(w_popup_form_view, lstr)
							OpenWithParm(w_popup_form_view_dragon, lstr)
						end if
						
						// Set print_confirm_flag in ProfileQuoteHeader table to TRUE
						IF upper(ls_form_type) = "CC" THEN
							ls_sql = "UPDATE ProfileQuoteHeader SET print_confirm_flag = 'T' WHERE ProfileQuoteHeader.profile_id IN ( " + String(ll_profile_id) + ")"
							EXECUTE IMMEDIATE :ls_sql USING itr_share;
							IF itr_share.SQLCode = 0 THEN
								COMMIT USING itr_share;
							ELSE
								ROLLBACK USING itr_share;
								MessageBox(gs_app_name + ":  Error", "Cannot update Print Confirmation Flag.  Contact the I.T. Department.", Exclamation!)
							END IF
							// Insert a Complete record into ProfileTracking for these Profiles
							f_complete_profile_tracking(String(ll_profile_id), "Profile Print")
						END IF
						
						// Set print_gen_flag in ProfileQuoteHeader table to TRUE
						IF upper(ls_form_type) = "GN" THEN
							ls_sql = "UPDATE ProfileQuoteHeader SET print_gen_flag = 'T' WHERE ProfileQuoteHeader.profile_id IN ( " + String(ll_profile_id) + ")"
							EXECUTE IMMEDIATE :ls_sql USING itr_share;
							IF itr_share.SQLCode = 0 THEN
								COMMIT USING itr_share;
							ELSE				
								MessageBox(gs_app_name + ":  Error", "Cannot update Print Generator Confirmation Flag.  Contact the I.T. Department.", Exclamation!)
								ROLLBACK USING itr_share;
							END IF
						END IF
						
						idw_form.Reset()
						itr_forms.AutoCommit = TRUE
						idw_form.Retrieve(ll_profile_id)
						itr_forms.AutoCommit = FALSE
					ELSE
						//DevOps 26956 AGC 11/04/2021 add SQLCODE AND SQLERRTEXT to messagebox
						MessageBox(gs_app_name + ":  Error", "Unable to create new form.~r~rPlease contact I.T. immediately!~r~r" + is_docprocessing_comments, StopSign!)
					END IF
				ELSE
					MessageBox('Contact Required','A contact is required to run this report.')
					SetMicroHelp('Ready')
				END IF
				SetPointer(Arrow!)
				
			CASE "GWA"
				IF wf_check_changes() < 0 THEN RETURN
				ll_form_id = 0
				li_revision_id = 0
				ll_contact_id = 0	
				//	Form no longer use co-pc, approval selection, so null it
				SetNull(li_company_id)
				SetNull(li_profit_ctr_id)
				SetNull(ls_approval_code)
				ls_amendment = ""
				lstr_arg.arg_title = "Re-Approval Notice And/Or Profile Changes" 
				lstr_arg.arg_str1 = ls_amendment
				// Get the text for the "Amendment"
				OpenWithParm(w_popup_get_values_gwa, lstr_arg)
				lstr_arg = Message.PowerObjectParm
				IF IsValid(lstr_arg) THEN
					IF lstr_arg.arg_num1 = 1 THEN
						ls_amendment = lstr_arg.arg_str1
						ls_ra_profile_change_type = lstr_arg.arg_str2
						If ls_ra_profile_change_type = "RNPC" THEN
							IF IsNull(ll_customer_id) THEN
								MessageBox(gs_app_name + ":  Error", "No Customer ID", StopSign!)
								RETURN
							END IF
							ls_form_type = "ra"
							ll_contact_id = wf_get_contact_id ( ll_customer_id )
							//If ll_contact_id < 0 Then Return   //user cancel
							If ll_contact_id <= 0 Then Return  //DevOps 16785 info_gde 07/15/2020; PROD EQAI - ReApproval with No Profile Changes - Contact List Blank
						END IF
						// 08282012 SK User can always select or use the default for the question:
						// Type of Change -
						// Re-approval without Profile Change
						// Re-approval with Profile Change (Default value)
						// Profile Change
						// So this will always be treated as user input values & hence EQAI pop up will always cretae it
						// GWA will be created with positive form ID from EQAI pop up & not doc processor
						//IF IsNull(ls_amendment) OR ls_amendment = "" or ls_form_type = "ra" THEN
						
						//DevOps:18960 - Commented if condition since  ra and gwa types should do the same process 
						IF ls_form_type = "ra" THEN
							SetPointer(Hourglass!)
							// Send to EQAIDocProcess so it can create -form_id for GWA
							ll_form_id = wf_get_report(ls_form_type + ls_db_type, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_form_version_id, ls_approval_code, ll_profile_id, ll_contact_id, ll_generator_id)
							IF ll_form_id < 0 THEN
								li_rc = gi_success
								li_revision_id = 1
							ELSE
								li_rc = gi_failure
							END IF
						ELSE
							// Create form here in the profile window
							ll_form_id = f_get_next_form_id("p") // permanent
							IF ll_form_id = 0 THEN
								MessageBox(gs_app_name + ":  Error", "Could not get next form id.~r~rPlease contact I.T. immediately!")
								RETURN
							END IF
							li_revision_id = f_get_next_form_revision_id(ll_form_id, li_revision_id, gs_user_id)

							////DevOps:18960 - Added below code
//							ll_form_id = 0
//							ll_form_id = wf_get_report(ls_form_type + ls_db_type, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_form_version_id, ls_approval_code, ll_profile_id, ll_contact_id, ll_generator_id)
//							IF ll_form_id < 0 THEN
//								li_rc = gi_success
//								li_revision_id = 1
								// Populate FormGWA with data
							    li_rc = wf_populate_GWA(ll_profile_id, ll_form_id, li_revision_id, ls_amendment, "new", lb_insert, ls_ra_profile_change_type)
							//ELSE
								//li_rc = gi_failure
							//END IF
							
						END IF
						
						IF li_rc = gi_success THEN
							COMMIT USING gtr_share;
							COMMIT USING itr_forms;
							// pass this created form to view window
							lstr.s[1] = ls_form_type
							setnull(lstr.s[2])
							lstr.l[1] = ll_form_id
							lstr.l[2] = li_revision_id
							lstr.l[3] = ll_customer_id
							lstr.l[4] = ll_generator_id
							lstr.l[5] = ll_profile_id
							lstr.l[6] = ll_contact_id
//							OpenWithParm(w_popup_form_view, lstr)
							OpenWithParm(w_popup_form_view_dragon, lstr)
							SetPointer(Arrow!)
						ELSE
							ROLLBACK USING gtr_share;
							ROLLBACK USING itr_forms;
							//DevOps 26956 AGC 11/04/2021 add SQLCODE AND SQLERRTEXT to messagebox
							MessageBox(gs_app_name + ":  Error", "Could not create new Re-approval Notice And/Or Profile Changes form.~r~rPlease contact I.T. immediately!~r~r" + is_docprocessing_comments, Exclamation!)
						END IF
						
						idw_form.Reset()
						itr_forms.AutoCommit = TRUE
						idw_form.Retrieve(ll_profile_id)
						itr_forms.AutoCommit = FALSE
					END IF
				END IF
				
			CASE "LDR"
					//DevOps:18545 - Calling ssr reports (web service) instead of docprocess
//				ll_row_header = idw_header.GetRow()
//				if ll_row_header > 0 then
//					ll_profile_id = idw_header.Object.profile_id[ll_row_header]
//					if not IsNull(ll_profile_id) and ll_profile_id <> 0 THEN
//							wf_get_ssrs_report(ls_wcr_section, ll_profile_id)
//						commit using itr_share;
//						commit using itr_image;
//					end if
//				end if
				
                  ll_form_id 		= f_get_next_form_id("p") // permanent
				IF ll_form_id = 0 THEN
					MessageBox(gs_app_name + ":  EQAI", "Could not get next form id for LDR.~r~rPlease contact I.T. immediately!")
					RETURN
				END IF
				//SK 07162012 below fn will always return 0 as no revision records exist 
				// for this form_id which was created just now in the above get_next_form_id call
				//li_revision_id 	= f_get_next_form_revision_id(ll_form_id, li_revision_id, gs_user_id)
				li_revision_id = 1
				
				li_company_id 		= lstr.i[2]
				li_profit_ctr_id 	= lstr.i[3]
				
				// Title
				lstr_ldr.s_win_title = "Land Disposal Restriction"
								
				//	Profit Center / Revision / Company
				lstr_ldr.i[1] = li_profit_ctr_id
				lstr_ldr.i[2] = li_revision_id
				lstr_ldr.i[3] = li_company_id
				
				// Generator / Customer
				lstr_ldr.l[1] = ll_generator_id
				lstr_ldr.l[2] = ll_customer_id
				lstr_ldr.l[3] = ll_form_id
				lstr_ldr.l[4] = ll_profile_id
				
				lstr_ldr.s[1] = ls_approval_code
				lstr_ldr.s[2] = "new"
				lstr_ldr.s[3] = ""	// manifest
				lstr_ldr.s[4] = ""	// manifest doc no
				
				OpenWithParm(w_popup_get_values_ldr, lstr_ldr)
				lstr_ldr = Message.PowerObjectParm
				IF lstr_ldr.i[2] = 1 THEN
					// User entered data on LDR, and popup created it successfully
					li_rc = gi_success
				ELSEIF lstr_ldr.i[2] = 2 THEN
					// Populate FormLDR tables using EQAIDocProcess
					// Send to EQAIDocProcess so it can create -form_id for LDR
					SetPointer(Hourglass!)
					ll_form_id = 0
					ll_form_id = wf_get_report(ls_form_type + ls_db_type, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_form_version_id, ls_approval_code, ll_profile_id, ll_contact_id, ll_generator_id)
					IF ll_form_id < 0 THEN
						li_rc = gi_success
						li_revision_id = 1
					ELSE
						li_rc = gi_failure
					END IF
					
				ELSEIF lstr_ldr.i[2] = -1 THEN
					// User canceled; do nothing
					RETURN
				END IF

				IF li_rc = gi_success THEN
					COMMIT USING itr_forms;

					lstr.s[1] = ls_form_type
					lstr.s[2] = ls_approval_code
					lstr.i[1] = li_profit_ctr_id
					// 08/14/2014 SK LDR now takes co-pc args as of 07/09/2014
					lstr.i[2] = li_company_id
					lstr.l[1] = ll_form_id
					lstr.l[2] = li_revision_id
					lstr.l[3] = ll_customer_id
					lstr.l[4] = ll_generator_id
					setnull(lstr.l[5])
					setnull(lstr.l[6])
//					OpenWithParm(w_popup_form_view, lstr)
					OpenWithParm(w_popup_form_view_dragon, lstr)
					
					SetPointer(Arrow!)
				ELSE
					// rb 03/18/2011
					ROLLBACK USING itr_forms;
					//DevOps 26956 AGC 11/04/2021 add SQLCODE AND SQLERRTEXT to messagebox
					MessageBox(gs_app_name + ":  Error", "Could not create new Land Disposal Restriction And Certification form.~r~rPlease contact I.T. immediately!~r~r" + is_docprocessing_comments, Exclamation!)
				END IF
						
				idw_form.Reset()
				itr_forms.AutoCommit = TRUE
				idw_form.Retrieve(ll_profile_id)
				itr_forms.AutoCommit = FALSE

				//rb 03/18/2011 error message in any screen after this about results pending
				commit using gtr_share;
			CASE "SREC"
				IF wf_check_changes() < 0 THEN RETURN
					
				ll_form_id = 0
				li_revision_id = 0
				// SK 06/15/2012 co-pc, approval is optional
				IF UpperBound(lstr.i[]) = 3 AND UpperBound(lstr.s[]) = 2 THEN
					li_company_id 		= lstr.i[2]
					li_profit_ctr_id 	= lstr.i[3]
					ls_approval_code 	= lstr.s[2]
				END IF

//	SK 07242012 Hide the manifest pop up			
//				lstr_arg.arg_title = "Surcharge Exemption"
//				lstr_arg.arg_str1 = "Please enter the manifest (not required)."
//				lstr_arg.arg_str2 = "Manifest:"
//				lstr_arg.arg_num2 = 3				// This tells the popup we're requesting 1 value
//				// get manifest from pop up
//				OpenWithParm(w_popup_get_value_text_nr, lstr_arg)
//				lstr_arg = Message.PowerObjectParm
//				IF IsValid(lstr_arg) THEN
//					IF lstr_arg.arg_num1 = 1 THEN
//						ls_manifest = lstr_arg.arg_str1
//						IF (IsNull(ls_manifest) OR ls_manifest = "") THEN
							// Send to EQAIDocProcess so it can create -form_id for SREC
				SetPointer(Hourglass!)
				ll_form_id = wf_get_report(ls_form_type + ls_db_type, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_form_version_id, ls_approval_code, ll_profile_id, ll_contact_id, ll_generator_id)
				IF ll_form_id < 0 THEN
					li_rc = gi_success
					li_revision_id = 1
				ELSE
					li_rc = gi_failure
				END IF
//						ELSE
//							// Entered Manifest, Create form here in the approval window
//							ll_form_id = f_get_next_form_id("p") // permanent
//							IF ll_form_id = 0 THEN
//								MessageBox(gs_app_name + ":  EQAI", "Could not get next form id for SREC.~r~rPlease contact I.T. immediately!")
//								RETURN
//							END IF
//							li_revision_id = f_get_next_form_revision_id(ll_form_id, li_revision_id, gs_user_id)
//							li_exempt_id = wf_get_srec_exempt_id(li_company_id, li_profit_ctr_id, ls_approval_code)
//							// Populate FormSREC with data
//							li_rc = wf_populate_SREC(ll_profile_id, ls_approval_code, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_exempt_id, ls_manifest, "new", lb_insert)
//						END IF
						
				IF li_rc = gi_success THEN
					COMMIT USING gtr_share;
					COMMIT USING itr_forms;
					
					lstr.s[1] = ls_form_type
					lstr.s[2] = ls_approval_code
					lstr.i[1] = li_company_id
					lstr.i[2] = li_profit_ctr_id
					lstr.l[1] = ll_form_id
					lstr.l[2] = li_revision_id
					lstr.l[3] = ll_customer_id
					lstr.l[4] = ll_generator_id
					setnull(lstr.l[5])
					setnull(lstr.l[6])
//					OpenWithParm(w_popup_form_view, lstr)
					OpenWithParm(w_popup_form_view_dragon, lstr)
					
					SetPointer(Arrow!)
				ELSE
					ROLLBACK USING gtr_share;
					ROLLBACK USING itr_forms;
					//DevOps 26956 AGC 11/04/2021 add SQLCODE AND SQLERRTEXT to messagebox
					MessageBox(gs_app_name + ":  Error", "Could not create new State Of Michigan Surcharge Exemption Certification form.~r~rPlease contact I.T. immediately!~r~r" + is_docprocessing_comments, Exclamation!)
				END IF
				
				idw_form.Reset()
				itr_forms.AutoCommit = TRUE
				idw_form.Retrieve(ll_profile_id)
				itr_forms.AutoCommit = FALSE
//					END IF
//				END IF
				
			CASE "WCR"
// SK 08/02/2012 Commented below pop-up code as at this stage the selection of form_id is already done
//	new logic got the below information from the document mgmt pop-up itself.
// delete below commented code before release
				
				// rb 07/16/2012 New form ID only if there is no existing WPF.
//				select count(*)
//				into :ll_wpf_count
//				from FormWCR
//				where profile_id = :ll_profile_id
//				and form_id > 0
//				using itr_forms;
//				
//				choose case ll_wpf_count

//					// generate a new Form ID
//					case 0
//						ll_form_id = f_get_next_form_id("p") // permanent
//						IF ll_form_id = 0 THEN
//							MessageBox(gs_app_name + ":  Error", "Could not get next form id.~r~rPlease contact I.T. immediately!")
//							RETURN
//						END IF
//
//					// force a new revision of the only existing WPF
//					case 1
//						select form_id
//						into :ll_form_id
//						from FormWCR
//						where profile_id = :ll_profile_id
//						and form_id > 0
//						using itr_forms;
//						
//						commit using itr_forms;
//						IF IsNull (ll_form_id) or ll_form_id < 1 THEN
//							MessageBox(gs_app_name + ":  Error", "Could not get existing form id.~r~rPlease contact I.T. immediately!")
//							RETURN
//						END IF
//
//					// prompt for selection of existing WPF
//					case else
//						lstr.d[1]	= ll_profile_id
//						lstr.po[1]	= itr_forms
//						OpenWithParm (w_popup_wcr_select_existing_wpf, lstr)
//
//						lstr = Message.PowerObjectParm
//						if IsNull (lstr) or not IsValid (lstr) then return
//						if UpperBound (lstr.d) < 1 then return
//						
//						ll_form_id = lstr.d[1]
//						
//				end choose
				
				//SK 08/02/2012 user selected form_id from the doc management popup, pass it to the sp_populate_wcr
//				ll_form_id = lstr.l[2]
//				IF IsNull(ll_form_id) OR ll_form_id <1 THEN
//					// create new
//					ll_form_id = f_get_next_form_id("p") // permanent
//					li_revision_id = 1
//					IF ll_form_id = 0 THEN
//						MessageBox(gs_app_name + ":  Error", "Could not get next form id.~r~rPlease contact I.T. immediately!")
//						RETURN
//					END IF
//				ELSE
//					IF UpperBound(lstr.i[]) >= 2 THEN li_revision_id = lstr.i[2] + 1
//				END IF
//				// Populate FormWCR with data
//				li_rc = wf_populate_WCR (ll_form_id, ll_profile_id, gi_company_id, gi_profit_ctr_id)

				// Get form copy source
//				ls_form_copy_source = wf_get_form_copy_source()
				if UpperBound(lstr.s) >= 2 then ls_form_copy_source = lstr.s[2]
//				if ls_form_copy_source = 'new' then ls_form_copy_source = 'copy' //DevOps 15197
				if ls_form_copy_source = 'new' then ls_form_copy_source = 'csnew' //DevOps 15197
				
				lb_get_contact = true
				
				//DevOps 15448
				select count(1)
				into :ll_count
				from formwcr
				where profile_id = :ll_profile_id
				and form_id > 0
				and display_status_uid in (1,2,3,5,7,8) using itr_share;
				
				if ll_count > 0 then
					select max(form_id)
					into :ll_form_id
					from formwcr
					where profile_id = :ll_profile_id
					and form_id > 0
					and display_status_uid in (1,2,3,5,7,8) using itr_share;
					
					select max(revision_id)
					into :li_revision_id
					from formwcr
					where profile_id = :ll_profile_id
					and form_id > 0
					and form_id = :ll_form_id
					and display_status_uid in (1,2,3,5,7,8) using itr_share;
					
					select display_status_uid, created_by
					into :ll_wcr_display_status, :ls_wcr_web_userid
					from formwcr
					where profile_id = :ll_profile_id
					and form_id = :ll_form_id
					and form_id > 0
					and revision_id = :li_revision_id using itr_share;
					
					select display_status
					into :ls_display_status
					from plt_ai.dbo.FormDisplayStatus
					where display_status_uid = :ll_wcr_display_status using itr_share;
					
					select d.contact_id, d.email, d.date_added, c.first_name, c.last_name
					into :ll_wcr_contact_id, :ls_wcr_email, :ldt_date_added, :ls_wcr_first_name, :ls_wcr_last_name
					from documentsendercontact d, contact c
					where form_type = 'wcr'
					and form_id = :ll_form_id
					and revision_id = :li_revision_id
					and profile_id = :ll_profile_id
					and original_contact in ('T','Y')
					and c.contact_id = d.contact_id using itr_share;
					
					if itr_share.sqlcode = 100 then
						select contact_id, email, first_name, last_name
						into :ll_wcr_contact_id, :ls_wcr_email, :ls_wcr_first_name, :ls_wcr_last_name
						from contact
						where web_userid = :ls_wcr_web_userid using itr_share;
					end if
					
					//DevOps 15801 info_gde 05/18/2020; EQAI - Document Management
					If IsDate ( Left ( string(ldt_date_added,'mm/dd/yyyy') , 10 ) ) AND Left ( string(ldt_date_added,'mm/dd/yyyy') , 10 ) <> '01/01/1900' Then 																						  
					else
						ldt_date_added = DateTime(today(), now())
					End If
					
					lstr_wcr.s[1] = ls_wcr_email
					lstr_wcr.s[2] = ls_wcr_first_name
					lstr_wcr.s[3] = ls_wcr_last_name
					lstr_wcr.s[4] = ls_display_status
					lstr_wcr.s[5] = string(ldt_date_added,'mm/dd/yyyy hh:mm:ss')
					lstr_wcr.s[7] = lstr.s[8]  //DevOps 16826 info_gde 06/29/2021; Document Management - Send WMPF Link - Update Subject Line
					lstr_wcr.l[1] = ll_form_id
					lstr_wcr.l[2] = li_revision_id
					lstr_wcr.l[3] = ll_profile_id
					lstr_wcr.l[4] = ll_wcr_contact_id
					lstr_wcr.l[5] = ll_wcr_display_status
					
					OpenWithParm(w_popup_wcr_form, lstr_wcr)

					lstr_wcr = Message.PowerObjectParm
					IF IsValid(lstr_wcr) THEN
						if lstr_wcr.s[6] = 'View' then
							lb_get_contact = false
						else
							if lstr_wcr.s[6] = 'Delete' then
							if messagebox("Delete Form","Proceeding will delete the draft form in it's current state from COR.  The form will no longer be available for use.",Information!,OKCancel!,2) = 1 then
//									lb_get_contact = true //DevOps 15593 don't show contact quick select, use previous contact instead
									lb_get_contact = false
									UPDATE formwcr
									SET display_status_uid = 6,
									      profile_id=null    //DevOps 16701 info_gde 07/08/2020; Document Management "Delete Form / Regenerate" Issues
									WHERE profile_id = :ll_profile_id
									AND form_id = :ll_form_id
									AND revision_id = :li_revision_id 
									USING itr_share;
									
									 IF itr_share.SQLCode = 0 THEN
										li_rc = 1
									ELSE
										li_rc = 0
									END IF
									
									IF li_rc = gi_success THEN
										COMMIT USING itr_share;
										ELSE
										ROLLBACK USING itr_share;
									END IF
									
									//audit change replacing 7 with the current display_status_uid:
									Insert Into FormWCRStatusAudit values (:ll_form_id,:li_revision_id,7,:ldt_today,:gs_user_id) USING itr_share;
									IF itr_share.SQLCode = 0 THEN
										li_rc = 1
										ELSE
										li_rc = 0
									END IF
									
									IF li_rc = gi_success THEN
										COMMIT USING itr_share;
										ELSE
										ROLLBACK USING itr_share;
									END IF
									
									//add update to scan table:
									UPDATE Scan
									SET status = 'V',
               							form_id = null,
               							revision_id = null
									WHERE form_id = :ll_form_id
									AND revision_id = :li_revision_id
									AND TYPE_ID = 129
									USING itr_image ;
									
									IF itr_image.SQLCode = 0 THEN
										li_rc = 1
										ELSE
										li_rc = 0
									END IF
									
									IF li_rc = gi_success THEN
										COMMIT USING itr_image;
										ELSE
										ROLLBACK USING itr_image;
									END IF
									
									//DevOps 16701 info_gde 07/07/2020; Document Management "Delete Form / Regenerate" Issues
									UPDATE profile
									SET document_update_status='A'
									WHERE profile_id = :ll_profile_id
									USING itr_share;
									
									IF itr_share.SQLCode = 0 THEN
										li_rc = 1
										ELSE
										li_rc = 0
									END IF
									
									IF li_rc = gi_success THEN
										COMMIT USING itr_share;
									ELSE
										ROLLBACK USING itr_share;
									END IF
									
								

									idw_header.object.document_update_status[1]='A'
									IF idw_detail.object.b_reject_form.visible THEN idw_detail.object.b_reject_form.visible=false
									IF idw_detail.object.form_ids.visible THEN idw_detail.object.form_ids.visible=false
									IF idw_detail.object.compute_10.visible THEN idw_detail.object.compute_10.visible=false
									TriggerEvent('ue_save')
									idw_form.Reset()
									//DevOps 16701 info_gde 07/08/2020; Document Management "Delete Form / Regenerate" Issues
									
									DECLARE document_cursor CURSOR FOR  
										SELECT d.email, c.first_name, c.last_name
										FROM DocumentSenderContact d, Contact c
										WHERE d.form_type = 'wcr'
										AND d.form_id = :ll_form_id
										AND d.revision_id = :li_revision_id
										AND d.profile_id = :ll_profile_id
										AND c.contact_id = d.contact_id
										USING itr_share;
		
									OPEN document_cursor;
									DO WHILE itr_share.SQLCode = 0
										FETCH document_cursor INTO :ls_email_address, :ls_first_name, :ls_last_name;
										IF itr_share.SQLCode = 0 THEN
											ls_send_string = '/T=' + ls_email_address
											ls_send_string = ls_send_string + ' /S="Form ID: ' + string(ll_form_id) + ' Deleted'
											ls_send_string = ls_send_string + ' /M="Dear ' + ls_first_name + ' ' + ls_last_name + '~r~n~r~nWe would like to notify you that an internally generated Form ID: ' + string(ll_form_id) + ' has been deleted by our Customer Service Department.  All existing links for this form will no longer work and the form will be removed from COR.  If you have any questions please contact your Customer Service Specialist or contact our National Customer Service Team at 1-800-592-5489.'
											
											ls_send_string = '"' + gs_eqai_path + '\GWSend.exe" ' + ls_send_string
//											ls_send_string += ' /U="' + gs_user_id
											ls_send_string += '"'
											SetPointer(Hourglass!)
											if f_parse_gwsend_string (ls_send_string, lstr_msg_sender) then
//												lstr_msg_sender.s_html_message = lstr_msg_sender.s_message
												if not f_messagesender_email (lstr_msg_sender, this) then
													MessageBox(gs_app_name + ": Email Assigned Resources", "An error has occurred when sending the email (in f_messagesender_email).", StopSign!)
												end if
											else
												MessageBox(gs_app_name + ": Email Assigned Resources", "An error has occurred when sending the email (in f_parse_gwsend_string).", StopSign!)
											end if
											
										ELSEIF itr_share.SQLCode = -1 THEN
											MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading Document Sender Contact emails" + &
												"~nPress OK to Continue.", StopSign!)
											CLOSE document_cursor;
											RETURN
										END IF
									LOOP
									CLOSE document_cursor;
									COMMIT USING itr_share;
									return //DevOps 15618
								else
									return
								end if
							else
								return
							end if
						end if
					ELSE
						return
					END IF
					
				end if
				
				if lb_get_contact then
					// Get contact id and web user id
					ll_contact_id = wf_get_contact_id ( ll_customer_id )
					If ll_contact_id <= 0 Then 
						 Return
					end if
					If ll_contact_id > 0 Then 
						select email, first_name, last_name, web_userid
						into :ls_recipient_email, :ls_first_name, :ls_last_name, :ls_web_userid
						from plt_ai.dbo.Contact
						where contact_id = :ll_contact_id
						using itr_share;
						if itr_share.SQLCode = 0 then
							li_rc = gi_success
							if isnull(ls_web_userid) then ls_web_userid = gs_user_id
						else
							li_rc = -1
						end if
					else
						li_rc = -1
					end if
				else
					ll_contact_id = ll_wcr_contact_id
					li_rc = 1
				end if

				if li_rc = gi_success then
					//DevOps 15197 do not generate a new form id when formwcr records exist for profile
					select count(1)
					into :ll_count
					from formwcr
					where profile_id = :ll_profile_id
					and form_id > 0
					and display_status_uid in (1,2,3,5,7,8) using itr_share;
					
					if ll_count > 0 then
						select max(form_id)
						into :ll_form_id
						from formwcr
						where profile_id = :ll_profile_id
						and form_id > 0
						and display_status_uid in (1,2,3,5,7,8) using itr_share;
						
						select max(revision_id)
						into :li_revision_id
						from formwcr
						where profile_id = :ll_profile_id
						and form_id = :ll_form_id
						and form_id > 0
						and display_status_uid in (1,2,3,5,7,8) using itr_share;
					else
						// Call sp_approved_copy
						//exec sp_Approved_Copy '617139','renewal','eoswin'
						DECLARE lproc PROCEDURE  FOR dbo.sp_Approved_Copy
							@profile_id = :ll_profile_id,
							@copysource = :ls_form_copy_source,
							@web_userid = :ls_web_userid
						USING itr_share;
						itr_share.AutoCommit = true
						EXECUTE lproc;
						li_rc = itr_share.SQLCode

						if li_rc < 0 then
							messagebox(gs_app_name + ": Error","Procedure sp_approved_copy failed with the following error:~r~n~r~n" + itr_share.sqlerrtext,Exclamation!)
							//DevOps 64036 AGC 09/28/2023 don't continue processing if error in sp_approved_copy
							CLOSE lproc;
							itr_share.AutoCommit = false
							return
						end if

//						do while itr_share.SQLCode = 0
//							FETCH lproc INTO :ll_form_id;
//						loop

						do while itr_share.SQLCode = 0
							FETCH lproc INTO :ls_form_revision_id;
						loop
						
						li_pos = lastpos(ls_form_revision_id,'-')
						if li_pos > 0 then
							ls_form_id = mid(ls_form_revision_id,1,li_pos - 1)
							ls_revision_id = mid(ls_form_revision_id,li_pos + 1)
							if isnumber(ls_form_id) then
								ll_form_id = long(ls_form_id)
							end if
							if isnumber(ls_revision_id) then
								li_revision_id = integer(ls_revision_id)
							end if
						else
							if isnumber(ls_form_revision_id) then
								ll_form_id = long(ls_form_revision_id)
							end if
						end if
						
						
						CLOSE lproc;
						itr_share.AutoCommit = false
//					end if
			    
				 //DevOps 16794 info_gde 07/17/2020; Docs Pending - Amendment/Renewal
				If li_header>0 Then
					choose case lower(ls_form_copy_source)
					case 'new','csnew' //DevOps 16866 info_gde 07/21/2020; Docs Pending - Profile Sync Required
						li_rc =	idw_header.SetItem(li_header,'document_update_status','P')
						if idw_header.object.document_update_status.visible='0' then idw_header.object.document_update_status.visible='1'
						idw_header.object.doc_status_reason[li_header]='Profile Sync Required'
						this.TriggerEvent('ue_save')
					case 'amendment'
						li_rc =	idw_header.SetItem(li_header,'document_update_status','P')
						if idw_header.object.document_update_status.visible='0' then idw_header.object.document_update_status.visible='1'
						idw_header.object.doc_status_reason[li_header]='Amendment in Process'
						this.TriggerEvent('ue_save')
					case 'renewal'
						li_rc =	idw_header.SetItem(li_header,'document_update_status','P')
						if idw_header.object.document_update_status.visible='0' then idw_header.object.document_update_status.visible='1'
						idw_header.object.doc_status_reason[li_header]='Renewal in Process'
						this.TriggerEvent('ue_save')
//					case 'profile sync required' //DevOps 16866 info_gde 07/21/2020; Docs Pending - Profile Sync Required
//						li_rc =	idw_header.SetItem(li_header,'document_update_status','P')
//						if idw_header.object.document_update_status.visible='0' then idw_header.object.document_update_status.visible='1'
//						idw_header.object.doc_status_reason[li_header]='Profile Sync Required'
//						this.TriggerEvent('ue_save')
					end choose
                      //DevOps 16044 info_gde 06/02/2020; Send Link Functionality - Profile Sync Required (CR)
//					if lower(idw_header.object.tracking_type[li_header])='new' then
//						li_rc =	idw_header.SetItem(li_header,'document_update_status','P')
//						if idw_header.object.document_update_status.visible='0' then idw_header.object.document_update_status.visible='1'
//						idw_header.object.doc_status_reason[li_header]='Profile Sync Required'
//						this.TriggerEvent('ue_save')
//					end if
				End If
				
						if ll_form_id > 0 then
							if li_revision_id > 0 then
								li_rc = 1
							else
								select revision_id
								into :li_revision_id
								from plt_ai.dbo.FormWCRStatusAudit
								where form_id = :ll_form_id
								and added_by = :ls_web_userid
								and date_added in (select max(date_added)
								                             from plt_ai.dbo.FormWCRStatusAudit
														  where form_id = :ll_form_id
														  and added_by = :ls_web_userid) using itr_share;
								if itr_share.SQLCode = 0 then
									li_rc = 1
								else
									if itr_share.SQLCode = 100 then
										li_rc = 1
										li_revision_id = 1
									end if
								end if
							end if
							ldt_today = datetime(today(),now())
							insert into documentsendercontact
								(form_type
								,form_id
								,revision_id
								,profile_id
								,contact_id
								,original_contact
								,email
								,added_by
								,date_added
								,modified_by
								,date_modified)
							values
								('wcr'
								,:ll_form_id
								,:li_revision_id
								,:ll_profile_id
								,:ll_contact_id
								,'T'
								,:ls_recipient_email
								,:gs_user_id
								,:ldt_today
								,:gs_user_id
								,:ldt_today) using itr_share;
						end if
					end if
				end if

				IF li_rc = gi_success THEN
					COMMIT USING itr_share;
					COMMIT USING itr_forms;
					// pass this created form to view window
					lstr.s[1] = ls_form_type
					lstr.s[2] = ls_web_userid
					lstr.s2[1] = ls_recipient_email
					lstr.l[1] = ll_form_id
					lstr.l[2] = li_revision_id
					lstr.l[3] = ll_customer_id
					lstr.l[4] = ll_generator_id
//					setnull(lstr.l[5])
					lstr.l[5] = ll_profile_id
					lstr.l[6] = ll_contact_id
					OpenWithParm(w_popup_form_view_dragon, lstr)
					SetPointer(Arrow!)
					
					idw_form.Reset()
					itr_forms.AutoCommit = TRUE
					idw_form.Retrieve(ll_profile_id)
					itr_forms.AutoCommit = FALSE
				ELSE
					ROLLBACK USING itr_share;
					ROLLBACK USING itr_forms;
					MessageBox(gs_app_name + ":  Error", "Could not create new Waste Profile form.~r~rPlease contact I.T. immediately!", Exclamation!)
				END IF
				
			// SK - 01262012, WWA is obsolete & not used anymore, removed all references
			
			
			CASE "PQ"
				ll_form_id = 0
				li_revision_id = 0
				// uses co-pc, approval
				li_company_id 		= lstr.i[2]
				li_profit_ctr_id 	= lstr.i[3]
				ls_approval_code 	= lstr.s[2]
				ll_form_id = f_get_next_form_id("p") // permanent
				IF ll_form_id = 0 THEN
					MessageBox(gs_app_name + ":  EQAI", "Could not get next form id.~r~rPlease contact I.T. immediately!")
					RETURN
				END IF
				
				li_revision_id = f_get_next_form_revision_id(ll_form_id, li_revision_id, gs_user_id)
				li_rc = wf_populate_PQ(ll_profile_id, ls_approval_code, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, ll_row_header, "new", ll_null, ll_null,ll_generator_id)
				IF li_rc = -2 THEN
					// User canceled; do nothing
				ELSE
					IF li_rc = 1 THEN
						// User saved data to FormPQ table in the popup
					ELSEIF li_rc = 2 THEN
						// User still wants to create a "blank" FormPQ record; use EQAIDocProcess
						// Populate FormPQ tables using EQAIDocProcess
						// Send to EQAIDocProcess so it can create -form_id for PQ
						ll_form_id = 0
						ll_form_id = wf_get_report(ls_form_type + ls_db_type, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_form_version_id, ls_approval_code, ll_profile_id, ll_contact_id, ll_generator_id)
						IF ll_form_id < 0 THEN
							li_rc = gi_success
							li_revision_id = 1
						ELSE
							li_rc = gi_failure
						END IF
					END IF
				
					IF li_rc = gi_success THEN
						COMMIT USING gtr_share;
						COMMIT USING itr_forms;
						
						lstr.s[1] = ls_form_type
						lstr.s[2] = ls_approval_code
						lstr.i[1] = li_company_id
						lstr.i[2] = li_profit_ctr_id
						lstr.l[1] = ll_form_id
						lstr.l[2] = li_revision_id
						lstr.l[3] = ll_customer_id
						lstr.l[4] = ll_generator_id
						setnull(lstr.l[5])
						setnull(lstr.l[6])
//						OpenWithParm(w_popup_form_view, lstr)				
						OpenWithParm(w_popup_form_view_dragon, lstr)
						SetPointer(Arrow!)
					ELSE
						ROLLBACK USING gtr_share;
						ROLLBACK USING itr_forms;
						//DevOps 26956 AGC 11/04/2021 add SQLCODE AND SQLERRTEXT to messagebox
						MessageBox(gs_app_name + ":  Error", "Could not create new form.~r~rPlease contact I.T. immediately!~r~r" + is_docprocessing_comments, Exclamation!)
					END IF
						
					idw_form.Reset()
					itr_forms.AutoCommit = TRUE
					idw_form.Retrieve(ll_profile_id)
					itr_forms.AutoCommit = FALSE
				END IF
						
			CASE 'PA'
				// uses co-pc, approval
				li_company_id 		= lstr.i[2]
				li_profit_ctr_id 	= lstr.i[3]
				ls_approval_code 	= lstr.s[2]
				// Title
				lstr.s_win_title = "PA State Notification"
				//	Profit Center / Revision / Company
				lstr.i[1] = li_company_id
				lstr.i[2] = li_profit_ctr_id
				// Profile
				lstr.l[4] = ll_profile_id
				// Approval
				lstr.s[1] = ls_approval_code
				OpenWithParm(w_popup_view_pa_notification, lstr)
				
			// SK -commented this code that creates norm from popup..it will be created from docproc
//			CASE 'NORMTENORM'
//				ll_form_id 		= 0
//				li_revision_id = 0
//				lstr.s_win_title 	= "NORM / TENORM / EXEMPTED WASTE ADDENDUM"
//				lstr.s[1] = 'new'
//				// l[1] is profile_id, l[2] is generator_id
//				lstr.l[3] = ll_form_id
//				lstr.l[4] = li_revision_id
				// Create new NORM from Profile
//				OpenWithParm(unused_w_popup_get_values_norm, lstr)
//				lstr = Message.PowerObjectParm
//				IF IsValid(lstr) THEN
//					IF lstr.i[2] = 1 THEN
//						// User entered data on NORM, and popup created it successfully
//						li_rc = gi_success
//					ELSEIF lstr.i[2] = 2 THEN
//						// error
//						li_rc = gi_failure
//					ELSEIF lstr.i[2] = -1 THEN
//						// User canceled; do nothing
//						RETURN
//					END IF
//				END IF
//				IF li_rc = gi_success THEN
//					COMMIT USING itr_forms;
//					lstr.s[1] = ls_form_type
//					lstr.l[3] = ll_customer_id
//					lstr.l[4] = ll_generator_id
//					OpenWithParm(w_popup_form_view, lstr)
//					SetPointer(Arrow!)
//				ELSE
//					ROLLBACK USING itr_forms;
//					MessageBox(gs_app_name + ":  Error", "Could not create new NORM form.~r~rPlease contact I.T. immediately!", Exclamation!)
//				END IF
//						
//				idw_form.Reset()
//				itr_forms.AutoCommit = TRUE
//				idw_form.Retrieve(ll_profile_id)
//				itr_forms.AutoCommit = FALSE
//				// error message in any screen after this about results pending
//				commit using itr_share;
			
			CASE 'MNC'
				SetNull(li_company_id)
				SetNull(li_profit_ctr_id)
				SetNull(ls_approval_code)
				ll_form_id 		= 0
				li_revision_id = 0
				lstr.s[1] = ls_form_type
				lstr.s[2] = ls_approval_code
				lstr.i[1] = li_company_id
				lstr.i[2] = li_profit_ctr_id
				lstr.l[1] = ll_form_id
				lstr.l[2] = li_revision_id
				lstr.l[3] = ll_customer_id
				lstr.l[4] = ll_generator_id
				setnull(lstr.l[5])
				setnull(lstr.l[6])
//				OpenWithParm(w_popup_form_view, lstr)
				OpenWithParm(w_popup_form_view_dragon, lstr)
				SetPointer(Arrow!)
				
			CASE ELSE
		END CHOOSE
	END IF
END IF
end event

event ue_scan();/*****************************************************************************/
// lb_new			lstr.b[1]			(TRUE=new scan, FALSE=retrieved page)
//
// profit_ctr_id	lstr.i[1]			(Receipt, Approval, Workorder)
//
// type_id			lstr.l[1]			(1, 2, 3, etc.)
//	customer_id		lstr.l[2]			(Customer, Receipt, Approval, Workorder, tsdf_approval, tsdf)
// receipt_id		lstr.l[3]			(Receipt)
// workorder_id	lstr.l[4]			(Workorder)
// generator_id	lstr.l[5]			(Generator, Receipt, Approval, Workorder, tsdf_approval)
// merchandise_id lstr.l[6]			(Merchandise)
// trip_id			lstr.l[7]			(Trip)
// image_id			lstr.l[8]
// profile_id		lstr.l[9]			(Profile)
// batch_id			lstr.l[10]			(Batch)
// tsdf_approval_id lstr.l[11]		(TSDF Approval)
// 
// scan_access		lstr.s[1]			(A=can scan new, V=view only)
// document_source lstr.s[2]			(Receipt, Approval, Maintenance, etc.)
// document_name	lstr.s[4]
// manifest			lstr.s[5]			(Receipt)
// manifest_flag	lstr.s[6]			(Receipt)
// approval_code	lstr.s[7]			(Approval)
// invoice_print	lstr.s[9]
// description		lstr.s[10]
// tsdf_code		lstr.s[11]			(TSDF, TSDF Approval)
/*****************************************************************************/
boolean	lb_new, lb_scan_next
integer	li_rc
long		ll_row_header, ll_count, ll_customer_id, ll_receipt_id, ll_null
long		ll_generator_id, ll_profile_id
string	ls_null
str_pass lstr

IF is_access_to_scan = "N" THEN RETURN

SetNull(ll_null)
SetNull(ls_null)

// Must have a row
ll_row_header = idw_header.GetRow()
IF ll_row_header > 0 THEN
	// Get this approval
	ll_customer_id = idw_header.Object.customer_id[ll_row_header]
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
	ll_generator_id = idw_header.Object.generator_id[ll_row_header]
	IF IsNull(ll_profile_id) OR ll_profile_id = 0 THEN
		MessageBox(gs_app_name + ":  Scan Error", "You must have a profile id before scanning.", Exclamation!)
		RETURN
	ELSE
		// Setup scanning info
		lstr.s[1] = is_access_to_scan
		lstr.s[2] = is_document_source	// "approval"
		lstr.s[4] = ls_null					// document_name
		lstr.s[5] = ls_null					// manifest
		lstr.s[6] = ls_null					// manifest_flag
		lstr.s[7] = ls_null					// approval_code
		lstr.s[9] = "F"						// print on invoice
		lstr.s[10] = ls_null					// description
		lstr.s[11] = ls_null					// tsdf_code
		
		lstr.l[1] = 14							// Type:  Price Confirmation
		lstr.l[2] = ll_customer_id
		lstr.l[3] = ll_null					// receipt_id
		lstr.l[4] = ll_null					// workorder_id
		lstr.l[5] = ll_generator_id
		lstr.l[6] = ll_null					// merchandise_id
		lstr.l[7] = ll_null					// trip_id
		lstr.l[8] = 0							// image_id
		lstr.l[9] = ll_profile_id
		lstr.l[10] = ll_null					// batch_id
		lstr.l[11] = ll_null					// tsdf_approval_id
		lstr.l[12] = ll_null 						//quote_id
		
		lstr.i[1] = ll_null
					
		// Initialize
		lstr.b[1] = TRUE			// New or already scanned
		
		OpenWithParm(w_scan_review, lstr)

		// Retrieve receipt scanned images
		ll_count = wf_retrieve_documents(ll_row_header, ll_profile_id)

		// Receive message but ignore
		lstr = Message.PowerObjectParm

	END IF
END IF
end event

event ue_assign_wcr();integer	li_response
long		ll_row_header
str_wcr_params lst_params

wf_accepttext()

// Check access
IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
	MessageBox(gs_app_name+": Assign Waste Profile Form", "You do not have access to assign Waste Profile Forms.", Exclamation!)
	RETURN
END IF	

IF tab_1.SelectedTab = ii_tabpage_select THEN
	// User is on Select tab; create new profile and assign a WCR to it
	TriggerEvent("ue_new")
	PostEvent("ue_assign_wcr")
	
ELSEIF tab_1.SelectedTab = ii_tabpage_view THEN
	ll_row_header = idw_header.GetRow()
	IF ll_row_header > 0 THEN
//		IF NOT ib_new_record THEN
//			li_response = MessageBox("Assign WPF", "Do you want to assign a WPF to this Profile? (Click Yes)" &
//				+ "~rOr create a new Profile and assign a WPF to it? (Click No)", Question!, YesNoCancel!, 1)
//			IF li_response = 1 THEN
		// User wants to assign a WCR to this profile
		lst_params.al_profile_id 	= idw_header.Object.profile_id[ll_row_header]
		lst_params.al_customer_id 	= idw_header.Object.customer_id[ll_row_header]
		lst_params.al_generator_id = idw_header.Object.generator_id[ll_row_header]
		lst_params.as_user = gs_user_id
		lst_params.ab_assign = TRUE
		lst_params.as_assign_target = "profile"
	
		OpenWithParm(w_popup_wcr_assign_profile, lst_params)
  
//			ELSEIF li_response = 2 THEN
//				// User wants to create new profile and assign a WCR to it
//				TriggerEvent("ue_new")
//				PostEvent("ue_assign_wcr")
//				
//			ELSE
//				// User canceled
//				RETURN
//			END IF
		
//		ELSE
//			// User wants to assign a WCR to this profile
//			lst_params.al_profile_id = idw_header.Object.profile_id[ll_row_header]
//			lst_params.al_customer_id = idw_header.Object.customer_id[ll_row_header]
//			lst_params.al_generator_id = idw_header.Object.generator_id[ll_row_header]
//			lst_params.as_user = gs_user_id
//			lst_params.ab_assign = TRUE
//			lst_params.as_assign_target = "profile"
//		
//			OpenWithParm(w_popup_wcr_assign_profile, lst_params)
//			
//		END IF
	END IF
END IF
end event

event ue_link();datetime	ldt_today
integer	li_company_id, li_profit_ctr_id, li_idx
long		ll_i, ll_rowcount, ll_row_header, ll_customer_id, ll_profile_id
string	ls_link_id, ls_approval_code, ls_where
str_link_params	lstr_link
str_pick	lstr_pick

IF is_access = "P" THEN RETURN

ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN

//ll_rowcount = idw_form_availability.RowCount()
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
ll_profile_id 	= idw_header.Object.profile_id[ll_row_header]

ll_rowcount = idw_approval.RowCount()
IF ll_rowcount <= 0 THEN
	MessageBox(gs_app_name, "No approvals!", Exclamation!)
	RETURN
END IF


//FOR ll_i = 1 TO ll_rowcount
//	// Set the lstr.i array to 1 for include, 0 to not include
//	lstr_link.i[ll_i] = idw_form_availability.Object.include[ll_i]
//NEXT

//IF ll_row_header > 0 THEN
//	
//	
//	ll_rowcount = idw_approval.RowCount()
//	IF ll_rowcount = 1 THEN
//		// There's only one approval
//		ls_approval_code = idw_approval.Object.approval_code[1]
//		li_company_id = idw_approval.Object.company_id[1]
//		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[1]

//	ELSEIF ll_rowcount > 0 THEN
//		// Allow user to pick which one they want to print (same as ue_manifest)
//		ls_where = "Profile.profile_id = " + String(ll_profile_id)
//		
//		// Setup quick select popup
//		lstr_pick.s_window_title			= "Approvals"
//		lstr_pick.i_window_width			= 0
//		lstr_pick.b_multipick				= FALSE
//		lstr_pick.i_tab_count				= 1
//		lstr_pick.i_return_column_count	= 9
//		lstr_pick.to_transaction			= itr_share
//		
//		lstr_pick.s_tab_title[1]			= "Approvals"
//		lstr_pick.i_tabpage_type[1]		= 1
//		lstr_pick.s_dataobject[1]			= "d_quick_select_profile_approval"
//		lstr_pick.s_where[1]					= ls_where
//		lstr_pick.s_retrieve_by[1]			= ""
//		lstr_pick.s_new_reference[1]		= ""
//		
//		OpenWithParm(w_popup_quick_select, lstr_pick)
//		
//		lstr_pick = Message.PowerObjectParm
//		IF IsValid(lstr_pick) THEN
//			FOR li_idx = 1 TO lstr_pick.i_return_record_count
//				ls_approval_code = String(lstr_pick.return1[li_idx])
//				li_company_id = lstr_pick.return8[li_idx]
//				li_profit_ctr_id = lstr_pick.return9[li_idx]
//			NEXT
//			IF IsNull(ls_approval_code) OR ls_approval_code = "" THEN
//				RETURN
//			END IF
//		ELSE
//			RETURN
//		END IF
//			
//	ELSEIF ll_rowcount <= 0 THEN
//		MessageBox(gs_app_name, "No approvals!", Exclamation!)
//		RETURN
//		
//	END IF
//END IF

ls_link_id = f_sp_unique_url_id()

lstr_link.profile_id[1] = ll_profile_id
//lstr_link.approval_code[1] = ls_approval_code
//lstr_link.company_id = li_company_id
//lstr_link.profit_ctr_id = li_profit_ctr_id
lstr_link.url_link_id = ls_link_id
lstr_link.status = "O"
lstr_link.created_by = gs_user_id
lstr_link.created_date = ldt_today
lstr_link.customer_id[1] = ll_customer_id

//DevOps 11311
//OpenWithParm(w_popup_select_form_link_profile, lstr_link)
OpenWithParm(w_popup_select_form_link_profile_dragon, lstr_link)
end event

event ue_compare_template();integer	li_response
LONG		ll_row_header, ll_profile_id, ll_form_id, ll_revision_id
LONG		ll_template_id, template_revision_id, ll_null
Long		ll_template_form_id, ll_source_form_id
str_pass lstr

wf_accepttext()

// Check access
IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
	MessageBox(gs_app_name+": Assign Waste Profile Form", "You do not have access to assign Waste Profile Forms.", Exclamation!)
	RETURN
END IF

ll_row_header = idw_header.GetRow()
IF IsNull(ll_row_header) OR ll_row_header = 0 THEN RETURN

ll_profile_id = idw_header.Object.profile_id[ll_row_header]
IF ib_new_record OR IsNull(ll_profile_id) OR ll_profile_id = 0 THEN
	// Force save
	ib_changed_profile = TRUE
END IF

// If there are unsaved changes, return
IF wf_check_changes() < 0 THEN RETURN

ll_profile_id 		= idw_header.Object.profile_id[ll_row_header]
SetNull( ll_null )
//ll_template_form_id = idw_header.Object.template_form_id[ll_row_header]
//ll_source_form_id = idw_header.Object.source_form_id[ll_row_header]


//SELECT profile.template_form_id, Max( FormWCR.revision_id )
//  INTO :ll_form_id, :ll_revision_id
//  FROM profile
// LEFT OUTER JOIN FormWCR
//    ON profile.template_form_id = formWCR.form_id
// WHERE profile.profile_id = :ll_profile_id
// GROUP BY profile.template_form_id
// USING itr_forms;

SELECT FormWCR.form_id, Max( FormWCR.revision_id )
  INTO :ll_form_id, :ll_revision_id
 FROM FormWCR
 LEFT OUTER JOIN Profile
    ON FormWCR.form_id = Coalesce(Profile.template_form_id, profile.source_form_id)
	 AND Profile.profile_id = :ll_profile_id
 JOIN FormWCRTemplate
 	ON FormWCRTemplate.template_form_id = FormWCR.form_id
 GROUP BY FormWCR.form_id
 USING itr_forms;

//IF itr_forms.SQLCode <> 0 then
//	MessageBox( "Error", "Failed to retrieve template information.", Exclamation!)
//	RETURN
//END IF

lstr.l[1] = ll_form_id           								//form_id for template
lstr.l[2] = ll_revision_id      									//revision id for template
lstr.l[3] = ll_null		      									//form id for template
lstr.l[4] = ll_profile_id									     	//profile_id
lstr.l[5] = ll_null
lstr.l[6] = ll_null

OpenWithParm(w_popup_template_profile_compare, lstr)

RETURN
end event

event ue_wcr_cancel_rejected_close();ib_wcr_close = TRUE
Triggerevent("ue_closequery")
end event

public subroutine wf_reset_change_flags ();ib_changed_profile 		= FALSE
ib_changed_const 			= FALSE
ib_changed_comp 			= FALSE
ib_changed_document 		= FALSE
ib_changed_note 			= FALSE
ib_changed_quote 			= FALSE
ib_changed_waste_code 	= FALSE
ib_changed_wcr 			= FALSE
ib_changed_form 			= FALSE
ib_changed_tracking 		= FALSE
ib_changed_technical 	= FALSE
ib_changed_lab 			= FALSE
ib_changed_approval 		= FALSE
ib_changed_primary_wcr 	= FALSE
ib_added_wcr 				= FALSE
//Devops 21596 & 58318-Added By Venu for lazy load implementation.-Start
ib_price_bund_ret_first_inst=False  
ii_pre_sel_tab_newindex=0  
ii_pre_sel_tab_index=0
//Devops 21596 & 58318-Added By Venu for lazy load implementation.- End
wf_price("RESETCHANGEFLAGS", 0)
wf_import_waste("RESETCHANGEFLAGS", 0)

end subroutine

public function integer wf_check_changes ();integer	li_response

IF idw_active = idw_header THEN

	wf_accepttext()	
	IF wf_modifiedcount() > 0 THEN
		
		// Prompt user to save

		li_response = MessageBox("Save Records", "Do you want to save changes?", Question!, YesNoCancel!, 1)
		CHOOSE CASE li_response 
			CASE 1
				This.TriggerEvent("ue_save")
				IF wf_modifiedcount() > 0 THEN
					RETURN -1
				ELSE
					RETURN 1
				END IF
				
			CASE 2
				If ib_save_facility_change=True Then RETURN 1 //Devops 21596 & 58318-Added By Venu for lazy load implementation.  						
				This.TriggerEvent("ue_cancel")
				RETURN 1
				
			CASE 3
				is_profile_creation='' //DevOps 16737
				RETURN -1
		END CHOOSE

	END IF
END IF

RETURN 1
end function

public subroutine wf_accepttext ();idw_approval.AcceptText()
idw_comment.AcceptText()
idw_const.AcceptText()
idw_composition.AcceptText()
idw_detail.AcceptText()
idw_header.AcceptText()
idw_lab.AcceptText()
idw_quoteheader.AcceptText()
idw_shipping.AcceptText()
// COR2-MPM
idw_container_size.AcceptText()
idw_statistics.AcceptText()
idw_technical.AcceptText()
idw_tracking.AcceptText() 
idw_waste.AcceptText()
idw_wcr_facility.AcceptText()
// SK-TX WC 08/01/2013
idw_waste_code_fed.AcceptText()
idw_waste_code_state.AcceptText()
idw_waste_code_eq.AcceptText()
idw_waste_other.AcceptText()
idw_waste_profilelab.AcceptText()
iudw_document.uf_AcceptText()
// rb added rules and category tabs
idw_rules.AcceptText()
idw_category.AcceptText()
idw_recipe.AcceptText()
idw_recipe_update.AcceptText()
idw_site_type.Accepttext()
// agc 10/14/19 temp comment out
//idw_generator_locations.AcceptText() //DevOps 10373
// rb 04/25/2012 WCR sync
idw_wcr_display_1.AcceptText()
idw_wcr_display_2.AcceptText()
idw_wcr_display_3.AcceptText()
//idw_wcr_display_4.AcceptText()
// COR2-MPM
idw_wcr_display_5.AcceptText()
idw_shipping_unit.AcceptText()
idw_profile_gen_contact_form.AcceptText()
// SK 06/06/2012 profilewcrfacility
//idw_profile_wcr_facility.AcceptText()
// SK 07/24/2012
idw_composition_other.AcceptText()
idw_composition_epa.AcceptText()
// sk 08/03/2012
idw_ldr_subcategory.AcceptText()

//COR2-AM 
idw_waste_import_supplement.AcceptText()
idw_benzene_waste_ops_supplemen.AcceptText()
idw_profile_thermal_supplement_form.AcceptText()
idw_profile_cylinder_supplement_dragon.AcceptText()
idw_profile_debris_certification_dragon.AcceptText()
idw_profile_used_oil_supplement_dragon.AcceptText()
idw_profile_illinois_disposal_supplemen.AcceptText()
idw_profile_ldr_form_dragon.AcceptText()
idw_profile_pcb_supplement_dragon.AcceptText() //COR2-JXM
idw_profile_radioactive_supplement_page_1.AcceptText()
idw_profile_radioactive_supplement_page_2.AcceptText()
idw_profile_radioactive_supplement_page_3.AcceptText()
idw_profile_radioactive_supplement_3sub.AcceptText()
idw_gen_knowledge_supplement.AcceptText()
idw_profile_fuels_blending.AcceptText() // Dipankar - 09/08/2023 - #69393


wf_price("ACCEPTTEXT", 0)
wf_import_waste("ACCEPTTEXT", 0)

end subroutine

public subroutine wf_retrieve ();datetime ldt_date_from, ldt_date_to
int		li_return, li_pos, li_col_cnt, li_i, li_start, li_idx, li_subqueries, li_response
long		ll_row_header, ll_rowcount, ll_count_profile, ll_count_limit, ll_generator_id, ll_const_id_from,ll_profile_id,ll_num_rows
string	ls_where_tmp, ls_select, ls_col_text_from, ls_col_text_to,ls_recipe
string	ls_approval_code, response, ls_sql, ls_sql_view, ls_where,ls_tracking_status,ls_labpack_template_flag
string	ls_waste_code_from, ls_waste_code_to, ls_approval_from, ls_approval_to, ls_from
string	ls_location_from, ls_location_to, ls_tracking_EQ_contact, ls_territory_code, ls_dragon_reviewed_flag_from
string	ls_treatment_from, ls_treatment_to, ls_const_id,ls_document_update_status,ls_process_code
string	ls_tsdf_from, ls_tsdf_to, ls_tsdf_approval_from, ls_tsdf_approval_to, ls_consolidation_profile, ls_billing_project_id
DateTime ldt_today, ld_received_date
String	ls_datetime
Long ll_wast_code_uid,ll_null
String ls_log_text
Setnull(ll_null)
str_wcr_params lst_params

//Devops 18072 Venu for Performance check	 --Start
If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
	IF FileExists("K:\Profile_Performance.log") THEN 
		FileClose(ii_filenum)
		FileDelete("K:\Profile_Performance.log")
	End If	
	ii_filenum = FileOpen( "K:\Profile_Performance.log", LineMode!, Write!, Shared!, Append!) 
	ls_log_text = "Profile Retrival Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
	FileWrite(ii_filenum, ls_log_text)	
End If	
//Devops 18072 Venu for Performance check	  --End	

SetPointer(HourGlass!)
idw_select.AcceptText()

idw_select.SetRedraw(FALSE)

ldt_today = DateTime (Today(),Now())

// Insert <= and >= into selection so that the range of values is selected
// If there is no value in _to column, leave value in _from column along
// and If there is no value in _from column, leave value in _to column alone
li_col_cnt = Integer(idw_select.Describe("DataWindow.Column.Count"))

// Special handling to set date modified to range
idw_select.SetColumn("date_modified_from")
ls_col_text_from = Trim(idw_select.GetText())
idw_select.SetColumn("date_modified_to")
ls_col_text_to = Trim(idw_select.GetText())
IF (NOT IsNull(ls_col_text_from)) AND Len(ls_col_text_from) <> 0 &
	AND (IsNull(ls_col_text_to) OR Len(ls_col_text_to) = 0) THEN
		ldt_date_from = DateTime(Date(ls_col_text_from), Time("0:00"))
		ldt_date_to = DateTime(Date(ls_col_text_from), Time("23:59"))
		idw_select.SetItem(idw_select.GetRow(), "date_modified_from", ldt_date_from)
		idw_select.SetText(String(ldt_date_to))
END IF
IF (NOT IsNull(ls_col_text_from)) AND Len(ls_col_text_from) <> 0 &
	AND (NOT IsNull(ls_col_text_to)) AND Len(ls_col_text_to) <> 0 THEN
		ldt_date_from = DateTime(Date(ls_col_text_from), Time("0:00"))
		ldt_date_to = DateTime(Date(ls_col_text_to), Time("23:59"))
		idw_select.SetItem(idw_select.GetRow(), "date_modified_from", ldt_date_from)
		idw_select.SetText(String(ldt_date_to))
END IF

f_modify_select(li_col_cnt, idw_select)

// Get where clause from selection dw and use it in maint dw
response = idw_select.Modify("datawindow.querymode = no  datawindow.readonly = yes")
IF Len(response) > 0 THEN MessageBox("error", response)			

ls_sql = Upper(idw_select.GetSQLSelect())

li_pos = Pos(ls_sql, "WHERE", 1) - 1
IF li_pos = -1 THEN
	ls_where = ""
ELSE
	ls_where = Right(ls_sql, Len(ls_sql) - li_pos - 5)
END IF
ls_where = " AND " + ls_where

// Add on restrictions for profile status, OTS, company/profit ctr
IF (NOT IsNull(is_profile_status)) AND is_profile_status <> "" THEN
	IF is_profile_status <> 'F' THEN 
	   ls_where = ls_where + " AND profile.curr_status_code = '" + is_profile_status + "'"
	END IF
END IF

IF (NOT IsNull(is_ots_flag)) AND is_ots_flag <> "" THEN
	ls_where = ls_where + " AND profile.OTS_flag = '" + is_ots_flag + "'"
END IF

IF (NOT IsNull(is_labpack_template_flag)) AND is_labpack_template_flag <> "" THEN //DevOps 28728
	ls_where = ls_where + " AND PROFILE.LABPACK_TEMPLATE_FLAG = '" + is_labpack_template_flag + "'"
END IF

IF (NOT IsNull(ii_company_id)) and ii_company_id > 0 THEN
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEQUOTEAPPROVAL WHERE COMPANY_ID = " &
		+ string(ii_company_id) + " AND PROFIT_CTR_ID = " + string(ii_profit_ctr_id) + ") "
	
	ls_where = ls_where + ls_where_tmp
END IF

//DevOps 16146 info_gde 08/19/2020; Profile Tracking - Add 'Docs Pending' Field (CR)
// MPM - 4/14/2021 - DevOps 18119 - Added Data Update and Rejection in Process as items in ddlb_docs_pending.
// MPM - 4/16/2021 - DevOps 19741 - Restored the change below for 18119 and EQAI 7.4.85
// AM - 12/22/2022 - DevOps:49176 - Added 'Additional Docs Added'
IF (NOT IsNull(is_docs_pending)) AND is_docs_pending <> "" THEN
	if is_docs_pending = 'All' Then
		ls_where = ls_where + " AND profile.document_update_status = 'P' AND profile.doc_status_reason in ( 'Amendment in Process', 'Renewal in Process','Profile Sync Required', 'Data Update', 'Rejection in Process','Additional Docs Added') " 
	else
		ls_where = ls_where + " AND profile.document_update_status = 'P' AND profile.doc_status_reason = '" + is_docs_pending + "'"
	end if
END IF

// JCG 10/3/17 Consolidation Project
IF (NOT IsNull(ii_consolidation_group_uid) AND ii_consolidation_group_uid <> 0) THEN
	IF Len(ls_where) > 0 THEN
		ls_where = ls_where + " AND PROFILEQUOTEAPPROVAL.consolidation_group_uid = " + String(ii_consolidation_group_uid) 
	ELSE
		ls_where = " PROFILEQUOTEAPPROVAL.consolidation_group_uid = " + String(ii_consolidation_group_uid)
	END IF
END IF
//
IF (NOT IsNull(ii_container_destination_trench_uid) AND ii_container_destination_trench_uid <> 0) THEN
	IF Len(ls_where) > 0 THEN
		ls_where = ls_where + " AND PROFILEQUOTEAPPROVAL.container_destination_trench_uid = " + String(ii_container_destination_trench_uid)
	ELSE
		ls_where = " PROFILEQUOTEAPPROVAL.container_destination_trench_uid = " + String(ii_container_destination_trench_uid)
	END IF
END IF
//
IF (NOT IsNull(ii_container_destination_cell_uid) AND ii_container_destination_cell_uid <> 0) THEN
	IF Len(ls_where) > 0 THEN
		ls_where = ls_where + " AND PROFILEQUOTEAPPROVAL.container_destination_cell_uid = " + String(ii_container_destination_cell_uid)
	ELSE
		ls_where = " PROFILEQUOTEAPPROVAL.container_destination_cell_uid = " + String(ii_container_destination_cell_uid)
	END IF
END IF

////DevOps 16146 info_gde 07/08/2020; Profile Tracking - Add 'Docs Pending' Field (CR)
//IF (NOT IsNull(is_docs_pending) AND is_docs_pending <> '' ) THEN
//	IF Len(ls_where) > 0 THEN
//		ls_where = ls_where + " AND ( PROFILE.doc_status_reason = " + String(is_docs_pending) +")"+" AND ( PROFILE.document_update_status = 'P' ) "
//	ELSE
//		ls_where = " ( PROFILE.doc_status_reason = " + String(is_docs_pending) +")" +" AND ( PROFILE.document_update_status = 'P' ) "
//	END IF
//END IF
////DevOps 16146 info_gde 07/08/2020; Profile Tracking - Add 'Docs Pending' Field (CR)

//Task:10273
IF ( ii_display_status_id = 3 AND is_profile_status = 'F' ) THEN
	IF Len(ls_where) > 0 THEN
		ls_where = ls_where + " AND Profile.display_status_uid  = 3 " 
	ELSE
	   ls_where =  "  Profile.display_status_uid  = 3 " 
	END IF
END IF

IF (NOT IsNull(ii_cwt_category_id)) THEN
	IF Len(ls_where) > 0 THEN
		ls_where = ls_where + " AND PROFILE.PROFILE_ID IN " &
			+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEQUOTEAPPROVAL WHERE CWT_CATEGORY_UID = " &
			+ String(ii_cwt_category_id) + ") "
	ELSE
		ls_where = " PROFILE.PROFILE_ID IN " &
			+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEQUOTEAPPROVAL WHERE CWT_CATEGORY_UID = " &
			+ String(ii_cwt_category_id) + ") "
	END IF
END IF

// Special handling to set approval code selection criteria
ls_approval_from = Trim(tab_1.tabpage_select.sle_approval_code_from.Text)
ls_approval_to = Trim(tab_1.tabpage_select.sle_approval_code_to.Text)


// If both "from" and "to" are blank, don't do anything.
IF (IsNull(ls_approval_from) OR Len(ls_approval_from) = 0) &
	AND (IsNull(ls_approval_to) OR Len(ls_approval_to) = 0) THEN
	// Do nothing with the approval
	
ELSE
	// If "from" is entered and "to" is not...
	IF (NOT IsNull(ls_approval_from)) AND Len(ls_approval_from) <> 0 &
		AND (IsNull(ls_approval_to) OR Len(ls_approval_to) = 0) THEN
		ls_approval_to = ls_approval_from
	END IF
	// If "to" is entered and "from" is not...
	IF (NOT IsNull(ls_approval_to)) AND Len(ls_approval_to) <> 0 &
		AND (IsNull(ls_approval_from) OR Len(ls_approval_from) = 0) THEN
		ls_approval_from = ls_approval_to
	END IF
	
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEQUOTEAPPROVAL WHERE APPROVAL_CODE BETWEEN '" &
		+ ls_approval_from + "' AND '" + ls_approval_to + "') "
	
	ls_where = ls_where + ls_where_tmp
END IF

// rb 05/21/2012 Allow search by TSDF code
// Special handling to set TSDF code selection criteria
ls_tsdf_from = Trim(tab_1.tabpage_select.sle_tsdf_code_from.Text)
ls_tsdf_to = Trim(tab_1.tabpage_select.sle_tsdf_code_to.Text)
// If both "from" and "to" are blank, don't do anything.
IF (IsNull(ls_tsdf_from) OR Len(ls_tsdf_from) = 0) &
	AND (IsNull(ls_tsdf_to) OR Len(ls_tsdf_to) = 0) THEN
	// Do nothing with the approval
	
ELSE
	// If "from" is entered and "to" is not...
	IF (NOT IsNull(ls_tsdf_from)) AND Len(ls_tsdf_from) <> 0 &
		AND (IsNull(ls_tsdf_to) OR Len(ls_tsdf_to) = 0) THEN
		ls_tsdf_to = ls_tsdf_from
	END IF
	// If "to" is entered and "from" is not...
	IF (NOT IsNull(ls_tsdf_to)) AND Len(ls_tsdf_to) <> 0 &
		AND (IsNull(ls_tsdf_from) OR Len(ls_tsdf_from) = 0) THEN
		ls_tsdf_from = ls_tsdf_to
	END IF
	
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PQA.PROFILE_ID FROM PROFILEQUOTEAPPROVAL PQA JOIN TSDFAPPROVAL T ON PQA.OB_TSDF_APPROVAL_ID = T.TSDF_APPROVAL_ID AND T.TSDF_CODE BETWEEN '" &
		+ ls_tsdf_from + "' AND '" + ls_tsdf_to + "') "

	ls_where = ls_where + ls_where_tmp
END IF

// rb 05/21/2012 Allow search by TSDF approval code
// Special handling to set TSDF approval code selection criteria
ls_tsdf_approval_from = Trim(tab_1.tabpage_select.sle_tsdf_approval_code_from.Text)
ls_tsdf_approval_to = Trim(tab_1.tabpage_select.sle_tsdf_approval_code_to.Text)
// If both "from" and "to" are blank, don't do anything.
IF (IsNull(ls_tsdf_approval_from) OR Len(ls_tsdf_approval_from) = 0) &
	AND (IsNull(ls_tsdf_approval_to) OR Len(ls_tsdf_approval_to) = 0) THEN
	// Do nothing with the approval
	
ELSE
	// If "from" is entered and "to" is not...
	IF (NOT IsNull(ls_tsdf_approval_from)) AND Len(ls_tsdf_approval_from) <> 0 &
		AND (IsNull(ls_tsdf_approval_to) OR Len(ls_tsdf_approval_to) = 0) THEN
		ls_tsdf_approval_to = ls_tsdf_approval_from
	END IF
	// If "to" is entered and "from" is not...
	IF (NOT IsNull(ls_tsdf_approval_to)) AND Len(ls_tsdf_approval_to) <> 0 &
		AND (IsNull(ls_tsdf_approval_from) OR Len(ls_tsdf_approval_from) = 0) THEN
		ls_tsdf_approval_from = ls_tsdf_approval_to
	END IF
	
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PQA.PROFILE_ID FROM PROFILEQUOTEAPPROVAL PQA JOIN TSDFAPPROVAL T ON PQA.OB_TSDF_APPROVAL_ID = T.TSDF_APPROVAL_ID AND T.TSDF_APPROVAL_CODE BETWEEN '" &
		+ ls_tsdf_approval_from + "' AND '" + ls_tsdf_approval_to + "') "

	ls_where = ls_where + ls_where_tmp
END IF


// Special handling to set treatment selection criteria
ls_treatment_from = Trim(tab_1.tabpage_select.sle_treatment_from.Text)
ls_treatment_to = Trim(tab_1.tabpage_select.sle_treatment_to.Text)
// If both "from" and "to" are blank, don't do anything.
IF (IsNull(ls_treatment_from) OR Len(ls_treatment_from) = 0) &
	AND (IsNull(ls_treatment_to) OR Len(ls_treatment_to) = 0) THEN
	// Do nothing with the approval
	
ELSE
	// If "from" is entered and "to" is not...
	IF (NOT IsNull(ls_treatment_from)) AND Len(ls_treatment_from) <> 0 &
		AND (IsNull(ls_treatment_to) OR Len(ls_treatment_to) = 0) THEN
		ls_treatment_to = ls_treatment_from
	END IF
	// If "to" is entered and "from" is not...
	IF (NOT IsNull(ls_treatment_to)) AND Len(ls_treatment_to) <> 0 &
		AND (IsNull(ls_treatment_from) OR Len(ls_treatment_from) = 0) THEN
		ls_treatment_from = ls_treatment_to
	END IF
	
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEQUOTEAPPROVAL WHERE TREATMENT_ID BETWEEN '" &
		+ ls_treatment_from + "' AND '" + ls_treatment_to + "') "
	
	ls_where = ls_where + ls_where_tmp
END IF

// Special handling to set Const ID selection criteria
ls_const_id  = Trim(tab_1.tabpage_select.sle_const_id.Text)
// If both "from" and "to" are blank, don't do anything.
IF (IsNull(ls_const_id) OR Len(ls_const_id) = 0) THEN
	// Do nothing with the const
ELSE
	// If "from" is entered and "to" is not...
	IF (NOT IsNull(ls_const_id)) AND Len(ls_const_id)  <> 0 THEN
		ll_const_id_from = long(  ls_const_id )
	END IF
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PROFILE_ID FROM PROFILECONSTITUENT JOIN CONSTITUENTS ON CONSTITUENTS.CONST_ID = PROFILECONSTITUENT.CONST_ID AND CONSTITUENTS.CONST_ID = '" &
		+ string ( ll_const_id_from ) + "') "
	ls_where = ls_where + ls_where_tmp
END IF

// Special handling to set waste code selection criteria
ls_waste_code_from = Trim(tab_1.tabpage_select.sle_waste_code_from.Text)
//Devops# 18099 commented & Modified by Venu --Start
   /*
	ls_waste_code_to = Trim(tab_1.tabpage_select.sle_waste_code_to.Text)  
	// If both "from" and "to" are blank, don't do anything.
	IF (IsNull(ls_waste_code_from) OR Len(ls_waste_code_from) = 0) &
		AND (IsNull(ls_waste_code_to) OR Len(ls_waste_code_to) = 0) THEN 
   */
	IF (IsNull(ls_waste_code_from) OR Len(ls_waste_code_from) = 0)  THEN
		// Do nothing with the waste codes
	ELSE		
	/*	
	// If "from" is entered and "to" is not...
	IF (NOT IsNull(ls_waste_code_from)) AND Len(ls_waste_code_from) <> 0 &
		AND (IsNull(ls_waste_code_to) OR Len(ls_waste_code_to) = 0) THEN
		ls_waste_code_to = ls_waste_code_from
	END IF
	// If "to" is entered and "from" is not...
	IF (NOT IsNull(ls_waste_code_to)) AND Len(ls_waste_code_to) <> 0 &
		AND (IsNull(ls_waste_code_from) OR Len(ls_waste_code_from) = 0) THEN
		ls_waste_code_from = ls_waste_code_to
	END IF 
	
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEWASTECODE JOIN WASTECODE ON WASTECODE.WASTE_CODE_UID = PROFILEWASTECODE.WASTE_CODE_UID AND WASTECODE.DISPLAY_NAME BETWEEN '" &
		+ ls_waste_code_from + "' AND '" + ls_waste_code_to + "') "		
	*/
	
	If trim(upper(is_waste_code)) = upper(ls_waste_code_from) Then
		ls_waste_code_from=upper(is_waste_code)
		ll_wast_code_uid=il_waste_code_uid		
	Else	
		SELECT DISTINCT top 1 WasteCode.waste_code_uid  into :ll_wast_code_uid FROM WasteCode  WHERE status = 'A' and upper(display_name)=upper(:ls_waste_code_from) using gtr_share;
		If (gtr_share.sqlcode < 0 Or gtr_share.sqlcode=100) Then ll_wast_code_uid=ll_null			
	End If		
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEWASTECODE JOIN WASTECODE ON WASTECODE.WASTE_CODE_UID = PROFILEWASTECODE.WASTE_CODE_UID AND upper(WASTECODE.DISPLAY_NAME) = '" + ls_waste_code_from + "' " &
         + " AND PROFILEWASTECODE.WASTE_CODE_UID='" +string(ll_wast_code_uid)+ "')" 	
	ls_where = ls_where + ls_where_tmp
	//Devops# 18099 commented & Modified by Venu --End
END IF

// Special handling to set location selection criteria
ls_location_from = Trim(tab_1.tabpage_select.sle_location_from.Text)
ls_location_to = Trim(tab_1.tabpage_select.sle_location_to.Text)
// If both "from" and "to" are blank, don't do anything.
IF (IsNull(ls_location_from) OR Len(ls_location_from) = 0) &
	AND (IsNull(ls_location_to) OR Len(ls_location_to) = 0) THEN
	// Do nothing with the location
	
ELSE
	// If "from" is entered and "to" is not...
	IF (NOT IsNull(ls_location_from)) AND Len(ls_location_from) <> 0 &
		AND (IsNull(ls_location_to) OR Len(ls_location_to) = 0) THEN
		ls_location_to = ls_location_from
	END IF
	// If "to" is entered and "from" is not...
	IF (NOT IsNull(ls_location_to)) AND Len(ls_location_to) <> 0 &
		AND (IsNull(ls_location_from) OR Len(ls_location_from) = 0) THEN
		ls_location_from = ls_location_to
	END IF
	
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PROFILE_ID FROM PROFILEQUOTEAPPROVAL WHERE LOCATION BETWEEN '" &
		+ ls_location_from + "' AND '" + ls_location_to + "') "
	

	ls_where = ls_where + ls_where_tmp
END IF

ls_tracking_EQ_contact = Trim(tab_1.tabpage_select.sle_eq_contact.Text)
IF IsNull(ls_tracking_EQ_contact) OR Len(ls_tracking_EQ_contact) = 0 THEN
	// Do nothing with EQ contact
ELSE
//	ls_where_tmp = " AND ProfileTracking.EQ_contact LIKE '%" + ls_tracking_EQ_contact + "%'"
	ls_where_tmp = " AND U2.user_name LIKE '%" + ls_tracking_EQ_contact + "%'"
	ls_where = ls_where + ls_where_tmp
END IF

// Special handling for territory id
ls_territory_code = TRIM(tab_1.tabpage_select.sle_territory_code.text)
IF IsNull(ls_territory_code) OR ls_territory_code = "" OR NOT IsNumber(ls_territory_code) THEN
	// Do nothing with territory code
ELSE
	ls_where_tmp = " AND Profile.profile_id IN (SELECT ProfileQuoteApproval.profile_id " &
		+ " FROM ProfileQuoteApproval, CustomerBilling " &
		+ " WHERE Profile.profile_id = ProfileQuoteApproval.profile_id " &
		+ " AND Profile.customer_id = CustomerBilling.customer_id " &
		+ " AND ISNULL(ProfileQuoteApproval.billing_project_id, 0) = CustomerBilling.billing_project_id " &
		+ " AND CustomerBilling.territory_code = '" + ls_territory_code + "')"
	ls_where = ls_where + ls_where_tmp
END IF

// Special handling to set consolidation profile selection criteria
ls_consolidation_profile  = Trim(tab_1.tabpage_select.sle_consolidation_profile.Text)
IF (IsNull(ls_consolidation_profile) OR Len(ls_consolidation_profile) = 0) THEN
	// Do nothing with the consolidation profile
ELSE
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PQA.PROFILE_ID FROM PROFILEQUOTEAPPROVAL PQA JOIN CONSOLIDATIONPROFILE CP ON CP.CONSOLIDATION_PROFILE_ID = PQA.CONSOLIDATION_PROFILE_ID WHERE CP.CONSOLIDATION_PROFILE_APPROVAL_CODE = '" &
		+ ls_consolidation_profile + "') "
	ls_where = ls_where + ls_where_tmp
END IF

//Task:10633 - Profile - Select tab to search by linked to recipe
ls_recipe  =  Trim(tab_1.tabpage_select.sle_recipe.Text)
IF ( IsNull(ls_recipe) OR Len(ls_recipe) = 0 ) THEN
	// Do nothing with the recipe
ELSE
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PAR.PROFILE_ID FROM ProfileApprovalRecipe PAR WHERE PAR.recipe_id = '" &
		+ ls_recipe + "') "
	ls_where = ls_where + ls_where_tmp
END IF

//DevOps:20991 - Process_code selection
ls_process_code  =  Trim(tab_1.tabpage_select.sle_process_code.Text)
IF ( IsNull(ls_process_code) OR  ls_process_code = ""  OR Len(ls_process_code) = 0) THEN
ELSE
	IF Len(ls_where) > 0 THEN
		ls_where = ls_where + " AND PROFILE.process_code_uid in (SELECT LPPC.process_code_uid FROM LabPackProcessCode LPPC WHERE LPPC.process_code = '" &
		      + ls_process_code + "') "
	ELSE
		ls_where = " PROFILE.process_code_uid in (SELECT LPPC.process_code_uid FROM LabPackProcessCode LPPC WHERE LPPC.process_code = '" &
		      + ls_process_code + "') "
	END IF
END IF

// MPM - 2/13/2020 - DevOps 14228 - Commented out the following block, since the "Dragon reviewed" flag is no longer being used
//DevOps-11531 - AM 
//IF tab_1.tabpage_select.cb_dragon_reviewed_flag_from.Checked = TRUE  THEN
//    ls_dragon_reviewed_flag_from = 'T'
//    ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
//		+ "(SELECT DISTINCT PQA.PROFILE_ID FROM PROFILEQUOTEAPPROVAL PQA WHERE PQA.dragon_reviewed_flag = '" &
//		+ ls_dragon_reviewed_flag_from + "') "
//	ls_where = ls_where + ls_where_tmp
//END IF 

// MPM - 5/1/2019 - DevOps task 10356/GEM 60403 - Added the ability to search by billing project
// Special handling to set billing project ID selection criteria
ls_billing_project_id  = Trim(tab_1.tabpage_select.sle_billing_project_id.Text)
IF (IsNull(ls_billing_project_id) OR Len(ls_billing_project_id) = 0) THEN
	// Do nothing with the billing project ID
ELSE
	ls_where_tmp = " AND PROFILE.PROFILE_ID IN " &
		+ "(SELECT DISTINCT PQA.PROFILE_ID FROM PROFILEQUOTEAPPROVAL PQA WHERE PQA.BILLING_PROJECT_ID = '" &
		+ ls_billing_project_id + "') "
	ls_where = ls_where + ls_where_tmp
END IF

//ls_sql_view = Upper(idw_header.GetSQLSelect())
ls_sql_view = Upper(is_select_header)

// Check for generator search to setup the appropriate join
// We assume that if the user chooses to select profiles by generator id,
// generator EPA ID, and/or generator name, that we should do a straight 
// join to the generator table - otherwise, with an outer join, the query 
// times out and the user gets no records at all!  We set the ib_join_generator
// flag in the wf_set_criteria function to show that the user selected by generator
// and we modify the WHERE statement below.  If the user doesn't
// select by generator, we use an outer join
IF ib_join_generator THEN
	li_pos = Pos(ls_sql_view, "LEFT OUTER JOIN GENERATOR", 1)
	IF li_pos > 0 THEN
		ls_sql_view = Replace(ls_sql_view, li_pos, 10, "INNER")
	END IF
END IF

// Likewise, check for customer table join
IF ib_join_customer THEN
	li_pos = Pos(ls_sql_view, "LEFT OUTER JOIN CUSTOMER", 1)
	IF li_pos > 0 THEN
		ls_sql_view = Replace(ls_sql_view, li_pos, 10, "INNER")
	END IF
END IF

//COR2 JXM 11531 07/24/2019 ADD JOIN TO DW QUERY ///Anitha - 08/30/2019
//IF ib_join_profitcenter THEN
//	li_pos = Pos(ls_sql_view, "LEFT OUTER JOIN PROFITCENTER", 1)
//	IF li_pos > 0 THEN
//		ls_sql_view = Replace(ls_sql_view, li_pos, 10, "INNER")
//	END IF
//END IF

//// JCG 10/4/17 Consolidation Project
//IF NOT IsNull(ii_consolidation_group_uid) OR ii_consolidation_group_uid <> 0 &
//AND NOT IsNull(ii_container_destination_trench_uid) OR ii_container_destination_trench_uid <> 0 &
//AND NOT IsNull(ii_container_destination_cell_uid) OR ii_container_destination_cell_uid <> 0 THEN
//	li_pos = Pos(ls_sql_view, "WHERE 1=1", 1) - 1
//	ls_sql_view = Mid(ls_sql_view, 1, li_pos) + " INNER JOIN  profilequoteapproval on ProfileQuoteApproval.profile_id = Profile.profile_id WHERE 1=1 "
//END IF

//// JCG 10/4/17 Consolidation Project
//IF NOT IsNull(ii_consolidation_group_uid)  &
//AND NOT IsNull(ii_container_destination_trench_uid)  &
//AND NOT IsNull(ii_container_destination_cell_uid)  THEN
//	li_pos = Pos(ls_sql_view, "WHERE 1=1", 1) - 1
//	ls_sql_view = Mid(ls_sql_view, 1, li_pos) + " INNER JOIN  profilequoteapproval on ProfileQuoteApproval.profile_id = Profile.profile_id WHERE 1=1 "
//END IF

/*AlonB     */ 
//string ls_sql_join, ls_sql_view_lastpart, ls_sql_view_firstpart
//IF ib_join_profitcenter THEN
//	li_pos = Pos(ls_sql_view, "FROM PROFILE", 1)
//	IF li_pos > 0 THEN
//		ls_sql_join = "LEFT OUTER JOIN PROFILEQUOTEAPPROVAL on PROFILE.PROFILE_ID = PROFILEQUOTEAPPROVAL.PROFILE_ID"
//		//ls_sql_view = Replace(ls_sql_view, li_pos, 10, "INNER")
//		ls_sql_view_lastpart  =  mid(ls_sql_view, (li_pos+13) )
//		ls_sql_view_firstpart = left(ls_sql_view, li_pos + 13)
//		ls_sql_view = ls_sql_view_firstpart + " " + ls_sql_join + " " + ls_sql_view_lastpart
//		
//				
//	END IF
//END IF


/* AlonB*/



ls_sql_view = ls_sql_view + ls_where

// Preprocess to see how many profiles will be retrieved
// MPM - 3/29/2023 - DevOps 62906 - But only do this check if we're NOT opening this window from w_wcr.
IF NOT ib_opened_from_wcr THEN
	li_pos = Pos(ls_sql_view, "FROM PROFILE", 1) - 1
	IF li_pos > 0 THEN
		ls_from = Right(ls_sql_view, Len(ls_sql_view) - li_pos)
		ll_rowcount = dw_profile_count.Retrieve(gi_debug, ls_from)
		IF ll_rowcount < 0 THEN
			// Error, most likely in syntax
			MessageBox(gs_app_name + ":  Profile Retrieve", "There was an error in selecting the number of profiles you were searching for.~r~r" &
				+ "Please contact the I.T. department with this message:" &
				+ "ls_from = " + ls_from, Exclamation!)
			RETURN
		ELSEIF ll_rowcount = 0 THEN
			li_response = MessageBox(gs_app_name + ":  Profile Retrieve", "Cannot determine the number of Profiles that will be retrieved.~rDo you want to continue?", Question!, YesNo!, 2)
			IF li_response = 2 THEN
				RETURN
			END IF	
		ELSEIF ll_rowcount > 0 THEN
			ll_count_profile = dw_profile_count.Object.count_profile[1]
			ll_count_limit = dw_profile_count.Object.count_limit[1]
			IF ll_count_profile >= ll_count_limit THEN
				MessageBox(gs_app_name + ":  Profile Retrieve", "Your selection will retrieve " + String(ll_count_profile) + " Profiles.~rPlease add more selection criteria to reduce the number of Profiles retrieved.", Exclamation!)
				ib_increase_search_criteria=true //DevOps 60694 info_gde 01/04/2022; EQAI - Application is getting terminated in Profile Tracking Screen.
				RETURN
			END IF			
		END IF
	END IF
END IF

idw_header.Modify('DataWindow.Table.Select="' + ls_sql_view + '"')
IF NOT ib_new_record THEN
	SetPointer(HourGlass!)
	SetMicroHelp("Retrieving profiles ...")
	li_return = idw_header.ShareData(idw_detail)
	li_return = idw_header.ShareData(idw_comment)
	li_return = idw_header.ShareData(idw_shipping)
	li_return = idw_header.ShareData(idw_list_prices)
	li_return = idw_header.ShareData(idw_list)
	li_return = idw_header.Sharedata(idw_composition_epa)
	li_return = idw_header.Sharedata(idw_waste_other)
	
	//Devops 18072 Venu for Performance check	 --Start
		If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
			ls_log_text = "Profile Retrival header section-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
			FileWrite(ii_filenum, ls_log_text)
		End If	
	//Devops 18072 Venu for Performance check	 --End

	// This flag is set to control the RFC event on high volume profile retrievals
	ib_retrieving = TRUE
	ll_rowcount = idw_header.Retrieve()
	// DevOps 17204 - Blocking Issue Fix. fhc.8/29/20
		Commit using itr_share;
	ib_retrieving = FALSE
	
    //Devops 18072 Venu for Performance check	 --Start
		If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
			ls_log_text = "Profile Retrival header section-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
			FileWrite(ii_filenum, ls_log_text)
		End If	
	//Devops 18072 Venu for Performance check	 --End
	
	IF ll_rowcount > 0 THEN
		ib_has_retrieved = TRUE
		ib_can_quote = TRUE
		idw_header.TriggerEvent(RowFocusChanged!)
		ll_generator_id = idw_header.Object.generator_id[idw_header.GetRow()]
		ls_tracking_status = idw_header.Object.tracking_type[idw_header.GetRow()] 
		wf_generator_foreign_generator(ll_generator_id) 
		ll_profile_id =  idw_header.Object.profile_id[idw_header.GetRow()]
		
		 IF ls_tracking_status = 'A' THEN  
		     ib_form_email_send = TRUE
		END IF
		//Devops 18072 Venu for Performance check	 --Start
			If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				ls_log_text = "Profile Retrival supplement section-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				FileWrite(ii_filenum, ls_log_text)
			End If	
		//Devops 18072 Venu for Performance check	 --End
	
			//COR2-AM 
		ll_num_rows = idw_benzene_waste_ops_supplemen.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_thermal_supplement_form.Retrieve(ll_profile_id)
		ll_num_rows = idw_waste_import_supplement.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_cylinder_supplement_dragon.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_debris_certification_dragon.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_used_oil_supplement_dragon.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_illinois_disposal_supplemen.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_ldr_form_dragon.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_pcb_supplement_dragon.Retrieve(ll_profile_id) //COR2-JXM
		ll_num_rows = idw_profile_radioactive_supplement_page_1.Retrieve(ll_profile_id)
		ll_num_rows = idw_profile_radioactive_supplement_page_2.Retrieve(ll_profile_id)
		// MPM - 4/19/2020 - DevOps 15205 - Share page_1 with page_3, instead of retrieving page_3:
		idw_profile_radioactive_supplement_page_1.ShareData(idw_profile_radioactive_supplement_page_3)
		ll_num_rows = idw_profile_radioactive_supplement_3sub.Retrieve(ll_profile_id)
		idw_profile_radioactive_supplement_page_1.sharedata (idw_profile_radioactive_waste)
			//DevOps:19924
		idw_gen_knowledge_supplement.Retrieve(ll_profile_id)
		idw_profile_fuels_blending.Retrieve(ll_profile_id) // Dipankar - 08/31/2023 - Added for DevOps 69393
		
		//Devops 18072 Venu for Performance check	 --Start
		If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
			ls_log_text = "Profile Retrival supplement section-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
			FileWrite(ii_filenum, ls_log_text)
		End If	
		//Devops 18072 Venu for Performance check	 --End
		
	ELSE
		ib_can_quote = FALSE
	END IF
END IF

//IF idw_detail.GetRow () > 0 THEN 
//   ld_received_date = idw_detail.Object.received_date[idw_detail.GetRow()] 
//	IF IsNull (ld_received_date ) THEN 
//	     idw_detail.Object.received_date[idw_detail.GetRow()] = ldt_today
//		idw_detail.SetItemStatus(idw_detail.GetRow(), 0, Primary!, notmodified!)
//    END IF
//END IF

	//DevOps:20997 - 
	IF idw_header.GetRow() > 0 THEN 
		li_return = idw_header.GetRow() //DevOps 18610 info_gde 09/21/2021; Profile Tracking - Form ID Filter
		IF not isNull(li_return) AND li_return > 0 THEN
			//ls_labpack_template_flag = idw_header.Object.labpack_template_flag[idw_header.GetRow()]
			ls_labpack_template_flag = idw_header.Object.labpack_template_flag[li_return]
		END IF
		IF  ls_labpack_template_flag = 'T' THEN 
		  IF  gi_group_id = 1099 THEN
			is_access = 'A'
			ELSE
			is_access = 'V'
			END IF
		END IF
	END IF
	
IF is_nav_form_id <> "" THEN 		
	IF ll_rowcount > 0 THEN 
		lst_params.al_profile_id 	= idw_header.Object.profile_id[idw_header.GetRow()]
		lst_params.al_customer_id 	= idw_header.Object.customer_id[idw_header.GetRow()]
		lst_params.al_generator_id = idw_header.Object.generator_id[idw_header.GetRow()]
		lst_params.al_form_id = long ( is_nav_form_id ) 
		lst_params.as_user = gs_user_id
		lst_params.ab_assign = TRUE
		lst_params.as_assign_target = "profile"
		OpenWithParm(w_popup_wcr_assign_profile, lst_params)
		 is_nav_form_id = ""
	END IF
END IF
//Devops 18072 Venu for Performance check	 --Start
If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
	ls_log_text = "Profile Retrival End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
	FileWrite(ii_filenum, ls_log_text)
    FileClose(ii_filenum)
End If	 
//Devops 18072 Venu for Performance check	 --End

// MPM - 3/29/2023 - DevOps 62906 - Reset instance boolean
ib_opened_from_wcr = FALSE


end subroutine

public subroutine wf_query_mode ();integer	li_col_cnt, li_i
string	ls_text, ls_col_name, ls_col_text

// Put dw in query mode
idw_select.Object.DataWindow.QueryMode = "YES"
idw_select.Object.DataWindow.ReadOnly = "NO"

idw_select.SetRedraw(FALSE)

// Get rid of relational operators (>= and <=) so the user does not see them
li_col_cnt = Integer(idw_select.Describe("DataWindow.Column.Count"))
FOR li_i = 1 TO li_col_cnt
	idw_select.SetColumn(li_i)	
	ls_text = Trim(idw_select.GetText())
	IF Left(ls_text,2) = ">=" OR Left(ls_text, 2) = "<=" THEN		
		idw_select.SetText(Right(ls_text, Len(ls_text) - 2))
	END IF
	
	// Reset modified_date to time 0:00 so time would not display
	ls_col_name = idw_select.GetColumnName()
	IF ls_col_name = "date_modified_to" THEN
		ls_col_text = Trim(idw_select.GetText())
		IF (NOT IsNull(ls_col_text)) AND Len(ls_col_text) <> 0 THEN
			ls_col_text = Left(ls_col_text, Pos(ls_col_text, " ") - 1)
			idw_select.SetText(ls_col_text)
		END IF
	END IF
NEXT

idw_select.SetRedraw(TRUE)
idw_select.SetColumn(1)
end subroutine

public subroutine wf_reset ();//DevOps 16836 
idw_header.SetFilter("")
idw_header.Filter()
	
idw_header.ShareDataOff()
idw_header.Reset()
idw_detail.Reset()
idw_comment.Reset()
idw_shipping.Reset()
idw_composition_epa.Reset()
idw_waste_other.Reset()	

idw_technical.Reset()
idw_composition_other.Reset()
idw_lab.Reset()
idw_waste.Reset()
// SK-TX WC - 08/01/2013
idw_waste_code_fed.Reset()
idw_waste_code_state.Reset()
idw_waste_code_eq.Reset()
wf_top6_show()

idw_const.Reset()
idw_composition.Reset()
idw_quoteheader.Reset()
idw_statistics.Reset()
idw_tracking.Reset()
idw_site_type.Reset()
// agc 10/14/19 temp comment out
//idw_generator_locations.Reset() //DevOps 10373

// rb - added rules and category tabs
idw_rules.Reset()
idw_category.Reset()
idw_recipe.Reset()
idw_recipe_update.Reset()

itp_note.uf_reset()
itp_note.uf_sleep()		// Added 10/30/06 JDB

wf_reset_documents()
wf_reset_forms()

wf_price("CLOSEPRICETABS", 0)
wf_import_waste("CLOSEPRICETABS", 0)
idw_approval.Reset()

// rb 04/27/2012
idw_wcr_display_1.Reset()
idw_wcr_display_2.Reset()
idw_wcr_display_3.Reset()
//idw_wcr_display_4.Reset()
idw_shipping_unit.Reset()
idw_profile_gen_contact_form.Reset()
// SK 08/03/2012
idw_ldr_subcategory.Reset()
// SK 06/06/2012
//idw_profile_wcr_facility.Reset()

// COR 2 - MPM
idw_container_size.Reset()
idw_wcr_facility.Reset()

//COR2-AM 
idw_waste_import_supplement.Reset()
idw_benzene_waste_ops_supplemen.Reset()
idw_profile_thermal_supplement_form.Reset()
idw_profile_cylinder_supplement_dragon.Reset()	
idw_profile_debris_certification_dragon.Reset()
idw_profile_used_oil_supplement_dragon.Reset()
idw_profile_illinois_disposal_supplemen.Reset()
dw_profile_ldr_form_dragon.Reset()
idw_profile_pcb_supplement_dragon.Reset()		//COR2 - JXM 02/20/2019
idw_profile_radioactive_supplement_page_1.Reset()
idw_profile_radioactive_supplement_page_2.Reset()
idw_profile_radioactive_supplement_page_3.Reset()		
idw_profile_radioactive_supplement_3sub.Reset()		
idw_gen_knowledge_supplement.Reset()
idw_profile_fuels_blending.Reset() // Dipankar - 09/04/2023 - Added for #69393

//Devops 21596 & 58318-Added By Venu for lazy load implementation.-Start
ib_price_bund_ret_first_inst=False  
ii_pre_sel_tab_newindex=0  
ii_pre_sel_tab_index=0
 //Devops 21596 & 58318-Added By Venu for lazy load implementation.- End
end subroutine

public subroutine wf_set_criteria ();integer 	li_select_row
string 	ls_startval, ls_endval

ib_join_generator = FALSE
ib_join_customer = FALSE
is_select = ""
li_select_row = idw_select.GetRow()
idw_select.AcceptText()

// Check the OTS flag
is_select = is_select + "OTS flag:  " + iddlb_ots_flag.Text + "~r"

// Check the recordset
is_select = is_select + "Profile Status:  " + iddlb_profile_status.Text + "~r"

// Check the labpack template flag //DevOps 28728
is_select = is_select + "LabPack Template flag:  " + iddlb_labpack_template_flag.Text + "~r"

// Check the Profile ID selection criteria
idw_select.SetColumn("profile_id_from")
ls_startval = String(idw_select.GetText())
idw_select.SetColumn("profile_id_to")
ls_endval = String(idw_select.GetText())
IF ls_startval <> "" AND ls_endval <> "" THEN
	is_select = is_select + "Profile ID:  " + ls_startval + " .. " + ls_endval + "~r"
END IF
IF ls_startval <> "" AND ls_endval = "" THEN
	is_select = is_select + "Profile ID:  " + ls_startval + "~r"	
END IF

// Check Docs Pending
//DevOps 16146 info_gde 08/19/2020; Profile Tracking - Add 'Docs Pending' Field (CR)
ls_startval = string(tab_1.tabpage_select.ddlb_docs_pending.text)
IF ls_startval <> "" THEN
	is_select = is_select + "Docs Pending:  " + ls_startval + "~r"
	is_docs_pending=ls_startval
	//ib_join_customer = TRUE
END IF


// Check the customer ID selection criteria
idw_select.SetColumn("customer_id_from")
ls_startval = String(idw_select.GetText())
idw_select.SetColumn("customer_id_to")
ls_endval = String(idw_select.GetText())
IF ls_startval <> "" AND ls_endval <> "" THEN
	is_select = is_select + "Customer ID:  " + ls_startval + " .. " + ls_endval + "~r"
	ib_join_customer = TRUE
END IF
IF ls_startval <> "" AND ls_endval = "" THEN
	is_select = is_select + "Customer ID:  " + ls_startval + "~r"	
	ib_join_customer = TRUE
END IF

////COR2 DevOps 11531 JXM 07/23/2019
////Check the Dragon Reviewed Flag criteria
//idw_select.SetColumn("dragon_reviewed_flag")
//ls_startval = String(idw_select.GetText())
//IF ls_startval <> "" THEN
//	is_select = is_select + " Dragon Reviewed: " + ls_startval + "~r"
//	ib_join_profitcenter = TRUE
//END IF

// Check the Generator ID selection criteria
idw_select.SetColumn("generator_id_from")
ls_startval = String(idw_select.GetText())
idw_select.SetColumn("generator_id_to")
ls_endval = String(idw_select.GetText())
IF ls_startval <> "" AND ls_endval <> "" THEN
	is_select = is_select + "Generator ID:  " + ls_startval + " .. " + ls_endval + "~r"
	ib_join_generator = TRUE
END IF
IF ls_startval <> "" AND ls_endval = "" THEN
	is_select = is_select + "Generator ID:  " + ls_startval + "~r"	
	ib_join_generator = TRUE
END IF

// Check the generator selection criteria
idw_select.SetColumn("generator_epa_id_from")
ls_startval = idw_select.GetText()
idw_select.SetColumn("generator_epa_id_to")
ls_endval = idw_select.GetText()
IF ls_startval <> "" AND ls_endval <> "" THEN 
	is_select = is_select + "Generator:  " + ls_startval + " .. " + ls_endval + "~r"
	ib_join_generator = TRUE
END IF
IF ls_startval <> "" AND ls_endval = "" THEN 
	is_select = is_select + "Generator:  " + ls_startval + "~r"
	ib_join_generator = TRUE
END IF

// Check the generator name selection criteria
idw_select.SetColumn("generator_name_from")
ls_startval = idw_select.GetText()
idw_select.SetColumn("generator_name_to")
ls_endval = idw_select.GetText()
IF ls_startval <> "" AND ls_endval <> "" THEN 
	is_select = is_select + "Generator Name:  " + ls_startval + " .. " + ls_endval + "~r"
	ib_join_generator = TRUE
END IF
IF ls_startval <> "" AND ls_endval = "" THEN 
	is_select = is_select + "Generator Name:  " + ls_startval + "~r"
	ib_join_generator = TRUE
END IF

// Check the Start Date
idw_select.SetColumn("ap_start_date_from")
ls_startval = String(idw_select.GetText())
idw_select.SetColumn("ap_start_date_to")
ls_endval = String(idw_select.GetText())
IF ls_startval<>"" AND ls_endval<>"" THEN 
	is_select = is_select + "Start Date:  "+ls_startval+" .. "+ls_endval+"~r"
END IF
IF ls_startval<>"" AND ls_endval="" THEN 
	is_select = is_select + "Start Date:  "+ls_startval+"~r"
END IF

// Check the Expiration Date
idw_select.SetColumn("ap_expiration_date_from")
ls_startval = String(idw_select.GetText())

idw_select.SetColumn("ap_expiration_date_to")
ls_endval = String(idw_select.GetText())
IF ls_startval<>"" AND ls_endval<>"" THEN 
	is_select = is_select + "Expiration Date:  "+ls_startval+" .. "+ls_endval+"~r"
END IF
IF ls_startval<>"" AND ls_endval="" THEN 
	is_select = is_select + "Expiration Date:  "+ls_startval+"~r"
END IF

//// Check the modified Date
//idw_select.SetColumn("date_modified_from")
//ls_startval = String(idw_select.GetText())
//
//idw_select.SetColumn("date_modified_to")
//ls_endval = String(idw_select.GetText())
//IF ls_startval<>"" AND ls_endval<>"" THEN 
//	is_select = is_select + "Date Modified:  "+ls_startval+" .. "+ls_endval+"~r"
//END IF
//IF ls_startval<>"" AND ls_endval="" THEN 
//	is_select = is_select + "Date Modified:  "+ls_startval+"~r"
//END IF
//

//check the Form ID
idw_select.SetColumn("form_id_wcr")
ls_startval = String(idw_select.GetText())
IF ls_startval<>"" THEN
	is_select = is_select + "Form ID:  "+ls_startval+"~r"
END IF

// Check the waste code selection criteria
ls_startval = tab_1.tabpage_select.sle_waste_code_from.Text
//ls_endval = tab_1.tabpage_select.sle_waste_code_to.Text  //Devops# 18099 commented by Venu
ls_endval="" //Devops# 18099 Added by Venu
IF ls_startval <> "" AND ls_endval <> "" THEN 
	is_select = is_select + "Waste Code:  " + ls_startval + " .. " + ls_endval + "~r"
END IF
IF ls_startval<>"" AND ls_endval="" THEN 
	is_select = is_select + "Waste Code:  " + ls_startval + "~r"
END IF


end subroutine

public subroutine wf_cancel_edit (datawindow adw_name, long al_row);int		li_colcount, li_i
string	ls_coltype, ls_colname

li_colcount = Integer(adw_name.Object.DataWindow.Column.Count)
FOR li_i = 1 TO li_colcount
	ls_coltype = adw_name.Describe("#" + String(li_i) + ".ColType")
	ls_colname = adw_name.Describe("#" + String(li_i) + ".Name")
	CHOOSE CASE Lower(Left(ls_coltype, 4))
		CASE "char" 
			adw_name.SetItem(al_row, li_i, adw_name.GetItemString(al_row, li_i, Primary!, TRUE))
		CASE "long" 
			adw_name.SetItem(al_row, li_i, adw_name.GetItemNumber(al_row, li_i, Primary!, TRUE))
		CASE "numb" 
			adw_name.SetItem(al_row, li_i, adw_name.GetItemNumber(al_row, li_i, Primary!, TRUE))
		CASE "date" 
			adw_name.SetItem(al_row, li_i, adw_name.GetItemDateTime(al_row, li_i, Primary!, TRUE))
		CASE "deci" 
			adw_name.SetItem(al_row, li_i, adw_name.GetItemDecimal(al_row, li_i, Primary!, TRUE))
	END CHOOSE
	
	// rb 06/26/2012 There are double-prompts to save changes
	adw_name.SetItemStatus (al_row, li_i, Primary!, NotModified!)
NEXT
// rb 06/26/2012 There are double-prompts to save changes
adw_name.SetItemStatus (al_row, 0, Primary!, NotModified!)

end subroutine

public function string wf_reset_pdf_printer ();// Declarations needed to enable the printer in version 2.1 Developer edition
//String LicensedTo = "Document Converter Demo Version"
//String ActivationCode = "07EFCDAB01000100118BC49F228A79034B6323768E2C3141A65BFAC54208ECAD29BF054B2E3646E2C035D74904084624E6DE4FAA683597EC152E790009B439B437FAAF0FB81E79BD3CB6891988BEC2378615D6D6A0D003A4B1557E8B457B4CFADC5F8F892D6CDE0EECC1ACF3E60E972899BB3F0F"
//DevOPs:13777 - New amyuni object declaring as a global variable instead of changing in many places whenever there is new version comes up
string	LicensedTo = gs_invoice_company_name 
string	ActivationCode = gs_invoice_ActivationCode

//string	LicensedTo = 'Environmental Quality Company' 
//string	ActivationCode = '07EFCDAB01000100E4F6C16A95B5EC90362E7F3FEE3A348D5614D9E761D95A29560E2F5B4798DB9EFAD0E1A43ACC6D540D7CA589520A5782F998CE238D8F3B10D777F4B24C8B95F96E3126D57FFE1742388A89A36B7AB01D872A6C2F86FA8E78DC7E39094B1265F708EA8D1C941B'


string	ls_printer_amyuni, ls_return, ErrorMsg
oleobject pdfobj

// This is the printer name as installed by default
ls_printer_amyuni = "APDF"

TRY
	SetPointer(Hourglass!)

	pdfobj = CREATE OLEObject
	
	// Connect the pdfobj ole object to the cdintf interface of CDIntf.dll
	// To be able to use this dll CDIntf should be registered in Windows.
	pdfobj.ConnectToNewObject("cdintfEx.cdintfEx")
	
	// Attach to PDFprinter
	pdfobj.DriverInit (ls_printer_amyuni)  // PrinterName is declared as the name of the existing printer
	pdfobj.EnablePrinter(LicensedTo, ActivationCode)
	ErrorMsg = pdfobj.GetLastErrorMsg()
	pdfobj.DriverEnd()
	
	DisconnectObject(pdfobj)
	DESTROY pdfobj
	RETURN ErrorMsg

CATCH(nullobjecterror lno)
	IF lno.GetMessage() > "" THEN
		ls_return = lno.GetMessage()
	END IF
	RETURN ls_return
CATCH(DWRuntimeError ldw)
	IF ldw.GetMessage() > "" THEN
		ls_return = ldw.GetMessage()
	END IF
	RETURN ls_return
CATCH(runtimeerror lrt)
	IF lrt.GetMessage() > "" THEN
		ls_return = lrt.GetMessage()
	END IF
	RETURN ls_return
END TRY
end function

public function integer wf_modifiedcount_quote ();dwItemStatus ldwItemStatus
boolean	lb_changed_price
long		ll_count, ll_row, ll_count_price
integer 	li_colcount, li_i
string	ls_columns_modified, ls_column_name

// This function checks for Quote modifications; includes all datawindows
// that make up a Quote

//// FOR DEBUGGING WHAT is being modified, change the datawindow name to the datawindow
//// that shows a modification AND check the columns
//ll_row = idw_header.GetRow()
//if ll_row > 0 and IsValid(idw_header) then
//	li_colcount = Integer(idw_header.Describe("DataWindow.Column.Count"))
//	for li_i = 1 to li_colcount
//		ls_column_name = idw_header.Describe("#"+string(li_i) + ".Name")
//		ldwItemStatus = idw_header.GetItemStatus(ll_row, ls_column_name, Primary!)
//		IF ldwItemStatus = DataModified! THEN
//			IF ls_columns_modified = "" THEN
//				ls_columns_modified = ls_column_name
//			ELSE
//				ls_columns_modified = ls_columns_modified + ", " + ls_column_name
//			END IF
//		END IF
//	NEXT
//end IF
//IF ls_columns_modified <> "" THEN
//	MessageBox("DEBUG", "Columns modified: " + ls_columns_modified, Exclamation!)
//END IF

// Anything modified?
ll_count = 0
ll_count = ll_count + idw_quoteheader.ModifiedCount()
ll_count = ll_count + idw_approval.ModifiedCount()

wf_price("MODIFIEDCOUNT", 0)
ll_count = ll_count + ii_price_modifiedcount

wf_import_waste("MODIFIEDCOUNT", 0)

IF ib_changed_quote THEN
	ll_count = ll_count + 1
END IF
IF ib_changed_approval THEN
	ll_count = ll_count + 1
END IF


RETURN ll_count

end function

public function integer wf_modifiedcount ();boolean	lb_changed_wcr
long		ll_count

//// FOR DEBUGGING WHAT is being modified, change the datawindow name to the datawindow
//// that shows a modification AND check the columns
//long ll_row
//integer	li_colcount, li_i
//string	ls_column_name, ls_columns_modified
//dwItemStatus ldwitemstatus
//ll_row = idw_header.GetRow()
//if ll_row > 0 and IsValid(idw_header) then
//	li_colcount = Integer(idw_header.Describe("DataWindow.Column.Count"))
//	for li_i = 1 to li_colcount
//		ls_column_name = idw_header.Describe("#"+string(li_i) + ".Name")
//		ldwItemStatus = idw_header.GetItemStatus(ll_row, ls_column_name, Primary!)
//		IF ldwItemStatus = DataModified! THEN
//			IF ls_columns_modified = "" THEN
//				ls_columns_modified = ls_column_name
//			ELSE
//				ls_columns_modified = ls_columns_modified + ", " + ls_column_name
//			END IF
//		END IF
//	NEXT
//end IF
//IF ls_columns_modified <> "" THEN
//	MessageBox("DEBUG", "Columns modified: " + ls_columns_modified, Exclamation!)
//END IF

// Anything modified?
ll_count = 0
ll_count = ll_count + wf_ModifiedCount_profile()
ll_count = ll_count + wf_ModifiedCount_quote()
ll_count = ll_count + wf_ModifiedCount_waste_import()
ll_count = ll_count + idw_technical.ModifiedCount()
ll_count = ll_count + idw_lab.ModifiedCount()

ll_count = ll_count + idw_tracking.ModifiedCount()
ll_count = ll_count + idw_waste.ModifiedCount()
ll_count = ll_count + idw_waste_code_fed.ModifiedCount()
ll_count = ll_count + idw_waste_code_state.ModifiedCount()
ll_count = ll_count + idw_waste_code_eq.ModifiedCount()
ll_count = ll_count + idw_const.ModifiedCount()
ll_count = ll_count + idw_composition.ModifiedCount()
ll_count = ll_count + idw_ldr_subcategory.ModifiedCount()
ll_count = ll_count + idw_statistics.ModifiedCount()
ll_count = ll_count + itp_note.uf_modifiedCount()
ll_count = ll_count + idw_approval.deletedcount()
ll_count = ll_count + iudw_document.uf_modifiedCount()
ll_count  = ll_count + idw_profile_thermal_supplement_form.ModifiedCount()
ll_count  = ll_count + idw_gen_knowledge_supplement.ModifiedCount()
ll_count  = ll_count + idw_profile_fuels_blending.ModifiedCount() // Dipankar - 09/08/2023 - Added for #693693
// rb - added rules and category tabs - or do I change to process with a boolean?
ll_count += idw_rules.ModifiedCount()
ll_count += idw_rules.DeletedCount()
ll_count += idw_category.ModifiedCount()
ll_count += idw_category.DeletedCount()
ll_count += idw_site_type.ModifiedCount()
ll_count += idw_site_type.DeletedCount()
// agc 10/14/19 temp comment out
////DevOps 10373
//ll_count += idw_generator_locations.ModifiedCount()
//ll_count += idw_generator_locations.DeletedCount()

ll_count += idw_recipe_update.ModifiedCount()
ll_count += idw_recipe_update.DeletedCount()

IF ib_changed_waste_code THEN
	ll_count = ll_count + 1
END IF

IF ib_changed_const THEN
	ll_count = ll_count + 1
END IF

IF ib_changed_comp THEN ll_count = ll_count + 1

IF ib_changed_wcr THEN
	ll_count = ll_count + 1
END IF

//lb_changed_wcr = NOT iuo_wcr_form.ib_save

IF lb_changed_wcr THEN
	ll_count = ll_count + 1
END IF	

IF ib_changed_form THEN
	ll_count = ll_count + 1
END IF

IF ib_changed_tracking THEN
	ll_count = ll_count + 1
END IF
	
IF ib_changed_technical THEN
	ll_count = ll_count + 1
END IF
	
IF ib_changed_lab THEN
	ll_count = ll_count + 1
END IF

// SK 10/28/2013.. Also check the audit, in case there has been an instance of direct SQL update 	
ll_count += idw_audit.ModifiedCount()

RETURN ll_count

end function

public function integer wf_modifiedcount_profile ();
/* 

COR2-JAG

Function/Event: wf_modifiedcount_profile function
Author        : 
Created       : 
Purpose       : 

 Note(s). 
 
 Input Parameters:None

 Output Parameters:None

 ---------------------- Revision History ------------------------------------------------
 Version  Modified by   Date        Description of change
-------     -----------     ----------   ---------------------------------------------------------
   01         jag           1/2019       5513, 5516

*/
// COR2-JAG

// Variable Declaration Section
dwItemStatus ldwItemStatus
long		ll_count, ll_row
integer 	li_colcount, li_i
string	ls_columns_modified, ls_column_name

// COR2-JAG
// Main Routine Starts

// This function checks for Profile modifications; includes all datawindows
// that make up the Profile

//// FOR DEBUGGING WHAT is being modified, change the datawindow name to the datawindow
//// that shows a modification AND check the columns
//ll_row = idw_header.GetRow()
//if ll_row > 0 and IsValid(idw_header) then
//	li_colcount = Integer(idw_header.Describe("DataWindow.Column.Count"))
//	for li_i = 1 to li_colcount
//		ls_column_name = idw_header.Describe("#"+string(li_i) + ".Name")
//		ldwItemStatus = idw_header.GetItemStatus(ll_row, ls_column_name, Primary!)
//		IF ldwItemStatus = DataModified! THEN
//			IF ls_columns_modified = "" THEN
//				ls_columns_modified = ls_column_name
//			ELSE
//				ls_columns_modified = ls_columns_modified + ", " + ls_column_name
//			END IF
//		END IF
//	NEXT
//end IF
//IF ls_columns_modified <> "" THEN
//	MessageBox("DEBUG", "Columns modified: " + ls_columns_modified, Exclamation!)
//END IF

// Anything modified?
ll_count = 0
ll_count = ll_count + idw_header.ModifiedCount()
ll_count = ll_count + idw_detail.ModifiedCount()
ll_count = ll_count + idw_comment.ModifiedCount()
ll_count = ll_count + idw_shipping.ModifiedCount()
// COR2-MPM
ll_count += idw_container_size.ModifiedCount()
ll_count += idw_container_size.DeletedCount()
ll_count = ll_count + idw_composition_epa.ModifiedCount()
ll_count += idw_site_type.ModifiedCount()
ll_count += idw_site_type.DeletedCount()
// agc 10/14/19 temp comment out
////DevOps 10373
//ll_count += idw_generator_locations.ModifiedCount()
//ll_count += idw_generator_locations.DeletedCount()

ll_count += idw_wcr_facility.ModifiedCount()
ll_count += idw_wcr_facility.DeletedCount()
// rb 04/27/2012
ll_count += idw_shipping_unit.ModifiedCount()
ll_count += idw_shipping_unit.DeletedCount()

ll_count += dw_ship_volume.ModifiedCount()
ll_count += dw_ship_volume.DeletedCount()
// SK 08/03/2012
ll_count += idw_ldr_subcategory.ModifiedCount()
ll_count += idw_ldr_subcategory.DeletedCount()
// SK 09/10/2012
ll_count += idw_profile_gen_contact_form.ModifiedCount()
ll_count += idw_wcr_display_3.ModifiedCount()
//ll_count += idw_wcr_display_4.ModifiedCount()
// SK 06/06/2012
//ll_count += idw_profile_wcr_facility.ModifiedCount()
//ll_count += idw_profile_wcr_facility.DeletedCount()
// COR2-JAG
// MPM - COR2 - Commented out the following line.  Just - No.
//ll_count += idw_wcr_display_1.Modifiedcount( ) // JAG 1/2019  5516 , 5513

//COR2-AM 
ll_count += idw_waste_import_supplement.ModifiedCount()
ll_count += idw_waste_import_supplement.DeletedCount()

ll_count += idw_benzene_waste_ops_supplemen.ModifiedCount()
ll_count += idw_benzene_waste_ops_supplemen.DeletedCount()

ll_count += idw_profile_thermal_supplement_form.ModifiedCount()
ll_count += idw_profile_thermal_supplement_form.DeletedCount()

ll_count += idw_gen_knowledge_supplement.ModifiedCount()
ll_count += idw_gen_knowledge_supplement.DeletedCount()

ll_count += idw_profile_cylinder_supplement_dragon.ModifiedCount()
ll_count += idw_profile_cylinder_supplement_dragon.DeletedCount()

ll_count += idw_profile_debris_certification_dragon.ModifiedCount()
ll_count += idw_profile_debris_certification_dragon.DeletedCount()

ll_count += idw_profile_used_oil_supplement_dragon.ModifiedCount()
ll_count += idw_profile_used_oil_supplement_dragon.DeletedCount()

ll_count += idw_profile_illinois_disposal_supplemen.ModifiedCount()
ll_count += idw_profile_illinois_disposal_supplemen.DeletedCount()

ll_count += idw_profile_ldr_form_dragon.ModifiedCount()
ll_count += idw_profile_ldr_form_dragon.DeletedCount()

ll_count += idw_profile_radioactive_supplement_page_1.ModifiedCount()
ll_count += idw_profile_radioactive_supplement_page_1.DeletedCount()

ll_count += idw_profile_radioactive_supplement_page_2.ModifiedCount()
ll_count += idw_profile_radioactive_supplement_page_2.DeletedCount()

ll_count += idw_profile_radioactive_supplement_page_3.ModifiedCount()
ll_count += idw_profile_radioactive_supplement_page_3.DeletedCount()

ll_count +=  idw_profile_radioactive_supplement_3sub.ModifiedCount()
ll_count +=  idw_profile_radioactive_supplement_3sub.DeletedCount()	

ll_count += idw_profile_pcb_supplement_dragon.ModifiedCount() //COR-JXM
ll_count += idw_profile_pcb_supplement_dragon.DeletedCount() //COR-JXM

// Dipankar - 09/08/2023 - Begin - Added for #693693
ll_count +=  idw_profile_fuels_blending.ModifiedCount()
ll_count +=  idw_profile_fuels_blending.DeletedCount()	
// Dipankar - 09/08/2023 - End - Added for #693693

IF ib_changed_profile THEN
	ll_count = ll_count + 1
END IF

RETURN ll_count

end function

public function integer wf_validate ();/* 

// COR2-JAG
Function/Event: wf_validate function
Author        : 
Created       : f
Purpose       : 

 Note(s). 
 
 Input Parameters:None

 Output Parameters:None

 ---------------------- Revision History ------------------------------------------------
Version  Modified by   Date    Description of change
-------    -------------  -------- ---------------------------------------------------------
   01         JAG          1/2019  5513, 5516             
			 info_gde	    2/2020  13227  - Other Functions - Profile Tracking errant validation msg for Primary Waste Code and Waste Technology Services email letter
			  JCB		  20200515 #15700 validate tclp_flag not null or empty
			  JCB 		  20200528 #15695 cross_check typical and max concentrations			  
*/

// COR2-JAG
// Variable Declaration Section
//DevOps #14705 info_gde 03/10/2020; Add New Profile (Other Tabs) - Import (Tab)
// The purpose of this function is to validate all Profile requirements to save
date		ld_start_date, ld_end_date,ld_approval_due_date, ld_date_added,ld_tsdf_approval_expire_date
datetime	ldt_start_date, ldt_end_date
double	ldb_ddvoc, ldb_ccvoc, ldb_tce, ldb_mc
integer	li_disposal_service, li_air_permit_status_uid, j ,li_pos
Long		ll_dw_waste_code_fed, ll_composition_epa_row, ll_CESQ_waste_count, ll_OUTS_waste_count,ll_recipe_id, ll_count, ll_row_document,ll_pcb_flag_count
String 	ls_epa_source_code, ls_epa_form_code, ls_tsdf_status, ls_air_permit_flag,ls_un_na_flag,ls_labpack_flag,ls_rcra_exempt_reason
long		ll_row_header, ll_row_find, ll_rowcount, ll_row_approval, ll_row_tech, ll_null,	ll_un_na_number,ll_radioactive_row,ll_dw_waste_code_eq,ll_labpack_process_id
long		ll_row_const, ll_row_quoteheader,ll_row, ll_const_count, ll_recipe_count, ll_recipe_primary_flag_count =0, ll_row_comp, ll_active_primary_facility_count
long		ll_customer_id, ll_generator_id, ll_treatment_id, ll_company_id, ll_profit_ctr_id, ll_billing_project_id,ll_state_right_waste_code_count, ll_row_shipping
long		ll_profile_id, ll_count_active, ll_orig_customer_id, ll_treatment_process_id,ll_state_waste_code_count,ll_state_fed_waste_code_count
long		ll_count_duplicate, ll_const_id, ll_waste_type_id, ll_approval_wastetype_id,ll_CESQ_OUTS_waste_count, ll_find_row, ll_process_code_uid
long		ll_waste_code_uid, ll_naics_code, ll_OB_TSDF_approval_id, ll_srec_exempt_id,ll_CESQ_OUTS_in_waste_count, ll_document_rowcount
string	ls_msg, ls_msg_error, ls_msg_const, ls_profile_status, ls_customer_name, ls_treat_error, ls_tsdf_code, ls_manifest_dot_shipping_name,ls_generic_flag
string	ls_generator_name, ls_waste_code, ls_find, ls_haz_flag, ls_tmp, ls_transship,ls_radioactive_waste_type, ls_process_code, ls_lab_pack_return_string
string	ls_disposal_service, ls_approval_code, ls_eq_flag, ls_return_waste, ls_desc, ls_sr_type_code,ls_primary_flag,ls_labpack_template_flag
string	ls_location, ls_location_control, ls_location_report_flag, ls_location_type, ls_fingerprint_type, ls_state_profile_review_required_flag
string	ls_surcharge_flag, ls_waste_type_code, ls_approval_status, ls_override_profile_sr_type, ls_tracking_type, ls_bill_unit_code
string	ls_approval_error = "", ls_msg_tx_waste, ls_filter,ls_CESQ_waste,ls_OUTS_waste,ls_CESQ_end,ls_OUTS_end, ls_facility
string	ls_consolidate_cont_approval, ls_customerbilling_consolidate_cont_flag, ls_customer_consolidate_cont_flag, ls_air_permit_status  
string	ls_msg_consolidation_err= "" , ls_tsdf_approval_status, ls_unit, ls_cwt_category_required_flag, ls_approval_req_flag, ls_comp_desc, ls_cataylst_flag2
integer	li_rc, li_cwt_category_uid, i 
decimal ld_min_concentration , ld_max_concentration, ld_typical_concentration
decimal	ld_sum_of_typical_pct, ld_sum_max_concentration					//20200528 jcb #15695 add
//Task 9816 - LDR Validation 04/10/2019
String ls_WasteWaterFlag, ls_MeetsAltSoilTreatment_stds, ls_MoreThan50PctDebris,ls_ExceedLdrStandards, ls_DebrisSeparated, ls_norm_threshold_flag
String ls_DebrisNotMixedOrDiluted, ls_LdrReqFlag, ls_ContituentsRequiringTreatmentFlag, ls_DisplayMsg, ls_DisplayTitle, ls_MsgBeg, ls_MsgEnd
Long ll_row_ldr, ll_ProfileWasteManagedID_1, ll_ProfileWasteManagedID_2, ll_ProfileWasteManagedID_3
Long ll_ProfileWasteManagedID_4, ll_ProfileWasteManagedID_5, ll_ProfileWasteManagedID_6
//COR2 JXM 04/11/2019 Waste Import Validation Task 5352/9461
String ls_EpaNoticeID, ls_ConsentNumber,ls_ApprovedVolume, ls_generator_phone
DateTime ldt_EffectiveDate, ldt_ExpirationDate,ld_norm_threshold_date
Long ll_row_waste, ll_ApprovedVolume,ll_cataylst_fed_waste_count
string ls_msg_warning, ls_msg_warning_display,ls_cataylst_flag, ls_TSDF_state, ls_msg_job_type, ls_job_type, ls_quantity, ls_generator_state_id_val
// JXM 07/18/2019 11536 - Validation for NORM Threshold Fields
String ls_e2_e3_err, ls_norm_threshold_required, ls_norm_threshold, ls_schedule_received_flag, ls_msg_error_tenorm_fee 
Long ll_exist_schedule_profile_id, ll_approval_catalyst_flg, ll_idx, ll_primary_facility_count
long  		ll_row_G3								// 20200528 jcb #15695 add 
boolean  lb_required_flag, lb_state_waste_pcb = FALSE, lb_fed_waste_pcb = FALSE,lb_eq_waste_pcb = FALSE
boolean  lb_has_UHC_checked = FALSE      // 20200527 jcb #15695 add 
string ls_pcb_concentration_500,ls_pcb_concentration_50_499,ls_pcb_source_concentration_gr_50,ls_pcb_disposal_under_TSCA, ls_dot_waste_flag_msg
string  ls_rcra_exempt_flag, ls_cyanide_plating,	ls_waste_water_flag, ls_meets_alt_soil_treatment_stds, ls_exceed_ldr_standards, ls_more_than_50_pct_debris, ls_waste_meets_ldr_standards, ls_ldr_err_msg
string ls_warning_or_error = '', ls_tenorm_validation_message = '', ls_waste_code_msg = '', ls_generator_knowledge = '', ls_warning = '', ls_msg_generator_phone = '', ls_msg_caution_text
string		ls_tclp_flag 				// 20200515 jcb #15700 add
string 	ls_chk_G3				// 20200528 jcb #15695 add 
string		 ls_generator_state,ls_state_id, ls_labpack_template_msg //DevOps 29641
string		ls_price_code_required_flag, ls_price_code_error_msg //DevOps 42784 AGC 10/10/2022 added price code required validation
string		ls_msg_warning_2, ls_fuels_blending_msg
Datastore lds

// COR2-JAG
// Main Routine Starts

boolean	lb_found_row = FALSE

// Must have a row
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN gi_no_action

// Initialize
wf_AcceptText()
ls_msg_error = ""
is_msg_validate_price = ""
is_msg_validate_wcr = "" // rb 05/29/2012
is_msg_validate_shipping = ""
ls_ldr_err_msg = ""
ls_e2_e3_err = ""
ls_msg_job_type = ""
SetNull(ll_null)

// Profile is validated for different states in the process
ls_profile_status = idw_header.Object.curr_status_code[ll_row_header]
ls_tracking_type	= idw_header.Object.tracking_type[ll_row_header]
ls_price_code_required_flag = idw_header.Object.price_code_required_flag[ll_row_header] //DevOps 42784 AGC 10/10/2022 added price code required validation

// Check if this Profile is being Voided
IF ls_profile_status = "V" and idw_header.Object.curr_status_code.Original[ll_row_header] <> "V" THEN
	li_rc = wf_void()
	IF li_rc < 0 THEN
		IF ls_msg_error = "" THEN
			ls_msg_error = "You are not authorized to Void a Profile"
		ELSE
			ls_msg_error = ls_msg_error + "~rYou are not authorized to Void a Profile"
		END IF
	ELSEIF li_rc > 0 THEN
		IF ls_msg_error = "" THEN
			ls_msg_error = "Loads have been received against this Profile and it cannot be Voided"
		ELSE
			ls_msg_error = ls_msg_error + "~rLoads have been received against this Profile and it cannot be Voided"
		END IF
	END IF
END IF

///////////////////////////////////////////////////////
// Validate Profile Header
///////////////////////////////////////////////////////

// Customer
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
ls_customer_name = Trim(idw_header.Object.pending_customer_name[ll_row_header])
ll_generator_id=idw_header.object.generator_id[ll_row_header]

IF ll_generator_id > 0 THEN //DevOps 39727 info_gde; for save on new record(s) save.
		SELECT generator_state,state_id
			INTO :ls_generator_state,:ls_state_id
			FROM Generator
			WHERE generator_id = :ll_generator_id
		USING itr_share;
		
		IF itr_share.SQLCode <> 0 THEN
			MessageBox(gs_app_name+": SQL ERROR", itr_share.SQLErrText, Exclamation!)
		ELSEIF  (ls_generator_state = "IL" AND (ls_state_id="" OR isNull(ls_state_id))) THEN 
			ls_generator_state_id_val=''
			ls_generator_state_id_val = "Generator Site: The State ID field is required when the Site Address has 'IL' listed as the state."  
		END IF
END IF

//DevOps 17133 info_gde 09/24/2020; PROD EQAI - Profile Tracking - Copied Profile - Documents from a different profile record added
////For Copying Profile this information not available at this point-in-time of the process
//IF (IsNull(ll_customer_id) OR ll_customer_id = 0) AND ib_in_CopyProfile THEN
//	RETURN gi_success
//END IF

IF (IsNull(ll_customer_id) OR ll_customer_id = 0) AND &
	(IsNull(ls_customer_name) OR ls_customer_name = "") THEN
		//DevOps:20991 - When LabPack process is on, do not validate expire date at the time of save.
	 ls_labpack_template_flag = idw_header.Object.labpack_template_flag[ll_row_header]
	IF IsNull(ls_labpack_template_flag) OR ls_labpack_template_flag <> 'T' THEN 
	    MessageBox(gs_app_name + ":  Validation Error", "You must have a Customer ID or a Customer Name.", Exclamation!)
	    RETURN gi_failure
	END IF
// Check customer ID
ELSE
	IF (NOT IsNull(ll_customer_id) AND ll_customer_id > 0) THEN
		// Check customer
		IF f_chk_customer(ll_customer_id, FALSE) <> 0 THEN
			IF ls_msg_error <> "" THEN
				ls_msg_error = ls_msg_error + "~rCustomer ID"
			ELSE
				ls_msg_error = "Customer ID"
			END IF
		ELSEIF f_chk_cust_status(ll_customer_id, FALSE) <> 1 THEN
			IF ls_msg_error <> "" THEN
				ls_msg_error = ls_msg_error + "~rCustomer is not Active"
			ELSE
				ls_msg_error = "Customer is not Active"
			END IF
		ELSE
		END IF
	END IF	
	
END IF //Customer end if moved to here DevOps:20996 - LPx Profile 

// Dipankar - 3/7/2023 - Begin - Added for #66431
ls_msg_caution_text = wf_validate_caution_text()

IF ls_msg_caution_text <> "" THEN
	MessageBox(gs_app_name + ":  Validation Error", ls_msg_caution_text, Exclamation!)
	RETURN gi_failure
END IF
// Dipankar - 3/7/2023 - End - Added for #66431
	

// DevOps 29641 AGC 11/13/2021 added validation for duplicate lab pack process
ll_profile_id = idw_header.object.profile_id[ll_row_header]
if isnull(ll_profile_id) then ll_profile_id = 0
ll_process_code_uid = idw_header.object.process_code_uid[ll_row_header]
ls_labpack_template_flag = idw_header.Object.labpack_template_flag[ll_row_header]
if ls_labpack_template_flag = 'T' then
	select process_code
	into :ls_process_code
	from LabPackProcessCode
	where process_code_uid = :ll_process_code_uid
	using gtr_share;
	
	if gtr_share.sqlcode <> 0 then
		messagebox('Error','Unable to retrieve lab pack process code')
		RETURN gi_failure
	end if
	
	select count(1)
	into :ll_count
	from Profile
	where profile_id <> :ll_profile_id
	and process_code_uid = :ll_process_code_uid
	and labpack_template_flag = 'T'
	using gtr_share;
	
	if gtr_share.sqlcode <> 0 then
		messagebox('Error','Unable to check for duplicate lab pack process code')
		RETURN gi_failure
	else
		if ll_count > 0 then
			SELECT STUFF(REPLACE((SELECT DISTINCT  ' ,' + LTRIM(RTRIM(u3.profile_id)) 
			INTO :ls_lab_pack_return_string
			FROM Profile u3 
			WHERE process_code_uid = :ll_process_code_uid
			AND profile_id <> :ll_profile_id
			FOR XML PATH('')),' ,',', '), 1, 2, '')
			Using gtr_share;
		
			IF gtr_share.SQLCode < 0 then
				MessageBox ("SQL Error", gtr_share.SQLErrText, exclamation!)
				RETURN gi_failure
			END IF
			
			if len(ls_labpack_template_msg) > 0 then
				ls_labpack_template_msg = ls_labpack_template_msg + '~rOnly one Profile Template may exist for each Lab Pack Process - ' + ls_process_code + ' has already been used on another profile ' + ls_lab_pack_return_string
			else
				ls_labpack_template_msg = 'Only one Profile Template may exist for each Lab Pack Process - ' + ls_process_code + ' has already been used on another profile ' + ls_lab_pack_return_string
			end if
		end if
	end if
end if


	// Generator
	ll_generator_id = idw_header.Object.generator_id[ll_row_header]
	
	If idw_header.Object.generator_epa_id[ll_row_header] = 'VARIOUS' Then
		idw_header.Object.generator_id[ll_row_header] = gl_various_generator_id
	ELSEIF IsNull(ll_generator_id) OR ll_generator_id = gl_various_generator_id OR ll_generator_id = gl_na_generator_id THEN
		//DevOps:20991 - When LabPack process is on, do not validate expire date at the time of save.
		 ls_labpack_template_flag = idw_header.Object.labpack_template_flag[ll_row_header]
		IF  IsNull(ls_labpack_template_flag) OR ls_labpack_template_flag <> 'T' THEN 
				IF ls_msg_error = "" THEN
					ls_msg_error = "Generator ID"
				ELSE
					ls_msg_error = ls_msg_error + "~rGenerator ID"
				END IF
		END IF
	ELSE
		// Check generator   
		SELECT generator_name 
			INTO :ls_generator_name
			FROM Generator
			WHERE generator_id = :ll_generator_id
		USING itr_share;
		
		IF itr_share.SQLCode < 0 THEN
			MessageBox(gs_app_name+": SQL ERROR", itr_share.SQLErrText, Exclamation!)
			IF ls_msg_error <> "" THEN
				ls_msg_error = ls_msg_error + "~rGenerator ID"
			ELSE
				ls_msg_error = "Generator ID"
			END IF
		ELSEIF itr_share.SQLCode = 100 THEN
			IF ls_msg_error <> "" THEN
				ls_msg_error = ls_msg_error + "~rGenerator ID"
			ELSE
				ls_msg_error = "Generator ID"
			END IF
		END IF	
	END IF
	// GEM:35153
	IF  ll_generator_id <> 0 THEN 
		SELECT naics_code, generator_phone
		INTO :ll_naics_code, :ls_generator_phone
		FROM Generator
		WHERE generator_id = :ll_generator_id
		USING itr_share;
		
		IF itr_share.SQLCode = 100 THEN
			MessageBox("Generator Inquiry", &
					"Generator Not Found")
		ELSEIF itr_share.SQLCode <> 0 then
			MessageBox("Database Error", &
				itr_share.SQLErrText, Exclamation!)
		END IF

		
		IF IsNull( ll_naics_code ) OR ll_naics_code = 0 THEN
			MessageBox(gs_app_name + ":  Warning", "The generator on this profile is missing a NAICS code.")
		END IF
		      
		li_pos = pos(ls_generator_phone, ' ')
		do while li_pos > 0
   			ls_generator_phone = replace(ls_generator_phone, li_pos, 1, '')
   			li_pos = pos(ls_generator_phone, ' ')
		loop	
		IF IsNull( Trim(ls_generator_phone) ) OR len(Trim(ls_generator_phone)) <> 10 THEN //DevOps 30189 info_gde 07/28/2022; Generator 'Business Phone' > Linked Records Validations
			IF ls_msg_generator_phone = "" THEN
				ls_msg_generator_phone = " The linked generator record does not contain a valid Business Phone number."
			ELSE
				ls_msg_generator_phone = ls_msg_generator_phone + "~rThe linked generator record does not contain a valid Business Phone number."
			END IF
		END IF
END IF
	
	
	// SK 08102012 Check Approval Due Date Validations - Should not be in past, Should be no farther out than two months
	// MPM - 8/4/2023 - DevOps 58688 - Modified/re-added Appr. Due Date warning messages
	ld_approval_due_date = Date(idw_header.Object.approval_due_date[ll_row_header])
	IF NOT IsNull(ld_approval_due_date) THEN
		IF ld_approval_due_date < Today() THEN 
			IF ls_msg_warning_2 > '' THEN ls_msg_warning_2 += '~r~n'
			ls_msg_warning_2 += "Appr. Due Date cannot be in the past."
		END IF
		IF DaysAfter(Today(), ld_approval_due_date) >= 30 THEN 
			IF ls_msg_warning_2 > '' THEN ls_msg_warning_2 += '~r~n'
			ls_msg_warning_2 += "Appr. Due Date cannot be further than a month out."
		END IF
	END IF
	
	///////////////////////////////////////////////////////
	// Check Primary Waste Code
	///////////////////////////////////////////////////////
	ll_waste_code_uid = idw_header.Object.waste_code_uid[ll_row_header]
	ls_waste_code	= idw_header.Object.waste_code[ll_row_header]
	//DevOps #13227 info_gde 02/07/20 - Start
	IF IsNull(ll_waste_code_uid) THEN
	// 20200211 jcb #13227 DLET IF IsNull(ll_waste_code_uid) AND idw_wcr_display_1.object.state_waste_code_flag[1] = 'F' THEN
	//DevOps #13227 info_gde 02/07/20 - End
		IF ls_msg_error = "" THEN
			ls_msg_error = "Primary Waste Code"
		ELSE
			ls_msg_error = ls_msg_error + "~rPrimary Waste Code"
		END IF
	ELSE
		// Get haz flag
		SELECT haz_flag
			INTO :ls_haz_flag
			FROM WasteCode 
			WHERE waste_code_uid = :ll_waste_code_uid
		USING itr_share;
	END IF
	
	///////////////////////////////////////////////////////
	// Check that waste codes are permitted in all facilities
	///////////////////////////////////////////////////////
	ls_return_waste = wf_validate_waste_code()
	IF ls_return_waste > "" THEN
		IF ls_msg_error <> "" THEN
			ls_msg_error += ls_return_waste
		ELSE
			ls_msg_error = ls_return_waste
		END IF
	END IF

	///////////////////////////////////////////////////////
	// Validate TX waste codes
	///////////////////////////////////////////////////////
	ls_msg_tx_waste = wf_validate_tx_waste_codes()
	IF ls_msg_tx_waste > "" THEN
		IF ls_msg_error <> "" THEN
			ls_msg_error += ls_msg_tx_waste
		ELSE
			ls_msg_error = ls_msg_tx_waste
		END IF
	END IF
	
	// Check orig customer
	ll_orig_customer_id = idw_header.Object.orig_customer_id[ll_row_header]
	IF (NOT IsNull(ll_orig_customer_id) AND ll_orig_customer_id > 0) THEN
		// Check customer
		IF f_chk_customer(ll_orig_customer_id, FALSE) <> 0 THEN
			IF ls_msg_error <> "" THEN
				ls_msg_error = ls_msg_error + "~rOriginal Customer ID"
			ELSE
				ls_msg_error = "Original Customer ID"
			END IF
		ELSEIF f_chk_cust_status(ll_orig_customer_id, FALSE) <> 1 THEN
			IF ls_msg_error <> "" THEN
				ls_msg_error = ls_msg_error + "~rOriginal Customer is not Active"
			ELSE
				ls_msg_error = "Original Customer is not Active"
			END IF
		ELSE
			SELECT IsNull(eq_flag, 'F')
				INTO :ls_eq_flag
				FROM Customer
				WHERE customer_id = :ll_orig_customer_id
			USING itr_share;
			IF ls_eq_flag = 'T' THEN
				IF ls_msg_error <> "" THEN
					ls_msg_error = ls_msg_error + "~rOriginal Customer cannot be an EQ facility"
				ELSE
					ls_msg_error = "Original Customer cannot be an EQ facility"
				END IF
			END IF	
		END IF
	// MPM - 1/17/2022 - DevOps 29529
	ELSE
		IF idw_header.Object.customer_eq_flag[ll_row_header] = 'T' THEN
      	   ls_warning += "You have this profile set up for an Internal Customer ID, but have not entered an Original Customer ID. Please review to confirm that this is correct.~r~n"
		END IF
	END IF	
	
	// Check for approval desc.  This description prints on the Cust Letter and the Invoice
	ls_desc = TRIM(idw_header.Object.approval_desc[ll_row_header])
	IF IsNull(ls_desc) OR ls_desc = '' THEN
		IF ls_msg_error = "" THEN
			ls_msg_error = "Missing Profile Description"
		ELSE
			ls_msg_error = ls_msg_error + "~rMissing Profile Description"
		END IF
	END IF	
				
	///////////////////////////////////////////////////////
	// Validate Profile Tracking
	///////////////////////////////////////////////////////
	IF idw_tracking.Rowcount() <= 0 THEN
		IF ls_msg_error = "" THEN
			ls_msg_error = "Profile Tracking"
		ELSE
			ls_msg_error = ls_msg_error + "~rProfile Tracking"
		END IF
	END IF
	
	///////////////////////////////////////////////////////
	// Validate Profile Detail
	///////////////////////////////////////////////////////
	// Check dates
	ldt_start_date = idw_detail.Object.ap_start_date[ll_row_header]
	ld_start_date = date(ldt_start_date)
	IF isnull(ld_start_date) or ld_start_date = date("00/00/0000") THEN
		IF ls_msg_error = "" THEN
			ls_msg_error = "Start Date"
		ELSE
			ls_msg_error = ls_msg_error + "~rStart Date"
		END IF
	END IF
	
	ldt_end_date = idw_detail.Object.ap_expiration_date[ll_row_header]
	ld_end_date = date(ldt_end_date)
	//DevOps:20991 - When LabPack process is on, do not validate expire date at the time of save.
	IF idw_detail.GetRow() > 0 THEN 
	    ll_labpack_process_id = idw_detail.Object.process_code_uid[idw_detail.GetRow()]
	END IF
	IF ll_labpack_process_id = 0 OR IsNull(ll_labpack_process_id) THEN 
		IF isNull(ld_end_date) or ld_end_date = date("00/00/0000") THEN
			IF ls_msg_error = "" THEN
				ls_msg_error = "Expiration Date"
			ELSE
				ls_msg_error = ls_msg_error + "~rExpiration Date"
			END IF
		END IF
	END IF
	
	IF ld_start_date > ld_end_date THEN
		IF ls_msg_error = "" THEN
			ls_msg_error = "Start and Expiration Dates"
		ELSE
			ls_msg_error = ls_msg_error + "~rStart and Expiration Dates"
		END IF
	END IF
	
	///////////////////////////////////////////////////////
	// Validate Technical
	///////////////////////////////////////////////////////
	ll_row_tech = idw_technical.GetRow()
	IF ll_row_tech > 0 THEN
		// DDVOC
		ldb_ddvoc = idw_technical.Object.ddvoc[ll_row_tech]
		ldb_ccvoc = idw_technical.Object.ccvoc[ll_row_tech]
	END IF
	
	///////////////////////////////////////////////////////
	// Validate Constituents
	///////////////////////////////////////////////////////
	// MPM - COR2 - Modified constituents validation to take into account the new typical % column, and commented out the block below and added that logic to
	// wf_validate_wcr() //so that such validation would result in warnings instead of errors.
//	FOR ll_row_const = 1 TO idw_const.Rowcount()
//		IF ( IsNull(idw_const.Object.unit[ll_row_const]) OR Trim(idw_const.Object.unit[ll_row_const]) = ""  ) OR  &
//			( IsNull(idw_const.Object.concentration[ll_row_const]) OR  idw_const.Object.concentration[ll_row_const] <= 0 ) THEN
//			ll_const_id = idw_const.Object.const_id[ll_row_const]
//			IF ls_msg_error = "" THEN
//				ls_msg_error = "Constituent (ID " + String(ll_const_id) + "): Missing Concentration or Unit"
//				exit
//			ELSE
//				ls_msg_error = ls_msg_error + "~rConstituent (ID " + String(ll_const_id) + "): Missing Concentration or Unit"
//				exit
//			END IF
//		END IF
//		
//		//Anitha 11/14/2014
//		ld_min_concentration 	= idw_const.object.min_concentration [ll_row_const]
//		ld_max_concentration 	= idw_const.object.concentration [ll_row_const]
//		ls_unit						= idw_const.object.unit [ll_row_const]
//		ll_const_id = idw_const.Object.const_id[ll_row_const]
//			
//		IF ld_max_concentration <=  0 OR isnull( ld_max_concentration )THEN 
//			ls_msg_error = "Constituent (ID " + String(ll_const_id) + "): Max Concentration cannot be negative value or 0."
//			exit
//		ELSEIF ( ld_min_concentration <=  0 OR isnull( ld_min_concentration ) )  AND ( ld_max_concentration <=  0 OR isnull( ld_max_concentration )) THEN 
//			ls_msg_error = "Constituent (ID " + String(ll_const_id) + "): Min Concentration cannot be negative value or 0."
//			exit
//		ELSEIF ( ls_unit = "%" AND ld_min_concentration > 100) THEN 
//			ls_msg_error = "Constituent (ID " + String(ll_const_id) + "): Min Concentration cannot be greater than 100%."
//			exit
//		ELSEIF ( ls_unit = "%" AND ld_max_concentration > 100) THEN 
//			ls_msg_error = "Constituent (ID " + String(ll_const_id) + "): Max Concentration cannot be greater than 100%."
//			exit
//		END IF
//			
////			IF ld_max_concentration >  0 and ( isnull( ld_min_concentration ) or ld_min_concentration = 0 ) THEN
////			   idw_const.Object.min_concentration[ll_row_const] = ld_max_concentration
////			ELSEIF ( ld_max_concentration =  0 or Isnull (ld_max_concentration))  and ( Not IsNull( ld_min_concentration ) or ld_min_concentration >  0 ) THEN
////			   idw_const.Object.concentration[ll_row_const] = ld_min_concentration
////			END IF
//
//			IF ld_min_concentration  > ld_max_concentration THEN
//				IF ls_msg_error = "" THEN
//					ls_msg_error = "Constituent (ID " + String(ll_const_id) + "): Minimum Concentration is greater than Maximum Concentration."
//					exit
//				ELSE
//					ls_msg_error = ls_msg_error + "~rConstituent (ID " + String(ll_const_id) + "): Minimum Concentration is greater than Maximum Concentration."
//					exit
//				END IF
//			END IF
//				//Anitha 11/14/2014
//	 NEXT
	
	///////////////////////////////////////////////////////
	// Validate WCRs
	// Check WCRs for matching (or blank) customer
	///////////////////////////////////////////////////////

     //DevOps 17806 info_gde 11/06/2020; EQAI: Incorrect LDR Validation
	//DevOps 17195 info_gde 09/01/2020; EQAI: Incorrect D1 validation warning
		li_rc = wf_validate_wcr()
	
	//DevOps 17806 info_gde 11/06/2020; EQAI: Incorrect LDR Validation
	//DevOps 17195 info_gde 09/01/2020; EQAI: Incorrect D1 validation warning
//	IF li_rc = gi_failure THEN
//		IF ls_msg_error = "" THEN
// 			ls_msg_error += is_ldr_validate_wcr
//		ELSE
//			ls_msg_error += "~r" + is_ldr_validate_wcr 
//		END IF
//	END IF
	
	
	///////////////////////////////////////////////////////
	// Validate QuoteHeader
	///////////////////////////////////////////////////////
	ll_row_quoteheader = idw_quoteheader.GetRow()
	IF ll_row_quoteheader = 0 THEN
		// Must have one
		IF ls_msg_error = "" THEN
			ls_msg_error = "Quote"
		ELSE
			ls_msg_error = ls_msg_error + "~rQuote"
		END IF
	ELSE
		ls_tmp = Trim(idw_quoteheader.Object.direct_flag[ll_row_quoteheader])
		IF  Upper(ls_profile_status) = "A" THEN 
			IF IsNull(ls_tmp) or ls_tmp = "" THEN
				IF ls_msg_error = "" THEN
					ls_msg_error = "Direct Flag"
				ELSE
					ls_msg_error = ls_msg_error + "~rDirect Flag"
				END IF
			END IF
		END IF
		
		// Job type
		ls_tmp = Trim(idw_quoteheader.Object.job_type[ll_row_quoteheader])
		// MPM - 1/11/2021 - DevOps 17522 - Job type validation
		ls_job_type = ls_tmp
		IF  Upper(ls_profile_status) = "A" THEN 
			IF IsNull(ls_tmp) or ls_tmp = "" THEN
				IF ls_msg_error = "" THEN
					ls_msg_error = "Job type"
				ELSE
					ls_msg_error = ls_msg_error + "~rJob type"
				END IF
			END IF
		END IF
	END IF	
		
	///////////////////////////////////////////////////////
	// Validate Approvals
	///////////////////////////////////////////////////////
	// Check Approval records - process in reverse, delete lines with no company-profit centers
	ll_rowcount = idw_approval.RowCount()
	FOR ll_row_approval = ll_rowcount TO 1 STEP -1
		ll_company_id = idw_approval.Object.company_id[ll_row_approval]
		ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
		IF IsNull(ll_company_id) OR ll_company_id = 0 OR IsNull(ll_profit_ctr_id) THEN
			wf_price("REMOVE", ll_row_approval)
		END IF
	NEXT
	
	// Check Approval codes - process in reverse, delete lines with no approval codes if status is Approved
	IF ls_profile_status = "A" THEN
		ll_rowcount = idw_approval.RowCount()
		FOR ll_row_approval = ll_rowcount TO 1 STEP -1
			ls_approval_code = Trim(idw_approval.Object.approval_code[ll_row_approval])
			IF IsNull(ls_approval_code) OR ls_approval_code = "" THEN
				wf_price("REMOVE", ll_row_approval)
			END IF
		NEXT
	END IF
	
	ll_count_active = 0
	// MPM - 10/4/2021 - DevOps 20947 - Modified the following validation to check that there is one and only
	// one active primary facility.
	// MPM - 11/29/2021 - DevOps 29709 - Modified the following validation so that it checks that there is exactly 
	// one active, primary approva, and it's done only if the profile status is "Approved".
	IF ls_profile_status = 'A' THEN
		ll_active_primary_facility_count = 0
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			IF idw_approval.Object.status[ll_row_approval] = 'A' AND idw_approval.Object.primary_facility_flag[ll_row_approval] = 'T' THEN ll_active_primary_facility_count++
		NEXT
		IF ll_active_primary_facility_count <> 1 THEN
			IF ls_msg_error > "" THEN ls_msg_error += '~r'
			ls_msg_error += "This profile should have one active, primary approval.  Please review the approvals on this profile."
		END IF
	END IF
	
	//DevOps 42784 AGC 10/10/2022 added price code required validation
	IF ls_price_code_required_flag = 'T' THEN
		IF ls_profile_status = 'A' THEN
			FOR ll_row_approval = 1 TO idw_approval.RowCount()
				IF idw_approval.Object.status[ll_row_approval] = 'A' THEN
					IF IsNull(idw_approval.Object.price_code_uid[ll_row_approval]) OR idw_approval.Object.price_code_uid[ll_row_approval] <= 0 THEN
						ls_price_code_error_msg = ls_price_code_error_msg &
							+ '~r~n~t' + idw_approval.Object.cf_facility[ll_row_approval] &
							+ ' ' + idw_approval.Object.short_name[ll_row_approval] &
							+ ' (' + idw_approval.Object.approval_code[ll_row_approval] + ')'
					END IF
				END IF
			NEXT
			IF Len(ls_price_code_error_msg) > 0 THEN
				IF ls_msg_error > "" THEN ls_msg_error += '~r'
				ls_msg_error += "This customer is setup to require a Price Code for each treatment facility. " &
					+ "Please navigate to the Detail tab and add a Price Code to the Price Code field located on each approval facility." &
					+ ls_price_code_error_msg
			END IF
		END IF
	END IF

	IF idw_detail.GetRow() > 0 THEN 
		ll_waste_type_id = idw_detail.GetItemNumber(idw_detail.GetRow(),'wastetype_id')
		IF isNull(ll_waste_type_id) or ll_waste_type_id = 0 THEN
			IF ls_msg_error = "" THEN
				ls_msg_error = "Waste Type on Profile"
			ELSE
				ls_msg_error = ls_msg_error + "~rWaste Type on Profile"
			END IF
		END IF
	END IF
	
	// Check each Approval and its dependents
	FOR ll_row_approval = 1 TO idw_approval.Rowcount()
		ll_profile_id = idw_approval.Object.profile_id[ll_row_approval]
		ll_company_id = idw_approval.Object.company_id[ll_row_approval]
		ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
		ls_approval_code = Trim(idw_approval.Object.approval_code[ll_row_approval])
		ls_approval_status = idw_approval.Object.status[ll_row_approval]
		ll_treatment_id = idw_approval.Object.treatment_id[ll_row_approval]
		ls_fingerprint_type = idw_approval.Object.fingerprint_type[ll_row_approval]
		// SK 09/15/2015
		ls_consolidate_cont_approval 	= idw_approval.Object.consolidate_containers_flag[ll_row_approval]
		ll_billing_project_id				= idw_approval.Object.billing_project_id[ll_row_approval]
		// SK 11/21/2016
		ls_sr_type_code = Trim(idw_approval.Object.sr_type_code[ll_row_approval])
		ll_srec_exempt_id = idw_approval.Object.srec_exempt_id[ll_row_approval]
		ls_surcharge_flag= idw_approval.Object.profitcenter_surcharge_flag[ll_row_approval] 
		// JXM 07/18/2019 11536 - Validation for NORM Threshold Fields
		ls_norm_threshold_flag =  idw_approval.Object.norm_threshold_flag[ll_row_approval]
		// AM - 11536 - Added ls_norm_threshold_flag check 
		IF ls_norm_threshold_flag = 'T' THEN 
			ls_norm_threshold_required  = idw_approval.Object.norm_threshold_required[ll_row_approval]
			ls_norm_threshold = idw_approval.Object.norm_threshold[ll_row_approval]
			ld_norm_threshold_date = idw_approval.Object.norm_threshold_date[ll_row_approval]
		END IF
		// Display a warning if the Transship flag is set, but the surcharge type is hazardous
		// (but only for profit centers where the override_profile_sr_type_flag is set.
		SELECT ISNULL(override_profile_sr_type_flag, 'F')
			INTO :ls_override_profile_sr_type
			FROM ProfitCenter
			WHERE company_id = :ll_company_id
			AND profit_ctr_id = :ll_profit_ctr_id
		USING itr_share;
		
		// JXM 07/18/2019 11536 - Validation for NORM Threshold Fields (Beginning)
		SELECT Profile.Profile_ID, Schedule.received_flag
		   INTO :ll_exist_schedule_profile_id, :ls_schedule_received_flag
		  FROM ProfileQuoteApproval
		   JOIN Profile
			 ON ProfileQuoteApproval.Profile_ID = Profile.Profile_ID
		    AND ProfileQuoteApproval.Status = 'A'
		   JOIN ScheduleApproval
			 ON ProfileQuoteApproval.Profile_ID = ScheduleApproval.Profile_ID
	        AND ProfileQuoteApproval.Company_ID = ScheduleApproval.Company_ID
		   JOIN Schedule
			 ON ScheduleApproval.Confirmation_ID = Schedule.Confirmation_ID
        WHERE ProfileQuoteApproval.Profile_ID = :ll_profile_id
		   AND ProfileQuoteApproval.Company_ID = :ll_company_id
		USING itr_share;
		
		//JXM 07/18/2019 11536 - Check if Norm Thresthold is Required
		//NORM THRESHOLD Req = 'T'
		// AM - 11536 - Added ls_norm_threshold_flag check 
	 IF ls_norm_threshold_flag = 'T' THEN 		
		lb_required_flag  = False
		IF (NOT IsNull(ls_norm_threshold_required) AND ls_norm_threshold_required = 'T') THEN 
			//NORM THRESHOLD not supplied
			IF IsNull(trim(ls_norm_threshold)) OR Len(trim(ls_norm_threshold)) < 1 THEN 
				//Display NORM THRESHOLD message
				IF ls_msg_error = "" THEN 
					ls_msg_error = "~"NORM Threshold~" is required."
					lb_required_flag  = True
				ELSE
					ls_msg_error = ls_msg_error + "~r~"NORM Threshold~" is required."
					lb_required_flag  = True
				END IF
			END IF
			    IF ( IsNull(ld_norm_threshold_date) )   THEN 
					IF ls_msg_error = "" THEN 
						ls_msg_error = "~"NORM Threshold Date~" is required."
						lb_required_flag  = True
					ELSE
						ls_msg_error = ls_msg_error + "~r~"NORM Threshold Date~" is required."
						lb_required_flag  = True
					END IF
				END IF
			END IF
		END IF
		
		//JXM 07/18/2019 11536 - Check if an APPROVAL is SCHEDULED
//		IF NOT lb_required_flag THEN
//			IF (Not IsNull(ls_schedule_received_flag) AND ls_schedule_received_flag = 'F' ) THEN
//				IF Not IsNull(ll_exist_schedule_profile_id) THEN
//					IF (Not IsNull(ls_norm_threshold_required) AND ls_norm_threshold_required = 'T'   AND NOT IsNull(ls_norm_threshold) ) THEN
//						MessageBox(gs_app_name + ":  Warning", "Check the NORM Threshold value prior to scheduling.")
//					END IF
//				END IF
//			//JXM 07/18/2019 11536 - Check if an APPROVAL is RECEIVED
//			ELSE //IF Not IsNull(ls_schedule_received_flag)  AND ls_schedule_received_flag = 'T' THEN
//				IF Not IsNull(ll_exist_schedule_profile_id) THEN
//						IF (Not IsNull(ls_norm_threshold_required) AND ls_norm_threshold_required = 'T'  AND NOT IsNull(ls_norm_threshold) ) THEN
//						MessageBox(gs_app_name + ":  Warning", "Check the NORM Threshold value prior to receiving.")
//					END IF
//				END IF
//			END IF
//		END IF
		// JXM 07/18/2019 11536 - Validation for NORM Threshold Fields (Ending)
	//END IF	
		IF ls_override_profile_sr_type = "T" THEN
			ls_transship = idw_detail.Object.transship_flag[ll_row_header]
			IF IsNull(ls_transship) THEN ls_transship = "F"
			IF ls_transship = "T" THEN
				IF ls_sr_type_code = "H" THEN
					// Just display warning; this is not a stopper
					MessageBox(gs_app_name + ":  Warning", "Approval " + ls_approval_code + " has a surcharge type of 'Haz', but is marked as a Tranship profile.  Please make sure this is correct.")
				END IF
			END IF
		END IF
		
		If IsNull(ll_treatment_id)  and ls_profile_status = 'A' Then
			IF ls_msg_error = "" THEN
				ls_msg_error = "Missing Treatment (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			ELSE
				ls_msg_error = ls_msg_error + "~rMissing Treatment (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			END IF
		Else
			If ll_treatment_id > 0 and ls_approval_status = 'A' Then
				Select wastetype_id
					into :ll_approval_wastetype_id 
					from Treatment 
					where treatment_id = :ll_treatment_id
					and company_id = :ll_company_id
					and profit_ctr_id = :ll_profit_ctr_id
				using itr_share;
						
				If ll_approval_wastetype_id <> ll_waste_type_id Then
					IF ls_msg_error = "" THEN
						ls_msg_error = "Mismatched Waste Type for approval (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					ELSE
						ls_msg_error = ls_msg_error + "~rMismatched Waste Type for approval  (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					END IF	
				End IF
			End IF
		End IF

		If ll_treatment_id = 0 Then
			if ls_approval_status = 'A' Then
				If ll_approval_wastetype_id <> ll_waste_type_id Then
					IF ls_msg_error = "" THEN				
						ls_msg_error = "Cannot have a treatment ID of zero and be approved (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					ELSE
						ls_msg_error = ls_msg_error + "~rCannot have a treatment ID of zero and be approved  (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					END IF
				End IF
			End If
		End If
				
		
		ls_find = "company_id = " + String(ll_company_id) + " and profit_ctr_id = " + String(ll_profit_ctr_id)
		ll_row_find = idw_approval.Find(ls_find, ll_row_approval + 1, idw_approval.RowCount() + 1)
		IF ll_row_find > 0 THEN
			IF ls_msg_error = "" THEN
				ls_msg_error = "More than 1 approval (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			ELSE
				ls_msg_error = ls_msg_error + "~rMore than 1 approval (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			END IF
		END IF
		
		If IsNull(ls_fingerprint_type)  AND  ls_profile_status = 'A'  THEN 
			IF ls_msg_error = "" THEN
				ls_msg_error = "Missing Fingerprint Type (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			ELSE
				ls_msg_error = ls_msg_error + "~rMissing Fingerprint Type (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			END IF	
		End If
		
		// Make sure if this profile is being approved, they don't use "TBD*" for the approval_code
		// MPM - 12/3/2021 - DevOps 29764 - Modified to display the error below only when status is "Approved" or "Approved - Pending Prices"
		IF ls_profile_status = 'A' OR (ls_profile_status = 'P' AND Upper(ls_tracking_type) = 'APRC') THEN
			IF Upper(Left(ls_approval_code, 3)) = "TBD" AND (ls_approval_status = "A") THEN
				IF ls_msg_error = "" THEN
					ls_msg_error = "Approval cannot begin with 'TBD' (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
				ELSE
					ls_msg_error = ls_msg_error + "~rApproval cannot begin with 'TBD' (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
				END IF
			END IF
		END IF
		
		// Approval must be system-wide unique for this company/profitCenter
		// DevOps:17228 - Added status - 'A'
		ll_count_duplicate = 0
		IF IsNull(ll_profile_id) THEN
			SELECT COUNT(*)
				INTO :ll_count_duplicate
				FROM ProfileQuoteApproval
				WHERE approval_code = :ls_approval_code
				AND company_id = :ll_company_id
				AND profit_ctr_id = :ll_profit_ctr_id
				AND status = 'A'
			USING itr_share;
		ELSE
			SELECT COUNT(*)
				INTO :ll_count_duplicate
				FROM ProfileQuoteApproval
				WHERE approval_code = :ls_approval_code
				AND company_id = :ll_company_id
				AND profit_ctr_id = :ll_profit_ctr_id
				AND profile_id <> :ll_profile_id
				AND status = 'A'
			USING itr_share;
		END IF
		IF itr_share.SQLcode < 0 THEN
			MessageBox(gs_app_name+": SQL Error", itr_share.SQLErrText, information!)
			RETURN gi_failure
		ELSEIF ll_count_duplicate > 0 THEN
			IF ls_msg_error = "" THEN
				ls_msg_error = "Approval '" + ls_approval_code + "' already exists for this company in a different Profile (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			ELSE
				ls_msg_error = ls_msg_error + "~rApproval '" + ls_approval_code + "' already exists for this company in a different Profile (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			END IF
		END IF
		
		//DevOps 28731 AGC 11/03/2021 if this isn't a labpack template then don't allow approval code to be the same as a labpack code
		//DevOps:29702 AM 11/24/2021 - Added TBD condition to avoid the nonlabpack template to proceed in old way.
		ls_labpack_template_flag = idw_header.Object.labpack_template_flag[ll_row_header]
		if isnull(ls_labpack_template_flag) or ls_labpack_template_flag <> 'T' then
			ls_process_code = ls_approval_code
			
			select count(1)
			into :ll_count
			from plt_ai.dbo.labpackprocesscode
			where process_code = :ls_process_code
			and process_code <> 'TBD'
			using gtr_share;
			
			if gtr_share.sqlcode <> 0 then
				messagebox('SQL Error','Error checking labpack process code')
			end if
			
			if ll_count > 0 then
				IF Len(ls_msg_error) > 0 THEN
					ls_labpack_template_msg = ls_labpack_template_msg + '~rThe approval code cannot be assigned to ' + ls_process_code + '.  This is reserved for a Lab Pack Template'
				ELSE
					ls_labpack_template_msg = 'The approval code cannot be assigned to ' + ls_process_code + '.  This is reserved for a Lab Pack Template'
				END IF
			end if
		end if
		
		//If this profile is being approved, and MI state SR is exempt, an exempt reason is required
		// MPM - 9/15/2023 - DevOps 72578 - Modified the IF statement below to include ls_tracking_type = 'A', which effectively requires the overall profile status to be "Approved"
		// (and not "Approved - Pending Prices") before doing the following exemption reason check.
		IF ls_approval_status = "A" AND ls_tracking_type = 'A' AND Upper(ls_surcharge_flag) = 'T' AND UPPER(ls_sr_type_code) = "E" THEN
			IF IsNull(ll_srec_exempt_id) THEN
				ls_msg_error+= '~rExempt reason is required when MI surcharge is marked as exempt ('+ String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ')'
			END IF
		END IF
					
		// Validate DDVOC and location control for Company 2
		IF ll_company_id = 2 THEN
			ls_location_type = idw_approval.Object.location_type[ll_row_approval]
			IF Not IsNull(ls_location_type) AND ls_location_type = "P" AND &
				NOT IsNull(ldb_ddvoc) AND NOT IsNull(ls_haz_flag) AND &
				NOT IsNull(ls_fingerprint_type) AND ls_fingerprint_type = "TREATMENT" THEN
				IF (ls_haz_flag = "T" AND ldb_ddvoc > 20000) OR (ls_haz_flag = "F" AND ldb_ddvoc > 200000) THEN
					IF ls_msg_error = "" THEN
						ls_msg_error = "DDVOC cannot exceed 20,000 for Haz wastes or 200,000 for Nonhaz wastes (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					ELSE
						ls_msg_error = ls_msg_error + "~rDDVOC cannot exceed 20,000 for Haz wastes or 200,000 for Nonhaz wastes (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					END IF
				END IF

			END IF			 
	 
			// Location control
			IF IsNull(ls_location_type) OR ls_location_type = "U" OR ls_location_type = "P" THEN 
				IF NOT IsNull(ldb_ddvoc)  or NOT IsNull(ldb_ccvoc) THEN
				ls_location_control = idw_approval.Object.location_control[ll_row_approval]
					IF (Not IsNull(ldb_ddvoc) and ldb_ddvoc >= 500) or (Not IsNull(ldb_ccvoc) and ldb_ccvoc >= 500) THEN
					IF ls_location_control <> "E" THEN
						IF ls_msg_error = "" THEN
								ls_msg_error = "Location Control must be 'East Side Only'; Check DDVOC\CCVOC (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
						ELSE
								ls_msg_error = ls_msg_error + "~rLocation Control must be 'East Side Only'; Check DDVOC\CCVOC (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
						END IF
					END IF
				END IF
		
				// Check location for company 2 ONLY!
				ls_location = idw_approval.Object.location[ll_row_approval]
				IF NOT IsNull(ls_location) THEN
					SELECT location_report_flag
						INTO :ls_location_report_flag
						FROM ProcessLocation
						WHERE location = :ls_location
						AND company_id = :ll_company_id
						AND profit_ctr_id = :ll_profit_ctr_id
					USING itr_share;
				
						IF IsNull(ls_location_report_flag) OR ls_location_report_flag = "" THEN
						// Skip ahead; don't validate for this
					ELSE
						IF ls_location_control = "E" THEN
							IF ls_location_report_flag <> "E" THEN
								IF ls_msg_error = "" THEN
									ls_msg_error = "You must select an East Location (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
								ELSE
									ls_msg_error = ls_msg_error + "~rYou must select an East Location (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
								END IF
							END IF
						ELSEIF ls_location_control = "W" THEN
							IF ls_location_report_flag <> "W" THEN

								IF ls_msg_error = "" THEN
									ls_msg_error = "You must select a West Location (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
								ELSE
									ls_msg_error = ls_msg_error + "~rYou must select a West Location (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
								END IF
							END IF
						END IF
					END IF
				END IF
			END IF
		END IF
		END IF
		
	 //35878
		ll_dw_waste_code_fed = idw_waste_code_fed.Rowcount()
		ll_composition_epa_row = idw_composition_epa.GetRow ()
		IF ll_composition_epa_row > 0 THEN 
			ls_epa_source_code = idw_composition_epa.Object.epa_source_code[ll_composition_epa_row]
			ls_epa_form_code =  idw_composition_epa.Object.epa_form_code[ll_composition_epa_row]
			IF ll_dw_waste_code_fed > 0 AND (( IsNull (ls_epa_source_code ) OR ls_epa_source_code = "" )  OR ( IsNull (ls_epa_form_code ) OR ls_epa_form_code = "" )  ) THEN
				IF ls_msg_error = "" THEN
					ls_msg_error = "You must have an EPA Source Code and EPA Form Code before this profile can be set to approved  (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
				ELSE
					ls_msg_error = ls_msg_error +  "~rYou must have an EPA Source Code and EPA Form Code before this profile can be set to approved  (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
				END IF
			END IF
		END IF		
		// Check TCE and MC for company 12 ONLY!
		IF ll_company_id = 12 AND ll_row_tech > 0 AND &
			NOT IsNull(ls_fingerprint_type) AND ls_fingerprint_type = "FUEL" THEN
			ldb_tce = idw_technical.Object.tce[ll_row_tech]
			IF NOT IsNull(ldb_tce) THEN
				IF (ldb_tce >= 29.3) THEN
					idw_technical.Object.tce[ll_row_tech] = 0
					IF ls_msg_error = "" THEN
						ls_msg_error = "TCE cannot exceed 29.3 (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					ELSE
						ls_msg_error = ls_msg_error + "~rTCE cannot exceed 29.3 (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					END IF
				END IF
			END IF
			ldb_mc = idw_technical.Object.mc[ll_row_tech]
			IF NOT IsNull(ldb_mc) THEN
				IF (ldb_mc >= 17.0) THEN
					idw_technical.Object.mc[ll_row_tech] = 0
					IF ls_msg_error = "" THEN
						ls_msg_error = "MC cannot exceed 17 (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					ELSE
						ls_msg_error = ls_msg_error + "~rMC cannot exceed 17 (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					END IF
				END IF
			END IF
		END IF
	
		// Validate Surcharge type against primary waste code
		li_rc = wf_set_sr_type_code(ls_waste_code, ll_waste_code_uid, ll_row_approval)
		IF li_rc = gi_failure THEN
			IF ls_msg_error = "" THEN
				ls_msg_error = "Surcharge type (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			ELSE
				ls_msg_error = ls_msg_error + "~rSurcharge type (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
			END IF
		END IF
		
		// Check for active primary price for this approval
		IF ls_approval_status = "A" THEN
			ll_count_active = wf_price("PRIMARYPRICE", ll_row_approval)

			IF ll_count_active = 0 AND Upper(ls_tracking_type) <> 'APRC' THEN
				IF ls_msg_error = "" THEN
					ls_msg_error = "No Active Primary Price (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
				ELSE
					ls_msg_error = ls_msg_error + "~rNo Active Primary Price (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
				END IF
			END IF
		END IF
      
		// EQAI-25428  Profile - Validation of outbound TSDF Approval status on pre-assignment
		ls_approval_status = idw_approval.Object.status[ll_row_approval]
		// Only do this validation if the approval is "Active"
		IF ls_approval_status = 'A' THEN
			ll_OB_TSDF_approval_id = idw_approval.Object.OB_TSDF_approval_id[ll_row_approval] 
			ls_approval_code = Trim(idw_approval.Object.approval_code[ll_row_approval])
			
			IF NOT IsNull ( ll_OB_TSDF_approval_id)  AND ll_OB_TSDF_approval_id > 0 THEN 	
				SELECT tsdf_approval_status, tsdf_approval_expire_date,tsdf_code
				INTO :ls_tsdf_approval_status , :ld_tsdf_approval_expire_date, :ls_tsdf_code
				FROM tsdfapproval
				WHERE tsdf_approval_id = :ll_OB_TSDF_approval_id
				USING itr_share;
			
				SELECT tsdf_status 
				INTO :ls_tsdf_status
				FROM TSDF
				WHERE tsdf_code = :ls_tsdf_code
				USING itr_share;
			
              	IF itr_share.SQLcode < 0 THEN
					MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
					RETURN gi_failure
				ELSEIF ls_tsdf_approval_status = 'I' OR Date (ld_tsdf_approval_expire_date ) < Today() THEN 
			    		MessageBox(gs_app_name + ":  Warning", "Approval Code " + ls_approval_code +  " (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")" + " is configured for an outbound approval that is expired.")
		    		END IF
			
		    		IF ls_tsdf_status = 'I' THEN
					MessageBox(gs_app_name + ":  Warning", "Approval Code " + ls_approval_code + " (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")" +  " is configured for an outbound facility that is currently set to inactive." )
				END IF
			END IF
		END IF
      
		//----------------------------------------------
		//		Old (Commented out 2/29/08 JDB)
		//----------------------------------------------
//		// Disposal Service
//		ls_disposal_service = Trim(idw_approval.Object.disposal_service[ll_row_approval])
//		IF IsNull(ls_disposal_service) OR ls_disposal_service = "" THEN
//
//			IF ls_msg_error = "" THEN
//				ls_msg_error = "Disposal Service (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
//			ELSE
//				ls_msg_error = ls_msg_error + "~rDisposal Service (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
//			END IF
//		END IF
//	
//		// Disposal Service Other Description
//		// Required only IF Disposal Service is "O" (Other)
//		IF ls_disposal_service = "O" THEN
//			ls_tmp = Trim(idw_approval.Object.disposal_service_other_desc[ll_row_approval])
//			IF IsNull(ls_tmp) OR ls_tmp = "" THEN
//				IF ls_msg_error = "" THEN
//					ls_msg_error = "Disposal Service Other Description (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
//				ELSE
//					ls_msg_error = ls_msg_error + "~rDisposal Service Other Description (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
//				END IF
//			END IF
//		END IF
		
		//----------------------------------------------
		//		New (Added 2/29/08 JDB)
		//----------------------------------------------
		// Disposal Service
//		li_disposal_service = idw_approval.Object.disposal_service_id[ll_row_approval]
//		IF IsNull(li_disposal_service) OR li_disposal_service <= 0 THEN
//			IF ls_msg_error = "" THEN
//				ls_msg_error = "Disposal Service (" + String(ll_company_id, "00") + "-" + String(ll_profit_ctr_id, "00") + ")"
//			ELSE
//				ls_msg_error = ls_msg_error + "~rDisposal Service (" + String(ll_company_id, "00") + "-" + String(ll_profit_ctr_id, "00") + ")"
//			END IF
//		END IF
//	
//		// Disposal Service Other Description
//		// Required only if Disposal Service ID is 1 (5478

//		IF li_disposal_service = 1 THEN
//			ls_tmp = Trim(idw_approval.Object.disposal_service_other_desc[ll_row_approval])
//			IF IsNull(ls_tmp) OR ls_tmp = "" THEN
//				IF ls_msg_error = "" THEN
//					ls_msg_error = "Disposal Service Other Description (" + String(ll_company_id, "00") + "-" + String(ll_profit_ctr_id, "00") + ")"
//				ELSE
//					ls_msg_error = ls_msg_error + "~rDisposal Service Other Description (" + String(ll_company_id, "00") + "-" + String(ll_profit_ctr_id, "00") + ")"
//				END IF
//			END IF
//		END IF
		
		// Validate Billing Project Purchase order/release
		li_rc = wf_validate_billing(ll_row_approval, FALSE)
		
		// SK 09/15/2015 Validate container consolidation
		IF NOT Isnull(ls_consolidate_cont_approval) AND Upper(ls_consolidate_cont_approval) = 'T' THEN
			IF NOT Isnull(ll_customer_id) THEN
				// Check that the customer level flag allows consolidation for this approval
				SELECT consolidate_containers_flag
				INTO :ls_customer_consolidate_cont_flag
				FROM Customer
				WHERE customer_id = :ll_customer_id
				USING itr_share;
				
				IF itr_share.SQLcode < 0 THEN
					MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
					RETURN gi_failure
				ELSEIF (Isnull(ls_customer_consolidate_cont_flag) OR Upper(ls_customer_consolidate_cont_flag) <> 'T') THEN
					ls_msg_error = ls_msg_error + "~rConsolidation of material is not allowed for this customer."
					ls_msg_consolidation_err = "Consolidation of material is not allowed for this customer."
				END IF
			END IF
			
			IF ls_msg_consolidation_err = "" AND NOT IsNull(ll_billing_project_id) THEN
				SELECT consolidate_containers_flag
				INTO :ls_customerbilling_consolidate_cont_flag
				FROM CustomerBilling
				WHERE customer_id = :ll_customer_id
				AND billing_project_id = :ll_billing_project_id
				USING itr_share;
				
				IF itr_share.SQLcode < 0 THEN
					MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
					RETURN gi_failure
				ELSEIF (Isnull(ls_customerbilling_consolidate_cont_flag) OR Upper(ls_customerbilling_consolidate_cont_flag) <> 'T' ) THEN
					ls_msg_error = ls_msg_error + "~rConsolidation of material is not allowed for the billing project: " + String(ll_billing_project_id)
					ls_msg_consolidation_err += "~rConsolidation of material is not allowed for the billing project: " + String(ll_billing_project_id)
				END IF
			END IF
		END IF
		
		// Check that the approval's CWT category has approval_required_flag = 'T' if the profile's status is either Approved or Approved Pending Prices
		// and if the disposal service on the the approval is set to require the CWT category to be entered
		IF (ls_profile_status = 'A' OR ls_profile_status = 'P' )AND ls_approval_status = 'A' THEN	// JCG10/17/17 Changed per Jason	IF ls_approval_status = 'A' OR ls_approval_status = 'P'
			ls_cwt_category_required_flag = idw_approval.Object.cwt_category_required_flag[ll_row_approval]
			// Does the disposal service require the CWT category to be set on the approval?
			IF ls_cwt_category_required_flag = 'T' THEN
				// Get the approval's CWT category uid
				li_cwt_category_uid = idw_approval.Object.cwt_category_uid[ll_row_approval]
				// Look for this id in the CWT category list dw
				ll_row = dw_cwt_category_list.Find("cwt_category_uid = " + String(li_cwt_category_uid), 1, dw_cwt_category_list.RowCount() + 1)
				// Get the approval_required_flag for the CWT category on the approval
				IF ll_row > 0 THEN
					ls_approval_req_flag = dw_cwt_category_list.Object.approval_required_flag[ll_row]
				END IF
				IF ls_approval_req_flag <> 'T' THEN
					IF ls_msg_error = "" THEN
						ls_msg_error = "CWT Category (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					ELSE
						ls_msg_error = ls_msg_error + "~rCWT Category (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					END IF
				END IF
			END IF
		END IF
	
// MPM - 5/1/2019 - DevOps task 10349/GEM 60910 - Profile - Modified the air permit status validation to occur when the profile status is either "Approved" or "Approved - Pending Pricing". MPM	
IF ls_profile_status = 'A' OR ls_profile_status = 'P'  THEN
	IF idw_approval.object.status[ll_row_approval] = 'A' THEN
			ls_air_permit_flag = idw_approval.Object.air_permit_flag[ll_row_approval]
			ll_company_id = idw_approval.Object.company_id[ll_row_approval]
			ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
					
			IF ls_air_permit_flag = 'T' THEN
				li_air_permit_status_uid = idw_approval.Object.air_permit_status_uid[ll_row_approval]
				ll_treatment_process_id  = idw_approval.Object.treatment_process_id[ll_row_approval] 
				
					ls_filter =  "air_permit_restricted='T'"
						idw_const.SetFilter (ls_filter)
							idw_const.Filter ()
					ll_const_count = idw_const.RowCount ()	
					
					IF  (IsNull(li_air_permit_status_uid) OR li_air_permit_status_uid = 0) AND &
								( IsNull( ll_treatment_process_id) OR  ( ll_treatment_process_id <> 6 AND ll_treatment_process_id <> 16 ) )AND &
								  ( ll_const_count > 0) THEN
						IF ls_msg_error = "" THEN
						    ls_msg_error = "Air Permit Status (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					     ELSE
							ls_msg_error = ls_msg_error + "~rAir Permit Status (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
					     END IF
						  idw_const.SetFilter ("")
						  idw_const.Filter ()  
					END IF			
			  END IF
			 idw_const.SetFilter ("")
			 idw_const.Filter ()  
	END IF
END IF

IF ls_profile_status = 'A' THEN 
   IF idw_approval.object.status[ll_row_approval] = 'A' THEN 
		
//		ll_company_id = idw_approval.Object.company_id[ll_row_approval]
		ls_TSDF_state = idw_approval.Object.TSDF_state[ll_row_approval]
		
		// MPM - 6/18/2019 - DevOps task 11542 - Changed this validation to look at the TSDF state instead of at the approval's company ID
//		IF ll_company_id = 46 THEN 		
		IF ls_TSDF_state = 'TX' THEN
			ls_filter = "state = 'TX'"
			ll_state_waste_code_count =  idw_waste_code_state.Rowcount()
			idw_waste_code_state.SetFilter (ls_filter)
			idw_waste_code_state.Filter()
			
			ll_state_waste_code_count =  idw_waste_code_state.Rowcount()
			IF ll_state_waste_code_count <= 0 THEN 
			    MessageBox(gs_app_name + ":  Warning",  "This waste is approved into Texas and no Texas waste codes are assigned. Please review." )	
		     END IF			 
			
			ll_state_fed_waste_code_count =  idw_waste_code_fed.Rowcount()
			
			idw_waste_code_state.SetFilter ("")
             idw_waste_code_state.Filter()
					
		  	ls_filter = "state = 'TX' AND Right ( waste_code,1) = '1' "
             	idw_waste_code_state.SetFilter (ls_filter)
			idw_waste_code_state.Filter()
			
			ll_state_right_waste_code_count =  idw_waste_code_state.Rowcount()
			 
		     IF ll_state_fed_waste_code_count > 0 AND ll_state_right_waste_code_count > 0  THEN 
			   MessageBox(gs_app_name + ":  Warning", "This waste is approved into Texas and has Federal hazardous waste codes. The Texas waste code should end in a ‘H’ and not a ‘1’. Please review.")	
		     END IF	
			 
		    idw_waste_code_state.SetFilter ("")
             idw_waste_code_state.Filter()
				 
		  	ls_filter = "state = 'TX' AND Left ( waste_code,4) = 'CESQ' "
             	idw_waste_code_state.SetFilter (ls_filter)
			idw_waste_code_state.Filter()
			
			ll_CESQ_waste_count = idw_waste_code_state.RowCount()
			
			FOR i = 1 to ll_CESQ_waste_count
				ls_CESQ_waste  =  idw_waste_code_state.Object.waste_code[i]
				IF  Left (ls_CESQ_waste, 4) = 'CESQ' THEN
				    	ls_CESQ_end = Right (ls_CESQ_waste,4) 
				END IF
		     NEXT	

			idw_waste_code_state.SetFilter ("")
             idw_waste_code_state.Filter()
				 
		  	ls_filter = "state = 'TX' AND Left ( waste_code,4) = 'OUTS' "
             	idw_waste_code_state.SetFilter (ls_filter)
			idw_waste_code_state.Filter()
			
			ll_OUTS_waste_count = idw_waste_code_state.RowCount()
			
			FOR i = 1 to ll_OUTS_waste_count
				ls_OUTS_waste  =  idw_waste_code_state.Object.waste_code[i]
				IF Left (ls_OUTS_waste,4) = 'OUTS' THEN
				    	ls_OUTS_end = Right (ls_OUTS_waste,4) 	
				END IF
		     NEXT	
			 
			IF ( ll_generator_id = 0 AND (( ll_OUTS_waste_count > 0 AND ll_CESQ_waste_count =  0  ) OR ( ll_OUTS_waste_count = 0 AND ll_CESQ_waste_count >  0  )) ) THEN
			     MessageBox(gs_app_name + ":  Warning", "This profile is valid for various generators. Please make sure to add a CESQ Texas state code to be used for any Texas CESQ generators and an OUTS Texas state code to be used for any out of state generators.")	
		     END IF	 
			  
			ll_generator_id = idw_header.Object.generator_id[ll_row_header]
			 // gl_various_generator_id
			IF ( ll_generator_id = 0 AND ( ll_OUTS_waste_count = 0 AND ll_CESQ_waste_count =  0  )) THEN
			     MessageBox(gs_app_name + ":  Warning", "This profile is valid for various generators. Please make sure to add a CESQ Texas state code to be used for any Texas CESQ generators and an OUTS Texas state code to be used for any out of state generators.")	
		     END IF	 
							  
			IF ( ll_generator_id = 0 AND ll_CESQ_waste_count  > 0  AND  ll_OUTS_waste_count > 0 AND (ls_OUTS_end <> ls_CESQ_end ) ) THEN
				  MessageBox(gs_app_name + ":  Warning", "This profile has different CESQ and OUTS Texas waste codes. Please review. The last 4 characters should be the same for these waste codes.")	
			END IF
				
		END IF
	END IF
END IF
idw_waste_code_state.SetFilter ("")
idw_waste_code_state.Filter()

//EQAI-51589 
li_air_permit_status_uid = idw_approval.Object.air_permit_status_uid[ll_row_approval]
ll_company_id = idw_approval.Object.company_id[ll_row_approval]
ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
ls_air_permit_flag = idw_approval.Object.air_permit_flag[ll_row_approval]

IF ls_air_permit_flag = 'T'  AND ( Not IsNull(li_air_permit_status_uid) OR li_air_permit_status_uid <> 0) THEN
	SELECT  status
	INTO :ls_air_permit_status
	FROM AirPermitStatus
	WHERE air_permit_status_uid= :li_air_permit_status_uid
	AND company_id = :ll_company_id
	AND profit_ctr_id = :ll_profit_ctr_id
  USING itr_share;
  
	IF ls_air_permit_status = 'I'	 THEN
		MessageBox(gs_app_name + ":  Error", "Please review the air permit status assigned. This status is no longer valid for assignment.")
		idw_approval.Object.air_permit_status_uid[ll_row_approval] = ll_null
	END IF
	
END IF	
//Task:10652 - Catalyst  Validations for Robstown 
ls_cataylst_flag = idw_approval.Object.catalyst_flag[ll_row_approval] 
ll_cataylst_fed_waste_count = idw_waste_code_fed.Rowcount()
ls_desc = TRIM(idw_header.Object.approval_desc[ll_row_header])

IF ll_cataylst_fed_waste_count > 0 THEN 
   ls_filter = "waste_code in ('K171','K172')"
   idw_waste_code_fed.SetFilter (ls_filter)
   idw_waste_code_fed.Filter()
   
   	ll_cataylst_fed_waste_count = idw_waste_code_fed.Rowcount()
     ll_approval_catalyst_flg = idw_approval.RowCount()
	  
	FOR i = 1 TO ll_approval_catalyst_flg
		ls_cataylst_flag2 = idw_approval.Object.profitcenter_catalyst_flag[i]
		IF ls_cataylst_flag2= 'T' THEN CONTINUE
	NEXT
		
     
  	 //DevOps 17316 info_gde 10/19/2020; Catalyst validation incorrectly being triggered
   	IF ll_cataylst_fed_waste_count >  0 AND ls_cataylst_flag2 = 'T'   THEN  
			//IF ( ( ls_cataylst_flag <> 'T' OR ls_cataylst_flag = "" OR IsNull(ls_cataylst_flag)) AND ll_cataylst_fed_waste_count > 0 )  THEN 
			MessageBox(gs_app_name + ":  Warning", "The profile contains a RCRA Waste Code of K171 or K172 please verify that the waste material is not catalyst.")
	END IF
  		idw_waste_code_fed.SetFilter ("")
  		idw_waste_code_fed.Filter()
 	END IF


	FOR ll_row_comp = 1 TO idw_composition.Rowcount()
		 ls_comp_desc = idw_composition.Object.comp_description[ll_row_comp]
		 //DevOps 17316 info_gde 10/19/2020; Catalyst validation incorrectly being triggered
		//IF ( ls_cataylst_flag <> 'T' OR ls_cataylst_flag = "" OR IsNull(ls_cataylst_flag)) AND &
		IF ( ls_cataylst_flag2 = 'T' )  AND &
				( Pos (Lower (ls_comp_desc) ,"catalyst" ) > 0  OR Pos ( Lower(ls_desc) ,"catalyst" ) > 0  ) THEN 
			 MessageBox(gs_app_name + ":  Warning", "The profile contains the word 'catalyst' in either the waste common name or the physical description please verify that the waste material is not catalyst.")
			 return 2
		END IF
	NEXT
	   // DevOps:18425 - Profile - Constituent validation needed for TENORM permit
	ll_company_id = idw_approval.Object.company_id[ll_row_approval]
	ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
		
		IF ll_company_id = 2  OR ll_company_id = 3 THEN 
			ls_filter = "const_id in ( 2631,2622,2625,2626,2623) AND unit <> 'pCi/g' "
			idw_const.SetFilter(ls_filter)
			idw_const.Filter()
			ll_const_count =  idw_const.RowCount () 
			IF ll_const_count > 0 THEN
				MessageBox(gs_app_name + ":  Warning",  "Please review the radioactive constituents on this profile that should be set to a unit of measure of pCi/g.")	
			END IF
		END IF
			idw_const.SetFilter("")
			idw_const.Filter()

//		IF ls_profile_status = 'A'  THEN	
//			ls_air_permit_flag = idw_approval.Object.air_permit_flag[ll_row_approval]
//			IF ls_air_permit_flag = 'T' THEN
//				li_air_permit_status_uid = idw_approval.Object.air_permit_status_uid[ll_row_approval]
//				
//				IF  (IsNull(li_air_permit_status_uid) OR li_air_permit_status_uid = 0)  THEN
//					IF ls_msg_error = "" THEN
//						ls_msg_error = "AIR Permit Status (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
//					ELSE
//						ls_msg_error = ls_msg_error + "~rAIR Permit Status (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
//					END IF
//				END IF
//			END IF
//		END IF
//		
	NEXT	// Validate Approvals and dependents

FOR ll_row_approval = 1 TO idw_approval.Rowcount()
		ll_company_id = idw_approval.Object.company_id[ll_row_approval]
		ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]	
	IF idw_recipe_update.RowCount () > 0 THEN 
		ll_recipe_primary_flag_count = 0 
		ll_recipe_count = idw_recipe_update.RowCount()
		ls_filter = "company_id = " + string (ll_company_id) + " AND profit_ctr_id = "  + string (ll_profit_ctr_id) 
		idw_recipe_update.SetFilter(ls_filter)
		idw_recipe_update.Filter() 
		ll_recipe_count =  idw_recipe_update.RowCount () 

			IF ll_recipe_count > 0 Then		
				 FOR i = 1 to ll_recipe_count
					ls_primary_flag =   idw_recipe_update.object.primary_flag[i]
					IF ls_primary_flag = 'Y' THEN 
						ll_recipe_primary_flag_count  =   ll_recipe_primary_flag_count + 1
					END IF
				 NEXT
				     IF ll_recipe_primary_flag_count = 0  THEN
						IF ls_msg_error = "" THEN
							ls_msg_error = "Profile Recipe had to have one Primary Flag set as a Yes for (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
						ELSE
							ls_msg_error = ls_msg_error + "~rProfile Recipe had to have one Primary Flag set as a Yes for (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")"
						END IF			
					 END IF
			END IF
	END IF 
	idw_recipe_update.SetFilter ("")
	idw_recipe_update.Filter()
NEXT
idw_recipe_update.SetFilter ("")
idw_recipe_update.Filter()

//Task 5352/9819
//COR2 JXM 04/26/2016 10313 - Fixing Validation for Waste Import
//Long ll_GeneratorID
Long ll_ValidApprovalRow
String ls_ForeignGeneratorFlag, ls_GeneratorCountry
if isValid(idw_header) then
	ll_row_header = idw_header.GetRow()
	if ll_row_header > 0 then
		//ll_GeneratorID = idw_header.Object.Generator_id[ll_row_header]
		ll_generator_id = idw_header.Object.Generator_id[ll_row_header]
		ls_GeneratorCountry = idw_header.Object.Generator_country[ll_row_header]
		select foreign_generator_flag into :ls_ForeignGeneratorFlag from Generator where generator_id = :ll_generator_id //:ll_GeneratorID
		 using itr_share;
	end if
end if
ll_ValidApprovalRow = idw_approval.RowCount()
//DevOps:16594
if (  (ls_GeneratorCountry <> "USA" AND (isnull( ls_ForeignGeneratorFlag) OR  ls_ForeignGeneratorFlag = 'T' or trim(ls_ForeignGeneratorFlag)='') )  &
		 AND (ll_ValidApprovalRow > 0 AND ls_profile_status = "P")  ) THEN
        //AND (idw_approval.RowCount() > 0 AND ls_profile_status = "P")  ) THEN
	ll_row_waste = idw_waste_import_supplement.GetRow()
	if ll_row_waste > 0 then
		//Get Waste Import Data
		ls_EpaNoticeID 		 = idw_waste_import_supplement.Object.epa_notice_id[ll_row_waste]
		ls_ConsentNumber	 = idw_waste_import_supplement.Object.epa_consent_number[ll_row_waste]
		ldt_EffectiveDate 	 = idw_waste_import_supplement.Object.effective_date[ll_row_waste]
		ldt_ExpirationDate 	 = idw_waste_import_supplement.Object.expiration_date[ll_row_waste]
		ls_ApprovedVolume = idw_waste_import_supplement.Object.approved_volume[ll_row_waste]
		//Display message for following columns EPA Notice ID, Consent Number, Effective Data, Expiration Date, and Approved Volumn Number
		//if ll_row_waste > 0 then			
			if ( IsNull(ls_EpaNoticeID) or trim(ls_EpaNoticeID) = "" or len(trim(ls_EpaNoticeID)) = 0) then 
				is_msg_validate_shipping = is_msg_validate_shipping + "~nWaste Import Profile Form - EPA Notice ID is required."
			end if
			//I believe Consent Number needs an additional conditional check (if the current form was imported then display this column as well
			//... unable to locate column foriegn_import_flag 4/26/2019
			if ( IsNull(ls_ConsentNumber) or trim(ls_ConsentNumber) = "" or len(trim(ls_ConsentNumber)) =0) then 
				is_msg_validate_shipping = is_msg_validate_shipping + "~nWaste Import Profile Form - Consent Number is required."
			end if
			if ( IsNull(ldt_EffectiveDate) ) then 
				is_msg_validate_shipping = is_msg_validate_shipping + "~nWaste Import Profile Form - Effective Date is required."
			end if
			if ( IsNull(ldt_ExpirationDate) ) then 
				is_msg_validate_shipping = is_msg_validate_shipping + "~nWaste Import Profile Form - Expiration Date is required."
			end if
			If ( (Not IsNumber(ls_ApprovedVolume)) or IsNull(ls_ApprovedVolume) or Double(ls_ApprovedVolume) = 0.00 ) then 
				is_msg_validate_shipping = is_msg_validate_shipping + "~nWaste Import Profile Form - Approved Volume is required."
			end if
		//end if
	end if
end if

//COR JXM 4/30/2019 Task 9616 Thermal Supplement Validations
if isValid(idw_header) then ll_profile_id = idw_header.Object.profile_id[idw_header.GetRow()]
wf_validate_profile_thermal(ls_profile_status, ll_profile_id)
//DevOps:19924
ls_generator_knowledge = wf_validate_generator_knowledge(ls_profile_status, ll_profile_id)
//DevOps:61192 - AM - 03/08/2023 - Profile Tracking > Validate Inbound/Outbound Federal Codes & Haz MI Codes
wf_validate_inb_outb_fed_haz_mi_codes()

IF ls_generator_knowledge <> ""  THEN
	IF ls_msg_error = "" THEN
		ls_msg_error = ls_generator_knowledge
	ELSE
		ls_msg_error = ls_msg_error + '~r' + ls_generator_knowledge
	END IF	
END IF

// Dipankar - 8/31/2023 - Added for #69393
ls_fuels_blending_msg = wf_validate_fuels_blending (ls_profile_status, ll_profile_id)

IF ls_fuels_blending_msg <> ""  THEN
	IF ls_msg_error = "" THEN
		ls_msg_error = ls_fuels_blending_msg
	ELSE
		ls_msg_error = ls_msg_error + '~r' + ls_fuels_blending_msg
	END IF	
END IF

//TAsk:5478
ll_radioactive_row = idw_profile_radioactive_supplement_page_1.Getrow() 
idw_profile_radioactive_waste.Accepttext()
	IF idw_profile_radioactive_waste.GetRow() > 0 THEN 
     	ls_radioactive_waste_type =  idw_profile_radioactive_waste.object.profileradioactive_waste_type[idw_profile_radioactive_waste.getrow()]
	ELSE
		ls_radioactive_waste_type = ""
	END IF
	
IF ll_radioactive_row >  0 THEN			
	  //ls_radioactive_waste_type =  idw_profile_radioactive_waste.object.profileradioactive_waste_type[1]
	  idw_profile_radioactive_supplement_page_1.object.profileradioactive_waste_type[1] = ls_radioactive_waste_type			
ELSE
	ll_profile_id = idw_header.Object.profile_id[1]
	IF Not IsNull (ls_radioactive_waste_type)  THEN
		 il_row = idw_profile_radioactive_supplement_page_1.InsertRow(0)
		idw_profile_radioactive_supplement_page_1.Object.profile_profile_id[il_row] = ll_profile_id
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_waste_type[il_row] = ls_radioactive_waste_type
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_date_added[il_row] = Today()
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_added_by[il_row] = gs_user_id
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_date_modified[il_row] = Today()
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_modified_by[il_row] = gs_user_id
	END IF
END IF
//9870 - Radioactive Supplement Pages 1-3 Validation
if isValid(idw_header) then 
	ll_profile_id = idw_header.Object.profile_id[idw_header.GetRow()]
	ls_profile_status = trim(idw_header.Object.curr_status_code[idw_header.GetRow()])
	if ( ls_profile_status = 'P' and ll_profile_id > 0 ) then &
						wf_validate_profile_rad1( ls_profile_status, ll_profile_id )
    end if

//54349 
IF idw_shipping.GetRow() > 0 THEN 
	ls_generic_flag = idw_header.object.generic_flag[ll_row_header]
	ls_labpack_flag =  idw_header.object.labpack_flag[ll_row_header]

	
	IF ls_generic_flag <> 'T' AND ls_labpack_flag <> 'T' THEN 
		IF idw_shipping.object.hazmat[idw_shipping.GetRow() ] = 'T' THEN 
			 ls_manifest_dot_shipping_name =  idw_shipping.Object.dot_shipping_name[idw_shipping.GetRow() ]
			  IF  ls_manifest_dot_shipping_name = '' OR IsNull (ls_manifest_dot_shipping_name) OR Len(ls_manifest_dot_shipping_name) < 7  THEN 
					MessageBox(gs_app_name + ":  Warning", "When the DOT hazmat flag is selected, the DOT Shipping description and associated fields need to be entered for this the approval.")
			  END IF
		END IF
	END IF
	//54578 
	ls_un_na_flag =  idw_shipping.object.un_na_flag[idw_shipping.GetRow()]
	ll_un_na_number =  idw_shipping.object.un_na_number[idw_shipping.GetRow()]
	IF ( ls_un_na_flag = "UN"  OR  ls_un_na_flag = 'NA' ) THEN 
		IF (IsNull (ll_un_na_number) OR ll_un_na_number  < 0 ) THEN
		   MessageBox(gs_app_name + ":  Warning", "Missing UN/NA number.")	
		END IF
	END IF
END IF

	// Validate prices
	wf_price("REFRESH", 0)
	li_rc = wf_price("VALIDATE", 0)
	li_rc = wf_import_waste("VALIDATE", 0)

		//DevOps:16390
		//Based on conditions set section F8 Polychlorinated Biphenyls (PCB) should be marked yes (contains_pcb = 'T')
		lds = CREATE datastore
		lds.Dataobject = 'd_quick_select_waste_code'
		lds.SetTransObject(gtr_share)
		ll_pcb_flag_count = lds.Retrieve() 
		
		IF gtr_share.SQLCode = -1 THEN
              MessageBox("SQL error " + String(gtr_share.SQLDBCode), gtr_share.SQLErrText )
			RETURN gi_failure
		ELSE

			ll_state_waste_code_count =  idw_waste_code_state.Rowcount()
			ll_dw_waste_code_fed = idw_waste_code_fed.Rowcount()
			ll_dw_waste_code_eq = idw_waste_code_eq.GetRow ()
			
			IF ll_state_waste_code_count > 0 THEN 
				FOR i = 1 TO ll_state_waste_code_count
					  ll_waste_code_uid =  idw_waste_code_state.Object.waste_code_uid[i]
					 ls_find = "pcb_flag = 'T' AND 	waste_code_uid = "  + string (ll_waste_code_uid)
					 ll_row_find =  lds.Find(ls_find,1,ll_pcb_flag_count)
					 IF ll_row_find > 0 THEN 
						lb_state_waste_pcb = TRUE
					 END IF
				NEXT
			END IF
			
			IF ll_dw_waste_code_fed > 0 THEN 
				FOR i = 1 TO ll_dw_waste_code_fed
					  ll_waste_code_uid = idw_waste_code_fed.Object.waste_code_uid[i]
					 ls_find = "pcb_flag = 'T' AND 	waste_code_uid = "  + string (ll_waste_code_uid)
					 ll_row_find =  lds.Find(ls_find,1,ll_pcb_flag_count)
					 IF ll_row_find > 0 THEN 
						lb_fed_waste_pcb = TRUE
					 END IF
				NEXT
			END IF
			
			IF ll_dw_waste_code_eq > 0 THEN 
				FOR i = 1 TO ll_dw_waste_code_eq
					  ll_waste_code_uid =  idw_waste_code_eq.Object.waste_code_uid[i]
					 ls_find = "pcb_flag = 'T' AND 	waste_code_uid = "  + string (ll_waste_code_uid)
					 ll_row_find =  lds.Find(ls_find,1,ll_pcb_flag_count)
					 IF ll_row_find > 0 THEN 
						lb_eq_waste_pcb = TRUE
					 END IF
				NEXT
			END IF
			
			IF  idw_technical.GetRow() > 0 THEN 
				ls_pcb_disposal_under_TSCA = idw_technical.object.pcb_regulated_for_disposal_under_TSCA [idw_technical.GetRow()]
			END IF
			
			IF idw_composition_other.GetRow () > 0 THEN 
				ls_pcb_concentration_50_499 = idw_composition_other.object.pcb_concentration_50_499[idw_composition_other.GetRow ()] 
				ls_pcb_concentration_500 = idw_composition_other.object.pcb_concentration_500[idw_composition_other.GetRow ()] 
				ls_pcb_source_concentration_gr_50 = idw_composition_other.object.pcb_source_concentration_gr_50[idw_composition_other.GetRow ()] 
				 IF lb_state_waste_pcb = TRUE OR lb_fed_waste_pcb = TRUE OR lb_eq_waste_pcb = TRUE OR ls_pcb_concentration_50_499 = 'T'   &
						OR ls_pcb_concentration_500 = 'T' OR ls_pcb_source_concentration_gr_50 = 'T' OR ls_pcb_disposal_under_TSCA = 'T' THEN 
					  //DevOps #42225 || 6/7/2023  - Added by Uday for Prompting the user on Profile PCB property flag  - Start
					  IF  idw_composition_other.Object.contains_pcb[ idw_composition_other.GetRow ()] = 'F' THEN
					  	MessageBox(gs_app_name + ": Validation Warning", "This profile has been identified as containing PCB waste. " &
						  																	+ "The PCB checkbox in section F8 can not be updated to 'No'. " &
																							+ "Please review any added waste codes and the PCB Supplement page.", Exclamation! )	
					  END IF
					  //DevOps #42225 - End
					  idw_composition_other.Object.contains_pcb[ idw_composition_other.GetRow ()] = 'T'
				END IF
			END IF
	   END IF
// END IF customer end if moved to up 

// MPM - 11/12/2018 - Task 5205 - Consolidation profile management
// If the profile contains an approval into a facility that uses the state review logic, if the approval is not linked to a consolidation profile and the profile doesn't
// have a 'State Review Confirmation' document scanned or attached to the profile, warn the user that they should upload this documentation.
// MPM - 11/30/2018 - Task 5205 - But only show this warning if the profile is NOT being saved for the first time.
// MPM - 5/2/2019 - DevOps task 10346/GEM 60911 - Profile - Removed the validation for an uploaded State Review Confirmation document in pre-save validation.  
// This validation already occurs when the profile status is changed to either "Approved" or "Approved Pending Prices".  
//IF idw_header.GetItemStatus(ll_row_header, 0, Primary!) <> NewModified! THEN
//	FOR ll_row_approval = 1 TO idw_approval.Rowcount()
//		ls_state_profile_review_required_flag = idw_approval.Object.state_profile_review_required_flag[ll_row_approval]
//		ls_approval_status = idw_approval.Object.status[ll_row_approval]
//		// MPM - 12/17/2018 - GEM 57609 - Skip the following validation if the approval is not Active
//		IF ls_state_profile_review_required_flag = 'T' AND ls_approval_status = 'A'THEN
//			IF IsNull(idw_approval.Object.consolidation_profile_id[ll_row_approval]) THEN
//				// MPM - 12/11/2018 - Task 5205 - Look for the State Review Confirmation document on the Documents tab.
//				// If it's not there, display a warning.
//				ll_document_rowcount = iudw_document.uf_get_rowcount()
//				IF ll_document_rowcount > 0 THEN
//					FOR ll_row_document = 1 TO ll_document_rowcount
//						IF iudw_document.uf_get_type_id(ll_row_document) = ii_state_review_confirmation_type_id THEN
//							lb_found_row = TRUE
//							EXIT
//						END IF
//					NEXT
//				END IF
//				IF NOT lb_found_row THEN
//					MessageBox(gs_app_name + ":  Warning","This profile does not have a state review confirmation document uploaded.  Please attach your documentation.")
//				END IF
//			END IF
//		END IF
//	NEXT
//END IF

// AGC - 07/31/2019 - DevOps 10392 changed from ls_msg_error to ls_msg_const
// AM - 07/25/2019 - Per devops 10392 uncommented const logic with only % no ppm, And keep composition logic as commented.
// MPM - 5/7/2019 - Per Zach's request, I'm commenting out the changes I made under GEM 60229 for now...
// MPM - 4/29/2019 - GEM 60229 - If a constituent or composition line is set a unit of ppm or % and is entered as greater than 100, display an error that says, 
// "The amount entered cannot be greater than 100 {unit}"
FOR ll_row_const = 1 TO idw_const.Rowcount()
	ll_const_id = idw_const.Object.const_id[ll_row_const]
	ls_unit = idw_const.Object.unit[ll_row_const]
	ld_min_concentration = idw_const.Object.min_concentration[ll_row_const]
	ld_max_concentration = idw_const.Object.concentration[ll_row_const]
	ld_typical_concentration = idw_const.Object.typical_concentration[ll_row_const]
	ld_sum_of_typical_pct 		 += ld_typical_concentration     //20200528 jcb #15695 add	
	ld_sum_max_concentration 	 += ld_max_concentration     	//20200528 jcb #15695 add	
	     
		 //DevOps 17373 info_gde 10/05/2020; Section E6 - Validation Warnings
		IF isNull(ld_max_concentration) AND NOT isNull(ld_min_concentration) THEN
			IF ls_msg_const <> "" THEN ls_msg_const += "~r"
			ls_msg_const += "Constituent (ID " + String(ll_const_id) + "): Please review the minimum and maximum concentrations of constituents. Maximum should be entered if minimum contains a value."
		
		End if
		
         IF Not isNull(ld_max_concentration) AND isNull(ld_min_concentration) THEN
			IF ls_msg_const <> "" THEN ls_msg_const += "~r"
			ls_msg_const += "Constituent (ID " + String(ll_const_id) + "): Please review the minimum and maximum concentrations of constituents. Minimum should be entered if maximum contains a value."
		
		End if
		
		//DevOps:49980 - AM - 01/15/2024 -  Moved validation from wf_validate_wcr to give an error instead of warning.
		IF IsNull(ls_unit) OR ls_unit = '' THEN 
			IF ls_msg_const <> "" THEN ls_msg_const += "~r"
			ls_msg_const += "Constituent (ID " + String(ll_const_id) + "): Units is required.~r~n"
		END IF

		  if isNull(ld_min_concentration) then ld_min_concentration=0.0
		  if isNull(ld_typical_concentration) then ld_typical_concentration=0.0
		  if isNull(ld_max_concentration) then ld_max_concentration=0.0
		  
		  //DevOps 17657 info_gde 10/09/2020; Section E6 - Incorrect E6 Validation Trigger
		//DevOps:16251
//		IF ld_min_concentration >  ld_typical_concentration THEN
//			IF ls_msg_const = "" THEN	 
//				ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Please review the minimum and typical concentrations of constituents. The minimum should be less than or equal to the typical value." 			
//			ELSE
//				ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Please review the minimum and typical concentrations of constituents. The minimum should be less than or equal to the typical value." 
//			END IF
//		END IF
		
		  
			//DevOps:16251
//		IF ld_max_concentration <  ld_typical_concentration THEN
//			IF ls_msg_const = "" THEN	 //DevOps 17373 info_gde 10/06/2020; Section E6 - Validation Warnings
//				//ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Please review the maximum and typical concentrations of constituents.  The maximum should be less than or equal to the typical value." 
//				ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Please review the maximum and typical concentrations of constituents.   The typical should be less than or equal to the maximum value." 	
//			ELSE 
//				//ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Please review the maximum and typical concentrations of constituents.  The maximum should be less than or equal to the typical value." 
//			       ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Please review the maximum and typical concentrations of constituents.  The typical should be less than or equal to the maximum value." 
//			END IF
//		END IF

		// MPM - 7/24/2020 - DevOps 16878 - Don't allow min concentration to be greater than max concentration ***
		//DevOps:19370 - Trigger validation if max has value which is > 0.
		IF (ld_min_concentration >  ld_max_concentration ) AND ld_max_concentration > 0 THEN
			IF ls_msg_const <> "" THEN ls_msg_const += "~r"
			ls_msg_const += "Constituent (ID " + String(ll_const_id) + "): Please review the minimum and maximum concentrations of constituents. The minimum should be less than or equal to the maximum value."
		END IF
		
	IF (ls_unit = "%" )   THEN // OR Lower(ls_unit) = 'ppm')  
		 //IF Lower(ls_unit) = 'ppm' THEN ls_unit = ' ' + ls_unit
		IF ld_typical_concentration > 100 THEN
			IF ls_msg_const = "" THEN				
				ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Typical Concentration cannot be greater than 100" + ls_unit + '.'
			ELSE
				ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Typical Concentration cannot be greater than 100" + ls_unit + '.'
			END IF
		END IF
		
		IF ld_min_concentration > 100 THEN
			IF ls_msg_const = "" THEN				
				ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Minimum Concentration cannot be greater than 100" + ls_unit + '.'
			ELSE
				ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Minimum Concentration cannot be greater than 100" + ls_unit + '.'
			END IF
		END IF
		
		IF ld_max_concentration > 100 THEN
			IF ls_msg_const = "" THEN				
				ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Maximum Concentration cannot be greater than 100" + ls_unit + '.'
			ELSE
				ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Maximum Concentration cannot be greater than 100" + ls_unit + '.'
			END IF
		END IF
		
	END IF
	//DevOps 16451 comment out this validation per Oswin
// 	//20200528 jcb #15695 If no comp_to_pct(max) then typical must be present 	
//    IF	(IsNull(ld_max_concentration) or ld_max_concentration < .0001) THEN			//DevOps 16451 changed from .01 to .0001
//		IF	(IsNull(ld_typical_concentration) or ld_typical_concentration < .0001) &
//			OR  ld_typical_concentration           >  100  THEN 				
//			IF ls_msg_const = "" THEN		
//				ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Typical value must be greater than .0001 when Max value is 0 or blank." 
//			ELSE
//				ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Typical value must be greater than .0001 when Max value is 0 or blank."				 
//			END IF  
//		END IF
//         //20200528 jcb #15695 If nothing for Typical, then comp_to_pct (MAX) must be >= 100 
//         IF	(IsNull(ld_typical_concentration) or ld_typical_concentration < .0001)  THEN
//			IF  (IsNull(ld_max_concentration) or ld_max_concentration < 0)   &
//			OR ld_max_concentration            >  100       THEN
//				IF ls_msg_const = "" THEN	 
//					ls_msg_const = "Constituent (ID " + String(ll_const_id) + "): Max value must be greater than 0 when Typical value is 0 or blank." 			
//				ELSE
//					ls_msg_const = ls_msg_const + "~rConstituent (ID " + String(ll_const_id) + "): Max value must be greater than 0 when Typical value is 0 or blank." 
//				END IF
//			END IF
//		END IF             // 20200529 jcb #15965 add		
	
//		ld_sum_of_typical_pct 		 += ld_typical_concentration     //20200528 jcb #15695 add	
//		ld_sum_max_concentration 	 += ld_max_concentration     	//20200528 jcb #15695 add	

//DevOps 16312 commented out because this validation is for D1 instead of E6
//  //202020528 jcb #15695 add check of sums, typical or Max must be >= 100
//   IF   ld_sum_of_typical_pct <  100 and ld_sum_max_concentration < 100  		THEN
//			IF ls_msg_const = "" THEN				
//				ls_msg_const = "Composition Tab, Section D1: The Sum of Typical Values or the sum of the Max values must be at least 100%." 
//			ELSE
//				ls_msg_const = ls_msg_const + "~rComposition Tab, Section D1: The Sum of Typical Values or the sum of the Max values must be at least 100%"
//			END IF
//  END IF

	//20200528 jcb #15695 add: crosscheck between UHC flag(s) and G3 more_than_50_pct_debris
		ls_chk_G3 	  = 'F'
		ll_row_G3	  = idw_technical.GetRow()
		//ls_dataobject = idw_technical.dataobject
		ls_chk_G3 	  = idw_technical.object.more_than_50_pct_debris[ll_row_G3]

		IF  lb_has_UHC_checked = TRUE  and ls_chk_g3 = 'T' THEN
			IF pos(is_msg_validate_wcr,'Composition Tab, Section E6 UHC flag(s) are checked but Section G3 Alternative Treatment Standards for debris is checked') < 1 THEN
 	   			is_msg_validate_wcr +=  "Composition Tab, Section E6 UHC flag(s) are checked but Section G3 Alternative Treatment Standards for debris is checked.~r~n"
				   li_rc   = gi_failure
			END IF
		END IF	

		//20200515 jcb #15700 add, using msg from COR validation, with 'on E6' added on
	    ls_tclp_flag 					= idw_const.object.tclp_flag[ll_row_const]
  		IF  IsNull(ls_tclp_flag) OR trim(ls_tclp_flag) = ''   THEN
	  		IF  pos(is_msg_validate_wcr,'Please fill all Chemical Constituents, Unit and TCLP/Totals on E6.') <  1 THEN
 	      	   is_msg_validate_wcr += "Please fill all Chemical Constituents, Unit and TCLP/Totals on E6.~r~n"
		 	END IF 		
   		 END IF
//	END IF
NEXT

/*
FOR ll_row_comp = 1 TO idw_composition.Rowcount()
	ls_comp_desc = idw_composition.Object.comp_description[ll_row_comp]
	ls_unit = idw_composition.Object.unit[ll_row_comp]
	ld_min_concentration = idw_composition.Object.comp_from_pct[ll_row_comp]
	ld_max_concentration = idw_composition.Object.comp_to_pct[ll_row_comp]
	ld_typical_concentration = idw_composition.Object.comp_typical_pct[ll_row_comp]
	IF (ls_unit = "%" OR Lower(ls_unit) = 'ppm') THEN 
		IF Lower(ls_unit) = 'ppm' THEN ls_unit = ' ' + ls_unit
		IF ld_typical_concentration > 100 THEN
			IF ls_msg_error = "" THEN				
				ls_msg_error = "Composition (" + ls_comp_desc + "): Typical Concentration cannot be greater than 100" + ls_unit + '.'
			ELSE
				ls_msg_error = ls_msg_error + "~rComposition (" + ls_comp_desc + "): Typical Concentration cannot be greater than 100" + ls_unit + '.'
			END IF
		END IF
		IF ld_min_concentration > 100 THEN
			IF ls_msg_error = "" THEN				
				ls_msg_error = "Composition (" + ls_comp_desc + "): Minimum Concentration cannot be greater than 100" + ls_unit + '.'
			ELSE
				ls_msg_error = ls_msg_error + "~rComposition (" + ls_comp_desc + "): Minimum Concentration cannot be greater than 100" + ls_unit + '.'
			END IF
		END IF
		IF ld_max_concentration > 100 THEN
			IF ls_msg_error = "" THEN				
				ls_msg_error = "Composition (" + ls_comp_desc + "): Maximum Concentration cannot be greater than 100" + ls_unit + '.'
			ELSE
				ls_msg_error = ls_msg_error + "~rComposition (" + ls_comp_desc + "): Maximum Concentration cannot be greater than 100" + ls_unit + '.'
			END IF
		END IF
	END IF
NEXT
*/

// Report everything that did not validate, but...
// rb 05/29/2012 Appended WCR validation

//AlonB 10/21/19 #12294 */
//if idw_header.Object.rcra_haz_flag[idw_header.getRow()] <> "E"   then 
//AlonB 10/21/19 #12294 */

// DevOps 14241/14841 - 3/27/2020 - MPM - New validation error (NOT a warning)
// DevOps 16836 - since exceed_ldr_standards is obsolete field using waste_meets_ldr_standards
// MPM - 9/17/2020 - DevOps 17334 - The change made under DevOps 16836 is not correct.  It changed
// the datawindow column below from "exceed_ldr_standards" to "waste_meets_ldr_standards".  I've 
// changed it back.
ls_exceed_ldr_standards = idw_header.object.exceed_ldr_standards[ll_row_header]

IF ls_exceed_ldr_standards = 'T' THEN
	IF ll_row_tech > 0 THEN
		ls_waste_water_flag = idw_header.object.waste_water_flag[ll_row_header]
		ls_meets_alt_soil_treatment_stds 	= idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech]
		ls_more_than_50_pct_debris = idw_technical.Object.more_than_50_pct_debris[ll_row_tech]
		ls_waste_meets_ldr_standards = idw_header.object.waste_meets_ldr_standards[ll_row_header]
		IF NOT(ls_waste_water_flag = 'W' OR ls_waste_water_flag = 'N' OR ls_meets_alt_soil_treatment_stds = 'T' OR &
			ls_more_than_50_pct_debris = 'T' OR ls_waste_meets_ldr_standards = 'T') THEN
			ls_ldr_err_msg = '"Does this waste exceed LDR levels?" of the Shipping Tab is marked "Yes" but no selection has been made in G3 of the Profile Tab.  Please make a selection in G3 of the Profile Tab.'
		END IF
	END IF
END IF

// MPM - 4/14/2020 - DevOps 11835/10590
IF wf_validate_tenorm_fee(ls_warning_or_error, ls_tenorm_validation_message) <> gi_success THEN
	MessageBox(gs_app_name + ":  Error","An error occurred calling wf_validate_tenorm_fee().")
	RETURN gi_failure
END IF 

// If we have a TENORM validation error, then append that to the generic error message, which gets displayed only if the profile status is 'A'
// Otherwise, the TENORM validation must be a warning, and we'll display it with the other error/warning messages below
IF ls_tenorm_validation_message <> "" AND ls_warning_or_error = 'Error' THEN
	IF ls_msg_error = "" THEN
		ls_msg_error = ls_tenorm_validation_message
	ELSE
		ls_msg_error = ls_msg_error + '~r' + ls_tenorm_validation_message
	END IF	
	ls_tenorm_validation_message = ''
END IF

// MPM - 10/1/2020 - DevOps 17138 - Changed the following three validations from warnings to errors
// MPM - 10/21/2020 - DevOps 17138 - Changed the following three validations to errors when profile status is 'Approved' or 'Approved - Pending Prices'; otherwise, they're warnings

// MPM - COR2 state waste codes validation
//DevOps:13985 - PA is required field
IF idw_header.object.pa_residual_waste_flag[ll_row_header]  = 'U' OR IsNull(idw_header.object.pa_residual_waste_flag[ll_row_header] ) THEN
	IF ls_waste_code_msg > "" THEN ls_waste_code_msg += '~r'
	ls_waste_code_msg += "PA State Code selection is required."
END IF

//DevOps:13045 
ll_state_waste_code_count =  idw_waste_code_state.RowCount()
IF ll_row_tech > 0 THEN
    ls_cyanide_plating=idw_technical.object.cyanide_plating[ll_row_tech]

	IF (idw_technical.Object.state_waste_code_flag[ll_row_tech] = 'T' AND ll_state_waste_code_count = 0 ) THEN
		IF ls_waste_code_msg > "" THEN ls_waste_code_msg += '~r'
		ls_waste_code_msg += 'Please indicate if a State Waste Code applies by listing it in this section or select "State Waste Codes: None" if no State Codes apply.'
	END IF

END IF
// MPM - COR2 RCRA waste codes validation
//ls_rcra_waste_code_flag  = idw_technical.Object.rcra_waste_code_flag[ll_row_tech]
ls_rcra_exempt_flag = idw_header.Object.rcra_exempt_flag[ll_row_header]

//DevOPs:15142 - IF rcra waste code not checked as NONE and rcra waste codes is null then below message
IF ( idw_header.Object.RCRA_waste_code_flag[ll_row_header] = 'T' OR isNull( idw_header.Object.RCRA_waste_code_flag[ll_row_header]) OR  idw_header.Object.RCRA_waste_code_flag[ll_row_header]='') AND (IsNull(is_rcra_waste_codes) OR is_rcra_waste_codes = '') THEN
	IF ls_waste_code_msg > "" THEN ls_waste_code_msg += '~r'
	ls_waste_code_msg += 'Profile Tab E3 - "RCRA Waste Codes" is required. Please add RCRA Waste Codes or select "None" if no RCRA Waste Codes apply.'
END IF

//DevOps 17693 info_gde 10/14/2020; Section E Validations Not Firing
//DevOps 17661 info_gde 10/15/2020; Form Management - Create Profile Not Working
IF  idw_header.Object.RCRA_waste_code_flag[ll_row_header] = 'F' AND  ls_rcra_exempt_flag = 'U' THEN
	IF ls_e2_e3_err = "" THEN
		ls_e2_e3_err = ' "Profile Tab E3 - "If None, is it exempt" is required based on a selection of "None" for "RCRA Waste Codes".'
	ELSE
		ls_e2_e3_err = ls_e2_e3_err + '~rProfile Tab E3 - "If None, is it exempt" is required based on a selection of "None" for "RCRA Waste Codes".'
	END IF			
END IF


//DevOps 17693 info_gde 10/14/2020; Section E Validations Not Firing
//DevOps 17661 info_gde 10/15/2020; Form Management - Create Profile Not Working
If ls_cyanide_plating='U' AND (Pos(is_rcra_waste_codes, 'F006')>0 OR  Pos(is_rcra_waste_codes, 'F007')>0 OR  Pos(is_rcra_waste_codes, 'F008')>0 OR  Pos(is_rcra_waste_codes, 'F009')>0 OR  Pos(is_rcra_waste_codes, 'F012')>0 OR Pos(is_rcra_waste_codes, 'F019')>0) THEN
	  	IF ls_e2_e3_err = "" THEN
		ls_e2_e3_err = 'Profile Tab - Section E4: You have indicated that an F006-F009 or that an F012/F019 is applicable.  Please indicate if Cyanides are used in the process or not.'
	ELSE
		ls_e2_e3_err = ls_e2_e3_err + '~rProfile Tab - Section E4: You have indicated that an F006-F009 or that an F012/F019 is applicable.  Please indicate if Cyanides are used in the process or not.'
	END IF
END IF


////DevOps 17706 info_gde 11/11/2020; Section E3 Exemption Validation is Failing
//IF  idw_header.Object.RCRA_waste_code_flag[ll_row_header] = 'F'  AND isNull(idw_header.Object.rcra_exempt_reason[ll_row_header]) THEN
//	ls_waste_code_msg += '  Profile Tab E3 - Exemption reference is required.'
//END IF
//
////DevOps 17706 info_gde 11/05/2020; Section E3 Exemption Validation is Failing
//IF  ls_rcra_exempt_flag='T' AND isNull(idw_header.Object.rcra_exempt_reason[ll_row_header]) THEN
//	ls_waste_code_msg += '  Profile Tab E3 - Exemption reference is required.'
//END IF

//DevOps 17706 info_gde 11/16/2020; Section E3 Exemption Validation is Failing
 ls_rcra_exempt_reason =  idw_header.Object.rcra_exempt_reason[ll_row_header] 
IF ( idw_header.Object.rcra_exempt_flag[ll_row_header] = 'T' AND ( IsNull(ls_rcra_exempt_reason) OR ls_rcra_exempt_reason = '')  ) THEN
	ls_waste_code_msg += 'Profile Tab E3 - Exemption reference is required.~r~n'	
 
END IF

// MPM - 1/8/2021 - DevOps 17522 - Job type validation
IF ls_profile_status = 'A' THEN
	IF ls_job_type = 'B' THEN // Base
		FOR ll_idx = 1 TO idw_ship_volume.RowCount()
			ls_bill_unit_code = idw_ship_volume.Object.bill_unit_code[ll_idx]
			ls_quantity = idw_ship_volume.Object.quantity[ll_idx]
			IF ls_bill_unit_code = 'TONS' OR ls_bill_unit_code = 'YARD' THEN
				IF IsNumber(ls_quantity) THEN
					IF Dec(ls_quantity) >= 1000 THEN
						IF ls_msg_job_type <> '' THEN ls_msg_job_type += '~r'
						ls_msg_job_type += 'Does this fit the definition of an "Event" job type (1000 tons or greater of remediation)? If yes, please update the "Job Type" on the Detail tab.'
					END IF
				END IF
			END IF
		NEXT
	ELSEIF ls_job_type = 'E' THEN // Event
		FOR ll_idx = 1 TO idw_ship_volume.RowCount()
			ls_bill_unit_code = idw_ship_volume.Object.bill_unit_code[ll_idx]
			ls_quantity = idw_ship_volume.Object.quantity[ll_idx]
			IF ls_bill_unit_code = 'TONS' OR ls_bill_unit_code = 'YARD' THEN
				IF IsNumber(ls_quantity) THEN
					IF Dec(ls_quantity) < 1000 THEN
						IF ls_msg_job_type <> '' THEN ls_msg_job_type += '~r'
						ls_msg_job_type += 'Are you sure this fits the definition of an "Event" job type (1000 tons or greater of remediation)? If no, please update the "Job Type" on the Detail tab.'
					END IF
				END IF
			ELSE
				IF ls_msg_job_type <> '' THEN ls_msg_job_type += '~r'
				ls_msg_job_type += 'Are you sure this fits the definition of an "Event" job type (1000 tons or greater of remediation)? If no, please update the "Job Type" on the Detail tab.'
			END IF
		NEXT
	END IF
END IF

// MPM - 1/13/2022 - DevOps 21647
ll_row_shipping = idw_shipping.GetRow()
IF ll_row_shipping > 0 THEN
	IF (Upper(Left(LeftTrim(idw_shipping.Object.dot_shipping_name[ll_row_shipping]), 6)) = "WASTE " OR Upper(Left(LeftTrim(idw_shipping.Object.dot_shipping_name[ll_row_shipping]), 6)) = "WASTE,") AND &
		(IsNull(idw_shipping.object.dot_waste_flag[ll_row_shipping]) OR idw_shipping.object.dot_waste_flag[ll_row_shipping] <> 'T') THEN
		ls_dot_waste_flag_msg = 'The DOT Shipping Name begins with "Waste", but the Waste checkbox is not checked.'
	END IF
END IF

// MPM - 9/11/2023 - DevOps 69309
FOR ll_row_approval = 1 TO idw_approval.RowCount()
	ls_approval_status = idw_approval.Object.status[ll_row_approval]
	IF ls_approval_status = 'I' THEN CONTINUE // skip inactive approvals
	ls_location_type = idw_approval.Object.location_type[ll_row_approval]
	IF ls_location_type = 'O' THEN // validate only outbound locations; skip process locations
		ls_location = idw_approval.Object.location[ll_row_approval]
		IF NOT f_chk_generator_restricted_tsdf(ll_generator_id, ls_location) THEN
			ls_approval_code = Trim(idw_approval.Object.approval_code[ll_row_approval])
			ll_company_id = idw_approval.Object.company_id[ll_row_approval]
			ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			IF ls_warning <> '' THEN ls_warning += '~r'
			ls_warning += "For approval code " + ls_approval_code +  " (" + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")" + ", a TSDF location that is not in the approved list for this outbound restricted generator has been selected. Please carefully review and select an approved location. You may view approved TSDF Locations within the Generator screen."
		END IF
	END IF
NEXT

IF IsNull (is_msg_validate_shipping) then is_msg_validate_shipping = ""
IF ls_msg_error <> "" THEN ls_msg_error = ls_msg_error + "~r"
IF ls_msg_const <> "" THEN ls_msg_const = ls_msg_const + "~r"
IF is_msg_validate_price <> "" THEN is_msg_validate_price = is_msg_validate_price + "~r"
IF is_msg_validate_shipping <> "" THEN is_msg_validate_shipping = is_msg_validate_shipping + "~r"
IF ls_approval_error <> "" THEN ls_approval_error = ls_approval_error + "~r"
IF ls_msg_consolidation_err <> "" THEN ls_msg_consolidation_err = ls_msg_consolidation_err + "~r"
IF is_msg_waste_import <> "" THEN is_msg_waste_import = is_msg_waste_import + "~r"
IF ls_ldr_err_msg <> "" THEN ls_ldr_err_msg = ls_ldr_err_msg + "~r"
IF ls_tenorm_validation_message <> "" THEN ls_tenorm_validation_message = ls_tenorm_validation_message + "~r"
IF ls_e2_e3_err <> "" THEN ls_e2_e3_err = ls_e2_e3_err +"~r"
IF ls_waste_code_msg <> "" THEN ls_waste_code_msg += "~r"
IF ls_msg_job_type <> "" THEN ls_msg_job_type += "~r"
IF ls_labpack_template_msg <> '' then ls_labpack_template_msg = ls_labpack_template_msg + '~r'
IF ls_dot_waste_flag_msg <> '' then ls_dot_waste_flag_msg = ls_dot_waste_flag_msg + '~r'
IF ls_warning <> '' then ls_warning = ls_warning + '~r'
IF ls_msg_generator_phone <> '' then ls_msg_generator_phone = ls_msg_generator_phone + '~r'
IF ls_msg_warning_2 <> '' THEN ls_msg_warning_2 += '~r'

// MPM - 2/24/2021
// Reminder:  the profile status that's displayed in the upper right-hand corner of the Profile Tracking window is a function of Profile.curr_status_code and Profile.tracking_type.
// In this function, ls_profile_status is Profile.curr_status_code and ls_tracking_type is Profile.tracking_type.
//
// Displayed profile status			curr_status_code		tracking_type
// ------------------------------------------------------------------------------
// Approved								A							A
// Approved - Pending Prices		P							APRC
// Canceled								C							C
// Hold									H							H
// New									P							NEW
// Rejected								R							R
// Void									V							V

// MPM - 12/1/2020 - DevOps 18115 - Modified so that is_ldr_validate_wcr is displayed as a warning if no other errors are present, and is displayed with any errors, if any are present, regardless of profile status. 
// MPM - 10/4/2021 - DevOps 20947 - Modified to validate that an "Approved" or "Approved - Pending Pricing" profile has exactly one active, primary facility.
//DevOps 29641 AGC 11/17/2021 added ls_labpack_template_msg so duplicate profile template labpack process codes will be displayed as an error
//DevOps 39727 info_gde 05/19/2022; Illinois State ID Requirement > Add Validation Warnings
IF ls_msg_error <> "" OR ls_msg_const <> "" OR is_msg_validate_price <> "" OR is_msg_validate_wcr <> ""  OR is_msg_validate_shipping <> "" OR ls_approval_error <> ""   OR is_msg_waste_import <> "" OR ls_warning <> "" OR &
	ls_ldr_err_msg <> "" OR ls_tenorm_validation_message <> "" OR ls_e2_e3_err<> '' OR ls_waste_code_msg <> "" OR is_ldr_validate_wcr <> "" OR ls_msg_job_type <> "" OR ls_labpack_template_msg <> "" OR ls_dot_waste_flag_msg <> "" OR ls_generator_state_id_val<>"" OR ls_msg_generator_phone<>"" OR ls_msg_warning_2 <> "" THEN
	IF (ls_profile_status = "A") AND (trim(ls_msg_error) <> "" OR trim(ls_msg_const) <> "" OR trim(is_msg_validate_price) <> "" OR trim(is_msg_waste_import) <> "" OR trim(ls_ldr_err_msg) <> "" OR trim(ls_e2_e3_err)<>"" OR ls_waste_code_msg <> "" OR ls_labpack_template_msg <> "" ) THEN
		MessageBox(gs_app_name + ":  Validation Error", "The following entries are not valid:~r~r" + ls_msg_error + ls_msg_const + is_msg_validate_price + is_msg_waste_import + ls_ldr_err_msg + ls_e2_e3_err +ls_tenorm_validation_message + ls_waste_code_msg + is_ldr_validate_wcr + ls_labpack_template_msg + ls_dot_waste_flag_msg + ls_warning+ls_generator_state_id_val+ls_msg_generator_phone + ls_msg_warning_2, Exclamation!)
		li_rc =  gi_failure
	// MPM - 4/14/2020 - DevOps 11835/10590
	// Need to display the TENORM validation warning, regardless of profile status, so added the ELSEIF below
	//DevOps 17661 info_gde 10/15/2020; Form Management - Create Profile Not Working
	ELSEIF (ls_profile_status = 'A') AND (ls_tenorm_validation_message <> "" OR ls_e2_e3_err <> "" OR is_ldr_validate_wcr <> "" OR ls_msg_job_type <> "" OR ls_dot_waste_flag_msg <> "" OR ls_warning <> "" OR ls_generator_state_id_val<>"" OR ls_msg_generator_phone<>"" OR ls_msg_warning_2 <> "") THEN
		MessageBox(gs_app_name + ":  Validation Warnings", "The following entries are not valid:~r~r" + ls_tenorm_validation_message + is_ldr_validate_wcr + ls_msg_job_type + ls_dot_waste_flag_msg + ls_warning +ls_generator_state_id_val+ls_msg_generator_phone + ls_msg_warning_2 + "~rThe Profile information will still be saved to the database.", Exclamation!)
		li_rc =  gi_success
	// MPM - 9/27/2021 - DevOps 28869 - Modified so that price validation messages are shown only when the profile is Approved
	ELSEIF ls_profile_status = "P" AND ( is_msg_validate_wcr <> ""  OR ls_msg_const <> "" OR is_msg_validate_shipping <> "" OR ls_msg_consolidation_err <> "" OR ls_approval_error <> "" OR ls_ldr_err_msg <> "" OR trim(ls_e2_e3_err)<>"" OR ls_waste_code_msg <> "" OR is_ldr_validate_wcr <> "" OR ls_msg_error <> "" OR ls_labpack_template_msg <> "" OR ls_msg_generator_phone <> "" OR ls_msg_warning_2 <> "" ) THEN
		IF is_msg_validate_shipping <> "" OR ls_ldr_err_msg <> "" OR ls_e2_e3_err <> "" OR ls_labpack_template_msg <> "" OR ls_msg_generator_phone <> ""THEN
			MessageBox(gs_app_name + ":  Validation Error", "The following entries are not valid:~r~r" + is_msg_validate_shipping + ls_ldr_err_msg + ls_tenorm_validation_message +ls_e2_e3_err + is_ldr_validate_wcr + ls_msg_const + ls_labpack_template_msg + ls_dot_waste_flag_msg + ls_warning+ls_generator_state_id_val+ls_msg_generator_phone + ls_msg_warning_2, Exclamation!)
			li_rc =  gi_failure
		// MPM - 2/24/2021 - DevOps 19257
		// Modified so that any ls_msg_const message is displayed as:
		//		- an ERROR if:
		//			- the profile status displayed in the upper right-hand corner of the window is "Approved" (which means that ls_profile_status = 'A'), or
		//			- the profile status displayed in the upper right-hand corner of the window is "Approved - Pending Prices" (which means that ls_profile_status = 'P' AND Upper(ls_tracking_type) = 'APRC'), or
		//		- a WARNING for any other ls_profile_status and ls_tracking_type values, such as ls_profile_status = 'P' AND Upper(ls_tracking_type) = 'NEW', which means that the profile shows as "New"
		ELSEIF Upper(ls_tracking_type) = 'APRC' AND (ls_approval_error <> "" OR ls_ldr_err_msg <> "" OR ls_waste_code_msg <> "" OR ls_msg_const <> "" OR ls_msg_error <> "" OR ls_msg_generator_phone <> "") THEN
			MessageBox(gs_app_name + ":  Validation Error", "The following entries are not valid:~r~r" + ls_approval_error + ls_ldr_err_msg + ls_tenorm_validation_message + ls_waste_code_msg + is_ldr_validate_wcr + ls_msg_const + ls_msg_error + ls_dot_waste_flag_msg + ls_warning+ls_generator_state_id_val+ls_msg_generator_phone + ls_msg_warning_2, Exclamation!)
			li_rc =  gi_failure
		ELSEIF ls_msg_consolidation_err <> "" OR ls_ldr_err_msg <> "" OR ls_msg_generator_phone <> ""THEN 
			MessageBox(gs_app_name + ":  Validation Error", "The following entries are not valid:~r~r" + ls_msg_consolidation_err + ls_ldr_err_msg + ls_tenorm_validation_message + is_ldr_validate_wcr + ls_msg_const + ls_dot_waste_flag_msg + ls_warning+ls_generator_state_id_val+ls_msg_generator_phone + ls_msg_warning_2, Exclamation!)
			li_rc =  gi_failure
		ELSEIF ls_ldr_err_msg <> "" OR ls_msg_generator_phone <> "" THEN 
			MessageBox(gs_app_name + ":  Validation Error", "The following entries are not valid:~r~r" + ls_msg_const + ls_ldr_err_msg + ls_tenorm_validation_message + is_ldr_validate_wcr + ls_dot_waste_flag_msg + ls_warning+ls_generator_state_id_val+ls_msg_generator_phone + ls_msg_warning_2, Exclamation!)
			li_rc =  gi_failure
		//DevOps #14705 info_gde 03/10/2020 -- start
		ELSEIF is_msg_waste_import <> "" OR ls_ldr_err_msg <> "" OR ls_msg_generator_phone <> ""THEN
			MessageBox(gs_app_name + ":  Validation Error", "The following entries are not valid:~r~r" + is_msg_waste_import + ls_ldr_err_msg + ls_tenorm_validation_message + is_ldr_validate_wcr + ls_msg_const + ls_dot_waste_flag_msg + ls_warning+ls_generator_state_id_val+ls_msg_generator_phone + ls_msg_warning_2, Exclamation!)
			li_rc =  gi_failure
		//DevOps #14705 info_gde 03/10/2020 -- end
		ELSEIF is_msg_validate_wcr <> "" OR ls_tenorm_validation_message <> "" OR ls_waste_code_msg <> "" OR is_ldr_validate_wcr <> "" OR ls_msg_const <> "" OR ls_dot_waste_flag_msg <> "" OR ls_warning <> "" OR ls_generator_state_id_val<>"" OR ls_msg_generator_phone<>"" OR ls_msg_warning_2 <> "" THEN
			// rb 06/14/2012 - WCR validations are just warnings
			MessageBox(gs_app_name + ":  Validation Warnings", "The following entries are not valid:~r~r" + is_msg_validate_wcr + ls_tenorm_validation_message + ls_waste_code_msg + is_ldr_validate_wcr + ls_msg_const + ls_dot_waste_flag_msg + ls_warning +ls_generator_state_id_val+ ls_msg_generator_phone + ls_msg_warning_2 +"~rThe Profile information will still be saved to the database.", Exclamation!)
			li_rc =  gi_success  
		END IF //DevOps 17806 info_gde 11/06/2020; EQAI: Incorrect LDR Validation
	// DevOps 58688
	ELSEIF ls_msg_warning_2 <> "" THEN
		MessageBox(gs_app_name + ":  Validation Warnings", "The following entries are not valid:~r~r" + ls_msg_warning_2 + "~rThe Profile information will still be saved to the database.", Exclamation!)
		li_rc =  gi_success  
	ELSE
		
		// Let it save
		li_rc = gi_success
	END IF
ELSE
	li_rc = gi_success
END IF

//AlonB 10/21/19 #12294 */    
//end if 
//AlonB 10/21/19 #12294 */	

////COR2 JXM 04/26/2016 10313 -COMMENT out code until it can be looked at and moved above
////LDR Validation Task 5346/9816)
////COR2 JXM 04/09/2019
////Modified on 04/10/2019 Task 5346/9816
////if ( ll_row_header > 0 ) then
////COR2 JXM 04/12/2019 Add Condition to Validation of Waste Import
//if ( idw_header.Object.generator_country[ll_row_header] = "USA" ) then
//	ll_row_ldr 								= idw_profile_ldr_form_dragon.GetRow()
//	ll_row_header							= idw_header.GetRow()
//	if ll_row_ldr > 0 then
//		ls_WasteWaterFlag 					= idw_header.Object.waste_water_flag[ll_row_header]
//		IF ll_row_tech > 0 THEN 
//		   ls_MeetsAltSoilTreatment_stds 	= idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech]
//		END IF
//		ls_MoreThan50PctDebris 			= idw_profile_ldr_form_dragon.Object.more_than_50_pct_debris[ll_row_ldr]
//		ls_ExceedLdrStandards 				= idw_header.Object.exceed_ldr_standards[ll_row_header]
//		ls_DebrisSeparated 					= idw_header.Object.debris_separated[ll_row_header]
//		ls_DebrisNotMixedOrDiluted 		= idw_header.Object.debris_not_mixed_or_diluted[ll_row_header]
//		ls_LdrReqFlag							= idw_profile_ldr_form_dragon.Object.ldr_req_flag[ll_row_ldr]
//		ls_ContituentsRequiringTreatmentFlag = idw_profile_ldr_form_dragon.Object.constituents_requiring_treatment_flag[ll_row_ldr]
//	
//	
//		if ( ( ls_WasteWaterFlag = "W" or ls_WasteWaterFlag = "N" ) &
//			  or ( ls_MeetsAltSoilTreatment_stds = 'T' or ls_MeetsAltSoilTreatment_stds = 'F' ) &
//			 or ( ls_MoreThan50PctDebris = 'T' or ls_MoreThan50PctDebris = 'F' ) &
//			 or ( ls_ExceedLdrStandards = 'T' or ls_ExceedLdrStandards = 'F' ) &
//			 or ( ls_DebrisSeparated = 'T' ) &
//			 or ( ls_DebrisNotMixedOrDiluted = 'T' ) &
//			)  then
//			
//			ll_ProfileWasteManagedID_1 = idw_profile_ldr_form_dragon.Object.profile_waste_managed_id_1[ll_row_ldr]
//			ll_ProfileWasteManagedID_2 = idw_profile_ldr_form_dragon.Object.profile_waste_managed_id_2[ll_row_ldr]
//			ll_ProfileWasteManagedID_3 = idw_profile_ldr_form_dragon.Object.profile_waste_managed_id_3[ll_row_ldr]
//			ll_ProfileWasteManagedID_4 = idw_profile_ldr_form_dragon.Object.profile_waste_managed_id_4[ll_row_ldr]
//			ll_ProfileWasteManagedID_5 = idw_profile_ldr_form_dragon.Object.profile_waste_managed_id_5[ll_row_ldr]
//			ll_ProfileWasteManagedID_6 = idw_profile_ldr_form_dragon.Object.profile_waste_managed_id_6[ll_row_ldr]
//			
//			if ll_row_ldr > 0 then
//				ls_MsgBeg += "The following entries are not valid: ~n~n"
//				
//				//waste_water_flag
//				if ls_WasteWaterFlag = 'W' then 	idw_profile_ldr_form_dragon.SetItem(ll_row_ldr,'waste_rb','W')
//				 if ls_WasteWaterFlag = 'N' then idw_profile_ldr_form_dragon.SetItem(ll_row_ldr,'waste_rb','N')
//				if ls_MoreThan50PctDebris = 'T' then idw_profile_ldr_form_dragon.SetItem(ll_row_ldr,'waste_rb','T')
//				If ( IsNull(ls_WasteWaterFlag) or trim(ls_WasteWaterFlag) = "" or  ls_WasteWaterFlag = "U" ) then
//					ls_DisplayMsg += "~nLDR Profile Form - Wastewater is required."			
//				end if
//				
//				//ldr_req_flag (Notification frequency)
//				if ( IsNull(ls_LdrReqFlag) or trim(ls_LdrReqFlag) = "" and (ls_LdrReqFlag <> 'F' and ls_LdrReqFlag <> 'T' ) )then
//					ls_DisplayMsg += "~nLDR Profile Form - either ~"One Time~" or ~"Required with Each Shipment~" is required."		
//				end if
//				
//				//constituents_requiring_treatment_flag
//				if ( IsNull(ls_ContituentsRequiringTreatmentFlag ) or ( trim(ls_ContituentsRequiringTreatmentFlag) = "" ) ) then
//					ls_DisplayMsg += "~nLDR Profile Form - Contituents Requiring treatment Q#10 is required."
//				end if
//				
//				//profile_waste_managed_id_1 - Requires Treatment
//				if ( ( ls_WasteWaterFlag = 'W' or ls_WasteWaterFlag = 'N' &
//						 or  ls_MeetsAltSoilTreatment_stds = 'T'  &
//						or  ls_MoreThan50PctDebris = 'T' ) &
//					 and ( ll_ProfileWasteManagedID_4 <> 1 or ll_ProfileWasteManagedID_5 <> 1 or ll_ProfileWasteManagedID_6 <> 1 ) &	
//				  ) then
//					ls_DisplayMsg += "~n~"Waste Meets Treatment Standards~" section is required, because you selected something other than Waste Meets LDR Treatment Standards in Section G.3."
//				end if
//				
//				ls_MsgEnd += "~n~n~n The Profile Information will  be saved to database."
//				if Not IsNull(ls_DisplayMsg) AND ls_DisplayMsg <> ""   then
//					if ls_msg_warning_display = '' then
//						ls_msg_warning_display = ls_DisplayMsg
//					else
//						ls_msg_warning_display = ls_msg_warning_display + '~r~n~r~n' + ls_DisplayMsg
//					end if
////					messagebox(gs_app_name + ":  Validation Warnings",ls_MsgBeg + ls_DisplayMsg + ls_MsgEnd,Exclamation!)
//					//return gi_failure
//				end if
//			end if
//		end if
//	end if
//end if
//
////COR2 JXM 04/26/2016 10313 - Fixing Validation for Waste Import
////COMMENTED OUT, modified and moved up ealier in code - JXM 04/26/2016
////Task 5352
////if ( idw_header.Object.generator_country[ll_row_header] = "USA" ) then
////	//Reset varibles
////	ls_MsgBeg = ""
////	ls_MsgEnd = ""
////	ls_DisplayMsg = ""
////	
////	ll_row_waste 			= idw_waste_import_supplement.GetRow()
////	if ll_row_waste > 0 then
////		ls_EpaNoticeID 		= idw_waste_import_supplement.Object.epa_notice_id[ll_row_waste]
////		ls_ConsentNumber	= idw_waste_import_supplement.Object.epa_consent_number[ll_row_waste]
////		ldt_EffectiveDate 		= idw_waste_import_supplement.Object.effective_date[ll_row_waste]
////		ldt_ExpirationDate 	= idw_waste_import_supplement.Object.expiration_date[ll_row_waste]
////		ll_ApprovedVolume = idw_waste_import_supplement.Object.approved_volume[ll_row_waste]
////		
////		if ll_row_waste > 0 then
////			ls_MsgBeg += "The following entries are not valid: ~n~n"
////			
////			//EPA Notice ID char(100)
////			if ( IsNull(ls_EpaNoticeID) or trim(ls_EpaNoticeID) = "" or len(trim(ls_EpaNoticeID)) = 0) then
////				ls_DisplayMsg += "~nWaste Import Profile Form - EPA Notice ID is required."
////			end if
////			
////			//Consent Number char(150)
////			if ( IsNull(ls_ConsentNumber) or trim(ls_ConsentNumber) = "" or len(trim(ls_ConsentNumber)) =0) then
////				ls_DisplayMsg += "~nWaste Import Profile Form - Consent Number is required."
////			end if
////			
////			//Effective Date DataTime
////			if ( IsNull(ldt_EffectiveDate) ) then
////				ls_DisplayMsg += "~nWaste Import Profile Form - Effective Date is required."
////			end if
////			
////			//Expiration Date  DateTime
////			if ( IsNull(ldt_ExpirationDate) ) then
////				ls_DisplayMsg += "~nWaste Import Profile Form - Expiration Date is required."
////			end if
////			
////			//Approved Volume Number
////			If ( (Not IsNumber(String(ll_ApprovedVolume))) or IsNull(ll_ApprovedVolume) or ll_ApprovedVolume = 0.00 ) then
////				ls_DisplayMsg += "~nWaste Import Profile Form - Approved Volume is required."
////			end if
////			
////			ls_MsgEnd += "~n~n~n The Profile Information will  be saved to database."
////			if Not ( isNull(ls_DisplayMsg) or trim(ls_DisplayMsg) = "" )  then
////				if ls_msg_warning_display = '' then
////					ls_msg_warning_display = ls_DisplayMsg
////				else
////					ls_msg_warning_display = ls_msg_warning_display + '~r~n~r~n' + ls_DisplayMsg
////				end if
//////				messagebox(gs_app_name + ":  Validation Warnings",ls_MsgBeg + ls_DisplayMsg + ls_MsgEnd,Exclamation!)
////				//return gi_failure
////			end if
////		end if
////	end if
////end if

//// COR2-JAG 
//// COR2 JXM 05/02/2019 Comment out Jorge code 9616 Thermal Validation
//ls_msg_warning = wf_validate_profile_thermal() //5516
//if ls_msg_warning <> '' then
//	if ls_msg_warning_display = '' then
//		ls_msg_warning_display = ls_msg_warning
//	else
//		ls_msg_warning_display = ls_msg_warning_display + '~r~n~r~n' + ls_msg_warning
//	end if
//end if

ls_msg_warning = wf_validate_benzene_waste_ops_form() //5513
if ls_msg_warning <> '' then
	if ls_msg_warning_display = '' then
		ls_msg_warning_display = ls_msg_warning
	else
		ls_msg_warning_display = ls_msg_warning_display + '~r~n~r~n' + ls_msg_warning
	end if
end if

//DevOps 17658 info_gde 10/09/2020;  E6 Validations Triggering Incorrectly
//IF len(is_rcra_waste_code_flag)>0 and pos(ls_msg_warning_display,"Composition Tab, Section E6 - UHC flag(s) are checked but section E3 RCRA Waste is 'NONE'") <  1 THEN
//         ls_msg_warning_display +=  "Composition Tab, Section E6 - UHC flag(s) are checked but section E3 RCRA Waste is 'NONE'.~r~n"
//END IF
		
if ls_msg_warning_display <> '' then
	ls_MsgBeg = 'The following entries are not valid: ~r~n~r~n'
	ls_MsgEnd = '~r~n~r~n~r~nThe Profile Information will still be saved to the database.'
	messagebox(gs_app_name + ":  Validation Warnings",ls_MsgBeg + ls_msg_warning_display + ls_MsgEnd,Exclamation!)
end if

//DevOps 17332 info_gde 10/14/2020; Constituent Tab - First Line Wiping Value
if li_rc = -1 AND ib_save_in_process then ib_save_in_process=FALSE

RETURN li_rc

end function

public function integer wf_void ();long		ll_company_id, ll_profit_ctr_id, ll_row_approval, ll_rowcount, ll_count
string	ls_approval_code
datastore lds

// Check 'can' status
IF ib_can_void = FALSE THEN RETURN -1

// Check usage
lds = CREATE DATASTORE
lds.DataObject = "d_profile_approval_usage"
lds.SetTransObject(itr_share)
		
// We allow profiles to be voided so long as NO loads have been
// accepted against any of the approvals
ll_count = 0
FOR ll_row_approval = 1 TO idw_approval.RowCount()
	ll_company_id = idw_approval.Object.company_id[ll_row_approval]
	ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
	ls_approval_code = idw_approval.Object.approval_code[ll_row_approval]
	
	IF NOT IsNull(ls_approval_code) THEN
		ll_rowcount = lds.Retrieve(gi_debug, ll_company_id, ll_profit_ctr_id, ls_approval_code, gs_connect_type)
		IF ll_rowcount > 0 THEN
			ll_count = lds.Object.usage_count[1]
		END IF
	END IF
	IF ll_count > 0 THEN 
		EXIT
	END IF
NEXT
DESTROY lds;

RETURN ll_count
end function

public function integer wf_select_check ();// The purpose of this function is to check for any Select screen
// entries in the fields outside of the Select datawindow
string	ls_tmp
integer	li_count

li_count = 0

// Check Approval Code
ls_tmp = TRIM(tab_1.tabpage_select.sle_approval_code_from.text)
IF ls_tmp <> "" THEN
	li_count++
ELSE
	// Check Waste code
	ls_tmp = TRIM(tab_1.tabpage_select.sle_waste_code_from.text)
	IF ls_tmp <> "" THEN
		li_count++
	ELSE
// MPM - 2/13/2020 - DevOps 14228 - Commented out the following block, since the "Dragon reviewed" flag is no longer being used
//     	IF tab_1.tabpage_select.cb_dragon_reviewed_flag_from.Checked = TRUE THEN
//			ls_tmp = 'T'
//		END IF
//		 IF ls_tmp <> "" THEN
//		    li_count++
//	    ELSE
		// Check Location
		ls_tmp = TRIM(tab_1.tabpage_select.sle_location_from.text)
		IF ls_tmp <> "" THEN
			li_count++
		ELSE
			// Check EQ Contact
			ls_tmp = TRIM(tab_1.tabpage_select.sle_eq_contact.text)
			IF ls_tmp <> "" THEN
				li_count++
			ELSE
				// Check Territory
				ls_tmp = TRIM(tab_1.tabpage_select.sle_territory_code.text)
				IF ls_tmp <> "" THEN
					li_count++
				ELSE
					// Check Profile Status
					IF ( is_profile_status = "" OR is_profile_status = "A" ) AND ii_display_status_id <> 3 THEN
						// Range is too broad; make them select something more specific
						ls_tmp = ""
					ELSE
						ls_tmp = is_profile_status
					END IF
					
					
					IF ls_tmp <> "" THEN
						li_count++
					ELSE
						// Check OTS Flag
						ls_tmp = is_ots_flag
						IF ls_tmp <> "" THEN
							li_count++
						ELSE
							// Check Treatment
							ls_tmp = TRIM(tab_1.tabpage_select.sle_treatment_from.text)
							IF ls_tmp <> "" THEN
								li_count++
							ELSE
								// rb 05/21/2012 TSDF Code and TSDF Approval Code
								// Check TSDF Code
								ls_tmp = TRIM(tab_1.tabpage_select.sle_tsdf_code_from.text)
								IF ls_tmp <> "" THEN
									li_count++
								ELSE   
									// Check TSDF Approval Code
									ls_tmp = TRIM(tab_1.tabpage_select.sle_tsdf_approval_code_from.text)
									IF ls_tmp <> "" THEN
										li_count++
									ELSE
									// Check Docs Pending Code
									ls_tmp = TRIM(tab_1.tabpage_select.ddlb_docs_pending.text)
									IF ls_tmp <> "" THEN
										li_count++
									ELSE
										// Check CWT Category
										ls_tmp = TRIM(tab_1.tabpage_select.ddlb_cwt_category.text)
										IF ls_tmp <> "" THEN
											li_count++
										ELSE
											// Check Billing Project ID
											ls_tmp = TRIM(tab_1.tabpage_select.sle_billing_project_id.text)
											IF ls_tmp <> "" THEN
												li_count++
											ELSE
												// Check Recipe
												ls_tmp  =  TRIM(tab_1.tabpage_select.sle_recipe.Text)
												IF ls_tmp <> "" THEN
												   li_count++
												ELSE
												   //DevOps:20991 - Process_code selection
												  ls_tmp  =  Trim(tab_1.tabpage_select.sle_process_code.Text)
												  	IF ls_tmp <> "" THEN
												         li_count++
												     ELSE
												   //DevOps 28728 - Lab Pack Template selection
												  ls_tmp  =  Trim(tab_1.tabpage_select.ddlb_labpack_template_flag.Text)
												  	IF ls_tmp <> "" THEN
												         li_count++
														ELSE
														END IF
													END IF
											     END IF
											END IF
										END IF
									END IF
								END IF
							END IF
						END IF
					END IF
				   END IF
				END IF
			END IF
		END IF
	END IF
END IF
 


RETURN li_count
end function

public function integer wf_populate_wwa (long al_profile_id, string as_approval_code, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, long al_row_header, string as_new_or_update);integer	li_rc
str_pass	lstr

IF ib_connected_forms THEN
	lstr.l[1] = al_form_id
	lstr.l[2] = idw_header.Object.customer_id[al_row_header]
	lstr.l[3] = idw_header.Object.generator_id[al_row_header]
	lstr.l[4] = idw_header.Object.profile_id[al_row_header]
	
	lstr.s[1] = as_approval_code
	lstr.s[2] = idw_header.Object.customer_name[al_row_header]
	lstr.s[3] = idw_header.Object.approval_desc[al_row_header]
	lstr.s[4] = as_new_or_update
	
	lstr.i[2] = ai_profit_ctr_id
	lstr.i[3] = ai_revision_id
	lstr.i[4] = ai_company_id
	
	lstr.tr_trans = itr_forms
	OpenWithParm(w_popup_get_values_wwa, lstr)
	
	lstr = Message.PowerObjectParm
	IF IsValid(lstr) THEN
		li_rc = lstr.i[1]
	END IF
ELSE
	li_rc = -1
END IF

RETURN li_rc
end function

public function integer wf_save_documents ();// The purpose of this function is to save any modified images
long ll_row,ll_customer_id,ll_profile_id,ll_generator_id,ll_profit_ctr, ll_rowcount
long ll_customer_orig,ll_profile_orig,ll_generator_orig
int li_rc, I
string ls_modified_by
datetime ldt_last_profile_sync
ll_row = idw_header.getrow()

li_rc = -1
if ll_row > 0 then
	if idw_header.getitemstatus(ll_row,"profile_id",primary!) = datamodified! or &
	   idw_header.getitemstatus(ll_row,"customer_id",primary!) = datamodified! or &
		idw_header.getitemstatus(ll_row,"generator_id",primary!) = datamodified! then
	
			ll_profile_id = idw_header.object.profile_id[ll_row]
			ll_customer_id = idw_header.object.customer_id[ll_row]
			ll_generator_id = idw_header.object.generator_id[ll_row]
			
			ll_profile_orig = idw_header.object.profile_id.original[ll_row]
			ll_customer_orig = idw_header.object.customer_id.original[ll_row]
			ll_generator_orig = idw_header.object.generator_id.original[ll_row]
			
			if ll_profile_id <> ll_profile_orig or ll_customer_id <> ll_customer_orig or ll_generator_id <> ll_generator_orig then
				if not ib_retrieved_documents then
					wf_retrieve_documents( ll_row, ll_profile_id )
				end if
				iudw_document.uf_set_profile(ll_profile_id,ll_customer_id,ll_generator_id, FALSE)
			end if
			//DevOps 17133 info_gde 09/24/2020; PROD EQAI - Profile Tracking - Copied Profile - Documents from a different profile record added
//			IF ll_profile_id > 0 THEN
//			ll_rowcount=iudw_document.dw_document.rowcount()
//			FOR i = 1 TO ll_rowcount
//				iudw_document.dw_document.object.profile_id[i]=ll_profile_id
//			NEXT
//			END IF
			
	elseif idw_header.getitemstatus(ll_row,"profile_id",primary!) = newmodified! or &
	   idw_header.getitemstatus(ll_row,"customer_id",primary!) = newmodified! or &
		idw_header.getitemstatus(ll_row,"generator_id",primary!) = newmodified! then
	
	// refresh keys for documents

			iudw_document.uf_set_profile(ll_profile_id,ll_customer_id,ll_generator_id, FALSE)
			
	end if
	
//DevOps 19974 info_gde 04/22/2021; Profile Tracking > Forms Tab - 'Last Profile Sync' Audit Timestamp
//DevOps 17364 info_gde 04/08/2021; Profile Tracking > Forms Tab - 'Last Profile Sync' Audit
	tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectTab(ii_tabpage_form)
	li_rc=iudw_document.SetFocus()
    
	ll_rowcount = idw_form.Rowcount()
	If ll_rowcount>0 Then
		ldt_last_profile_sync=idw_form.object.date_last_profile_sync[1]
		ls_modified_by=idw_form.object.added_by[1]
		iudw_document.uf_form_last_update(ll_rowcount,idt_save_date,ldt_last_profile_sync,ls_modified_by)
	End If
	
	
	 li_rc = iudw_document.uf_save()
	
	
end if

//ib_in_CopyProfile=FALSE

return li_rc

end function

public function integer wf_get_srec_exempt_id (integer ai_company_id, integer ai_profit_ctr_id, string as_approval_code);integer	li_exempt_id = 0
long		ll_row, ll_rowcount

ll_rowcount = idw_approval.RowCount()
FOR ll_row = 1 TO ll_rowcount
	IF idw_approval.Object.company_id[ll_row] = ai_company_id &
		AND idw_approval.Object.profit_ctr_id[ll_row] = ai_profit_ctr_id &
		AND idw_approval.Object.approval_code[ll_row] = as_approval_code THEN

		li_exempt_id = idw_approval.Object.srec_exempt_id[ll_row]
		EXIT
	END IF
NEXT

RETURN li_exempt_id
end function

public function long wf_get_customer_id ();/////////////////////////////////////////////
// Function:  wf_get_customer_id
/////////////////////////////////////////////
long	ll_customer_id


ll_customer_id = idw_header.Object.customer_id[il_curr_row]

IF IsNull(ll_customer_id) OR ll_customer_id <= 0 THEN
	ll_customer_id = 0
END IF

RETURN ll_customer_id
end function

public function integer wf_copy_wcr (str_wcr_params ast_params);// When user wants to copy WCR to create new WCR, open compare between the selected WCR & Profile
// User can then 1st choose to replace the data on Profile, and then can hit on new WCR through Doc mgmt on this Profile
// Do not auto-create a new WCR from selected WCR
int 		li_rc = gi_success, li_revision_id, li_form_version_id
long		ll_form_id, ll_profile_id, ll_row
str_pass	lstr

ll_row = idw_header.getrow()
IF ll_row > 0 THEN
	ll_profile_id = idw_header.Object.profile_id[ll_row]
	ll_form_id 				= ast_params.al_form_id
	li_revision_id 		= ast_params.ai_revision_id

	//NOTE : SK 041112 Compare popup does not care what version the WCR is, it just shows the data and gives option
	// 		to replace on Profile for now, but in future, the version might matter,in which case the str 'ast_params'
	//			below will need the correct version id for this form. will cause changes on w_popup_wcr_select, where we select
	// 		the wcr to compare/copy.
	
	//li_form_version_id = ast_params.form_version_id
	SetNull(li_form_version_id)
	
	lstr.l[1] = ll_form_id
	lstr.l[2] = li_revision_id
	lstr.l[3] = li_form_version_id
	lstr.l[4] = ll_profile_id
	lstr.s[1] = is_access
	
	OpenWithParm(w_popup_wcr_profile_compare, lstr)
END IF


//boolean	lb_set_primary
//datetime	ldt_today
//double	ldb_null, ldb_wcr_concentration
//long		ll_wcr_id, ll_revision_id, ll_row, ll_profile_id, ll_null
//long		ll_row_header, ll_newrow, ll_customer_id, ll_row_technical
//long		ll_wcr_cust, ll_wcr_gen, ll_wcr_srec_exempt_id
//long		ll_rowcount, ll_i, ll_const_id, ll_wcr_const_id, ll_row_waste, ll_row_const
//string	ls_status, ls_EPA_ID, ls_generator_name, ls_wcr_uhc, ls_null, ls_odor, ls_free_liquids
//string	ls_waste_common_name, ls_customer_name, ls_locked, ls_ignitability, ls_frequency
//string	ls_wcr_waste_common_name, ls_wcr_color, ls_wcr_sr_exempt, ls_wcr_dot_shipping_name
//string	ls_cust_name, ls_gen_name, ls_waste_code, ls_wcr_waste_code, ls_unit, ls_wcr_unit
//string	ls_consistency_solid, ls_consistency_dust, ls_consistency_liquid, ls_consistency_sludge
//string	ls_consistency
//DWItemStatus	ldwitemstatus
//
//SetNull(ll_null)
//SetNull(ls_null)
//ldt_today = DateTime(Today(), Now())
//
//IF IsValid(ast_params) THEN
//	ast_params.as_function 					= "copy"
//	ast_params.as_assign_target 			= "profile"
//	ast_params.ab_can_change_customer 	= TRUE
//	ib_wcr = TRUE
//	ib_changed_wcr = TRUE
//	iuo_wcr_form.ib_save = FALSE
//	// Open the WCR
//	iuo_wcr_form.wf_init_window(ast_params.as_assign_target, iw_profile)
//	iuo_wcr_form.wf_open(ast_params)
//	// 01052012 SK WCR User Edit Object has its own tabpage!
//	// iuo_wcr_form.SetPosition(ToTop!)
//	
//	ll_wcr_id 		= ast_params.al_form_id
//	ll_revision_id = ast_params.ai_revision_id
//	ll_profile_id 	= ast_params.al_profile_id
//	
//	ll_row_header = idw_header.GetRow()
//	
//	SELECT revision_id, status
//		INTO :ll_revision_id, :ls_status
//		FROM FormHeaderDistinct
//		WHERE type = 'WCR'
//		AND form_id = :ll_wcr_id
//	USING itr_forms;
//	
//	SELECT generator_id,
//			EPA_ID,
//			generator_name,
//			waste_common_name,
//			customer_id,
//			cust_name,
//			locked
//		INTO :ll_wcr_gen,
//			:ls_EPA_ID, 
//			:ls_generator_name, 
//			:ls_waste_common_name, 
//			:ll_customer_id, 
//			:ls_customer_name, 
//			:ls_locked
//		FROM FormWCR
//		WHERE form_id = :ll_wcr_id
//		AND revision_id = :ll_revision_id
//	USING itr_forms;
//			
//	IF ib_new_record THEN
//		// User wants to replace profile data with WCR data
//		SELECT customer_id, generator_id, waste_common_name, 
//				color, surcharge_exempt, srec_exempt_id, dot_shipping_name,
//				frequency, odor, free_liquids, ignitability,
//				consistency_solid, consistency_dust, consistency_liquid, consistency_sludge
//			INTO :ll_wcr_cust, :ll_wcr_gen, :ls_wcr_waste_common_name, 
//				:ls_wcr_color, :ls_wcr_sr_exempt, :ll_wcr_srec_exempt_id, :ls_wcr_dot_shipping_name,
//				:ls_frequency, :ls_odor, :ls_free_liquids, :ls_ignitability,
//				:ls_consistency_solid, :ls_consistency_dust, :ls_consistency_liquid, :ls_consistency_sludge
//			FROM FormWCR
//			WHERE form_id = :ll_wcr_id
//			AND revision_id = :ll_revision_id
//		USING itr_forms;
//		
//		IF itr_forms.SQLCode = 0 THEN
//			SELECT cust_name
//				INTO :ls_cust_name
//				FROM Customer
//				WHERE customer_id = :ll_wcr_cust
//			USING itr_share;
//			
//			IF itr_share.SQLCode = 0 THEN
//				idw_header.Object.customer_id[ll_row_header] = ll_wcr_cust
//				idw_header.Object.customer_name[ll_row_header] = ls_cust_name
//			ELSE
//				MessageBox(gs_app_name + ":  Replace Data Error", "Customer from WCR invalid!  It will not replace Profile Data.", Exclamation!)
//			END IF
//			
//			SELECT generator_name, EPA_ID
//				INTO :ls_gen_name, :ls_epa_id
//				FROM Generator
//				WHERE generator_id = :ll_wcr_gen
//			USING itr_share;
//			
//			IF itr_share.SQLCode = 0 THEN
//				idw_header.Object.generator_id[ll_row_header] = ll_wcr_gen
//				idw_header.Object.generator_name[ll_row_header] = ls_gen_name
//				idw_header.Object.generator_epa_id[ll_row_header] = ls_epa_id
//			ELSE
//				MessageBox(gs_app_name + ":  Replace Data Error", "Generator from WCR invalid!  It will not replace Profile Data.", Exclamation!)
//			END IF
//			
//			// Profile info
//			idw_header.Object.approval_desc[ll_row_header] = ls_wcr_waste_common_name
//			idw_header.Object.dot_shipping_name[ll_row_header] = ls_wcr_dot_shipping_name
//			IF ls_frequency = "1" THEN
//				idw_header.Object.one_time_only[ll_row_header] = "T"
//				idw_header.Object.reapproval_allowed[ll_row_header] = "F"
//			END IF
//			// Lab info
//			ll_row_technical = idw_technical.GetRow()
//			IF ll_row_technical > 0 THEN
//				idw_technical.Object.color[ll_row_technical] = ls_wcr_color
//				idw_technical.Object.ignitability[ll_row_technical] = ls_ignitability
//				IF NOT IsNull(ls_odor) AND ls_odor > "" THEN
//					idw_technical.Object.odor[ll_row_technical] = "T"
//					idw_technical.Object.odor_desc[ll_row_technical] = ls_odor
//				END IF
//				IF ls_free_liquids = "T" THEN
//					idw_technical.Object.free_liquid[ll_row_technical] = ls_free_liquids
//				END IF
//				
//				ls_consistency = ""
//				IF ls_consistency_solid = "T" THEN
//					ls_consistency = "SOLID"
//				END IF
//				IF ls_consistency_dust = "T" THEN
//					IF ls_consistency = "" THEN
//						ls_consistency = "DUST"
//					ELSE
//						ls_consistency += ":DUST"
//					END IF
//				END IF
//				IF ls_consistency_liquid = "T" THEN
//					IF ls_consistency = "" THEN
//						ls_consistency = "LIQUID"
//					ELSE
//						IF Pos(ls_consistency, ":") = 0 THEN
//							ls_consistency += ":LIQUID"
//						END IF
//					END IF
//				END IF
//				IF ls_consistency_sludge = "T" THEN
//					IF ls_consistency = "" THEN
//						ls_consistency = "SLUDGE"
//					ELSE
//						IF Pos(ls_consistency, ":") = 0 THEN
//							ls_consistency += ":SLUDGE"
//						END IF
//					END IF
//				END IF
//				IF ls_consistency > "" THEN
//					idw_technical.Object.consistency[ll_row_technical] = ls_consistency
//				END IF
//			END IF
//			
//			// Delete Secondaries
//			ll_rowcount = idw_waste.RowCount()
//			FOR ll_row = ll_rowcount TO 1 STEP -1
//				IF idw_waste.Object.primary_flag[ll_row] = "F" THEN
//					ldwItemStatus = idw_waste.GetItemStatus(ll_row, 0, Primary!)
//					IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) THEN
//						idw_waste.RowsDiscard(ll_row, ll_row, Primary!)
//					ELSE
//						wf_audit(idw_waste, ll_profile_id, ll_row, TRUE)
//						idw_waste.DeleteRow(ll_row)
//					END IF
//					ib_changed_waste_code = TRUE
//				END IF
//			NEXT
//	
//			// Delete primary
//			ll_rowcount = idw_waste.RowCount()
//			FOR ll_row = ll_rowcount TO 1 STEP -1
//				IF idw_waste.Object.primary_flag[ll_row] = "T" THEN
//					SetNull(ls_waste_code)
//					idw_header.Object.waste_code[ll_row_header] = ls_waste_code
//					ib_changed_profile = TRUE
//				
//					ldwItemStatus = idw_waste.GetItemStatus(ll_row, 0, Primary!)
//					if ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
//						idw_waste.RowsDiscard(ll_row, ll_row, Primary!)
//					ELSE
//						wf_audit(idw_waste, ll_profile_id, ll_row, TRUE)
//						idw_waste.DeleteRow(ll_row)
//					END IF
//					ib_changed_waste_code = TRUE
//					EXIT
//				END IF
//			NEXT
//	
//			// Delete Constituents
//			SetNull(ldb_null)
//			ll_rowcount = idw_const.RowCount()
//			FOR ll_i = ll_rowcount TO 1 STEP -1
//				ls_unit = idw_const.Object.unit[ll_i]
//				ll_const_id = idw_const.Object.const_id[ll_i]
//		
//				wf_audit(idw_const, ll_profile_id, ll_i, TRUE)
//				idw_const.DeleteRow(ll_i)
//			NEXT
//			ib_changed_const = TRUE	
//	
//			// Load the WCR Waste Codes
//			DECLARE wcr_waste_code_cursor CURSOR FOR  
//				SELECT DISTINCT waste_code
//				FROM FormXWasteCode
//				WHERE form_id = :ll_wcr_id
//				AND revision_id = :ll_revision_id
//				ORDER BY waste_code 
//			USING itr_forms;
//			
//			OPEN wcr_waste_code_cursor;
//	
//			DO WHILE itr_forms.SQLCode = 0
//				FETCH wcr_waste_code_cursor INTO :ls_wcr_waste_code;
//				IF itr_forms.SQLCode = 0 THEN
//					ll_row_waste = idw_waste.InsertRow(0)
//					idw_waste.Object.profile_id[ll_row_waste] = ll_profile_id
//					idw_waste.Object.primary_flag[ll_row_waste] = "F"
//					idw_waste.Object.sequence_id[ll_row_waste] = ll_null
//					idw_waste.Object.waste_code[ll_row_waste] = ls_wcr_waste_code
//					ib_changed_waste_code = TRUE
//					
//				ELSEIF itr_forms.SQLCode = -1 THEN
//					MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
//						"~nPress OK to Continue.", StopSign!)
//					CLOSE wcr_waste_code_cursor;
//	
//					RETURN -1
//				END IF
//			LOOP
//			CLOSE wcr_waste_code_cursor;
//			
//			IF ll_row_waste = 1 THEN
//				// There was only one waste code on the WCR, set it as primary
//				idw_waste.Object.primary_flag[ll_row_waste] = "T"
//				idw_waste.Object.sequence_id[ll_row_waste] = 1
//				idw_header.Object.waste_code[ll_row_header] = ls_wcr_waste_code
//			END IF
//					
//			// Load the WCR Constituents
//			DECLARE wcr_const_cursor CURSOR FOR  
//				SELECT DISTINCT FormXConstituent.const_id, FormXConstituent.concentration, FormXConstituent.unit, FormXConstituent.UHC
//				FROM FormXConstituent, Constituents
//				WHERE FormXConstituent.const_id = Constituents.const_id
//				AND form_id = :ll_wcr_id
//				AND revision_id = :ll_revision_id
//				ORDER BY FormXConstituent.const_id 
//			USING itr_forms;
//			
//			OPEN wcr_const_cursor;
//	
//			DO WHILE itr_forms.SQLCode = 0
//				FETCH wcr_const_cursor INTO :ll_wcr_const_id, :ldb_wcr_concentration, :ls_wcr_unit, :ls_wcr_UHC;
//				IF itr_forms.SQLCode = 0 THEN				
//					ll_row_const = idw_const.InsertRow(0)
//					
//					IF Lower(ls_wcr_unit) = "percent" THEN ls_wcr_unit = "%"
//					
//					idw_const.Object.profile_id[ll_row_const] = ll_profile_id
//					idw_const.Object.const_id[ll_row_const] = ll_wcr_const_id
//					idw_const.Object.concentration[ll_row_const] = ldb_wcr_concentration
//					idw_const.Object.unit[ll_row_const] = ls_wcr_unit
//					idw_const.Object.UHC[ll_row_const] = ls_wcr_UHC
//					ib_changed_const = TRUE
//					
//				ELSEIF itr_forms.SQLCode = -1 THEN
//					MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Constituents" + &
//						"~nPress OK to Continue.", StopSign!)
//					CLOSE wcr_const_cursor;
//	
//					RETURN -1
//				END IF
//			LOOP
//			CLOSE wcr_const_cursor;
//		END IF
//	END IF	// IF ib_new_record
//	ib_added_wcr = TRUE
//	// 01052012 SK WCR User Edit Object has its own tabpage!
//	tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_wcr
//END IF	// IF IsValid(ast_params)
//
RETURN li_rc
end function

public function integer wf_new_wcr (str_wcr_params ast_params);// Pass on to doc processor to create new WCR from Profile & show in print preview mode
// Add the newly created form to Forms on Document tab
int 		li_rc = gi_success, li_company_id, li_profit_ctr_id, li_revision_id, li_form_version_id
long		ll_row, ll_profile_id, ll_form_id, ll_contact_id, ll_generator_id, ll_customer_id
string	ls_form_type, ls_db_type, ls_approval_code
str_pass	lstr

ll_row = idw_header.GetRow()
IF ll_row > 0 THEN 
	// Set values for new WCR
	ls_form_type = 'WCR'
	IF gs_connect_type = "DEV" THEN
		ls_db_type = "dev"
	ELSEIF gs_connect_type = "TEST" THEN
		ls_db_type = "tst"
	ELSE
		ls_db_type = ""
	END IF
		
	SELECT current_form_version
		INTO :li_form_version_id
		FROM FormType
		WHERE form_type = :ls_form_type
	USING itr_forms;
	
	ll_profile_id = idw_header.Object.profile_id[ll_row]
	ll_form_id = 0
	li_revision_id = 1
	ll_contact_id = 0		
	// NEW WCR does not need approval to pass as argument, so null it
	li_company_id = gi_company_id
	li_profit_ctr_id = ii_profit_ctr_id
	SetNull(ls_approval_code)
	SetNull(ll_customer_id)
	
	SetMicroHelp("Getting Report")
	SetPointer(Hourglass!)
							
	// call Doc processor
	ll_form_id = wf_get_report(ls_form_type + ls_db_type, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, li_form_version_id, ls_approval_code, ll_profile_id, ll_contact_id, ll_generator_id)
	IF ll_form_id < 0 THEN
		li_rc = gi_success
		li_revision_id = 1
		// pass this created form to view window
		lstr.s[1] = ls_form_type
		lstr.l[1] = ll_form_id
		lstr.l[2] = li_revision_id
		lstr.l[3] = ll_customer_id
		lstr.l[4] = ll_generator_id
		OpenWithParm(w_popup_form_view, lstr)
		
		//Re- retrieve the forms on this profile, to show the newly created wcr
		idw_form.Reset()
		itr_forms.AutoCommit = TRUE
		idw_form.Retrieve(ll_profile_id)
		itr_forms.AutoCommit = FALSE
		tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectedTab = ii_tabpage_form		
	ELSE
		li_rc = gi_failure
		MessageBox(gs_app_name + ":  Error", "Unable to create new form.~r~rPlease contact I.T. immediately!", StopSign!)
	END IF
	Setpointer(Arrow!)
END IF

//long		, ll_detail_row, ll_customer_id, ll_generator_id
//
//// Structure to hold all the values that map to WCR
//str_wcr_values	lstr_wcr_values
//
//ll_row = idw_header.GetRow()
//IF ll_row > 0 THEN
//	ll_profile_id 		= idw_header.Object.profile_id[ll_row]
//	ll_customer_id 	= idw_header.Object.customer_id[ll_row]
//	ll_generator_id 	= idw_header.Object.generator_id[ll_row]
//	
//	ast_params.al_profile_id 	= ll_profile_id
//	ast_params.al_customer_id 	= ll_customer_id
//	ast_params.al_generator_id = ll_generator_id				
//END IF
//		
//ast_params.al_form_id 			= 0
//ast_params.ai_revision_id 		= 0
//ast_params.as_user 				= gs_user_id
//ast_params.ab_assign 			= TRUE
//ast_params.as_function 			= "new"
//ast_params.as_assign_target 	= "profile"
//ib_wcr = TRUE
//
//iuo_wcr_form.wf_init_window(ast_params.as_assign_target, iw_profile)
//iuo_wcr_form.wf_open(ast_params)
//
//// populate the WCR values structure
//ll_detail_row = idw_detail.getrow()
//IF ll_detail_row > 0 THEN
//	lstr_wcr_values.epa_form_code		= idw_detail.object.epa_form_code[ll_detail_row]
//	lstr_wcr_values.epa_source_code 	= idw_detail.object.epa_source_code[ll_detail_row]
//END IF
//
//lstr_wcr_values.adw_active_waste_profile 	= idw_technical
//lstr_wcr_values.adw_shipping	 				= idw_shipping
//lstr_wcr_values.adw_waste_codes 				= idw_waste
//lstr_wcr_values.adw_constituents 			= idw_const
//
//// call function to fill in the values to new WCR from Profile tabs - POST IT so that it happens after the generator
//// and customer are set
//iuo_wcr_form.POST wf_fill_new_wcr(lstr_wcr_values)
//ib_changed_wcr = TRUE
//
//// 01052012 SK WCR User Edit Object has its own tabpage!
//// iuo_wcr_form.SetPosition(ToTop!)
//tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_wcr
//// tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectedTab = ii_tabpage_form
//
RETURN li_rc
end function

public function long wf_retrieve_primary_wcr (long al_form_id_wcr);long		ll_rowcount

// SK 01042012 Fetch the primary WCR revision id, locked value so that the wcr tabpage
// can act accordingly
IF al_form_id_wcr > 0 THEN
	SELECT	
		FormWCR.revision_id ,
		FormWCR.form_version_id,
		FormWCR.locked
	INTO :il_wcr_revision_id, :il_wcr_version_id,  :is_wcr_locked
	FROM FormWCR
	INNER JOIN FormHeaderDistinct ON FormWCR.form_id = FormHeaderDistinct.form_id
		AND FormWCR.revision_id = FormHeaderDistinct.revision_id
	WHERE FormWCR.form_id = :al_form_id_wcr
	AND Upper(type) = 'WCR'
	USING itr_share;
	
	IF itr_share.SQLCODE = -1 THEN Messagebox('SQL Error', 'Error retrieving primary Waste Profile Form information! ' +itr_share.SQLErrText)
END IF


IF ib_changed_primary_wcr THEN
	// SK 06202012 following dws not used any longer
	//idw_wcr_waste.Reset()
	//idw_wcr_const.Reset()
	idw_wcr_technical.Reset()

// SK 06202012 This dws are not used any longer
//	IF al_form_id_wcr > 0 THEN
//		ll_rowcount = idw_wcr_waste.Retrieve(al_form_id_wcr)
//	END IF

//	IF al_form_id_wcr > 0 THEN
//		ll_rowcount += idw_wcr_const.Retrieve(al_form_id_wcr)
//	END IF
	
	IF al_form_id_wcr > 0 THEN
		ll_rowcount += idw_wcr_technical.Retrieve(al_form_id_wcr)
	END IF
	
	IF IsNull(al_form_id_wcr) OR al_form_id_wcr <= 0 THEN
		tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"
	ELSEIF al_form_id_wcr > 0 THEN
		tab_1.tabpage_view.st_form_id_wcr.Text = String(al_form_id_wcr)
	END IF
	ib_changed_primary_wcr = FALSE
END IF

RETURN ll_rowcount
end function

public function integer wf_validate_wcr ();//DevOps 14280 info_gde 03/16/2020; Add New Profile (Profile Tab) - Section G. (LDR)
integer	li_rc,i,j
long		ll_i, ll_row, ll_row_tech, ll_customer_id, ll_orig_customer_id, ll_wcr_customer, ll_row_header,ll_state_waste_code_count,ll_profile_rq_threshold
long		ll_section, ll_find, ll_row_const, ll_const_id, ll_row_wc_state,ll_ldr_row, ll_row_comp_other,ll_count
string		ls_find, ls_col, ls_val, ls_parent_val, ls_ship_volume_other, ls_section, ls_totes, ls_drums, ls_profile_emergency_phone_number, ls_bulk, ls_pallet, ls_boxes, ls_cylinder
string		ls_labpack, ls_combination, ls_other, ls_other_describe, ls_shipping_frequency, ls_shipping_frequency_other, ls_units, ls_ldr_notification_frequency,ls_ldr_req_flag
boolean	lb_err, lb_exceeds_ldr = FALSE, lb_has_pa_waste_code = FALSE, lb_has_d001,  lb_rcra_waste = TRUE,lb_has_d002,lb_has_tx_waste_code = FALSE
boolean  lb_has_UHC_checked   = FALSE      // 20200527 jcb #15695 add 
decimal	ld_null,  ld_sum_of_max_pct = 0, ld_typical_concentration, ld_min_concentration, ld_max_concentration
string      ls_rcra_waste_code_flag,ls_rcra_exempt_reason,ls_waste_code_d001,ls_dot_inhalation_haz_flag, ls_question_3 //20210408 gde #16398     
string		ls_tclp_flag ,ls_rcra_waste_codell_find_row,ls_epa_source_code,ls_question_5,  ls_texas_waste_material_type	// 20200514 jcb #15700 add
string 	ls_chk_G3, ls_dataobject,ls_const_id_2   ,ls_rcra_waste_code, ls_epa_form_code           // 20200528 jcb #15695 add
long		ll_row_G3  ,ll_find_row , ll_dw_waste_code_fed,ll_composition_epa_row , ll_rowcnt          				// 20200528 jcb #15695 add
string		ls_requested_technology, ls_bill_unit_code,ls_pcb_article_for_tsca_landfill,ls_reportable_quantity_flag,ls_rq_reason,ls_hazmat, ls_primary_facility_flag, ls_primary_facility
SetNull(ls_primary_facility_flag)
SetNull(ld_null)
dec{1} ld_sum_of_typical_pct
String ls_profile_tracking_type,ls_profile_tracking_type_original // Subhrajyoti - Devops# 74306

is_ldr_validate_wcr = ""

// rb 05/29/2012 New validation for WCR, validate profile fields per project spec
//ll_row = idw_header.GetRow()
//IF ll_row > 0 THEN
//	ll_customer_id = idw_header.Object.customer_id[ll_row]
//	ll_orig_customer_id = idw_header.Object.orig_customer_id[ll_row]
//	
//	li_rc = gi_success
//
//	FOR ll_row = 1 TO idw_form.Rowcount()
//		IF idw_form.Object.form_type[ll_row] = "WCR" THEN
//			ll_wcr_customer = idw_form.Object.customer_id[ll_row]
//			IF IsNull(ll_wcr_customer) THEN
//				// OK to have NULL WCR customer
//				
//			ELSEIF ll_wcr_customer > 999999 THEN
//				// OK to have prospect WCR customer
//				
//			ELSEIF ll_wcr_customer = ll_customer_id THEN
//				// OK to match
//				
//			ELSEIF ll_wcr_customer <> ll_customer_id &
//				AND ll_wcr_customer <> ll_orig_customer_id THEN
//				///////////////////////////////////////////////
//				// NOT OK to be different
//				///////////////////////////////////////////////
//				li_rc = gi_failure
//				EXIT
//			END IF
//		END IF
//	NEXT
//END IF

is_msg_validate_wcr = ""
li_rc = gi_success

ll_row = idw_header.GetRow()
if ll_row < 1 then return gi_failure

ll_row_tech = idw_technical.GetRow()
if ll_row_tech < 1 then return gi_failure

//////////////////////////////////////////
// Begin replacement using ProfileValidation table
wf_populate_wastecodes_wcr('all')

// COR2-MPM
// Required fields, Sections A thru H
for ll_section = AscA("A") to 200 // AscA("H")
	ls_find = "validation_group='v_groupSection" + Char(ll_section) + "'"
	
	ll_find = ids_profile_validation.Find (ls_find, 1, ids_profile_validation.RowCount())
	do while ll_find > 0

		lb_err = false
		ls_val = ""
		ls_col = Lower (ids_profile_validation.Object.profile_column[ll_find])

		// required fields
		if ids_profile_validation.Object.required_field_flag[ll_find] = "T" then

			// If not dependent on a different question's answer
			if IsNull (ids_profile_validation.Object.parent_question_column[ll_find]) or &
				Trim(ids_profile_validation.Object.parent_question_column[ll_find]) = "" then

				// can't be 100% generic
				choose case ls_col
						
//					case "composition"
//						if idw_composition.RowCount() < 1 then
//							lb_err = true
//						else
//							for ll_i = 1 to idw_composition.RowCount()
//								if IsNull (idw_composition.Object.comp_description[ll_i]) or Trim(idw_composition.Object.comp_description[ll_i]) = "" then
//									lb_err = true
//									exit
//								end if
//								// COR2 - MPM - Is "Varies" still used? 
//								IF Pos(Lower(idw_composition.Object.comp_description[ll_i]), 'varies ') = 0 THEN
////									if IsNull (idw_composition.Object.comp_from_pct[ll_i]) AND IsNull (idw_composition.Object.comp_to_pct[ll_i]) then
////										lb_err = true
////										exit
////									end if
//									if IsNull (idw_composition.Object.unit[ll_i]) or Trim(idw_composition.Object.unit[ll_i]) = "" then
//										lb_err = true
//										exit
//									end if
//								END IF
//							next
//						end if
//					
					// MPM - COR2 - Removed the "ignitability" row from the ProfileValidation table, because with new columns, it's easier to just do a customer validation (which is later in this function).
//					case "ignitability" 
//						if (IsNull(idw_technical.Object.ignitability_lt_90[ll_row_tech]) or Trim(idw_technical.Object.ignitability_lt_90[ll_row_tech]) = "F") and &
//							(IsNull(idw_technical.Object.ignitability_90_139[ll_row_tech]) or Trim(idw_technical.Object.ignitability_90_139[ll_row_tech]) = "F") and &
//							(IsNull(idw_technical.Object.ignitability_140_199[ll_row_tech]) or Trim(idw_technical.Object.ignitability_140_199[ll_row_tech]) = "F") and &
//							(IsNull(idw_technical.Object.ignitability_gte_200[ll_row_tech]) or Trim(idw_technical.Object.ignitability_gte_200[ll_row_tech]) = "F") and &
//							(IsNull(idw_technical.Object.ignitability_na[ll_row_tech]) or Trim(idw_technical.Object.ignitability_na[ll_row_tech]) = "F") then
//
//							lb_err = true
//						end if
					//task:10336
					case "liquid_phase"
						IF (  ( idw_technical.Object.consistency_sludge[ll_row_tech] = 'T' OR idw_technical.Object.consistency_liquid[ll_row_tech] = 'T' ) and &
							   IsNull(idw_technical.Object.liquid_phase[ll_row_tech])  ) THEN
								lb_err = true
						END IF
						
					case "ph" 
						if (IsNull(idw_technical.Object.ph_lte_2[ll_row_tech]) or Trim(idw_technical.Object.ph_lte_2[ll_row_tech]) = "F") and &
							(IsNull(idw_technical.Object.ph_gt_2_lt_5[ll_row_tech]) or Trim(idw_technical.Object.ph_gt_2_lt_5[ll_row_tech]) = "F") and &
							(IsNull(idw_technical.Object.ph_gte_5_lte_10[ll_row_tech]) or Trim(idw_technical.Object.ph_gte_5_lte_10[ll_row_tech]) = "F") and &
							(IsNull(idw_technical.Object.ph_gt_10_lt_12_5[ll_row_tech]) or Trim(idw_technical.Object.ph_gt_10_lt_12_5[ll_row_tech]) = "F") and &
							(IsNull(idw_technical.Object.ph_gte_12_5[ll_row_tech]) or Trim(idw_technical.Object.ph_gte_12_5[ll_row_tech]) = "F") and &
							(IsNull(idw_technical.Object.ph_na[ll_row_tech]) or Trim(idw_technical.Object.ph_na[ll_row_tech]) = "F") then

							lb_err = true
						end if

//					case "shipping_volume"
//						ls_ship_volume_other = idw_header.object.shipping_volume_unit_other[ll_row]
//						IF isnull(ls_ship_volume_other) OR ls_ship_volume_other = '' THEN
//							if idw_shipping_unit.RowCount() < 1 then
//								lb_err = true
//							else
//								for ll_i = 1 to idw_shipping_unit.RowCount()
//									if IsNull (idw_shipping_unit.Object.quantity[ll_i]) or (idw_shipping_unit.Object.quantity[ll_i] = '') then
//										lb_err = true
//										exit
//									end if
//									if IsNull (idw_shipping_unit.Object.bill_unit_code[ll_i]) or Trim (idw_shipping_unit.Object.bill_unit_code[ll_i]) = "" then
//										lb_err = true
//										exit
//									end if
//								next
//							end if
//						END IF
//					case "shipping_frequency"
//						ls_val = wf_wcr_profile_map_get_value (ls_col)
//						// COR2 - MPM - Shipping frequency now has a "Clear" option with value 'U'.  If this is selected, display a warning.
//						IF ls_val = 'U' OR IsNull(ls_val) THEN lb_err = TRUE
						
					case "special_waste_properties"
						if (IsNull (idw_technical.Object.waste_contains_spec_hand_none[ll_row_tech]) or idw_technical.Object.waste_contains_spec_hand_none[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.free_liquid[ll_row_tech]) or idw_technical.Object.free_liquid[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.metal_fines[ll_row_tech]) or idw_technical.Object.metal_fines[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.water_reactive[ll_row_tech]) or idw_technical.Object.water_reactive[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.biohazard[ll_row_tech]) or idw_technical.Object.biohazard[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.shock_sensitive_waste[ll_row_tech]) or idw_technical.Object.shock_sensitive_waste[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.oily_residue[ll_row_tech]) or idw_technical.Object.oily_residue[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.dioxins[ll_row_tech]) or idw_technical.Object.dioxins[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.furans[ll_row_tech]) or idw_technical.Object.furans[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.aluminum[ll_row_tech]) or idw_technical.Object.aluminum[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.asbestos_non_friable[ll_row_tech]) or idw_technical.Object.asbestos_non_friable[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.asbestos_friable[ll_row_tech]) or idw_technical.Object.asbestos_friable[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.radioactive_waste[ll_row_tech]) or idw_technical.Object.radioactive_waste[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.air_reactive[ll_row_tech]) or idw_technical.Object.air_reactive[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.isocyanates[ll_row_tech]) or idw_technical.Object.isocyanates[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.biodegradable_sorbents[ll_row_tech]) or idw_technical.Object.biodegradable_sorbents[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.pyrophoric_waste[ll_row_tech]) or idw_technical.Object.pyrophoric_waste[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.react_sulfide[ll_row_tech]) or idw_technical.Object.react_sulfide[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.react_cyanide[ll_row_tech]) or idw_technical.Object.react_cyanide[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.explosives[ll_row_tech]) or idw_technical.Object.explosives[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.temp_ctrl_org_peroxide[ll_row_tech]) or idw_technical.Object.temp_ctrl_org_peroxide[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.norm[ll_row_tech]) or idw_technical.Object.norm[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.tenorm[ll_row_tech]) or idw_technical.Object.tenorm[ll_row_tech] = "F") and &
							(IsNull (idw_technical.Object.section_f_none_apply_flag[ll_row_tech]) or idw_technical.Object.section_f_none_apply_flag[ll_row_tech] = "F")  then

							lb_err = true
						end if
					case "odor_strength", "paint_filter_solid_flag", "hazmat", "handling_issue", "incidental_liquid_flag", "dot_sp_permit_flag", "explosives", &
							"react_sulfide", "shock_sensitive_waste", "react_cyanide", "radioactive_waste", "reactive_other", "biohazard", "contains_pcb", "dioxins_or_furans", &
							"metal_fines", "pyrophoric_waste", "temp_ctrl_org_peroxide", "thermally_unstable", "biodegradable_sorbents", "compressed_gas", "used_oil", &
							"oxidizer", "tires", "organic_peroxide", "beryllium_present", "asbestos_flag", "ammonia_flag", "hazardous_secondary_material", &
							"ccvocgr500", "waste_treated_after_generation", "subject_to_mact_neshap", "origin_refinery","thermal_process_flag","pfas_flag"
							//"section_f_none_apply_flag" ,"specific_technology_requested"
						ls_val = wf_wcr_profile_map_get_value (ls_col)
						// COR2 - MPM - These fields have a "Clear" option with value 'U'.  If this is the value, display a warning.
						IF ls_val = 'U' THEN lb_err = true
					
					case else
						
						// odor special handling before default handling
//						if ls_col = "odor_desc" and &
//								(IsNull (idw_technical.object.odor[ll_row_tech]) &
//								or idw_technical.object.odor[ll_row_tech] = "" &
//								or idw_technical.object.odor[ll_row_tech] = "F") then
//							ls_val = "ok"
//						else

							ls_val = wf_wcr_profile_map_get_value (ls_col)
//						end if
						
						if ls_val = "" then
							lb_err = true
						end if
				end choose
	
			// if dependent on a different question's answer
			else
	
				ls_parent_val = wf_wcr_profile_map_get_value (ids_profile_validation.Object.parent_question_column[ll_find])

				if ls_parent_val = ids_profile_validation.Object.parent_display_answer[ll_find] then
					
					// can't be 100% generic
					choose case ls_col

						case "epa_rcra_characteristic_waste_codes"
							lb_err = true
							for ll_i = 1 to 43
								if Pos (is_rcra_characteristic_waste_code, "D0" + String(ll_i,"00")) > 0 then exit
							next
							if ll_i <= 43 then
								ls_val = "ok"
								lb_err = false
							end if

						case "underlying_haz_constituents"
							ls_val = wf_wcr_profile_map_get_value (ls_col)
							if ls_val = "" or &
								(ls_val = "T" and idw_const.Find ("uhc='T'", 1, idw_const.RowCount()) < 1) then
								lb_err = true
							end if

						case "epa_rcra_listed_waste_codes"
							if Trim (is_rcra_listed_waste_codes) = "" then
								lb_err = true
							else
								ls_val = "ok"
							end if

						case "cyanide_plating"
							// COR2 - MPM - Added F019
							if Pos (is_rcra_listed_waste_codes, "F006") > 0 or &
								Pos (is_rcra_listed_waste_codes, "F007") > 0 or &
								Pos (is_rcra_listed_waste_codes, "F008") > 0 or &
								Pos (is_rcra_listed_waste_codes, "F009") > 0 or &
								Pos (is_rcra_listed_waste_codes, "F019") > 0 or &
								Pos (is_rcra_listed_waste_codes, "F012") > 0 then

								ls_val = wf_wcr_profile_map_get_value (ls_col)
								
								// COR2 - MPM - Cyanide plating now has a "Clear" option with value 'U'.  If this is selcted, display a warning.
								IF ls_val = 'U' THEN lb_err = true
							else
								ls_val = "ok"
							end if

// SK 07242012 Following are removed from the form
//						case "flammable"
//							if Pos (is_rcra_characteristic_waste_code, "D001") > 0 then
//								ls_val = wf_wcr_profile_map_get_value (ls_col)
//							else
//								ls_val = "ok"
//							end if
//
//						case "oxidizer"
//							if Pos (is_rcra_characteristic_waste_code, "D001") > 0 then
//								ls_val = wf_wcr_profile_map_get_value (ls_col)
//							else
//								ls_val = "ok"
//							end if

//						case 'rcra_exempt_flag'
//							 IF ( idw_header.Object.rcra_waste_code_flag[ll_row] = 'T' ) AND  IsNull(idw_header.Object.rcra_exempt_flag[ll_row] ) THEN
//									ls_val = wf_wcr_profile_map_get_value (ls_col)
//								     IF ls_val <> 'T' THEN lb_err = TRUE 
//							ELSE
//								ls_val = 'no error'
//							 END IF
//							 
//						case "rcra_exempt_reason"
//							 IF ( idw_header.Object.rcra_waste_code_flag[ll_row] = 'T' AND idw_header.Object.rcra_exempt_flag[ll_row]  = 'T'  ) AND & 
//							        IsNull(idw_header.Object.rcra_exempt_reason[ll_row] )   THEN
//									ls_val = wf_wcr_profile_map_get_value (ls_col)
//								       IF ls_val <> 'T' THEN lb_err = TRUE
//							 ELSE
//								 ls_val = 'no error'
//							 END IF
							 
						case "asbestos_friable_flag"
							ls_val = wf_wcr_profile_map_get_value (ls_col)
							// COR2 - MPM -These fields have a "Clear" option with value 'U'.  If this is selcted, display a warning.
							IF ls_val = 'U' THEN lb_err = true

						case "hazardous_secondary_material_cert"
							ls_val = wf_wcr_profile_map_get_value (ls_col)
							IF ls_val <> 'T' THEN lb_err = TRUE
							
						case "ammonia_flag"
							ls_val = wf_wcr_profile_map_get_value (ls_col)
							IF ls_val <> 'T' THEN lb_err = TRUE
							
						case else
							ls_val = wf_wcr_profile_map_get_value (ls_col)
							
					end choose
							
					if ls_val = "" then
						lb_err = true
					end if

				end if
			
			end if
	
		// not required field validation
		else
			choose case ls_col
				case "rcra_characteristic_d001"
					if idw_technical.Object.ignitability_lt_90[ll_row_tech] = "T" or idw_technical.Object.ignitability_90_139[ll_row_tech] = "T" then
						if idw_detail.Object.rcra_haz_flag[ll_row] = "N" then
							if Pos (idw_technical.Object.consistency[ll_row_tech], "LIQUID") > 0 or &
								Pos (idw_technical.Object.consistency[ll_row_tech], "GAS/AEROSOL") > 0 then

								if idw_waste_code_fed.Find ("waste_code='D001'", 1, idw_waste_code_fed.RowCount()) < 1 then
									lb_err = true
								end if
							end if
						end if
					end if
					
				case "rcra_characteristic_d002"
					if idw_technical.Object.ph_lte_2[ll_row_tech] = "T" or idw_technical.Object.ph_gte_12_5[ll_row_tech] = "T" then
						if idw_detail.Object.rcra_haz_flag[ll_row] = "N" then
							if Pos (idw_technical.Object.consistency[ll_row_tech], "LIQUID") > 0 then
								if idw_waste_code_fed.Find ("waste_code='D002'", 1, idw_waste_code_fed.RowCount()) < 1 then
									lb_err = true
								end if
							end if
						end if
					end if
					
			end choose

		end if


          // 20200129 jcb fix1 repl	if lb_err then	BEGIN
          // DevOPs:13698  
		 if  lb_err AND (ls_col = 'ammonia_flag' AND ls_parent_val =  'T') then
			is_msg_validate_wcr +=  ids_profile_validation.Object.error_message[ll_find] + "~r~n"
			li_rc = gi_failure
		end if
         // 20200129 jcb fix1 repl	if lb_err then	BEGIN

		if lb_err AND ( ls_col <> 'ammonia_flag'  AND ls_parent_val <> 'T' ) then
			is_msg_validate_wcr += ids_profile_validation.Object.error_message[ll_find] + "~r~n"
			li_rc = gi_failure
		end if
        
		if ll_find = ids_profile_validation.RowCount() then exit
		ll_find = ids_profile_validation.Find (ls_find, ll_find + 1, ids_profile_validation.RowCount())
	loop
	
next


//? 2.2a - Not Required, but if 'yes' then request to complete b
//? 2.2b - Not Required, can leave blank even in 2.2a is checked 'yes'


// Validations not in ProfileValidation table
// rb 06/04/2012 RCRA haz flag, T/F question on WCR, but H/N/E on Profile
//if idw_detail.Object.rcra_haz_flag[ll_row] = "F" then
//	is_msg_validate_wcr += "Waste Profile Form - RCRA has been set as non-exempt, but has not been set to Hazardous or Non-Hazardous.~r~n"
//	li_rc = gi_failure
//end if

if (IsNull(idw_technical.Object.react_sulfide[ll_row_tech]) &
			or	idw_technical.Object.react_sulfide[ll_row_tech] = "F") and &
	idw_technical.Object.sulfide_gr100[ll_row_tech] = "T" then
	
	is_msg_validate_wcr += "Reactive Sulfide is set to false, but Sulfide Spot Test is set to true.~r~n"
	li_rc = gi_failure
end if

if (IsNull(idw_technical.Object.react_cyanide[ll_row_tech]) &
			or	idw_technical.Object.react_cyanide[ll_row_tech] = "F") and &
	idw_technical.Object.cyanide_spot[ll_row_tech] = "T" then
	
	is_msg_validate_wcr += "Reactive Cyanide is set to false, but Cyanide Spot Test is set to true.~r~n"
	li_rc = gi_failure
end if

// rb 06/18/2012 Compare Total annual benzene to generator TAB
// SK 12/07 Only question this if 8.5 is yes
IF Upper(idw_technical.object.benzene_neshap[ll_row_tech]) = 'T' THEN
	if (IsNull (idw_technical.object.tab[ll_row_tech]) &
				and not IsNull (idw_technical.object.generator_tab[ll_row_tech])) or &
		(not IsNull (idw_technical.object.tab[ll_row_tech]) &
				and IsNull (idw_technical.object.generator_tab[ll_row_tech])) or &
		(idw_technical.object.tab[ll_row_tech] <> &
				idw_technical.object.generator_tab[ll_row_tech]) then
	
		is_msg_validate_wcr += "TAB quantity does not match the amount specified for the Generator.~r~n"
		li_rc = gi_failure
	end if
END IF

//DevOps;16730
IF  idw_shipping.GetRow() > 0 THEN 
	ls_reportable_quantity_flag = idw_shipping.Object.reportable_quantity_flag[idw_shipping.GetRow()] 
	ls_rq_reason = idw_shipping.Object.rq_reason[idw_shipping.GetRow() ]   
		IF ls_reportable_quantity_flag = 'T' AND ( IsNull(ls_rq_reason) OR ls_rq_reason = ""  ) THEN
			 is_msg_validate_wcr += 'You have indicated that the Material contains a Reportable Quantity (RQ).  Please provide an RQ Reason.~r~n'
			li_rc = gi_failure
		END IF
	
	ls_reportable_quantity_flag = idw_shipping.Object.reportable_quantity_flag[idw_shipping.GetRow() ] 
	ll_profile_rq_threshold = idw_shipping.Object.profile_rq_threshold[idw_shipping.GetRow() ]   
		IF ls_reportable_quantity_flag = 'T' AND  ( IsNull (ll_profile_rq_threshold)  OR ll_profile_rq_threshold = 0 ) THEN
			 is_msg_validate_wcr += 'You have indicated that the Material contains a Reportable Quantity (RQ).  Please provide an RQ Threshold (lbs/kg).~r~n'
			li_rc = gi_failure
		END IF
		
//	ls_hazmat = idw_header.Object.hazmat[idw_shipping.GetRow() ]  
//	ls_profile_emergency_phone_number = idw_shipping.Object.emergency_phone_number[idw_shipping.GetRow() ]
//	IF ls_hazmat  = 'T' AND  IsNull(ls_profile_emergency_phone_number) OR Len(ls_profile_emergency_phone_number) =  0 THEN
//			 is_msg_validate_wcr += 'You have indicated that the Material is a DOT Hazardous Material. Please provide a 24-hour emergency phone number.~r~n'
//			li_rc = gi_failure
//	END IF 
END IF

// DevOps:13674
//F - Required with Each Shipment
// T - One Time
FOR ll_i = 1 to idw_approval.RowCount()
	  ls_ldr_req_flag =  idw_approval.Object.ldr_req_flag[ll_i]
	  ll_ldr_row = idw_profile_ldr_form_dragon.GetRow()
	  IF ll_ldr_row > 0 THEN 
		 ls_ldr_notification_frequency = idw_profile_ldr_form_dragon.Object.ldr_notification_frequency[ll_ldr_row]
//		   IF ls_ldr_notification_frequency = 'F'  AND ls_ldr_req_flag <> 'T'  THEN
//			  is_msg_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR. Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//		   ELSEIF ls_ldr_notification_frequency = 'T'  AND ls_ldr_req_flag <> 'O'   THEN  
//		      is_msg_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			DevOps 17806 info_gde 11/06/2020; EQAI: Incorrect LDR Validation
//		   IF ls_ldr_req_flag = 'O' AND  ls_ldr_notification_frequency = 'T'  THEN  //One Time Req'd
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			ELSEIF ls_ldr_req_flag = 'U' AND	 ls_ldr_notification_frequency = 'F'   THEN  //N/A One Time
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			ELSEIF ls_ldr_req_flag = 'U' AND	 ls_ldr_notification_frequency = 'T'   THEN  //N/A and Req'd
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			ELSEIF ls_ldr_req_flag = 'F' AND	 ls_ldr_notification_frequency = 'F'   THEN  //No and One Time
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			ELSEIF ls_ldr_req_flag = 'F' AND	 ls_ldr_notification_frequency = 'T'   THEN  //No and Req'd
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			ELSEIF ls_ldr_req_flag = 'T' AND	 ls_ldr_notification_frequency = 'F'   THEN  //Req'd and One Time
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			ELSEIF isNull(ls_ldr_req_flag) AND	 ls_ldr_notification_frequency = 'F'   THEN  //Null and One Time
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//			ELSEIF isNull(ls_ldr_req_flag) AND	 ls_ldr_notification_frequency = 'T'   THEN  //Null and Req'd
//		      is_ldr_validate_wcr += 'The value of the Approval LDR does not match that of the Profile LDR.  Please review and confirm the entry.~r~n'
//		      li_rc = gi_failure
//		   END IF
		//DevOps 19030 info_gde 05/11/2021; LDR Supplement - Validation Message Update
		 IF (ls_ldr_req_flag = 'O' AND  ls_ldr_notification_frequency = 'T') OR (ls_ldr_req_flag = 'U' AND	 ls_ldr_notification_frequency = 'F')   &
		 	OR  (ls_ldr_req_flag = 'U' AND	 ls_ldr_notification_frequency = 'T') OR (ls_ldr_req_flag = 'F' AND	 ls_ldr_notification_frequency = 'F') &
			OR (ls_ldr_req_flag = 'F' AND	 ls_ldr_notification_frequency = 'T') OR (ls_ldr_req_flag = 'T' AND	 ls_ldr_notification_frequency = 'F') &
			OR (isNull(ls_ldr_req_flag) AND	 ls_ldr_notification_frequency = 'F') OR (isNull(ls_ldr_req_flag) AND	 ls_ldr_notification_frequency = 'T' ) THEN
			
			ls_primary_facility_flag = ''
			ls_primary_facility_flag = idw_approval.Object.cf_facility[ll_i]
			If len(ls_primary_facility_flag)>= 5 Then  
				ls_primary_facility += ls_primary_facility_flag+', '
			End If
		END IF
	  END IF	  
NEXT

// MPM - 5/13/2021 - DevOps 20750 - Commented out the following IF block, since 19030 isn't ready to deploy yet.
//DevOps 19030 info_gde 05/11/2021; LDR Supplement - Validation Message Update
If len(ls_primary_facility)>=5 Then
	ls_primary_facility=Mid(trim(ls_primary_facility),1 , len(trim(ls_primary_facility)) -1)
	ls_primary_facility += '.'
	if len(trim(ls_primary_facility)) >= 5 then
		is_ldr_validate_wcr= 'LDR Supplement Question #6 does not match the assigned facilities: '+ls_primary_facility+ '~r~n'
		li_rc = gi_failure
	end if
End If

// rb 06/06/2012 ProfileQuoteApproval records not in ProfileWCRFacility
//if idw_profile_wcr_facility.RowCount() > 0 then
//	for ll_i = 1 to idw_approval.RowCount()
//		ls_find = "company_id=" + String(idw_approval.Object.company_id[ll_i]) + &
//						" and profit_ctr_id=" + String(idw_approval.Object.profit_ctr_id[ll_i])
//		if idw_profile_wcr_facility.Find (ls_find, 1, idw_profile_wcr_facility.RowCount()) < 1 then
//			is_msg_validate_wcr += "Waste Profile Form - An approval exists for facility " + &
//											String (idw_approval.Object.company_id[ll_i],"00") + "-" + &
//											String (idw_approval.Object.profit_ctr_id[ll_i],"00") + &
//											", but the facility has not been assigned for the Waste Profile Form.~r~n"
//			li_rc = gi_failure
//		end if
//	next
//end if
//

// COR2-MPM
// If either Totes or Drums is checked, but there isn't a container size entered that has a standard bill unit, display an error
ls_totes = idw_header.object.container_type_totes[ll_row]
ls_drums = idw_header.object.container_type_drums[ll_row]
//DevOPs:13716 - rollback changes.
//DevOps 14280 info_gde 03/16/2020 -- Start
ll_find = idw_container_size.Find("is_bill_unit_table_lookup='T'", 1, idw_container_size.RowCount() + 1)
IF ll_find<1 THEN ll_find = idw_container_size.GetRow()
//DevOps 14280 info_gde 03/16/2020 -- End
IF (ls_totes = 'T' OR ls_drums = 'T') AND ll_find < 1 THEN
	is_msg_validate_wcr += "Shipping Tab C7 - If Totes or Drums is selected then at least one selection must be made from the container size dropdown list.~r~n"
	li_rc = gi_failure
END IF

 //DevOps:16230 - EQAI-Validation needed for frequency
ls_shipping_frequency = idw_header.object.shipping_frequency[ll_row] 
IF ls_shipping_frequency = '' OR IsNull(ls_shipping_frequency) THEN 
	is_msg_validate_wcr += "Shipping Tab C8: Frequency is required.~r~n"
	li_rc = gi_failure
END IF

IF  idw_shipping.RowCount() > 0 THEN 
	// COR2-MPM
	//DevOps:14804 - profile_emergency_phone_number to emergency_phone_number
	// 24 Hour Emergency Phone: This field is not required, however it must only except full and complete phone numbers (800.888.1888).  
	IF idw_shipping.GetRow() > 0 THEN 
		ls_profile_emergency_phone_number = idw_shipping.Object.emergency_phone_number[idw_shipping.Getrow()]
		// MPM - DevOps task 9995 - wrapped the following validation with a check for a non-null emergency phone number
		IF NOT IsNull(ls_profile_emergency_phone_number) AND Len(ls_profile_emergency_phone_number) > 0 THEN
			IF Len(Trim(ls_profile_emergency_phone_number)) <> 10 OR NOT IsNumber(Trim(ls_profile_emergency_phone_number)) THEN
				is_msg_validate_wcr += "24-Hour Emergency Phone is not a valid phone number.~r~n"
				li_rc = gi_failure
			END IF
		END IF
	END IF
END IF
// COR2 - MPM - Container Type validation
// A minimum of one value from (Bulk, Totes, Pallet, Boxes, Drums, Cylinder, Lab Pack, Combination Containers, Other) must be selected.  
ls_bulk = idw_header.object.container_type_bulk[ll_row]
ls_pallet = idw_header.object.container_type_pallet[ll_row]
ls_boxes = idw_header.object.container_type_boxes[ll_row]
ls_cylinder = idw_header.object.container_type_cylinder[ll_row]
ls_labpack = idw_header.object.container_type_labpack[ll_row]
ls_combination = idw_header.object.container_type_combination[ll_row]
ls_other = idw_header.object.container_type_other[ll_row]
ls_other_describe = idw_header.object.container_type_other_desc[ll_row]

IF (IsNull(ls_bulk) OR ls_bulk = 'F') AND &
	(IsNull(ls_totes) OR ls_totes = 'F') AND &
	(IsNull(ls_pallet) OR ls_pallet = 'F') AND &
	(IsNull(ls_boxes) OR ls_boxes = 'F') AND &
	(IsNull(ls_drums) OR ls_drums = 'F') AND &
	(IsNull(ls_cylinder) OR ls_cylinder = 'F') AND &
	(IsNull(ls_labpack) OR ls_labpack = 'F') AND &
	(IsNull(ls_combination) OR ls_combination = 'F') AND &
	(IsNull(ls_other) OR ls_other = 'F') THEN
	is_msg_validate_wcr += "Container Type:  A minimum of one value must be selected.~r~n"
	li_rc = gi_failure
END IF

// COR2-MPM - Container Size validation
// Container Size is required
// DevOps task 10099 - Skip this validation if "various" is entered for container type
IF ls_other = 'T' AND Lower(ls_other_describe) = 'various' THEN
	//  do nothing
ELSE
	//DevOps:15987
	IF idw_container_size.RowCount() < 1 AND (IsNull(ls_bulk) OR ls_bulk = 'F')  THEN
		is_msg_validate_wcr += "Container Size is missing.~r~n"
		li_rc = gi_failure
	END IF
END IF

// COR2 - MPM - Container Size validation
// DevOps task 10099 - Skip this validation if "various" is entered for container type
IF ls_other = 'T' AND Lower(ls_other_describe) = 'various' THEN
	//  do nothing
ELSE
	FOR ll_i = 1 TO idw_container_size.RowCount()
		IF idw_container_size.Object.is_bill_unit_table_lookup[ll_i] = 'T' THEN
			IF IsNull(idw_container_size.Object.bill_unit_code[ll_i]) THEN
				is_msg_validate_wcr += "Container Size:  Container Size is required.~r~n"
				li_rc = gi_failure
			END IF
		ELSE
			IF IsNull(idw_container_size.Object.bill_unit_code_1[ll_i]) THEN
				is_msg_validate_wcr += "Container Size:  Container Size is required.~r~n"
				li_rc = gi_failure
			END IF
		END IF
	NEXT
END IF

// COR2 - MPM - Container Type validation
// If (Other) is selected then the (Describe:) field is required.  
IF ls_other = 'T' AND (IsNull(ls_other_describe) OR ls_other_describe = '') THEN
	is_msg_validate_wcr += "Container Type:  A description must be input if (Other) is selected.~r~n"
	li_rc = gi_failure
END IF

// COR2 - MPM - Composition validation
// If typical % is input, then min/max % is not required.
// Min % value is required if no typical % is entered.
// If Min % is required, then Max % is also required.
// Min % must be <= Max %.
// At least one composition value/row is required

/*	MPM - 2/25/2020 - DevOps 14376 Updated composition validation as follows:
	
1. At least one composition row is required.
2. For each row, "Description" is required.
3. Either the sum of all "Typical %" values OR the sum of all "Max %" values must be >=100%. 
4. For each line that contains a "Description" entry:
	a. A value > 0 must be present in either the "Typical %" or "Max %" fields.
	b. If a "Typical %" value > 0 is entered, then neither a "Min %" nor a "Max %" value is required.  
	c. If a "Typical %" value is not entered or equals 0, then both "Min %" and "Max %" values are required, but "Min %" can be = 0.
	d. If both "Min %" and "Max %" values are entered, then "Max %" value must be >= to "Min %" value.

*/

ll_rowcnt=idw_composition.RowCount()

FOR ll_i = 1 TO ll_rowcnt
	//DevOps 17322 info_gde 09/08/2020; Profile Tracking - Section D1 Validations
 	IF IsNull(idw_composition.Object.comp_from_pct[ll_i]) AND  idw_composition.Object.comp_to_pct[ll_i]>=0 THEN
		     //DevOps 17369 info_gde 11/03/2020; Section D1 - Validation Warning Message Updates
		   //  is_msg_validate_wcr += "D1 Validation: Min (%) should be entered if Max (%) has a value.  Allow users to enter '0.0' in the Min (%), but do not allow that field to be null if Max (%) has a value entered.~r~n"
			// MPM - 5/17/2021 - DevOps 18124 - Updated the validation message below
			is_msg_validate_wcr += "Composition Tab, Section D1, Row "+string(ll_i)  +": Min (%) must contain a value if Max (%) has a value entered.~r~n"
			li_rc = gi_failure
	END IF
	 //DevOps 17368 info_gde 09/30/2020; Profile Tracking - Section D1 Validations
	IF NOT isNull(idw_composition.Object.comp_from_pct[ll_i]) AND IsNull(idw_composition.Object.comp_to_pct[ll_i]) THEN
			// MPM - 5/17/2021 - DevOps 18124 - Updated the validation message below
			is_msg_validate_wcr += "Composition Tab, Section D1, Row "+string(ll_i)  +": Max (%) must contain a value if Min (%) has a value entered.~r~n"
			li_rc = gi_failure
	END IF
    
	IF NOT IsNull(idw_composition.Object.comp_from_pct[ll_i]) AND NOT IsNull(idw_composition.Object.comp_to_pct[ll_i]) AND &
			idw_composition.Object.comp_from_pct[ll_i] > idw_composition.Object.comp_to_pct[ll_i] THEN
			//DevOps 17369 info_gde 11/03/2020; Section D1 - Validation Warning Message Updates
			//is_msg_validate_wcr += "D1 Validation: Max value must be greater than Min value.  Min value should always be less than Max value.~r~n"
			// MPM - 5/17/2021 - DevOps 18124 - Updated the validation message below
			is_msg_validate_wcr += "Composition Tab, Section D1, Row "+string(ll_i)  +': "Max" value must be >= to "Min" value.~r~n'
			li_rc = gi_failure
	END IF
	
// MPM - 11/25/2020 - DevOps 17369 - Commented out the 2 IF block below
//	if isNull(idw_composition.Object.comp_typical_pct[ll_i] )  then 
//		idw_composition.Object.comp_typical_pct[ll_i] =0.0
//		ib_typical_zero++
//	end if
//	if isNull(idw_composition.Object.comp_from_pct[ll_i] )  then 
//		idw_composition.Object.comp_from_pct[ll_i] =0.0
//		ib_from_zero++
//	end if
		
	IF IsNull(idw_composition.Object.comp_description[ll_i]) OR idw_composition.Object.comp_description[ll_i] = '' THEN
		//DevOps 17369 info_gde 11/03/2020; Section D1 - Validation Warning Message Updates
		//is_msg_validate_wcr += "D1 Validation: Description.  User is required to enter a description for D1.~r~n"
		// MPM - 5/17/2021 - DevOps 18124 - Updated the validation message below
		is_msg_validate_wcr += "Composition Tab, Section D1, Row "+string(ll_i)  +": Description is a required field.~r~n"
		li_rc = gi_failure
	END IF
	
	IF idw_composition.Object.comp_typical_pct[ll_i] > 0 THEN
			ld_sum_of_typical_pct += idw_composition.Object.comp_typical_pct[ll_i]
	END IF
	IF idw_composition.Object.comp_to_pct[ll_i] > 0 THEN
			ld_sum_of_max_pct += idw_composition.Object.comp_to_pct[ll_i]
	END IF
		//DevOps 17195 info_gde 08/26/2020; EQAI: Incorrect D1 validation warning
		//DevOPs:15485
	IF (IsNull(idw_composition.Object.comp_typical_pct[ll_i]) OR idw_composition.Object.comp_typical_pct[ll_i] <= 0) AND &
			(IsNull(idw_composition.Object.comp_to_pct[ll_i]) OR idw_composition.Object.comp_to_pct[ll_i] <= 0) THEN
			//DevOps 17369 info_gde 11/03/2020; Section D1 - Validation Warning Message Updates
			//is_msg_validate_wcr += "D1 Validation: Typical or Min/Max value must be >= to '0'.  Typical value must be greater than '0', OR Max value must be greater than '0'.~r~n"
			// MPM - 5/17/2021 - DevOps 18124 - Updated the validation message below
			is_msg_validate_wcr += "Composition Tab, Section D1, Row "+string(ll_i)  +': A value greater than "0" must be present for either the "Typical" or the "Min"/"Max" fields per constituent line.~r~n'
			li_rc = gi_failure
	END IF
	IF (IsNull(idw_composition.Object.comp_typical_pct[ll_i]) OR idw_composition.Object.comp_typical_pct[ll_i] <= 0) AND &
			(IsNull(idw_composition.Object.comp_from_pct[ll_i]) OR idw_composition.Object.comp_from_pct[ll_i] < 0) THEN
			//is_msg_validate_wcr += "Composition Tab, Section D1 Row: "+string(ll_i)  +" A value >= 0 must be present in the Min field.~r~n"
			//li_rc = gi_failure
	END IF
	IF (IsNull(idw_composition.Object.comp_typical_pct[ll_i]) OR idw_composition.Object.comp_typical_pct[ll_i] <= 0) AND &
			(IsNull(idw_composition.Object.comp_to_pct[ll_i]) OR idw_composition.Object.comp_to_pct[ll_i] <= 0) THEN
			//is_msg_validate_wcr += "Composition Tab, Section D1 Row: "+string(ll_i)  +"  A value > 0 must be present in the Max field.~r~n"
			//li_rc = gi_failure
	END IF

//         //20200528 jcb #15695 new rule: If nothing for comp_to_pct(max) then typical must be present 	
//         IF	(IsNull(idw_composition.Object.comp_to_pct[ll_i]) or idw_composition.Object.comp_to_pct[ll_i] < 1) THEN			
//			IF	(IsNull(idw_composition.Object.comp_typical_pct[ll_i]) or idw_composition.Object.comp_typical_pct[ll_i] < 1) &
//			OR  idw_composition.Object.comp_typical_pct[ll_i]           >  100  THEN 				
//	 			is_msg_validate_wcr += "Composition Tab, Section D1 Row: "+string(ll_i)  +" Typical percent must be .01 to 100 when Max percent is 0 or blank.~r~n"
//	  			li_rc = gi_failure
//			END IF  
//		END IF
//
//         //20200528 jcb #15695 new rule: If nothing for Typical, then comp_to_pct must be >= 100 
//         IF	(IsNull(idw_composition.Object.comp_typical_pct[ll_i]) or idw_composition.Object.comp_typical_pct[ll_i] < 1) THEN
//			IF  (IsNull(idw_composition.Object.comp_to_pct[ll_i]) or idw_composition.Object.comp_to_pct[ll_i] < 0) &
//			OR idw_composition.Object.comp_to_pct[ll_i]            >  100       THEN
//				is_msg_validate_wcr += "Composition Tab, Section D1 Row: "+string(ll_i)  +"  Max percent must be .01 to 100 when Typical percent is 0 or blank.~r~n"
//				li_rc = gi_failure
//			END IF
//		END IF
    	  // 20200527 jcb #15695 Sum of Typical must be at least 100            ... This already present
//IF NOT(ld_sum_of_typical_pct >= 100) AND NOT (ld_sum_of_max_pct >= 100) THEN
//	//DevOps 17369 info_gde 11/03/2020; Section D1 - Validation Warning Message Updates
//	//is_msg_validate_wcr += "D1 Validation: 100% Max.  The sum of the Typical values OR the sum of the Max values should be equal or greater than 100%.  It can sum up to more than 100%, but it must be at least 100%.~r~n"
//	is_msg_validate_wcr += "Composition Tab, Section D1, Row " + string(ll_i) +": A minimum percentage of 100 must exist in either the 'Typical' or the 'Max' column. ~r~n"
//	li_rc = gi_failure
//END IF
//

NEXT

// MPM - 5/17/2021 - DevOps 18124 - Only display the following validation if there's at least one composition row
IF NOT(ld_sum_of_typical_pct >= 100) AND NOT (ld_sum_of_max_pct >= 100) AND idw_composition.RowCount() > 0 THEN
	//DevOps 17369 info_gde 11/03/2020; Section D1 - Validation Warning Message Updates
	//is_msg_validate_wcr += "D1 Validation: 100% Max.  The sum of the Typical values OR the sum of the Max values should be equal or greater than 100%.  It can sum up to more than 100%, but it must be at least 100%.~r~n"
	// MPM - 5/17/2021 - DevOps 18124 - Updated the spacing of the validation message below
	is_msg_validate_wcr += 'Composition Tab, Section D1: A minimum percentage of 100 must exist in either the "Typical" or the "Max" column. ~r~n'
	li_rc = gi_failure
END IF

IF idw_composition.RowCount() = 0 THEN
	is_msg_validate_wcr += "Composition Tab, Section D1:  At least one composition value is required.~r~n"
	li_rc = gi_failure
END IF

FOR ll_i = 1 TO ib_typical_zero
	idw_composition.Object.comp_typical_pct[ll_i]=ld_null
NEXT

FOR ll_i = 1 TO ib_from_zero
	idw_composition.Object.comp_from_pct[ll_i]=ld_null
NEXT

ib_typical_zero=0
ib_from_zero=0

// COR2 - MPM - Odor Type validation
// If odor strength is Slight (S) or Strong (R), then at least one Odor Type should be checked
//DevOps:16495
IF idw_technical.Object.odor_strength[ll_row_tech] = 'S' OR idw_technical.Object.odor_strength[ll_row_tech] = 'R' THEN
	IF NOT(idw_technical.Object.odor_type_ammonia[ll_row_tech] = 'T' OR idw_technical.Object.odor_type_amines[ll_row_tech] = 'T' OR &
		idw_technical.Object.odor_type_mercaptans[ll_row_tech] = 'T' OR idw_technical.Object.odor_type_sulfur[ll_row_tech] = 'T' OR &
		idw_technical.Object.odor_type_organic_acid[ll_row_tech] = 'T' OR idw_technical.Object.odor_type_other[ll_row_tech] = 'T') THEN
		is_msg_validate_wcr += "Odor Type:  You have indicated that a slight or strong odor is present.  Please select an Odor Type.~r~n"
		li_rc = gi_failure
	END IF
END IF

// COR2 - MPM - Consistency/Physical State validation - at least one consistency checkbox must be selected.
IF NOT(idw_technical.Object.consistency_solid[ll_row_tech] = 'T' OR idw_technical.Object.consistency_dust[ll_row_tech] = 'T' OR &
	idw_technical.Object.consistency_debris[ll_row_tech] = 'T' OR idw_technical.Object.consistency_sludge[ll_row_tech] = 'T' OR &
	idw_technical.Object.consistency_liquid[ll_row_tech] = 'T' OR idw_technical.Object.consistency_gas_aerosol[ll_row_tech] = 'T' OR &
	idw_technical.Object.consistency_varies[ll_row_tech] = 'T') THEN
		is_msg_validate_wcr += "Consistency/Physical State:  At least one Consistency/Physical State value must be selected.~r~n"
		li_rc = gi_failure
END IF

// COR2 - MPM - pH validation - If paint_filter_solid_flag = 'F' and pH <= 2 or pH >= 12.5, display "D002 may apply" message.
// MPM - 8/24/2021 - DevOps 16453 - Commented out the following validation, since it doesn't look for a D002 and also because
// there is a nearly identical validation about 30 lines below that does look for a D002.
//IF idw_technical.Object.paint_filter_solid_flag[ll_row_tech] = 'F' AND (idw_technical.Object.ph_lte_2[ll_row_tech] = 'T' OR idw_technical.Object.ph_gte_12_5[ll_row_tech] = 'T') THEN
//	is_msg_validate_wcr += "Tech Tab, Section D7: You have indicated that this material is a liquid with a pH of <=2 or >=12.5.  A RCRA D002 may apply.~r~n"
//	li_rc = gi_failure
//END IF

// COR2 - MPM - Flash Point validation 
// Either a flash point value or a flash point check box must be selected.
IF IsNull(idw_technical.Object.ignitability_compare_temperature[ll_row_tech]) AND &
	(NOT(idw_technical.Object.ignitability_lt_90[ll_row_tech] = 'T' OR idw_technical.Object.ignitability_90_139[ll_row_tech] = 'T' OR idw_technical.Object.ignitability_140_199[ll_row_tech] = 'T' OR &
		idw_technical.Object.ignitability_gte_200[ll_row_tech] = 'T' OR idw_technical.Object.ignitability_does_not_flash[ll_row_tech] = 'T' OR idw_technical.Object.ignitability_flammable_solid[ll_row_tech] = 'T' OR &
		idw_technical.Object.ignitability_na[ll_row_tech] = 'T')) THEN
	is_msg_validate_wcr += "Flash Point:  Either a Flash Point value must be entered or a Flash Point checkbox must be checked.~r~n"
	li_rc = gi_failure
END IF
// If the flash point value < 140 or selects a flash point checkbox value that is < 140, then display "D001 may apply" message.
//DevOps: 13984 Changed AND to OR 
//DevOps:15355
ll_count = idw_waste_code_fed.RowCount()
FOR i = 1 to ll_count
	ls_waste_code_d001 =  idw_waste_code_fed.object.waste_code[i]
	IF ls_waste_code_d001 = 'D001' THEN 
	   lb_has_d001 = TRUE	
	END IF
	IF ls_waste_code_d001 = 'D002' THEN 
	   lb_has_d002 = TRUE	
	END IF
NEXT

// COR2 - MPM - pH validation - If paint_filter_solid_flag = 'F' and pH <= 2 or pH >= 12.5, display "D002 may apply" message.
//DevOps:15683 - Updated validation with  lb_has_d002 = FALSE logic
IF idw_technical.Object.paint_filter_solid_flag[ll_row_tech] = 'F' AND &
		(	(idw_technical.Object.ph_lte_2[ll_row_tech] = 'T' AND lb_has_d002 = FALSE ) OR ( idw_technical.Object.ph_gte_12_5[ll_row_tech] = 'T' AND lb_has_d002 = FALSE )  ) THEN
	is_msg_validate_wcr += "Tech Tab, Section D7: You have indicated that this material is a liquid with a pH of <=2 or >=12.5.  A RCRA D002 may apply.~r~n"
	li_rc = gi_failure
END IF

//DevOps:15493
IF ( idw_technical.Object.ignitability_compare_temperature[ll_row_tech] < 140 OR idw_technical.Object.ignitability_lt_90[ll_row_tech] = 'T' OR idw_technical.Object.ignitability_90_139[ll_row_tech] = 'T') AND lb_has_d001 = FALSE THEN
	is_msg_validate_wcr += "Flash Point:  You have indicated that the flash point of this material is < 140° F.  A RCRA D001 may apply.~r~n"
	li_rc = gi_failure
END IF

//DevOps: 13984  - If Section D.8 "<90F" is selected then display the  Warning Message. 
// MPM - 4/28/2020 - DevOps 15419 - Corrected the validation below
IF idw_technical.Object.ignitability_lt_90[ll_row_tech] = 'T' AND IsNull(idw_technical.Object.ignitability_compare_temperature[ll_row_tech]) THEN
	is_msg_validate_wcr += "Flash Point:  You have indicated that the material contains a Flash Point of < 90° F.  Please provide an actual Flash Point value if one is available.~r~n"
	li_rc = gi_failure
END IF

// COR2 - MPM - Volume and Bill Unit validation
//DevOps:16490 
IF dw_ship_volume.RowCount() < 1 THEN
	is_msg_validate_wcr += "Volume of waste to be shipped is missing.~r~n"
	li_rc = gi_failure
ELSE
	FOR ll_i = 1 TO dw_ship_volume.RowCount() //DevOps 18086 info_gde 11/30/2020; Profile Tab - Section C8 Validation Message
		IF IsNull(dw_ship_volume.Object.quantity[ll_i]) OR dw_ship_volume.Object.quantity[ll_i] = '' THEN
			//is_msg_validate_wcr += "Quantity of waste Volume: '"+String(ls_bill_unit_code)+"' to be shipped is missing.~r~n"
			is_msg_validate_wcr += "Profile Tab, Section C8: 'Volume/Frequency' is required.~r~n"
			li_rc = gi_failure
		END IF
	NEXT
END IF

	FOR ll_i = 1 TO idw_shipping_unit.RowCount()
		IF IsNull(idw_shipping_unit.Object.quantity[ll_i]) OR idw_shipping_unit.Object.quantity[ll_i] = '' THEN
			//DevOps 16255 info_gde 06/16/2020; EQAI-Process-Profile Tracking-C8 Validation
			ls_bill_unit_code=idw_shipping_unit.object.bill_unit_code[ll_i]
//			if isNull(ls_bill_unit_code) then
//			else
//				is_msg_validate_wcr += "Quantity of waste bill unit: '"+String(ls_bill_unit_code)+"' to be shipped is missing.~r~n"
//				li_rc = gi_failure
//			end if
			//DevOps 16255 info_gde 06/16/2020; EQAI-Process-Profile Tracking-C8 Validation
			
		END IF
		IF (IsNull(idw_shipping_unit.Object.bill_unit_code[ll_i]) OR idw_shipping_unit.Object.bill_unit_code[ll_i] = '') THEN
		// DevOps task 10099 - Skip this validation if quantity is non-numeric
			IF NOT IsNumber(dw_shipping_unit.Object.quantity[ll_i]) THEN
				// do nothing
			ELSE
				is_msg_validate_wcr += "Bill unit of waste to be shipped is missing.~r~n"
				li_rc = gi_failure
			END IF
		END IF
	NEXT

// MPM - COR2 PA Residual Waste validation
IF idw_header.object.pa_residual_waste_flag[ll_row] = 'T' THEN
	FOR ll_row_wc_state = 1 TO idw_waste_code_state.RowCount()
		IF idw_waste_code_state.Object.state[ll_row_wc_state] = 'PA' THEN 
			lb_has_pa_waste_code = TRUE
			EXIT
		END IF
	NEXT
	IF NOT lb_has_pa_waste_code THEN
		is_msg_validate_wcr += "You have indicated that this material is Pennsylvania Residual Waste.  At least one PA State Code is required.~r~n"
		li_rc = gi_failure
	END IF
	
	IF is_rcra_waste_codes > '' THEN
		is_msg_validate_wcr += "You have indicated that this material is Pennsylvania Residual Waste and have provided a RCRA Code in Section E3.  Pennsylvania Residual Waste codes do not apply to waste that contains a RCRA Hazardous Code.~r~n"	
		li_rc = gi_failure
	END IF
END IF

// AM -  DevOps:30290 TX waste validation
FOR ll_row_wc_state = 1 TO idw_waste_code_state.RowCount()
	IF idw_waste_code_state.Object.state[ll_row_wc_state] = 'TX' THEN 
		lb_has_tx_waste_code = TRUE
		EXIT
	END IF
NEXT

ls_texas_waste_material_type = idw_header.object.texas_waste_material_type[ll_row]  

IF lb_has_tx_waste_code = TRUE AND ( IsNull(ls_texas_waste_material_type) OR ls_texas_waste_material_type = 'C' ) THEN 
	is_msg_validate_wcr += 'This profiles carries a Texas State Waste Code, please make a selection in Waste/Material Type of Industrial, Nonindustrial, or N/A.~r~n'
	li_rc = gi_failure
END IF

//Subhrajyoti -12/15/2023 - Begin - Devops#74306- EQAI>Sec E1>TX Codes - Validation on Waste/Material Type
ls_profile_tracking_type = idw_header.object.tracking_type[ll_row]
ls_profile_tracking_type_original = idw_header.object.tracking_type.primary.original[ll_row]

IF IsNull(ls_profile_tracking_type) THEN ls_profile_tracking_type = ''
IF IsNull(ls_profile_tracking_type_original) THEN ls_profile_tracking_type_original = ''
//Subhrajyoti - 12/15/2023 - End - Devops#74306- EQAI>Sec E1>TX Codes - Validation on Waste/Material Type

//Subhrajyoti - 12/15/2023 - Outer IF condition added for Devops#74306
IF NOT (ls_profile_tracking_type_original = 'H' AND ls_profile_tracking_type = 'NEW' AND  ls_texas_waste_material_type = 'U') THEN 
	IF lb_has_tx_waste_code = FALSE AND ( ls_texas_waste_material_type = 'I' OR ls_texas_waste_material_type = 'N' OR ls_texas_waste_material_type = 'U' ) THEN 
		is_msg_validate_wcr += 'You have indicated that this material is Steers reportable, please assign a Texas State Waste Code.~r~n'
		li_rc = gi_failure
	END IF	
END IF 

//DevOps:14977 
//DevOps:17156 - We already have validation in ProfileValidation table. This is duplicated
//IF ( idw_header.Object.rcra_waste_code_flag[ll_row] = 'F' AND (IsNull(idw_header.Object.rcra_exempt_flag[ll_row] ) OR ( idw_header.Object.rcra_exempt_flag[ll_row]  = 'U' ) ) ) THEN
//	is_msg_validate_wcr += 'Profile Tab E3 - "If None, is it exempt" is required based on a selection of "None" for "RCRA Waste Codes".~r~n'	
//	li_rc = gi_failure
//END IF

IF  idw_header.Object.hazmat[ll_row] = 'T' THEN
	ls_dot_inhalation_haz_flag =   idw_header.Object.dot_inhalation_haz_flag[ll_row]  
	IF ls_dot_inhalation_haz_flag = 'U' OR IsNull(ls_dot_inhalation_haz_flag) THEN
		is_msg_validate_wcr += 'You have indicated that this material is DOT Hazardous. Please indicate whether or not the material poses a DOT Inhalation Hazard.~r~n'
		li_rc = gi_failure
	END IF
END IF	
 //DevOPs:15142 
// ls_rcra_exempt_reason =  idw_header.Object.rcra_exempt_reason[ll_row] 
//IF ( idw_header.Object.rcra_exempt_flag[ll_row] = 'T' AND ( IsNull(ls_rcra_exempt_reason) OR ls_rcra_exempt_reason = '')  ) THEN
//	is_msg_validate_wcr += 'Profile Tab E3 - Exemption reference is required.~r~n'	
//	li_rc = gi_failure
//END IF

// MPM - GEM 55862 - Additional waste code validations
IF IsNull(idw_header.Object.hazmat[ll_row]) OR idw_header.Object.hazmat[ll_row] = 'F' OR idw_header.Object.hazmat[ll_row] = 'U' THEN
	IF is_rcra_waste_codes > '' THEN
		is_msg_validate_wcr += 'This profile has federal hazardous codes but is not flagged as DOT Hazardous.~r~n'
		li_rc = gi_failure
	END IF
// 20191210 jcb #10274 repl 	IF NOT IsNull(idw_header.Object.un_na_number[ll_row]) THEN
//DevOps:13696
  IF  idw_header.Object.hazmat[ll_row] = 'T'  THEN 
	IF NOT IsNull(idw_header.Object.un_na_number[ll_row]) and NOT trim(string(idw_header.Object.un_na_number[ll_row])) = ''  THEN	
		is_msg_validate_wcr += 'This profile has a UN or NA number but is not flagged as DOT Hazardous.~r~n'
		li_rc = gi_failure
	END IF
  END IF
END IF

// COR2 - MPM - Constituents validation
// Moved existing similar constituents validation that was in wf_validation() to below so that such validation would result in warnings instead of errors,
// and modified this logic to take into account the new typical % column.
// 20200527 jcb #15695 check E6 sum of max for >= 100

ld_sum_of_max_pct = 0
lb_has_UHC_checked = FALSE             // 20200528 jcb #15695 add

FOR ll_row_const = 1 TO idw_const.Rowcount()
	ld_min_concentration 	= idw_const.object.min_concentration [ll_row_const]
	ld_max_concentration 	= idw_const.object.concentration [ll_row_const]
	ld_sum_of_max_pct 	   += ld_max_concentration	
	ld_typical_concentration 	= idw_const.object.typical_concentration [ll_row_const]
	ls_units						= idw_const.object.unit [ll_row_const]
	ll_const_id = idw_const.Object.const_id[ll_row_const]
	// 20200528 jcb #15965 add UHC_Checked flag
	IF idw_const.object.UHC[ll_row_const] = 'T'  THEN
		lb_has_UHC_checked  = TRUE
	END IF	
    //20200514 jcb #15700 add, using msg from COR validation, with E6 added on
    ls_tclp_flag 					= idw_const.object.tclp_flag[ll_row_const]
    IF  IsNull(ls_tclp_flag) OR trim(ls_tclp_flag) = ''   THEN
	  	IF  pos(is_msg_validate_wcr,'Please fill all Chemical Constituents, Unit and TCLP/Totals on E6.') <  1 THEN
 	         is_msg_validate_wcr += "Please fill all Chemical Constituents, Unit and TCLP/Totals on E6.~r~n"
	 	END IF 		
    END IF	
   //DevOps:49980 - AM - 01/15/2024 -  Moved to wf_validate function to give an error instead of warning.
//	IF IsNull(ls_units) OR ls_units = '' THEN 
//		is_msg_validate_wcr += "Constituent (ID " + String(ll_const_id) + "): Units is required.~r~n"
//		li_rc = gi_failure
//	END IF
   // DevOps:13716
	IF (IsNull(ld_typical_concentration) OR ld_typical_concentration <= 0) AND ((IsNull(ld_min_concentration) OR ld_min_concentration <= 0) AND (IsNull(ld_max_concentration) OR ld_max_concentration <= 0)) THEN
		is_msg_validate_wcr += "Constituent (ID " + String(ll_const_id) + "): A value greater than 0 must be present for either the Typical or the Min/Max fields.~r~n"
		li_rc = gi_failure
	END IF
		//DevOps:19370 - This validation no need. Coverd by some other validation
//	IF ld_min_concentration > ld_max_concentration THEN
//		is_msg_validate_wcr += "Constituent (ID " + String(ll_const_id) + "): Min must be <= Max.~r~n"
//		li_rc = gi_failure
//	END IF
	IF idw_const.object.exceeds_ldr[ll_row_const] = 'T' THEN lb_exceeds_ldr = TRUE	
 NEXT

 
 	IF lb_has_UHC_checked = TRUE AND idw_header.Object.rcra_waste_code_flag[ll_row] = 'T' THEN 
		FOR j = 1 TO idw_waste_code_fed.rowcount()
			ls_rcra_waste_code = idw_waste_code_fed.object.waste_code[j] 
			ll_count = idw_waste_code_fed.Rowcount()
			//DevOps 17658 info_gde 10/09/2020;  E6 Validations Triggering Incorrectly
			//ls_find =   " waste_code LIKE '%D0%' " 
			ls_find =   " waste_code LIKE '%D007%' " 
			ll_find_row = idw_waste_code_fed.Find(ls_find,1,idw_waste_code_fed.Rowcount())
			IF ll_find_row  > 0 AND lb_rcra_waste = TRUE THEN 
			   is_msg_validate_wcr += "Please verify the applicability of the selected UHC(s) in Section E.6.~r~n"
		        li_rc = gi_failure
				   lb_rcra_waste = FALSE
			END IF
		NEXT 
	END IF
	
//20200527 jcb #15695 cross check Constituent UHC flags and Section E3 rcra_waste=NONE
ls_rcra_waste_code_flag  = idw_header.Object.rcra_waste_code_flag[ll_row]
IF isNull(ls_rcra_waste_code_flag) THEN ls_rcra_waste_code_flag=''
IF  lb_has_UHC_checked = TRUE and ls_rcra_waste_code_flag  = 'F'  THEN
	// "Please verify the applicability of the selected UHC(s) in Section E.6 as you have indicated that no RCRA Waste Codes apply in Section E.3."
 	IF  pos(is_msg_validate_wcr,"Composition Tab, Section E6 - UHC flag(s) are checked but section E3 RCRA Waste is 'NONE'") <  1 THEN
         is_msg_validate_wcr +=  "Composition Tab, Section E6 - UHC flag(s) are checked but section E3 RCRA Waste is 'NONE'.~r~n"
	//else
	//	is_rcra_waste_code_flag = "Composition Tab, Section E6 - UHC flag(s) are checked but section E3 RCRA Waste is 'NONE'.~r~n"
	END IF
	li_rc   = gi_failure
END IF

//20200528 jcb #15695 add crosscheck between UHC flag(s) and G3 more_than_50_pct_debris
ls_chk_G3 	  = 'F'
ll_row_G3	  = idw_technical.GetRow()
ls_dataobject = idw_technical.dataobject
ls_chk_G3 	  = idw_technical.object.more_than_50_pct_debris[ll_row_G3]

IF  lb_has_UHC_checked = TRUE  and ls_chk_g3 = 'T' THEN
	// "Please verify the applicability of the selected UHC(s) in Section E.6 as you have indicated that no RCRA Waste Codes apply in Section E.3."
	IF pos(is_msg_validate_wcr,'Composition Tab, Section E6 UHC flag(s) are checked but Section G3 Alternative Treatment Standards for debris is checked') < 1 THEN
 	   is_msg_validate_wcr +=  "Composition Tab, Section E6 UHC flag(s) are checked but Section G3 Alternative Treatment Standards for debris is checked.~r~n"
	   li_rc   = gi_failure
	END IF
END IF

IF lb_exceeds_ldr THEN
	// If "Exceeds LDR" is 'T' then Section G.3 is required
	// MPM - 2/26/2020 - DevOps 13959
	IF (idw_header.object.waste_water_flag[ll_row] = 'U' OR IsNull(idw_header.object.waste_water_flag[ll_row])) AND &
		(IsNull(idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech]) OR idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech] = 'F' OR idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech] = 'U') AND &
		(IsNull(idw_technical.Object.more_than_50_pct_debris[ll_row_tech]) OR idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'F' OR idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'U') THEN
		is_msg_validate_wcr += 'You have indicated in Section E that one or more of the constituents contained within the waste exceeds LDR treatment standards.  As such, one of the three options under "Requires Treatment" must be selected.~r~n'
		li_rc = gi_failure
	END IF
	// MPM - 3/17/2020 - DevOps 14422
	// If "Exceeds LDR" is 'T' then the user should not be able to select "Waste meets LDR treatment standards" in Section G.3
	// DevOps 14241/14841 - 3/26/2020 - MPM - Replace "Profile.exceed_LDR_standards" on Section G with "Profile.waste_meets_ldr_standards"	
	IF idw_header.Object.waste_meets_ldr_standards[ll_row] = 'T' THEN
		is_msg_validate_wcr += 'You have indicated in Section E that one or more of the constituents contained within the waste exceeds LDR treatment standards.  As such, "Waste meets LDR treatment standards" cannot be selected.~r~n'
		li_rc = gi_failure
	END IF
END IF

// MPM - COR2 - Source Code validation
// If F.8 = 'T' and question 3 of the PCB Supplement = 'T' then Source Code is required.  
// If value provided in E.2 (State Waste Codes:) is Haz Flag 'T' then Source Code is required.
IF 	IsNull(idw_header.Object.epa_source_code[ll_row]) OR idw_header.Object.epa_source_code[ll_row] = '' THEN
	IF idw_waste_code_state.Find ("haz_flag='T'", 1, idw_waste_code_state.RowCount()) > 0 OR &
		idw_technical.Object.pcb_regulated_for_disposal_under_tsca[ll_row_tech] = 'T' AND idw_technical.Object.contains_pcb[ll_row_tech] = 'T' THEN
		// Only add a message if a "Source Code" warning isn't already in is_msg_validate_wcr, as it might be from the above FOR loop over the ProfileValidation table
		    //DevOps:14547 Validate if there are any RCRA wastecodes on profile.
			IF Pos(is_msg_validate_wcr, 'Source Code') = 0 AND  (Not IsNull(is_rcra_waste_codes) AND is_rcra_waste_codes <> '') THEN
			is_msg_validate_wcr += "You have indicated that the Material may be subject to biennial reporting requirements.  Please provide a Source Code for this material.~r~n"
			li_rc = gi_failure
		END IF
	END IF
END IF

// MPM - COR2 - Form Code validation
// If F.8 = 'T' and question 3 of the PCB Supplement = 'T' then Form Code is required.  
// If value provided in E.2 (State Waste Codes:) is Haz Flag 'T' then Form Code is required.
IF 	IsNull(idw_header.Object.epa_form_code[ll_row]) OR idw_header.Object.epa_form_code[ll_row] = '' THEN
	IF idw_waste_code_state.Find ("haz_flag='T'", 1, idw_waste_code_state.RowCount()) > 0 OR &
		idw_technical.Object.pcb_regulated_for_disposal_under_tsca[ll_row_tech] = 'T' AND idw_technical.Object.contains_pcb[ll_row_tech] = 'T' THEN
		//DevOps:14547 Validate if there are any RCRA wastecodes on profile.
		IF (Not IsNull(is_rcra_waste_codes) AND is_rcra_waste_codes <> '') THEN 
			is_msg_validate_wcr += "You have indicated that the Material may be subject to biennial reporting requirements.  Please provide a Form Code for this material.~r~n"
			li_rc = gi_failure
		END IF
	END IF
END IF

// MPM - COR2 - Regulatory/Section G validation
// MPM - 2/26/2020 - DevOps 13959
// DevOps 14241 - 3/26/2020 - MPM - Replace "Profile.exceed_LDR_standards" on Section G with "Profile.waste_meets_ldr_standards"
//DevOps -15142
IF  (idw_header.Object.generator_type[ll_row] = 'SQG' OR idw_header.Object.generator_type[ll_row] = 'LQG')  AND &
    (idw_header.Object.rcra_waste_code_flag[ll_row] = 'T' AND  is_rcra_waste_codes <> '' ) AND &
    (IsNull(idw_header.Object.waste_water_flag[ll_row]) OR idw_header.Object.waste_water_flag[ll_row] = '' ) AND  &
	(idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech] <> 'T') AND &
	(idw_technical.Object.more_than_50_pct_debris[ll_row_tech] <> 'T' ) AND &
	(idw_header.Object.waste_meets_ldr_standards[ll_row] <> 'T' ) THEN
	is_msg_validate_wcr += "You have indicated that the regulatory status of the generator is SQG/LQG and that one or more RCRA Codes apply to the Material.  A selection must be made for RCRA regulated Material.~r~n"
	li_rc = gi_failure
END IF

//DenOps:16494
	ll_dw_waste_code_fed = idw_waste_code_fed.Rowcount()
	ll_composition_epa_row = idw_composition_epa.GetRow ()
	IF ll_composition_epa_row > 0 THEN 
		ls_epa_source_code = idw_composition_epa.Object.epa_source_code[ll_composition_epa_row]
		ls_epa_form_code =  idw_composition_epa.Object.epa_form_code[ll_composition_epa_row]
		IF ll_dw_waste_code_fed > 0 AND (( IsNull (ls_epa_source_code ) OR ls_epa_source_code = "" )  OR ( IsNull (ls_epa_form_code ) OR ls_epa_form_code = "" )  ) THEN
		   is_msg_validate_wcr = "You must have an EPA Source Code and EPA Form Code before this profile can be set to approved."
			li_rc = gi_failure
		END IF
	END IF		
	
//IF  (idw_header.Object.generator_type[ll_row] = 'SQG' OR idw_header.Object.generator_type[ll_row] = 'LQG')  AND &
//    (IsNull(idw_header.Object.waste_water_flag[ll_row]) OR idw_header.Object.waste_water_flag[ll_row] = 'U') AND idw_header.Object.rcra_waste_code_flag[ll_row] = 'F' AND &
//	(IsNull(idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech]) OR idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech] = 'F' OR idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech] = 'U') AND &
//	(IsNull(idw_technical.Object.more_than_50_pct_debris[ll_row_tech]) OR idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'F' OR idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'U') AND &
//	(IsNull(idw_header.Object.waste_meets_ldr_standards[ll_row]) OR idw_header.Object.waste_meets_ldr_standards[ll_row] = 'F' OR idw_header.Object.waste_meets_ldr_standards[ll_row] = 'U') THEN
//	is_msg_validate_wcr += "You have indicated that the regulatory status of the generator is SQG/LQG and that one or more RCRA Codes apply to the Material.  A selection must be made for RCRA regulated Material.~r~n"
//	li_rc = gi_failure
//END IF
// MPM - COR2 - Regulatory/Section G validation
// MPM - 2/26/2020 - DevOps 13959
IF idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'T' AND &
	((IsNull(idw_header.Object.debris_separated[ll_row]) OR idw_header.Object.debris_separated[ll_row] = 'F' OR idw_header.Object.debris_separated[ll_row] = 'U') OR &
	(IsNull(idw_header.Object.debris_not_mixed_or_diluted[ll_row]) OR idw_header.Object.debris_not_mixed_or_diluted[ll_row] = 'F' OR idw_header.Object.debris_not_mixed_or_diluted[ll_row] = 'U')) THEN
	is_msg_validate_wcr += 'You have indicated that this Material is RCRA Hazardous and subject to the Alternative Treatment Standards for Debris.  Please complete both "I confirm" sub-statements for this section.~r~n'
	li_rc = gi_failure
END IF

// MPM - COR2 - Regulatory/Section G validation
IF  idw_header.Object.waste_water_flag[ll_row] = 'W' AND (idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech] = 'T' OR idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'T') THEN
	is_msg_validate_wcr += 'Wastewater cannot be selected in conjunction with Alternative Treatment Standards for Soil or Alternative Treatment Standards for Debris.~r~n'
	li_rc = gi_failure
END IF

// MPM - 2/28/2020 - DevOps 14422 
// Only display these validation warnings if the profile status is not 'Approved'
IF idw_header.Object.curr_status_code[ll_row] <> 'A' THEN 
	// LDR
	// DevOps 14241/14841 - 3/26/2020 - MPM - Replace "Profile.exceed_LDR_standards" on Section G with "Profile.waste_meets_ldr_standards"
	IF  idw_header.Object.waste_water_flag[ll_row] = 'W' OR idw_header.Object.waste_water_flag[ll_row] = 'N' OR &
		idw_technical.Object.meets_alt_soil_treatment_stds[ll_row_tech] = 'T' OR idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'T' OR &
		idw_header.Object.debris_separated[ll_row] = 'T' OR idw_header.Object.debris_not_mixed_or_diluted[ll_row] = 'T' OR &
		idw_header.Object.waste_meets_ldr_standards[ll_row] = 'T' THEN
		is_msg_validate_wcr += 'Based on G3, LDR Supplement is required.~r~n'
		li_rc = gi_failure
	END IF
	ll_row_comp_other = idw_composition_other.GetRow()
	IF ll_row_comp_other > 0 THEN
		// PCB (polychlorinated biphenyl) Supplement
		IF idw_composition_other.Object.contains_PCB[ll_row_comp_other] = 'T' THEN
			is_msg_validate_wcr += 'Based on F8, PCB Supplement is required.~r~n'
			li_rc = gi_failure
		END IF
		// Used Oil Supplement
		IF idw_composition_other.Object.used_oil[ll_row_comp_other] = 'T' THEN
			is_msg_validate_wcr += 'Based on F16, Used Oil Supplement is required.~r~n'
			li_rc = gi_failure
		END IF
		// Compressed Gas Cylinder Inventory & Inspection Supplement
		IF idw_composition_other.Object.compressed_gas[ll_row_comp_other] = 'T' THEN
			is_msg_validate_wcr += 'Based on F15, Cylinder Supplement is required.~r~n'
			li_rc = gi_failure
		END IF
		// Uniform Radioactive Waste Acceptance Supplement
		IF idw_composition_other.Object.radioactive_waste[ll_row_comp_other] = 'T' THEN
			is_msg_validate_wcr += 'Based on F5 RAD Supplement is required.~r~n'
			li_rc = gi_failure
		END IF
	END IF
	// Debris Waste Streams for Microencapsulation
	// Display warning if more than 50% debris (G.3) and facility = US Ecology Michigan (company_id = 2) is in H.5
	IF idw_technical.Object.more_than_50_pct_debris[ll_row_tech] = 'T' THEN
		ll_find = idw_wcr_facility.Find('company_id = 2', 1, idw_wcr_facility.RowCount() + 1, Primary!)
		IF ll_find > 0 THEN
			is_msg_validate_wcr += 'Based on G3 and H5, Debris Waste Supplement is required.~r~n'
			li_rc = gi_failure
		END IF
	END IF
	// Compressed Gas Cylinder Inventory & Inspection Supplement
	IF idw_header.Object.container_type_cylinder[ll_row] = 'T' THEN
		is_msg_validate_wcr += 'Based on C7, Cylinder Supplement is required.~r~n'
		li_rc = gi_failure
	END IF
	// Waste Import Supplement
	// MPM - 1/10/2022 - DevOps 18254 - Modified this validation to not fire if the "country" is VIR or PRI.
	IF Len(String(idw_header.Object.generator_country[ll_row])) > 0 AND idw_header.Object.generator_country[ll_row] <> 'USA' AND &
		idw_header.Object.generator_country[ll_row] <> 'PRI' AND idw_header.Object.generator_country[ll_row] <> 'VIR' THEN
		is_msg_validate_wcr += 'Based on A2, Waste Import Supplement is required.~r~n'
		li_rc = gi_failure
	END IF
	// Illinois Disposal Supplement
	// Display warning if facility = EQ Illinois (company_id = 26) is in H.5
	ll_find = idw_wcr_facility.Find('company_id = 26', 1, idw_wcr_facility.RowCount() + 1, Primary!)
	IF ll_find > 0 THEN
		is_msg_validate_wcr += 'Based on H5, Illinois Supplement is required.~r~n'
		li_rc = gi_failure
	END IF
	// Thermal Supplement
	IF idw_header.Object.thermal_process_flag[ll_row] = 'T' THEN
		is_msg_validate_wcr += 'Based on H3, Thermal Supplement is required.~r~n'
		li_rc = gi_failure
	END IF
	// Benzene Waste Operations Supplement
	IF idw_header.Object.origin_refinery[ll_row] = 'T' THEN
		is_msg_validate_wcr += 'Based on G6 Benzene Supplement is required.~r~n'
		li_rc = gi_failure
	END IF
	
	// Dipankar - 9/4/2023 - Begin - Added for #69393
	// Fuels Blendin Supplement - Display warning if facility = Greensboro NC is in H.5
	ll_find = idw_wcr_facility.Find('company_id = 73 and profit_ctr_id = 94', 1, idw_wcr_facility.RowCount() + 1, Primary!)
	IF ll_find > 0 THEN
		is_msg_validate_wcr += 'Based on H5, Fuels Blending Supplement is required.~r~n'
		li_rc = gi_failure
	END IF
	// Dipankar - 9/4/2023 - End - Added for #69393
END IF
	//DevOps:16545
ll_row = idw_profile_pcb_supplement_dragon.GetRow()
IF ll_row > 0 THEN 
	ls_question_5 = idw_profile_pcb_supplement_dragon.Object.pcb_manufacturer[ll_row]
	ls_pcb_article_for_tsca_landfill =  idw_profile_pcb_supplement_dragon.Object.pcb_article_for_tsca_landfill[ll_row] 
	//DevOps 16398 info_gde 04/08/2021; EQAI TSCA Trigger Enhancements for Container Breakout
	ls_question_3 = idw_profile_pcb_supplement_dragon.Object.pcb_regulated_for_disposal_under_tsca[ll_row]
	
	      IF ( idw_profile_pcb_supplement_dragon.GetItemString(ll_row, 'pcb_concentration_50_499') = 'T'  OR  idw_profile_pcb_supplement_dragon.GetItemString(ll_row, 'pcb_concentration_500') = 'T' OR  idw_profile_pcb_supplement_dragon.GetItemString(ll_row, 'pcb_source_concentration_gr_50') = 'T' OR ls_question_3 = 'T' )  AND &
			(  IsNull(ls_question_5) OR ls_question_5 = 'U'  OR IsNull(ls_pcb_article_for_tsca_landfill) OR ls_pcb_article_for_tsca_landfill = 'U'  ) THEN 
			is_msg_validate_wcr += "You have indicated that the concentration of PCB's in the waste is >=50 ppm and/or that the material was derived from a PCB source >=50 ppm. As such questions 5 and 6 of the supplement are required.~r~n"
		     li_rc = gi_failure  
		end if	
END IF


// MPM - 5/27/2020 - DevOps 15816 - Moved the validation below from the itemchanged event
ll_row = idw_profile_illinois_disposal_supplemen.GetRow()
IF ll_row > 0 AND idw_profile_illinois_disposal_supplemen.GetItemStatus(ll_row, 0, Primary!) <> New! THEN
	IF IsNull(idw_profile_illinois_disposal_supplemen.Object.d004_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d004_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d005_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d005_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d006_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d006_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d007_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d007_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d008_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d008_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d009_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d009_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d010_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d010_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d011_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d011_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d012_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d012_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d013_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d013_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d014_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d014_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d015_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d015_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d016_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d016_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d017_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d017_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d018_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d018_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d019_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d019_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d020_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d020_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d021_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d021_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d022_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d022_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d023_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d023_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d024_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d024_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d025_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d025_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d026_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d026_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d027_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d027_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d028_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d028_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d029_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d029_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d030_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d030_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d031_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d031_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d032_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d032_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d033_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d033_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d034_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d034_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d035_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d035_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d036_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d036_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d037_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d037_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d038_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d038_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d039_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d039_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d040_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d040_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d041_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d041_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d042_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d042_above_PQL[ll_row] = 'U' OR &
		IsNull(idw_profile_illinois_disposal_supplemen.Object.d043_above_PQL[ll_row]) OR idw_profile_illinois_disposal_supplemen.Object.d043_above_PQL[ll_row] = 'U' THEN
		is_msg_validate_wcr += 'A selection of either "Yes" or "No" is required for each constituent listed in the Illinois Supplement on the Profile tab.~r~n'
		li_rc = gi_failure
	END IF
END IF

// MPM - 6/15/2020 - DevOps 16348 - Reworked the validation that was added under DevOps 11428
ll_row = idw_header.GetRow()
IF idw_header.Object.specific_technology_requested[ll_row] = 'T' THEN
	ls_requested_technology = idw_header.Object.requested_technology[ll_row]
	IF IsNull(ls_requested_technology) THEN ls_requested_technology = ''
	IF Len(ls_requested_technology) < 1 AND idw_wcr_facility.RowCount() < 1 THEN
		is_msg_validate_wcr += 'Requested Facility is Required Or Requested Technology is Required on Section H1.~r~n'
		li_rc = gi_failure
	END IF
END IF


RETURN li_rc
end function

public function long wf_get_profile_id ();long	ll_profile_id

IF idw_header.GetRow() > 0 THEN 
	ll_profile_id = idw_header.Object.profile_id[il_curr_row]
	
	IF IsNull(ll_profile_id) OR ll_profile_id <= 0 THEN
		ll_profile_id = 0
	END IF
END IF

RETURN ll_profile_id
end function

public subroutine wf_insert_wcr (str_wcr_params astr_wcr_params);/// When user wants to insert an existing WCR, open compare between the selected WCR & Profile
//  User can then 1st choose to replace the data on Profile, and then can hit on new WCR through Doc mgmt on this Profile
//  Do not auto-insert a new WCR from selected WCR
int 		li_rc = gi_success, li_form_version_id
long		ll_row, ll_null
str_pass	lstr
string     ls_status,ls_profile_dragon_date

ll_row = idw_header.getrow()
IF ll_row > 0 THEN
	
	SetNull(li_form_version_id)
	SetNull(ll_null)
	
	//NOTE : SK 041112 Compare popup does not care what version the WCR is, it just shows the data and gives option
	// 		to replace on Profile for now, but in future, the version might matter,in which case the str 'ast_params'
	//			below will need the correct version id for this form. will cause changes on w_popup_wcr_select, where we select
	// 		the wcr to compare/copy.
	lstr.l[1] = astr_wcr_params.al_form_id			//form id
	lstr.l[2] = astr_wcr_params.ai_revision_id	//revision id
	lstr.l[3] = li_form_version_id					//form version id
	IF IsNull( astr_wcr_params.al_profile_id 	) THEN 
	   lstr.l[4] = idw_header.Object.profile_id[ll_row]  //profile id
	ELSE
	   lstr.l[4] = astr_wcr_params.al_profile_id //profile id
	END IF
	lstr.l[5] = astr_wcr_params.al_template_id	//template id
	lstr.l[6] = ll_null
	lstr.s[1] = is_access
	
	         SELECT config_value
			INTO :ls_profile_dragon_date
			FROM Configuration
			WHERE config_key = 'profile_dragon_date'
			USING gtr_share;
			
			IF gtr_share.SQLCode = 100 THEN	
				MessageBox ("SQL Error", "The profile Dragon date was not found in the Configuration table.", Exclamation!)
				RETURN 
			ELSEIF gtr_share.SQLCode < 0 THEN
				MessageBox ("SQL Error", gtr_share.SQLErrText, Exclamation!)
				RETURN 
			END IF
			
	//DZ 07/24/2012 skip the compare screen if create a new profile from template
	If IsNull( idw_header.Object.profile_id[ll_row] ) AND astr_wcr_params.al_template_id > 0 Then 
			IF NOT IsDate(ls_profile_dragon_date) THEN
				MessageBox ("SQL Error", "The value in the Configuration table for the profile Dragon date is not a valid date.", Exclamation!)
				RETURN 
			ELSE
				IF DateTime(ls_profile_dragon_date) < DateTime(Today(), Now()) THEN
					wf_copy_wcr_dragon( lstr )
				ELSE
				   wf_copy_wcr( lstr )
				END IF
			END IF
	Else
		IF NOT IsDate(ls_profile_dragon_date) THEN
				MessageBox ("SQL Error", "The value in the Configuration table for the profile Dragon date is not a valid date.", Exclamation!)
				RETURN 
		ELSE		
				IF DateTime(ls_profile_dragon_date) < DateTime(Today(), Now()) THEN
					OpenWithParm(w_popup_wcr_profile_compare_dragon, lstr)
					lstr = Message.powerobjectparm
					IF IsValid( lstr ) Then
						wf_copy_wcr_dragon( lstr )
					ELSE
					    RETURN
					End If	
				ELSE
				 OpenWithParm(w_popup_wcr_profile_compare, lstr)
					lstr = Message.powerobjectparm
					IF IsValid( lstr ) Then
						wf_copy_wcr( lstr )
					End If	
				END IF
			END IF
		/*
		ll_profile_id = Message.DoubleParm
		IF ll_profile_id > 0 THEN
			// SK 06/07/2012
			li_rc = idw_select.SetColumn("profile_id_from")
			li_rc = idw_select.SetText(String(ll_profile_id))
			ib_new_select = TRUE
			ib_new_record = FALSE
			tab_1.Post Event SelectionChanging(ii_tabpage_select, ii_tabpage_view)
		END IF
		*/
	End IF
END IF

wf_calculate_constituent()
wf_calculate_vapor_pressure_density()

//DevOps:17661 - Checking ll_row to avoid app termonation.
IF ll_row > 0 THEN 
	ls_status = idw_header.Object.tracking_type [ll_row]
	IF ls_status = "A" or ls_status = "APRC" THEN 
		// MPM - 2/16/17 - Pass a false value to function to indicate that we don't need an answer back
		wf_calculate_uts_constituent(FALSE) 
	END IF
END IF	
	

end subroutine

public function integer wf_save_wcr (long al_profile_id);// The purpose of this function is to update the profile_id on any WCRs 
integer	li_rc = 1
long		ll_row, ll_rowcount, ll_profile_id, ll_form_id, ll_newrow, ll_count_wcr
string	ls_form_type
datastore	ds_wcr

// Update 
ll_rowcount = idw_form.RowCount()
ll_count_wcr = 0

ds_wcr = CREATE DATASTORE
ds_wcr.DataObject = "d_profile_wcr_save"
ds_wcr.SetTransObject(itr_share)

FOR ll_row = 1 TO ll_rowcount
	ls_form_type = idw_form.Object.form_type[ll_row]
	IF ls_form_type = "WCR" THEN
		ll_count_wcr++
		ll_profile_id = idw_form.Object.profile_id[ll_row]
		ll_form_id = idw_form.Object.form_id[ll_row]
//		IF ll_profile_id = al_profile_id THEN
//			// This WCR already has the correct profile_id
//			CONTINUE
//		END IF
		
		/////////////////////////////////////////////
		// Method 1:
		// This way attempts to build then update a datastore with only the WCRs in it.
		/////////////////////////////////////////////
		ll_newrow = ds_wcr.InsertRow(0)
		ds_wcr.Object.form_id[ll_newrow] = ll_form_id
		ds_wcr.Object.profile_id[ll_newrow] = al_profile_id
		ds_wcr.SetItemStatus(ll_newrow, 1, Primary!, DataModified!)
		ds_wcr.SetItemStatus(ll_newrow, 2, Primary!, DataModified!)
		ds_wcr.SetItemStatus(ll_newrow, 0, Primary!, DataModified!)
		
//		/////////////////////////////////////////////
//		// Method 2:
//		// This way updates the FormWCR immediately
//		/////////////////////////////////////////////
//		UPDATE FormWCR 
//			SET profile_id = :al_profile_id
//			WHERE form_id = :ll_form_id
//		USING itr_forms;
//		COMMIT USING itr_share;
	END IF
NEXT

IF ll_count_wcr = 1 THEN
	idw_header.Object.form_id_wcr[il_curr_row] = ll_form_id
	tab_1.tabpage_view.st_form_id_wcr.Text = String(ll_form_id)
END IF

// Save the changes
IF ll_newrow > 0 THEN
	li_rc = ds_wcr.Update()
END IF
DESTROY ds_wcr
wf_calculate_constituent () 
wf_calculate_vapor_pressure_density()

RETURN li_rc
end function

public function long wf_get_generator_id ();long	ll_generator_id

ll_generator_id = idw_header.Object.generator_id[il_curr_row]

IF IsNull(ll_generator_id) OR ll_generator_id <= 0 THEN
	ll_generator_id = gl_various_generator_id
END IF

RETURN ll_generator_id
end function

public function integer wf_price (string as_action, long al_row_approval);//DevOps #14940 info_gde 04/09/2020; EQAI- PO from Profile tab not on price tab

datetime	ldt_today
integer	li_idx, li_i, li_company_id, li_profit_ctr_id, li_rc, li_first_tab, li_last_tab,li_last_tab_waste
long		ll_row_approval, ll_rowcount, ll_row_find, ll_profile_id, ll_row_hdr
string	ls_facility, ls_facility_tabpage, ls_msg, ls_msg_error, ls_access, ls_profile_status

u_tabpage_profile_price ltabpage_profile_price
u_tabpage_profile_shipping ltabpage_profile_shipping
u_tabpage_profile_import_waste ltabpage_profile_import_waste
userobject		l_obj
dwobject			ldwo

// Initialize
li_rc = gi_success
ldt_today = DateTime(Today(), Now())
ll_row_hdr = idw_header.getrow( )

// wf_price manages the tab pages.  It used to use an array of tab pages
// to do this, but then the array would get out of sync with the tab control
// tabpage array so i changed the code to use the tab control's own array since 
// pages move around now.
// rg 10/03/06.

li_last_tab = upperbound(itab_price.control)
li_last_tab_waste = upperbound(itab_import_waste.control)


// The purpose of this function is TO manage the price tabpages FOR the specified action
CHOOSE CASE UPPER(as_action)
	CASE "ACCEPTTEXT"
		FOR li_idx = 1 TO li_last_tab
			l_obj = itab_price.control[li_idx]
			IF IsValid(l_obj) THEN
				l_obj.Dynamic uof_acceptText()
			END IF
		NEXT
		
	CASE "AUDIT"
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					li_rc = ltabpage_profile_price.uof_audit(idt_save_date, idw_approval, 0, FALSE)
					IF li_rc <> gi_success THEN
						EXIT
					END IF
				END IF
			END IF
		NEXT
		
	CASE "CANCEL"
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					ltabpage_profile_price.uof_cancel()
					IF li_rc <> gi_success THEN
						EXIT
					END IF
				END IF
			END IF
		NEXT

		
	CASE "CLOSEPRICETABS"
		// Remove any previously defined tabs
		FOR li_idx = li_last_tab TO 1 STEP -1
			//ltabpage_profile_price = itab_price.control[li_idx]
			l_obj = itab_price.control[li_idx]
			IF IsValid(l_obj) THEN
				itab_price.CloseTab(l_obj)
			END IF
		NEXT
		
		// The first tab is shipping unit and frequency
		itab_price.OpenTabWithParm(ltabpage_profile_shipping, iw_profile, 0)	
		//DevOps:14710
	//	li_rc = idw_shipping_unit.ShareData( ltabpage_profile_shipping.dw_shipping_unit)
	IF ll_row_hdr > 0 THEN
	     ll_profile_id = idw_header.Object.profile_id[ll_row_hdr]
		  ltabpage_profile_shipping.dw_shipping_unit.SetTransObject(itr_share)
		 ltabpage_profile_shipping.dw_shipping_unit.Retrieve(ll_profile_id)
	END IF
		li_rc = idw_header.ShareData( ltabpage_profile_shipping.dw_shipping_frequency)
		// SK 02/13/13
		IF ll_row_hdr > 0 THEN 
			ltabpage_profile_shipping.dw_shipping_frequency.scrollToRow(ll_row_hdr)
			// add access for approved profiles
			ls_profile_status = idw_header.object.curr_status_code[ll_row_hdr]
			IF upper(ls_profile_status) = 'A' THEN
				ltabpage_profile_shipping.uof_access(is_access)
			END IF
			
			CHOOSE CASE Upper(is_access) 
				CASE 'N', 'V', 'P', 'B', 'L'
					// don't try autopopulating blank rows
				
				CASE ELSE
					if ltabpage_profile_shipping.dw_shipping_unit.RowCount() < 1 then
						ldwo = ltabpage_profile_shipping.dw_shipping_unit.Object.b_add_volume
						ltabpage_profile_shipping.dw_shipping_unit.Event buttonclicked (0, 0, ldwo)
					end if
			END CHOOSE
		END IF
		li_last_tab = 1

	CASE "COPY"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Make sure it doesn't already exist
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							li_rc = ltabpage_profile_price.uof_copy()
							EXIT
						END IF
					END IF
				end if
			NEXT
		END IF
		
	CASE "COPY_BILL_UNIT"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							ltabpage_profile_price.dw_approval.EVENT buttonclicked(ltabpage_profile_price.dw_approval.GetRow(), 0, ltabpage_profile_price.dw_approval.object.b_copy_bill_unit)
							EXIT
						END IF
					END IF
				end if
			NEXT
		END IF
	
	CASE "DISCARD"
	ll_row_approval = al_row_approval
	IF ll_row_approval > 0 THEN
		li_company_id = idw_approval.Object.company_id[ll_row_approval]
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
		
		// Find the tab for this facility
		ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")

		ls_facility_tabpage = ""
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
					IF ls_facility = ls_facility_tabpage THEN
						// Remove the prices
						ltabpage_profile_price.uof_discard(0, "A")
						
						// Remove the facility tab
						// rg100306 can't close tab because the datawindow will not update 
						// so disable tab and make it invisible
//						itab_price.CloseTab(ltabpage_profile_price)
						ltabpage_profile_price.visible = false
						ltabpage_profile_price.enabled = false
						itab_price.movetab(li_idx,0)
					END IF						
				END IF
			END IF
		NEXT
	END IF
		
		
	CASE "MODIFIEDCOUNT"
		ii_price_modifiedcount = 0
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				ii_price_modifiedcount =  ii_price_modifiedcount + ltabpage_profile_price.uof_modifiedcount()
			END IF
		NEXT
		
	CASE "NEW"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			ll_profile_id = idw_approval.Object.profile_id[ll_row_approval]
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			ls_access = wf_profile_access(li_company_id)
			
			// Make sure it doesn't already exist
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							EXIT
						END IF
					END IF
				end if
			NEXT
			// find the first non visible tab

			li_first_tab = 0
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = false THEN
						li_first_tab = li_idx
						EXIT
					END IF
				end if
			NEXT
			
			// Create a new tabpage for this facility
			IF ls_facility <> ls_facility_tabpage THEN
				itab_price.OpenTabWithParm(ltabpage_profile_price, iw_profile, li_first_tab)	
				IF IsValid(ltabpage_profile_price) THEN
					ltabpage_profile_price.uof_new(ls_access, li_company_id, li_profit_ctr_id)
					ltabpage_profile_price.uof_refresh(idw_approval, ll_row_approval)
					li_last_tab++
					itabpage_profile_price[li_last_tab] = ltabpage_profile_price
				END IF
			END IF
			
		END IF
		
	CASE "PRIMARYPRICE"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Make sure it doesn't already exist
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							li_rc = ltabpage_profile_price.uof_primary_price()
							EXIT
						END IF
					END IF
				end if 
			NEXT
		END IF

	CASE "READONLY_NO"
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					ltabpage_profile_price.uof_readonly("no")
				END IF
			END IF
		NEXT
		
	CASE "READONLY_YES"
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					ltabpage_profile_price.uof_readonly("yes")
				END IF
			END IF
		NEXT
		
	CASE "REFRESH"
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find the tab for this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							// Refresh
							ltabpage_profile_price.uof_refresh(idw_approval, ll_row_approval)
							EXIT
						END IF
					END IF
				end if
			NEXT
		NEXT
		
		CASE "REMOVE"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find the tab for this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							// Remove the prices
							ltabpage_profile_price.uof_delete(0, "A")
							
							// Remove the facility tab
							//rg100306 cant close tab becuase the daatwinodw wil not update 
							// so disbale tba and make ti invisible
	//						itab_price.CloseTab(ltabpage_profile_price)
							ltabpage_profile_price.visible = false
							ltabpage_profile_price.enabled = false
							itab_price.movetab(li_idx,0)
						END IF						
					END IF
				END IF
			NEXT
		END IF
		
		
	CASE "RESET"
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					ltabpage_profile_price.uof_reset()
				END IF
			END IF
		NEXT
		
	CASE "RESETCHANGEFLAGS"
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					ltabpage_profile_price.uof_reset_change_flags()
				END IF
			END IF
		NEXT
		
	CASE "RETRIEVE"
		// Remove any previously defined tabs
		FOR li_idx = li_last_tab TO 1 STEP -1
			l_obj = itab_price.control[li_idx]
			IF IsValid(l_obj) THEN
				itab_price.CloseTab(l_obj)
			END IF
		NEXT
		
		//The first tab is shipping unit and frequency
		itab_price.OpenTabWithParm(ltabpage_profile_shipping, iw_profile, 0)	
			//DevOps:14710
	   //	li_rc = idw_shipping_unit.ShareData( ltabpage_profile_shipping.dw_shipping_unit)
		IF ll_row_hdr > 0 THEN
			  ll_profile_id = idw_header.Object.profile_id[ll_row_hdr]
			  ltabpage_profile_shipping.dw_shipping_unit.SetTransObject(itr_share)
			 ltabpage_profile_shipping.dw_shipping_unit.Retrieve(ll_profile_id)
		END IF
		li_rc = idw_header.ShareData( ltabpage_profile_shipping.dw_shipping_frequency)
		// SK 02/13/13
		IF ll_row_hdr > 0 THEN 
			ltabpage_profile_shipping.dw_shipping_frequency.scrollToRow(ll_row_hdr)
			// add access for approved profiles
			ls_profile_status = idw_header.object.curr_status_code[ll_row_hdr]
			IF upper(ls_profile_status) = 'A' THEN
				ltabpage_profile_shipping.uof_access(is_access)
			END IF
		END IF
		
		IF ltabpage_profile_shipping.dw_shipping_unit.RowCount() < 1 THEN
			CHOOSE CASE Upper(is_access) 
				CASE 'N', 'V', 'P', 'B', 'L'
					// Don't add auto row
				
				CASE ELSE
					ldwo = ltabpage_profile_shipping.dw_shipping_unit.Object.b_add_volume
					ltabpage_profile_shipping.dw_shipping_unit.Event buttonclicked (0, 0, ldwo)
			END CHOOSE
		END IF
		
		// Create the price tabs
		li_first_tab = 1
		li_last_tab = 1
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			ll_profile_id = idw_approval.Object.profile_id[ll_row_approval]
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			ls_access = wf_profile_access(li_company_id)
		
			// Create a tab FOR this facility
			itab_price.OpenTabWithParm(ltabpage_profile_price, iw_profile, 0)	
			IF IsValid(ltabpage_profile_price) THEN
				ltabpage_profile_price.uof_refresh(idw_approval, ll_row_approval)
				ltabpage_profile_price.uof_retrieve(ls_access, ll_profile_id, li_company_id, li_profit_ctr_id)
				li_last_tab++
				itabpage_profile_price[li_last_tab] = ltabpage_profile_price
			END IF
			
			// Check access to this company
//			IF ls_access = 'N' THEN
//				ltabpage_profile_price.enabled = FALSE
//
//			ELSEIF ls_access = 'V' OR ls_access = 'A' OR ls_access = 'P' THEN
//				// Make it read only
//				ltabpage_profile_price.uof_readonly("yes")
//				IF li_first_tab = 0 THEN li_first_tab = ll_row_approval
//			ELSE
			IF li_first_tab = 0 THEN li_first_tab = ll_row_approval
//			END IF
		NEXT
				
		// Show the first tab
		IF li_last_tab <> 0 THEN
			itab_price.SelectTab(li_first_tab)
		END IF
		
	CASE "SETDATA"
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find the tab for this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							ltabpage_profile_price.uof_refresh(idw_approval, ll_row_approval)
							ltabpage_profile_price.uof_setdata(idt_save_date)
							EXIT
						END IF
					END IF
				end if
			NEXT
		NEXT
		
	CASE "SHOWPRICE"
			//DevOps:12644 - Added idw_approval loop instead of getrow
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
//			ll_row_approval = idw_approval.GetRow()
//			IF ll_row_approval > 0 THEN
//				li_company_id = idw_approval.Object.company_id[ll_row_approval]
//				li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
				
				// Find this facility
				ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
				ls_facility_tabpage = ""
				FOR li_idx = 2 TO li_last_tab
					ltabpage_profile_price = itab_price.control[li_idx]
					IF IsValid(ltabpage_profile_price) THEN
						IF ltabpage_profile_price.visible = true THEN
							ltabpage_profile_price.uof_set_po( is_po) //DevOps #14940 info_gde 04/09/2020;
							ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
							IF ls_facility = ls_facility_tabpage THEN
								//tab_1.tabpage_view.tab_2.tabpage_price.tab_price.SelectTab(ltabpage_profile_price)		//Devops 21596 & 58318-Added By Venu for lazy load implementation. (To avoid the auto selection of the approver tab) 														
								ltabpage_profile_price.uof_refresh(idw_approval, ll_row_approval)
							END IF
						END IF
					end if
				NEXT
//			END IF
		NEXT		
		//Devops 21596 & 58318-Commented/Modified By Venu for lazy load implementation.-Start													
		/*//DevOps:12644			
		// Show the first tab
		IF li_last_tab > 2  THEN
			itab_price.SelectTab(2)
		END IF */		
		IF li_last_tab > 2 and ii_pre_sel_tab_newindex > 2 THEN
			itab_price.SelectTab(ii_pre_sel_tab_newindex)
		Elseif 	li_last_tab > 2 Then
			itab_price.SelectTab(2)
		END IF
		//Devops 21596 & 58318-Commented/Modified By Venu for lazy load implementation.-End
	CASE "SURCHARGEPRICE"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							ltabpage_profile_price.uof_refresh(idw_approval, ll_row_approval)
							ltabpage_profile_price.uof_set_surcharge_price()
							EXIT
						END IF
					END IF
				end if
			NEXT
		END IF

	CASE "UPDATE"
		// update deleted tabs first deleted tabs are invisible
		FOR li_idx = li_last_tab TO 2 STEP -1
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = false THEN
					li_rc = ltabpage_profile_price.uof_update()
					
					IF li_rc <> gi_success THEN
						EXIT
// rb 12/27/2012
//					else
//						itab_price.closetab(ltabpage_profile_price)
					end if
				END IF
			end if
		next
		
		li_last_tab = upperbound(itab_price.control)
		
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					li_rc = ltabpage_profile_price.uof_update()
					IF li_rc <> gi_success THEN
						EXIT
					END IF
				END IF
			END IF
		NEXT		
	
	// rb 12/27/2012 Do this when all other DWs having ResetUpdate() called
	CASE "UPDATE_CLEANUP"
		FOR li_idx = li_last_tab TO 2 STEP -1
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = false THEN
					ltabpage_profile_price.uof_update_cleanup()
					itab_price.closetab(ltabpage_profile_price)
				END IF
			end if
		next
		
		li_last_tab = upperbound(itab_price.control)
		
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN
					ltabpage_profile_price.uof_update_cleanup()
				END IF
			END IF
		NEXT		
		
	CASE "VALIDATE"
		ls_msg = ""
		is_msg_validate_price = ""
		FOR li_idx = 1 TO li_last_tab
//			ltabpage_profile_price = itab_price.control[li_idx]
//			IF IsValid(ltabpage_profile_price) THEN
//				IF ltabpage_profile_price.visible = true THEN
//					ls_msg = ltabpage_profile_price.uof_validate()
//					is_msg_validate_price = is_msg_validate_price + ls_msg
//				END IF
//			END IF
			l_obj = itab_price.control[li_idx]
			IF IsValid(l_obj) THEN
				ls_msg = l_obj.dynamic uof_validate()
				// MPM - 8/13/2021 - DevOps 20914
				IF is_msg_validate_price > '' THEN is_msg_validate_price += '~r~n'
				is_msg_validate_price = is_msg_validate_price + ls_msg
				If l_obj.classname() = "u_tabpage_profile_shipping" Then
					is_msg_validate_shipping = is_msg_validate_shipping + ls_msg
				End If
			End IF
		NEXT
		
	CASE ELSE
		MessageBox(gs_app_name+": Profile Price", "Price Tab action is not valid.  Please contact I.T. Department.", Exclamation!)
END CHOOSE

RETURN li_rc

end function

public function integer wf_set_quote (long al_profile_id);boolean	lb_update_header = FALSE
datetime	ldt_startdate, ldt_null, ldt_confirm_date
integer	li_rc
long		ll_row_header, ll_row_quoteheader, ll_row, ll_quote_id, ll_revision, ll_next_quote_id
long		ll_company_id, ll_profit_ctr_id, ll_treatment_id, ll_customer_id, ll_user_id, ll_null
long		ll_generator_id, ll_i
long		ll_row_find, ll_rowcount
string	ls_waste_code, ls_bill_unit_code, ls_approval_code
string	ls_cust_name, ls_cust_addr1, ls_cust_addr2, ls_cust_addr3, ls_cust_addr4, ls_cust_addr5
string	ls_cust_phone, ls_cust_fax, ls_gen_name, ls_gen_phone, ls_gen_fax
string	ls_gen_addr1, ls_gen_addr2, ls_gen_addr3, ls_gen_addr4, ls_gen_addr5, ls_gen_EPA_ID
string	ls_gen_contact, ls_null, ls_confirm_author, ls_confirm_by, ls_filter, ls_primary_facility
string	ls_company, ls_addr1, ls_addr2, ls_addr3, ls_phone, ls_fax, ls_treatment_desc
string	ls_find
dwItemStatus	ldwItemStatus

// Must have valid rows
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN 0
ll_row_quoteheader = idw_quoteheader.GetRow()
IF ll_row_quoteheader <= 0 THEN RETURN 0

// Initialize
SetNull(ls_null)
SetNull(ll_null)
SetNull(ldt_null)
ldt_startdate = DateTime(Today())

///////////////////////////////////////////////////////////////////////
// Profile QuoteHeader
///////////////////////////////////////////////////////////////////////
IF IsNull(idw_quoteheader.Object.quote_id[ll_row_quoteheader]) OR &
	idw_quoteheader.Object.quote_id[ll_row_quoteheader] = 0 THEN
	// Get a new Quote ID
	ll_quote_id = f_sequence("QuoteHeader.quote_id")
	ll_revision = 0
ELSE
	ll_quote_id = idw_quoteheader.Object.quote_id[ll_row_quoteheader]
	ll_revision = idw_quoteheader.Object.quote_revision[ll_row_quoteheader]
END IF

// Get Customer Info
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
IF IsNull(ll_customer_id) THEN
	ls_cust_name = idw_header.Object.pending_customer_name[ll_row_header]
	ls_cust_addr1 = ls_null
	ls_cust_addr2 = ls_null
	ls_cust_addr3 = ls_null
	ls_cust_addr4 = ls_null
	ls_cust_addr5 = ls_null
	ls_cust_phone = ls_null
	ls_cust_fax	= ls_null
ELSE	
	SELECT cust_name, 
		cust_addr1, 
		cust_addr2, 
		cust_addr3, 
		cust_addr4, 
		cust_addr5 = RTrim(CASE WHEN (cust_city + ', ' + cust_state + ' ' + IsNull(cust_zip_code, '')) IS NULL
			THEN 'Missing City, State, and ZipCode' 
			ELSE (cust_city + ', ' + cust_state + ' ' + IsNull(cust_zip_code, '')) END), 	
		cust_phone, 
		cust_fax
	INTO :ls_cust_name, 
		:ls_cust_addr1, 
		:ls_cust_addr2, 
		:ls_cust_addr3, 
		:ls_cust_addr4, 
		:ls_cust_addr5, 
		:ls_cust_phone, 
		:ls_cust_fax
	FROM Customer
	WHERE customer_id = :ll_customer_id 
	USING itr_share;
END IF

// Get Generator Info
ll_generator_id = idw_header.Object.generator_id[ll_row_header]
IF IsNull(ll_generator_id) THEN
	ls_gen_name = idw_header.Object.pending_generator_name[ll_row_header]
	ls_gen_addr1 = ''
	ls_gen_addr2 = ''
	ls_gen_addr3 = ''

	ls_gen_addr4 = ''
	ls_gen_addr5 = ''
	ls_gen_phone = ''
	ls_gen_fax = ''
	ls_gen_contact = ''
	ls_gen_EPA_ID = ''
ELSE
	// MPM - 6/28/2019 - DevOps bug 12084 - Made the join to the Contact tables outer joins for Winnie.
	SELECT IsNull(generator_name, ''),
		IsNull(generator_address_1, ''),
		IsNull(generator_address_2, ''),
		IsNull(generator_address_3, ''),
		IsNull(generator_address_4, ''), 
		generator_address_5 = RTrim(CASE WHEN (generator_city + ', ' + generator_state + ' ' + IsNull(generator_zip_code, '')) IS NULL
			THEN 'Missing City, State, and ZipCode' 
			ELSE (generator_city + ', ' + generator_state + ' ' + IsNull(generator_zip_code, '')) END),
		IsNull(generator_phone, ''),
		IsNull(generator_fax, ''),
		IsNull(Contact.name, '') ,
		IsNull(EPA_ID,'')
	INTO :ls_gen_name, 
		:ls_gen_addr1, 
		:ls_gen_addr2, 
		:ls_gen_addr3, 
		:ls_gen_addr4, 
		:ls_gen_addr5, 
		:ls_gen_phone, 
		:ls_gen_fax, 
		:ls_gen_contact, 
		:ls_gen_EPA_ID
	FROM generator
	LEFT OUTER JOIN ContactXRef
		ON ContactXRef.generator_id = Generator.generator_id
		AND ContactXRef.type = 'G'
		and ContactXRef.primary_contact = 'T' 
	LEFT OUTER JOIN Contact
  		ON Contact.contact_id = ContactXRef.contact_id
	WHERE Generator.generator_id = :ll_generator_id
	USING itr_share;
END IF

// Get Waste Code
ls_waste_code = idw_header.Object.waste_code[ll_row_header]

// Set new values
IF IsNull(idw_quoteheader.Object.profile_id[ll_row_quoteheader]) OR &
	idw_quoteheader.Object.profile_id[ll_row_quoteheader] = 0 THEN
	idw_quoteheader.Object.profile_id[ll_row_quoteheader] = al_profile_id
END IF
IF IsNull(idw_quoteheader.Object.quote_id[ll_row_quoteheader]) OR &
	idw_quoteheader.Object.quote_id[ll_row_quoteheader] = 0 THEN
	idw_quoteheader.Object.quote_id[ll_row_quoteheader] = ll_quote_id
END IF
IF IsNull(idw_quoteheader.Object.quote_revision[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.quote_revision[ll_row_quoteheader] = ll_revision
END IF
IF IsNull(idw_quoteheader.Object.curr_status_code[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.curr_status_code[ll_row_quoteheader] = 'A'
END IF
IF IsNull(idw_quoteheader.Object.customer_id[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_id[ll_row_quoteheader] <> ll_customer_id THEN
	idw_quoteheader.Object.customer_id[ll_row_quoteheader] = ll_customer_id
END IF
IF IsNull(idw_quoteheader.Object.quote_type[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.quote_type[ll_row_quoteheader] = 'D'
END IF
IF IsNull(idw_quoteheader.Object.start_date[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.start_date[ll_row_quoteheader] = ldt_startdate
END IF
IF IsNull(idw_quoteheader.Object.customer_name[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_name[ll_row_quoteheader] <> ls_cust_name THEN
	idw_quoteheader.Object.customer_name[ll_row_quoteheader] = ls_cust_name
END IF
IF IsNull(idw_quoteheader.Object.customer_addr1[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_addr1[ll_row_quoteheader] <> ls_cust_addr1 THEN
	idw_quoteheader.Object.customer_addr1[ll_row_quoteheader] = ls_cust_addr1
END IF
IF IsNull(idw_quoteheader.Object.customer_addr2[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_addr2[ll_row_quoteheader] <> ls_cust_addr2 THEN
	idw_quoteheader.Object.customer_addr2[ll_row_quoteheader] = ls_cust_addr2
END IF
IF IsNull(idw_quoteheader.Object.customer_addr3[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_addr3[ll_row_quoteheader] <> ls_cust_addr3 THEN
	idw_quoteheader.Object.customer_addr3[ll_row_quoteheader] = ls_cust_addr3
END IF
IF IsNull(idw_quoteheader.Object.customer_addr4[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_addr4[ll_row_quoteheader] <> ls_cust_addr4 THEN
	idw_quoteheader.Object.customer_addr4[ll_row_quoteheader] = ls_cust_addr4
END IF
IF IsNull(idw_quoteheader.Object.customer_addr5[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_addr5[ll_row_quoteheader] <> ls_cust_addr5 THEN
	idw_quoteheader.Object.customer_addr5[ll_row_quoteheader] = ls_cust_addr5
END IF
IF IsNull(idw_quoteheader.Object.customer_phone[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_phone[ll_row_quoteheader] <> ls_cust_phone THEN
	IF Len ( ls_cust_phone ) >  20 THEN
	    ls_cust_phone = Left (ls_cust_phone,20)
	END IF
	idw_quoteheader.Object.customer_phone[ll_row_quoteheader] = ls_cust_phone
END IF
IF IsNull(idw_quoteheader.Object.customer_fax[ll_row_quoteheader]) or &
	idw_quoteheader.Object.customer_fax[ll_row_quoteheader] <> ls_cust_fax THEN
	idw_quoteheader.Object.customer_fax[ll_row_quoteheader] = ls_cust_fax
END IF
IF IsNull(idw_quoteheader.Object.generator_id[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_id[ll_row_quoteheader] <> ll_generator_id THEN
	idw_quoteheader.Object.generator_id[ll_row_quoteheader] = ll_generator_id
END IF
IF IsNull(idw_quoteheader.Object.generator_name[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_name[ll_row_quoteheader] <> ls_gen_name THEN
	idw_quoteheader.Object.generator_name[ll_row_quoteheader] = Left(ls_gen_name, 40)
END IF
IF IsNull(idw_quoteheader.Object.generator_addr1[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_addr1[ll_row_quoteheader] <> ls_gen_addr1 THEN
	idw_quoteheader.Object.generator_addr1[ll_row_quoteheader] = Left(ls_gen_addr1, 40)
END IF
IF IsNull(idw_quoteheader.Object.generator_addr2[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_addr2[ll_row_quoteheader] <> ls_gen_addr2 THEN
	idw_quoteheader.Object.generator_addr2[ll_row_quoteheader] = Left(ls_gen_addr2, 40)
END IF
IF IsNull(idw_quoteheader.Object.generator_addr3[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_addr3[ll_row_quoteheader] <> ls_gen_addr3 THEN
	idw_quoteheader.Object.generator_addr3[ll_row_quoteheader] = Left(ls_gen_addr3, 40)
END IF
IF IsNull(idw_quoteheader.Object.generator_addr4[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_addr4[ll_row_quoteheader] <> ls_gen_addr4 THEN
	idw_quoteheader.Object.generator_addr4[ll_row_quoteheader] = Left(ls_gen_addr4, 40)
END IF
IF IsNull(idw_quoteheader.Object.generator_addr5[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_addr5[ll_row_quoteheader] <> ls_gen_addr5 THEN
	idw_quoteheader.Object.generator_addr5[ll_row_quoteheader] = Left(ls_gen_addr5, 40)
END IF
IF IsNull(idw_quoteheader.Object.generator_phone[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_phone[ll_row_quoteheader] <> ls_gen_phone THEN
	idw_quoteheader.Object.generator_phone[ll_row_quoteheader] = ls_gen_phone
END IF
IF IsNull(idw_quoteheader.Object.generator_fax[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_fax[ll_row_quoteheader] <> ls_gen_fax THEN
	idw_quoteheader.Object.generator_fax[ll_row_quoteheader] = ls_gen_fax
END IF
IF IsNull(idw_quoteheader.Object.generator_contact[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_contact[ll_row_quoteheader] <> ls_gen_contact THEN
	idw_quoteheader.Object.generator_contact[ll_row_quoteheader] = ls_gen_contact
END IF
IF IsNull(idw_quoteheader.Object.generator_EPA_ID[ll_row_quoteheader]) or &
	idw_quoteheader.Object.generator_EPA_ID[ll_row_quoteheader] <> ls_gen_EPA_ID THEN
	idw_quoteheader.Object.generator_EPA_ID[ll_row_quoteheader] = ls_gen_EPA_ID
END IF
IF IsNull(idw_quoteheader.Object.waste_code[ll_row_quoteheader]) or &
	idw_quoteheader.Object.waste_code[ll_row_quoteheader] <> ls_waste_code THEN
	idw_quoteheader.Object.waste_code[ll_row_quoteheader] = ls_waste_code
END IF
IF IsNull(idw_quoteheader.Object.print_confirm_flag[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.print_confirm_flag[ll_row_quoteheader]= 'F'
END IF
IF IsNull(idw_quoteheader.Object.print_gen_flag[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.print_gen_flag[ll_row_quoteheader]= 'F'
END IF
IF IsNull(idw_quoteheader.Object.fax_flag[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.fax_flag[ll_row_quoteheader]= 'F'
END IF
IF IsNull(idw_quoteheader.Object.added_by[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.added_by[ll_row_quoteheader]= gs_user_id
END IF
IF IsNull(idw_quoteheader.Object.date_added[ll_row_quoteheader]) THEN
	idw_quoteheader.Object.date_added[ll_row_quoteheader]= idt_save_date
END IF


///////////////////////////////////////////////////////////////////////
// Profile Approvals
///////////////////////////////////////////////////////////////////////
FOR ll_row = 1 TO idw_approval.RowCount()
	IF IsNull(idw_approval.Object.profile_id[ll_row]) OR &
		idw_approval.Object.profile_id[ll_row] = 0 THEN
		idw_approval.Object.profile_id[ll_row] = al_profile_id
	END IF
	
	IF IsNull(idw_approval.Object.quote_id[ll_row]) OR &
		idw_approval.Object.quote_id[ll_row] = 0 THEN
		idw_approval.Object.quote_id[ll_row] = ll_quote_id
	END IF
	
	IF IsNull(idw_approval.Object.approval_code[ll_row]) OR &
		Trim(idw_approval.Object.approval_code[ll_row]) = "TBD" THEN
		idw_approval.Object.approval_code[ll_row] = "TBD_" + String(al_profile_id)
	END IF
	
	IF IsNull(idw_approval.Object.purchase_order[ll_row]) THEN
		idw_approval.Object.purchase_order[ll_row] = ""
	END IF

	IF IsNull(idw_approval.Object.release[ll_row]) THEN
		idw_approval.Object.release[ll_row] = ""
	END IF

	// Check if we need to unconfirm this approval
//	ls_confirm_author = idw_approval.Object.confirm_author[ll_row]
//	IF ib_unconfirm AND NOT IsNull(ls_confirm_author) THEN
//		idw_approval.Object.confirm_author[ll_row] = ls_null
//		idw_approval.Object.confirm_update_by[ll_row] = ls_null
//		idw_approval.Object.confirm_update_date[ll_row] = ldt_null
//	END IF
	
	IF IsNull(idw_approval.Object.added_by[ll_row]) THEN
		idw_approval.Object.added_by[ll_row]= gs_user_id
	END IF
	IF IsNull(idw_approval.Object.date_added[ll_row]) THEN
		idw_approval.Object.date_added[ll_row]= idt_save_date
	END IF

	// Check modification status
	ldwItemStatus = idw_approval.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = NewModified! OR ldwItemStatus = DataModified! OR &
		IsNull(idw_approval.Object.modified_by[ll_row]) THEN
		idw_approval.Object.modified_by[ll_row] = gs_user_id
		idw_approval.Object.date_modified[ll_row] = idt_save_date
	END IF
NEXT

// Set data on prices
wf_price("SETDATA", ll_row)

wf_import_waste("SETDATA", ll_row)

RETURN 1
end function

public function long wf_set_profile (integer al_row);// The purpose of this function is to set critical info on all Profile components
dwItemStatus ldwItemStatus
int		li_rc,i
long		ll_row, ll_profile_id, ll_count, ll_revision, ll_row_quoteheader, ll_quote_id,ll_rev_id_wcr
long		ll_row_find, ll_primary_company_id, ll_primary_profit_ctr_id,ll_image_id,ll_form_id_wcr
string	ls_bill_unit_code, ls_find

IF al_row <= 0 THEN RETURN gi_no_action

IF idw_header.GetRow() <= 0 Then Return gi_no_action

// Get the profile ID
ll_profile_id = idw_header.Object.profile_id[al_row]

// Get a new Profile ID
IF IsNull(ll_profile_id) OR ll_profile_id <= 0 THEN
	ll_profile_id = f_sequence("Profile.profile_id")
	idw_header.Object.profile_id[al_row] = ll_profile_id
END IF

IF IsNull(idw_header.Object.date_added[al_row]) THEN
	idw_header.Object.date_added[al_row] = idt_save_date

	idw_header.Object.added_by[al_row] = gs_user_id
END IF

// Update Profile
IF wf_ModifiedCount_profile() > 0  OR &
	IsNull(idw_header.Object.date_modified[al_row]) THEN
	idw_header.Object.date_modified[al_row] = idt_save_date
	idw_header.Object.modified_by[al_row] = gs_user_id
END IF	
	
// Update Tracking
FOR ll_row = 1 TO idw_tracking.RowCount()
	IF IsNull(idw_tracking.Object.profile_id[ll_row]) OR &
		idw_tracking.Object.profile_id[ll_row] <= 0 THEN
		idw_tracking.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_tracking.Object.date_added[ll_row]) THEN
		idw_tracking.Object.date_added[ll_row] = idt_save_date
		idw_tracking.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_tracking.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_tracking.Object.date_modified[ll_row]) THEN
		idw_tracking.Object.date_modified[ll_row] = idt_save_date
		idw_tracking.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// Update Technical
FOR ll_row = 1 TO idw_technical.RowCount()
	IF IsNull(idw_technical.Object.profile_id[ll_row]) OR &
		idw_technical.Object.profile_id[ll_row] <= 0 THEN
		idw_technical.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_technical.Object.date_added[ll_row]) THEN
		idw_technical.Object.date_added[ll_row] = idt_save_date
		idw_technical.Object.added_by[ll_row] = gs_user_id
	END IF


	ldwItemStatus = idw_technical.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_technical.Object.date_modified[ll_row]) THEN
		idw_technical.Object.date_modified[ll_row] = idt_save_date
		idw_technical.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// Update Lab
FOR ll_row = 1 TO idw_lab.RowCount()
	IF IsNull(idw_lab.Object.profile_id[ll_row]) OR &
		idw_lab.Object.profile_id[ll_row] <= 0 THEN
		idw_lab.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_lab.Object.date_added[ll_row]) THEN
		idw_lab.Object.date_added[ll_row] = idt_save_date
		idw_lab.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_lab.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_lab.Object.date_modified[ll_row]) THEN
		idw_lab.Object.date_modified[ll_row] = idt_save_date
		idw_lab.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// Set Quote Info
ll_row_quoteheader = idw_quoteheader.GetRow()
IF ll_row_quoteheader > 0 THEN
	wf_set_quote(ll_profile_id)
	ll_count = wf_modifiedcount_quote()
	IF ll_count > 0 THEN
		ll_quote_id = idw_quoteheader.Object.quote_id[ll_row_quoteheader]
		ll_revision = idw_quoteheader.Object.quote_revision[ll_row_quoteheader]
		IF ll_revision > 0 THEN
			idw_quoteheader.Object.quote_revision[ll_row_quoteheader] = ll_revision + 1
		END IF
		idw_quoteheader.Object.modified_by[ll_row_quoteheader] = gs_user_id
		idw_quoteheader.Object.date_modified[ll_row_quoteheader] = idt_save_date
		
		// Set Profile fields with Quote Info
		IF IsNull(idw_header.Object.quote_id[al_row]) OR &
			idw_header.Object.quote_id[al_row] <> ll_quote_id THEN
			idw_header.Object.quote_id[al_row] = ll_quote_id
		END IF
	END IF
END IF

// Update Waste Codes
FOR ll_row = 1 TO idw_waste_code_fed.RowCount()
	IF IsNull(idw_waste_code_fed.Object.profile_id[ll_row]) OR &
		idw_waste_code_fed.Object.profile_id[ll_row] <= 0 THEN
		idw_waste_code_fed.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_waste_code_fed.Object.date_added[ll_row]) THEN
		idw_waste_code_fed.Object.date_added[ll_row] = idt_save_date
		idw_waste_code_fed.Object.added_by[ll_row] = gs_user_id
	END IF
NEXT
FOR ll_row = 1 TO idw_waste_code_state.RowCount()
	IF IsNull(idw_waste_code_state.Object.profile_id[ll_row]) OR &
		idw_waste_code_state.Object.profile_id[ll_row] <= 0 THEN
		idw_waste_code_state.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_waste_code_state.Object.date_added[ll_row]) THEN
		idw_waste_code_state.Object.date_added[ll_row] = idt_save_date
		idw_waste_code_state.Object.added_by[ll_row] = gs_user_id
	END IF
NEXT
FOR ll_row = 1 TO idw_waste_code_eq.RowCount()
	IF IsNull(idw_waste_code_eq.Object.profile_id[ll_row]) OR &
		idw_waste_code_eq.Object.profile_id[ll_row] <= 0 THEN
		idw_waste_code_eq.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_waste_code_eq.Object.date_added[ll_row]) THEN
		idw_waste_code_eq.Object.date_added[ll_row] = idt_save_date
		idw_waste_code_eq.Object.added_by[ll_row] = gs_user_id
	END IF
NEXT

// Update Constituents
idw_const.SetFilter('')
idw_const.Filter()
FOR ll_row = 1 TO idw_const.RowCount()
	IF IsNull(idw_const.Object.profile_id[ll_row]) OR &
		idw_const.Object.profile_id[ll_row] <= 0 THEN
		idw_const.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_const.Object.date_added[ll_row]) THEN
		idw_const.Object.date_added[ll_row] = idt_save_date
		idw_const.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_const.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_const.Object.date_modified[ll_row]) THEN
		idw_const.Object.date_modified[ll_row] = idt_save_date
		idw_const.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// Update Composition
FOR ll_row = 1 TO idw_composition.RowCount()
	ldwItemStatus = idw_composition.getItemStatus( ll_row, 0, Primary!)
	IF ldwItemStatus <> New! Then
		// MPM - 11/30/2020 - DevOps 18101 - Users can now save a composition row if the description is null
//		IF NOT IsNull(idw_composition.Object.comp_description[ll_row]) THEN
			// this row qualifies for save, so set profile and added, moidified info if reqd
			IF IsNull(idw_composition.Object.profile_id[ll_row]) OR idw_composition.Object.profile_id[ll_row] <= 0 THEN
				idw_composition.Object.profile_id[ll_row] = ll_profile_id
			END IF
			IF IsNull(idw_composition.Object.date_added[ll_row]) THEN
				idw_composition.Object.date_added[ll_row] = idt_save_date
				idw_composition.Object.added_by[ll_row] = gs_user_id
			END IF
			IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! THEN
				idw_composition.Object.date_modified[ll_row] = idt_save_date
				idw_composition.Object.modified_by[ll_row] = gs_user_id
			END IF	
//		END IF
	END IF
NEXT

// 08/06/2012 Update LDR Subcategory
FOR ll_row = 1 TO idw_ldr_subcategory.RowCount()
	ldwItemStatus = idw_ldr_subcategory.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus <> New! Then
		IF NOT IsNull(idw_ldr_subcategory.Object.ldr_subcategory_id[ll_row]) THEN
			// this row qualifies for save, so set profile and added, moidified info if reqd
			IF IsNull(idw_ldr_subcategory.Object.profile_id[ll_row]) OR idw_ldr_subcategory.Object.profile_id[ll_row] <= 0 THEN
				idw_ldr_subcategory.Object.profile_id[ll_row] = ll_profile_id
			END IF
			IF IsNull(idw_ldr_subcategory.Object.date_added[ll_row]) THEN
				idw_ldr_subcategory.Object.date_added[ll_row] = idt_save_date
				idw_ldr_subcategory.Object.added_by[ll_row] = gs_user_id
			END IF
			IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! THEN
				idw_ldr_subcategory.Object.date_modified[ll_row] = idt_save_date
				idw_ldr_subcategory.Object.modified_by[ll_row] = gs_user_id
			END IF
		END IF
	END IF
NEXT

// 05/25/2012 SK Tab page Form Availability is NOT USED, HIDDEN
// Update Form Availability
//FOR ll_row = 1 TO idw_form_availability.RowCount()
//	IF IsNull(idw_form_availability.Object.profile_id[ll_row]) OR &
//		idw_form_availability.Object.profile_id[ll_row] <= 0 THEN
//		idw_form_availability.Object.profile_id[ll_row] = ll_profile_id
//	END IF
//NEXT

// rb Update rules tab
FOR ll_row = 1 TO idw_rules.RowCount()
	IF IsNull(idw_rules.Object.profile_id[ll_row]) OR &
		idw_rules.Object.profile_id[ll_row] <= 0 THEN
		idw_rules.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_rules.Object.date_added[ll_row]) THEN
		idw_rules.Object.date_added[ll_row] = idt_save_date
		idw_rules.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_rules.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_rules.Object.date_modified[ll_row]) THEN
		idw_rules.Object.date_modified[ll_row] = idt_save_date
		idw_rules.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// rb Update category tab
FOR ll_row = 1 TO idw_category.RowCount()
	IF IsNull(idw_category.Object.profile_id[ll_row]) OR &
		idw_category.Object.profile_id[ll_row] <= 0 THEN
		idw_category.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_category.Object.date_added[ll_row]) THEN
		idw_category.Object.date_added[ll_row] = idt_save_date
		idw_category.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_category.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_category.Object.date_modified[ll_row]) THEN
		idw_category.Object.date_modified[ll_row] = idt_save_date
		idw_category.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// recipe
FOR ll_row = 1 TO idw_recipe_update.RowCount()
	IF IsNull(idw_recipe_update.Object.profile_id[ll_row]) OR &
		idw_recipe_update.Object.profile_id[ll_row] <= 0 THEN
		idw_recipe_update.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_recipe_update.Object.date_added[ll_row]) THEN
		idw_recipe_update.Object.date_added[ll_row] = idt_save_date
		idw_recipe_update.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_recipe_update.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_recipe_update.Object.date_modified[ll_row]) THEN
		idw_recipe_update.Object.date_modified[ll_row] = idt_save_date
		idw_recipe_update.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT


FOR ll_row = 1 TO idw_site_type.RowCount()
	IF IsNull(idw_site_type.Object.profile_id[ll_row]) OR &
		idw_site_type.Object.profile_id[ll_row] <= 0 THEN
		idw_site_type.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_site_type.Object.date_added[ll_row]) THEN
		idw_site_type.Object.date_added[ll_row] = idt_save_date
		idw_site_type.Object.added_by[ll_row] = gs_user_id
	END IF
	
NEXT

// agc 10/14/19 temp comment out
////DevOps 10373
//FOR ll_row = 1 TO idw_generator_locations.RowCount()
//	IF IsNull(idw_generator_locations.Object.profile_id[ll_row]) OR &
//		idw_generator_locations.Object.profile_id[ll_row] <= 0 THEN
//		idw_generator_locations.Object.profile_id[ll_row] = ll_profile_id
//	END IF
//	IF IsNull(idw_generator_locations.Object.date_added[ll_row]) THEN
//		idw_generator_locations.Object.date_added[ll_row] = idt_save_date
//		idw_generator_locations.Object.added_by[ll_row] = gs_user_id
//	END IF
//NEXT

// rb 04/27/2012 Shipping Unit
FOR ll_row = 1 TO idw_shipping_unit.RowCount()
	ldwItemStatus = idw_shipping_unit.GetItemStatus(ll_row, 0, Primary!)
	IF IsNull(idw_shipping_unit.Object.profile_id[ll_row]) OR &
		idw_shipping_unit.Object.profile_id[ll_row] <= 0 THEN
		IF ldwItemStatus <> New! Then
			idw_shipping_unit.Object.profile_id[ll_row] = ll_profile_id
			IF IsNull(idw_shipping_unit.Object.date_added[ll_row]) THEN
				idw_shipping_unit.Object.date_added[ll_row] = idt_save_date
				idw_shipping_unit.Object.added_by[ll_row] = gs_user_id
			END IF
		End IF
	END IF
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! THEN
		idw_shipping_unit.Object.date_modified[ll_row] = idt_save_date
		idw_shipping_unit.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// SK 06/06/2012 Profile WCR Facility
//FOR ll_row = 1 TO idw_profile_wcr_facility.RowCount()
//	IF IsNull(idw_profile_wcr_facility.Object.profile_id[ll_row]) OR &
//		idw_profile_wcr_facility.Object.profile_id[ll_row] <= 0 THEN
//		idw_profile_wcr_facility.Object.profile_id[ll_row] = ll_profile_id
//	END IF
//NEXT
//

// SK 09/10/2012 generator contact
FOR ll_row = 1 TO idw_profile_gen_contact_form.RowCount()
	ldwItemStatus = idw_profile_gen_contact_form.getItemStatus( ll_row, 0, Primary!)
	IF IsNull(idw_profile_gen_contact_form.Object.profile_id[ll_row]) OR &
		idw_profile_gen_contact_form.Object.profile_id[ll_row] <= 0 THEN
		IF ldwItemStatus <> New! Then
			idw_profile_gen_contact_form.Object.profile_id[ll_row] = ll_profile_id
			idw_profile_gen_contact_form.object.contact_type[ll_row] = 'Technical'
			IF IsNull(idw_profile_gen_contact_form.Object.date_added[ll_row]) THEN
				idw_profile_gen_contact_form.Object.date_added[ll_row] = idt_save_date
				idw_profile_gen_contact_form.Object.added_by[ll_row] = gs_user_id
			END IF
		End IF
	END IF
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! THEN
		idw_profile_gen_contact_form.Object.date_modified[ll_row] = idt_save_date
		idw_profile_gen_contact_form.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// SK 09/10/2012 invoicing contact
FOR ll_row = 1 TO idw_wcr_display_3.RowCount()
	ldwItemStatus = idw_wcr_display_3.GetItemStatus(ll_row, 0, Primary!)
	IF IsNull(idw_wcr_display_3.Object.profile_id[ll_row]) OR &
		idw_wcr_display_3.Object.profile_id[ll_row] <= 0 THEN
		IF ldwItemStatus <> New! THEN
			idw_wcr_display_3.Object.profile_id[ll_row] = ll_profile_id
			idw_wcr_display_3.object.contact_type[ll_row] = 'Invoicing'
			IF IsNull(idw_wcr_display_3.Object.date_added[ll_row]) THEN
				idw_wcr_display_3.Object.date_added[ll_row] = idt_save_date
				idw_wcr_display_3.Object.added_by[ll_row] = gs_user_id
			END IF
		End IF
	END IF
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! THEN
		idw_wcr_display_3.Object.date_modified[ll_row] = idt_save_date
		idw_wcr_display_3.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// SK 09/10/2012 technical contact
//FOR ll_row = 1 TO idw_wcr_display_4.RowCount()
//	ldwItemStatus = idw_wcr_display_4.getItemStatus( ll_row, 0, Primary!)
//	IF IsNull(idw_wcr_display_4.Object.profile_id[ll_row]) OR &
//		idw_wcr_display_4.Object.profile_id[ll_row] <= 0 THEN
//		IF ldwItemStatus <> New! Then
//			idw_wcr_display_4.Object.profile_id[ll_row] = ll_profile_id
//			idw_wcr_display_4.object.contact_type[ll_row] = 'Technical'
//			IF IsNull(idw_wcr_display_4.Object.date_added[ll_row]) THEN
//				idw_wcr_display_4.Object.date_added[ll_row] = idt_save_date
//				idw_wcr_display_4.Object.added_by[ll_row] = gs_user_id
//			END IF
//		End IF
//	END IF
//	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! THEN
//		idw_wcr_display_4.Object.date_modified[ll_row] = idt_save_date
//		idw_wcr_display_4.Object.modified_by[ll_row] = gs_user_id
//	END IF		
//NEXT

// COR2-MPM
// Container size
FOR ll_row = 1 TO idw_wcr_display_5.RowCount()
	ldwItemStatus = idw_wcr_display_5.getItemStatus( ll_row, 0, Primary!)
	IF IsNull(idw_wcr_display_5.Object.profile_id[ll_row]) OR &
		idw_wcr_display_5.Object.profile_id[ll_row] <= 0 THEN
		IF ldwItemStatus <> New! Then
			idw_wcr_display_5.Object.profile_id[ll_row] = ll_profile_id
			IF IsNull(idw_wcr_display_5.Object.date_added[ll_row]) THEN
				idw_wcr_display_5.Object.date_added[ll_row] = idt_save_date
				idw_wcr_display_5.Object.added_by[ll_row] = gs_user_id
			END IF
		End IF
	END IF
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! THEN
		idw_wcr_display_5.Object.date_modified[ll_row] = idt_save_date
		idw_wcr_display_5.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

IF Isvalid(ids_form_wcr) THEN
	ll_row = ids_form_wcr.getrow()
	//DevOps 17429 info_gde 10/12/2020; PROD EQAI - URGENT - PowerBuilder Error - Profile Tracking
	if ll_row>0 then
		ll_form_id_wcr = ids_form_wcr.Object.form_id [ll_row]
		ll_rev_id_wcr = ids_form_wcr.Object.revision_id [ll_row]
	end if
	//ll_form_id_wcr = ids_form_wcr.Object.form_id [ll_row]
	//	ll_rev_id_wcr = ids_form_wcr.Object.revision_id [ll_row]
	IF ll_row > 0 THEN
		IF IsNull(ids_form_wcr.object.profile_id[ll_row]) THEN
			ids_form_wcr.object.profile_id[ll_row] = ll_profile_id
		END IF
//		ids_form_wcr.object.date_modified[ll_row] = idt_save_date
//		ids_form_wcr.object.modified_by[ll_row] = gs_user_id
	END IF
END IF

IF Isvalid(ids_scan_wcr) THEN
	
//	DECLARE wcr_scan_cursor CURSOR FOR  
//	
//	SELECT image_id
//	FROM SCAN
//	WHERE form_id = :ll_form_id_wcr
//	AND revision_id = :ll_rev_id_wcr
//	AND form_type = 'WCR'
//	USING itr_image;
//
//	OPEN wcr_scan_cursor;
//			DO WHILE itr_image.SQLCode = 0
//				FETCH wcr_scan_cursor INTO :ll_image_id;
//				
//			IF ll_image_id > 0 THEN 
//				IF NOT ISValid(ids_scan_wcr) THEN
//					ids_scan_wcr = CREATE Datastore
//					ids_scan_wcr.dataobject = 'd_scan'
//					ids_scan_wcr.SetTransObject(itr_image)
//				END IF
//				ll_row = ids_scan_wcr.retrieve(ll_image_id)
//				IF ll_row > 0 THEN 
//					ids_scan_wcr.object.profile_id[ll_row] = ll_profile_id
//				END IF
//			END IF
//			
//	LOOP
//	CLOSE wcr_scan_cursor;	
//END IF
//
	ll_row =  ids_scan_wcr.RowCount() // ids_scan_wcr.getrow()
	FOR i = 1 TO ids_scan_wcr.RowCount()
//   IF ll_row > 0 THEN
		IF IsNull(ids_scan_wcr.object.profile_id[i]) THEN
			ids_scan_wcr.object.profile_id[i] = ll_profile_id
		END IF
//	END IF
//
NEXT
END IF

// MPM - DevOps task 10098 - Added the following to fix this problem:
// Update Requested WCR Facility
FOR ll_row = 1 TO idw_wcr_facility.RowCount()
	IF IsNull(idw_wcr_facility.Object.profile_id[ll_row]) OR &
		idw_wcr_facility.Object.profile_id[ll_row] <= 0 THEN
		idw_wcr_facility.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_wcr_facility.Object.date_added[ll_row]) THEN
		idw_wcr_facility.Object.date_added[ll_row] = idt_save_date
		idw_wcr_facility.Object.added_by[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_wcr_facility.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_wcr_facility.Object.date_modified[ll_row]) THEN
		idw_wcr_facility.Object.date_modified[ll_row] = idt_save_date
		idw_wcr_facility.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// MPM - DevOps task 15097
// Update profile radioactive page 1
FOR ll_row = 1 TO idw_profile_radioactive_supplement_page_1.RowCount()
	ldwItemStatus = idw_profile_radioactive_supplement_page_1.GetItemStatus(ll_row, 0, Primary!)
	IF ( IsNull(idw_profile_radioactive_supplement_page_1.Object.profile_profile_id[ll_row]) OR &
		idw_profile_radioactive_supplement_page_1.Object.profile_profile_id[ll_row] <= 0 ) AND  ldwItemStatus <> NotModified! THEN
		idw_profile_radioactive_supplement_page_1.Object.profile_profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_date_added[ll_row]) AND  ldwItemStatus <> NotModified! THEN
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_date_added[ll_row] = idt_save_date
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_added_by[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_profile_radioactive_supplement_page_1.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_date_modified[ll_row]) THEN
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_date_modified[ll_row] = idt_save_date
		idw_profile_radioactive_supplement_page_1.Object.profileradioactive_modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// Update profile radioactive page 2
FOR ll_row = 1 TO idw_profile_radioactive_supplement_page_2.RowCount()
	ldwItemStatus = idw_profile_radioactive_supplement_page_2.GetItemStatus(ll_row, 0, Primary!)
	IF ( IsNull(idw_profile_radioactive_supplement_page_2.Object.profile_id[ll_row]) OR &
		idw_profile_radioactive_supplement_page_2.Object.profile_id[ll_row] <= 0 ) AND  ldwItemStatus <> NotModified! THEN
		idw_profile_radioactive_supplement_page_2.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_profile_radioactive_supplement_page_2.Object.date_added[ll_row])   AND  ldwItemStatus <> NotModified!  THEN
		idw_profile_radioactive_supplement_page_2.Object.date_added[ll_row] = idt_save_date
		idw_profile_radioactive_supplement_page_2.Object.added_by[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_profile_radioactive_supplement_page_2.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_profile_radioactive_supplement_page_2.Object.date_modified[ll_row]) THEN
		idw_profile_radioactive_supplement_page_2.Object.date_modified[ll_row] = idt_save_date
		idw_profile_radioactive_supplement_page_2.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// MPM - 4/19/2020 - DevOps 15205
// Update profile radioactive page 3sub
FOR ll_row = 1 TO idw_profile_radioactive_supplement_3sub.RowCount()
	ldwItemStatus = idw_profile_radioactive_supplement_3sub.GetItemStatus(ll_row, 0, Primary!)
	IF (IsNull(idw_profile_radioactive_supplement_3sub.Object.profile_id[ll_row]) OR &
		idw_profile_radioactive_supplement_3sub.Object.profile_id[ll_row] <= 0 ) AND  ldwItemStatus <> NotModified! THEN
		idw_profile_radioactive_supplement_3sub.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_profile_radioactive_supplement_3sub.Object.date_added[ll_row]) AND  ldwItemStatus <> NotModified! THEN
		idw_profile_radioactive_supplement_3sub.Object.date_added[ll_row] = idt_save_date
		idw_profile_radioactive_supplement_3sub.Object.added_by[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_profile_radioactive_supplement_3sub.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_profile_radioactive_supplement_3sub.Object.date_modified[ll_row]) THEN
		idw_profile_radioactive_supplement_3sub.Object.date_modified[ll_row] = idt_save_date
		idw_profile_radioactive_supplement_3sub.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// MPM - 4/28/2020 - DevOps 15426 - Corrections for benzene supplement
FOR ll_row = 1 TO idw_benzene_waste_ops_supplemen.RowCount()
	ldwItemStatus = idw_benzene_waste_ops_supplemen.GetItemStatus(ll_row, 0, Primary!)
	IF ( IsNull(idw_benzene_waste_ops_supplemen.Object.profile_id[ll_row]) OR &
		idw_benzene_waste_ops_supplemen.Object.profile_id[ll_row] <= 0 ) AND  ldwItemStatus <> NotModified! THEN
		idw_benzene_waste_ops_supplemen.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_benzene_waste_ops_supplemen.Object.date_added[ll_row]) AND  ldwItemStatus <> NotModified! THEN
		idw_benzene_waste_ops_supplemen.Object.date_added[ll_row] = idt_save_date
		idw_benzene_waste_ops_supplemen.Object.added_by[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_benzene_waste_ops_supplemen.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_benzene_waste_ops_supplemen.Object.date_modified[ll_row]) THEN
		idw_benzene_waste_ops_supplemen.Object.date_modified[ll_row] = idt_save_date
		idw_benzene_waste_ops_supplemen.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// MPM - 4/28/2020 - DevOps 15331 - Corrections for thermal supplement
FOR ll_row = 1 TO idw_profile_thermal_supplement_form.RowCount()
	ldwItemStatus = idw_profile_thermal_supplement_form.GetItemStatus(ll_row, 0, Primary!)
	IF ( IsNull(idw_profile_thermal_supplement_form.Object.profilethermal_profile_id[ll_row]) OR &
		idw_profile_thermal_supplement_form.Object.profilethermal_profile_id[ll_row] <= 0 ) AND  ldwItemStatus <> NotModified! THEN
		idw_profile_thermal_supplement_form.Object.profilethermal_profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_profile_thermal_supplement_form.Object.profilethermal_date_added[ll_row]) AND  ldwItemStatus <> NotModified! THEN
		idw_profile_thermal_supplement_form.Object.profilethermal_date_added[ll_row] = idt_save_date
		idw_profile_thermal_supplement_form.Object.profilethermal_added_by[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_profile_thermal_supplement_form.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_profile_thermal_supplement_form.Object.profilethermal_date_modified[ll_row]) THEN
		idw_profile_thermal_supplement_form.Object.profilethermal_date_modified[ll_row] = idt_save_date
		idw_profile_thermal_supplement_form.Object.profilethermal_modified_by[ll_row] = gs_user_id
	END IF		
NEXT

//DevOps:19924
FOR ll_row = 1 TO idw_gen_knowledge_supplement.RowCount()
	ldwItemStatus = idw_gen_knowledge_supplement.GetItemStatus(ll_row, 0, Primary!)
	IF ( IsNull(idw_gen_knowledge_supplement.Object.profile_id[ll_row]) OR &
		idw_gen_knowledge_supplement.Object.profile_id[ll_row] <= 0 ) AND  ldwItemStatus <> NotModified!  THEN
		idw_gen_knowledge_supplement.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_gen_knowledge_supplement.Object.date_added[ll_row]) AND  ldwItemStatus <> NotModified!  THEN
		idw_gen_knowledge_supplement.Object.date_added[ll_row] = idt_save_date
		idw_gen_knowledge_supplement.Object.added_by[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_gen_knowledge_supplement.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_gen_knowledge_supplement.Object.date_modified[ll_row]) THEN
		idw_gen_knowledge_supplement.Object.date_modified[ll_row] = idt_save_date
		idw_gen_knowledge_supplement.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

// Dipankar - 8/31/2023 - Begin - Added for #69393
FOR ll_row = 1 TO idw_profile_fuels_blending.RowCount()
	ldwItemStatus = idw_profile_fuels_blending.GetItemStatus(ll_row, 0, Primary!)
	IF ( IsNull(idw_profile_fuels_blending.Object.profile_id[ll_row]) OR &
		idw_profile_fuels_blending.Object.profile_id [ll_row] <= 0 ) AND  ldwItemStatus <> NotModified!  THEN
		idw_profile_fuels_blending.Object.profile_id [ll_row] = ll_profile_id
	END IF
	
	IF IsNull(idw_profile_fuels_blending.Object.date_added[ll_row]) AND  ldwItemStatus <> NotModified!  THEN
		idw_profile_fuels_blending.Object.date_added	[ll_row] = idt_save_date
		idw_profile_fuels_blending.Object.added_by	[ll_row] = gs_user_id
	END IF

	ldwItemStatus = idw_profile_fuels_blending.GetItemStatus(ll_row, 0, Primary!)
	
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_profile_fuels_blending.Object.date_modified[ll_row]) THEN
		idw_profile_fuels_blending.Object.date_modified	[ll_row] = idt_save_date
		idw_profile_fuels_blending.Object.modified_by		[ll_row] = gs_user_id
	END IF		
NEXT
// Dipankar - 8/31/2023 - End - Added for #69393

// MPM - 6/20/2020 - DevOps 16428
FOR ll_row = 1 TO idw_container_size.RowCount()
	IF IsNull(idw_container_size.Object.profile_id[ll_row]) OR &
		idw_container_size.Object.profile_id[ll_row] <= 0 THEN
		idw_container_size.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_container_size.Object.date_added[ll_row]) THEN
		idw_container_size.Object.date_added[ll_row] = idt_save_date
		idw_container_size.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_container_size.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_container_size.Object.date_modified[ll_row]) THEN
		idw_container_size.Object.date_modified[ll_row] = idt_save_date
		idw_container_size.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT

FOR ll_row = 1 TO idw_ship_volume.RowCount()
	IF IsNull(idw_ship_volume.Object.profile_id[ll_row]) OR &
		idw_ship_volume.Object.profile_id[ll_row] <= 0 THEN
		idw_ship_volume.Object.profile_id[ll_row] = ll_profile_id
	END IF
	IF IsNull(idw_ship_volume.Object.date_added[ll_row]) THEN
		idw_ship_volume.Object.date_added[ll_row] = idt_save_date
		idw_ship_volume.Object.added_by[ll_row] = gs_user_id
	END IF
	ldwItemStatus = idw_ship_volume.GetItemStatus(ll_row, 0, Primary!)
	IF ldwItemStatus = DataModified! OR ldwItemStatus = NewModified! OR &
		IsNull(idw_ship_volume.Object.date_modified[ll_row]) THEN
		idw_ship_volume.Object.date_modified[ll_row] = idt_save_date
		idw_ship_volume.Object.modified_by[ll_row] = gs_user_id
	END IF		
NEXT
RETURN (ll_profile_id)
end function

public function integer wf_lab_tech_itemchanged (datawindow adw_name, long al_row, string as_column, string as_data);double	ldb_tmp, ldb_null, ldb_tmp2
long		ll_row, ll_row_header, ll_row_approval, ll_company_id, ll_profit_ctr_id
long		ll_rowcount
string	ls_null, ls_location_type, ls_location_control, ls_location, ls_location_report_flag
string	ls_profile_status, ls_msg_title

adw_name.AcceptText()
IF adw_name = idw_technical THEN
	ls_msg_title = ":  Profile Technical"
ELSE
	ls_msg_title = ":  Profile Lab Sample"
END IF

ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0  THEN RETURN gi_no_action

// Don't allow any changes to an inactive record
ls_profile_status = idw_header.Object.curr_status_code[ll_row_header]
IF ls_profile_status = "C" &
	OR ls_profile_status = "R" &
	OR ls_profile_status = "V" THEN
	MessageBox(gs_app_name + ls_msg_title, "Only Profiles that are pending, on hold, or approved may be modified.", Exclamation!)
	RETURN 1
ELSEIF is_access = "V" OR is_access = "P" OR is_access = "B" THEN
	RETURN 1
END IF
//ELSEIF is_access = "V" OR is_access = "P" OR is_access = "B" OR &
//	(adw_name = idw_technical AND is_access = "L") OR &
//	(adw_name = idw_lab AND is_access <> "L" AND is_access <> "S") THEN
//	RETURN 1
//END IF
SetNull(ls_null)
SetNull(ldb_null)

CHOOSE CASE Lower(as_column)
	CASE "ddvoc","ccvoc"
		IF NOT IsNumber(as_data) THEN
			Messagebox(gs_app_name + ls_msg_title, "DDVOC\CCVOC must be a number (0.000)", Exclamation!)
			IF lower(as_column) = "ddvoc" THEN
				adw_name.Object.ddvoc[al_row] = ldb_null
			ELSE
				adw_name.Object.ccvoc[al_row] = ldb_null
			END IF
			RETURN 1
		END IF
		
		// Set the location control to East if DDVOC or CCVOC >= 500
		// ONLY FOR SITE 2 !!! - added for emphasis 1-16-04 JDB
		ll_row_approval = idw_approval.Find("company_id = 2", 1, idw_approval.Rowcount() + 1)
		
		IF ll_row_approval > 0 THEN
			ldb_tmp = Double(as_data)
			ll_rowcount = idw_approval.RowCount()
			idw_approval.SetRedraw(FALSE)
			
			// Set value so dw controls can work
			FOR ll_row = 1 TO ll_rowcount
				IF lower(as_column) = "ddvoc" THEN
					idw_approval.Object.profilelab_ddvoc[ll_row] = ldb_tmp
					idw_approval.SetItemStatus(ll_row, "profilelab_ddvoc", Primary!, NotModified!)
					// Get the CCVOC value
					ldb_tmp2 = adw_name.Object.ccvoc[al_row]
				ELSE
					idw_approval.Object.profilelab_ccvoc[ll_row] = ldb_tmp
					idw_approval.SetItemStatus(ll_row, "profilelab_ccvoc", Primary!, NotModified!)
					// Get the DDVOC value
					ldb_tmp2 = adw_name.Object.ddvoc[al_row]
				END IF
			NEXT
			idw_approval.AcceptText()
			idw_approval.SetRedraw(TRUE)

			IF ldb_tmp >= 500 THEN
					
				// Check and set location control
				ls_location_type = idw_approval.Object.location_type[ll_row_approval]
				IF IsNull(ls_location_type) OR ls_location_type = "" OR ls_location_type = "U" OR ls_location_type = "P" THEN   // Process
					ls_location_control = idw_approval.Object.location_control[ll_row_approval]
					IF IsNull(ls_location_control) OR ls_location_control <> "E" THEN
						idw_approval.Object.location_control[ll_row_approval] = "E"
						// Check location
						ls_location = idw_approval.Object.location[ll_row_approval]
						ll_company_id = idw_approval.Object.company_id[ll_row_approval]
						ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
						IF NOT IsNull(ls_location) THEN
							SELECT location_report_flag
								INTO :ls_location_report_flag
								FROM ProcessLocation
								WHERE location = :ls_location
								AND company_id = :ll_company_id
								AND profit_ctr_id = :ll_profit_ctr_id
							USING itr_share;
						
							IF ls_location_report_flag <> "E" THEN
								MessageBox(gs_app_name + ls_msg_title, "DDVOC/CCVOC Location East Side:  You must select an East Side Location when DDVOC or CCVOC is 500 or greater. ("+ string(ll_company_id,"00") + "-" + string(ll_profit_ctr_id,"00") + ")", Exclamation!)
								idw_approval.Object.location[ll_row_approval] = ls_null
								idw_approval.Object.location_type[ll_row_approval] = ls_null
							END IF
						END IF
					END IF
				END IF
			ELSEIF (IsNull(ldb_tmp) OR (ldb_tmp >= 0 AND ldb_tmp < 500)) &
				AND (IsNull(ldb_tmp2) OR (ldb_tmp2 >= 0 AND ldb_tmp2 < 500)) THEN
				idw_approval.Object.location_control[ll_row_approval] = "B"
			END IF
		END IF

	CASE "ph_from", "ph_to"
		IF NOT IsNumber(as_data) THEN
			MessageBox(gs_app_name + ls_msg_title, "pH value must be a number (00.00)", Information!)
			IF Lower(as_column) = "ph_from" THEN
				adw_name.Object.ph_from[al_row] = ldb_null
			ELSEIF Lower(as_column) = "ph_to" THEN
				adw_name.Object.ph_to[al_row] = ldb_null
			END IF
			RETURN 1
		END IF

END CHOOSE

RETURN 0
end function

public subroutine wf_lab_sync_technical (string as_column);// The purpose of this function is to synchronize any lab changes to the technical datawindow
integer	li_column_id
long		ll_row_lab, ll_row_technical

// Initialize
ll_row_technical = idw_technical.GetRow()
ll_row_lab = idw_lab.GetRow()

IF ll_row_technical > 0 AND ll_row_lab > 0 &
	AND lower(as_column) <> "type" &
	AND lower(as_column) <> "source_control" THEN
	li_column_id = INTEGER(idw_lab.Describe(as_column+".ID"))
	idw_technical.Object.Data[ll_row_technical, li_column_id] = idw_lab.Object.Data[ll_row_lab, li_column_id]
END IF



end subroutine

public function integer wf_init_lab (long al_row, string as_type);// The purpose of this function is to initialize the lab values for a new record
// from either New or Copy event
//DevOps 15558 info_gde 05/07/2020; EQAI - Other Functions - Sec G Format
//DevOps 15556 info_gde 05/07/2020; EQAI - Other Functions - Sec D Format
datawindow ldw

string ls_null

SetNull(ls_null)
IF al_row <= 0 OR IsNull(as_type) OR (as_type <> "A" AND as_type <> "L") THEN RETURN gi_failure

IF as_type = "A" THEN
	ldw = idw_technical
ELSE
	ldw = idw_lab
END IF

ldw.Object.type[al_row] = as_type
// SK 05/30/2012 This function now applies to the new d_profile_technical dw that only shows the active record 
// & does not have a field called source_control

//IF as_type = "A" THEN
//	IF is_access = "L" THEN
//		ldw.Object.source_control[al_row] = "L"
//	ELSE
//		ldw.Object.source_control[al_row] = "A"
//	END IF
//ELSE
//	IF is_access = "L" OR is_access = "S" THEN
//		ldw.Object.source_control[al_row] = "L"
//	ELSE
//		ldw.Object.source_control[al_row] = "A"
//	END IF
//END IF

//DevOps:16288 - Set initial value as a null  
//ldw.Object.ccvoc[al_row] = 0.00
//ldw.Object.ddvoc[al_row] = 0.00   DevOps 19807 info_gde 12/31/2021; Profile Tracking - Tech Tab - 'DDVOC' Value
ldw.Object.water_react[al_row] = "U"
ldw.Object.cyanide_spot[al_row] = "U"
ldw.Object.oxidizer_spot[al_row] = "U"
ldw.Object.sulfide_gr100[al_row] = "U"
ldw.Object.react_NaOH[al_row] = "U"
ldw.Object.react_HCL[al_row] = "U"
ldw.Object.odor[al_row] = "U"
ldw.Object.free_liquid[al_row] = "U"
ldw.Object.avg_h20_gr_10[al_row] = "U"

ldw.Object.pcb[al_row] = "U"
ldw.Object.radiation[al_row] = "U"
ldw.Object.phasing[al_row] = "U"
ldw.Object.reacts_box[al_row] = "U"
ldw.Object.react_ckd[al_row] = "U"
ldw.Object.react_bleach[al_row] = "U"
ldw.Object.neshap_exempt[al_row] = "U"

IF upper(as_type) = 'A' THEN
	// SK 06242012 New fields intilization
	ldw.Object.handling_issue[al_row] = ls_null //DevOps 15556 info_gde 05/07/2020;
	//ldw.Object.handling_issue[al_row] = "U"
	//20200507 jcb #15562 repl 	ldw.Object.processed_into_non_liquid[al_row] = "U"
	ldw.Object.processed_into_non_liquid[al_row] = ls_null     // 20200507 jcb #15562 E4
	//20200507 jcb #15557 repl    ldw.Object.cyanide_plating[al_row] = "U"
	ldw.Object.cyanide_plating[al_row] = ls_null		// 20200507 jcb #15557 E4
	ldw.Object.state_waste_code_flag[al_row] = "T"
	ldw.Object.meets_alt_soil_treatment_stds[al_row] = "U"
	ldw.Object.more_than_50_pct_debris[al_row] = "U"
	ldw.Object.underlying_haz_constituents[al_row] = "U"
	ldw.Object.michigan_non_haz[al_row] = "U"
	// MPM - DevOps 15016
	//ldw.Object.used_oil[al_row] = "U"
	//20200507 jcb #15562 repl 	ldw.Object.pcb_source_concentration_gr_50[al_row] = "U"
	//20200507 jcb #15562 repl 	ldw.Object.pcb_manufacturer[al_row] = "U"
	ldw.Object.pcb_source_concentration_gr_50[al_row] = ls_null 	// 20200507 jcb #15562 E2
	ldw.Object.pcb_manufacturer[al_row]    				= ls_null     // 20200507 jcb #15562  E5
	ldw.Object.pcb_article_decontaminated[al_row] = "W"
	ldw.Object.pcb_non_lqd_contaminated_media[al_row] = "U"
	ldw.Object.ccvocgr500[al_row] = ls_null  //DevOps 15558 info_gde 05/07/2020;
	//ldw.Object.ccvocgr500[al_row] = "U"
	ldw.Object.ddvohapgr500[al_row] = "U"
	ldw.Object.subject_to_mact_neshap[al_row] = ls_null  //DevOps 15558 info_gde 05/07/2020;
	//ldw.Object.subject_to_mact_neshap[al_row] = "U"
	ldw.Object.benzene_neshap[al_row] = "U"
	ldw.Object.tab_gr_10[al_row] = "U"
	//ldw.Object.contains_benzene_flag[al_row] = "F" DevOps 16291 info_gde 06/11/2020; EQAI - Profile Tracking - Tech - Sec G6
	//20200507 jcb #15559 repl 	ldw.Object.benzene_onsite_mgmt[al_row] = "U"
	ldw.Object.benzene_onsite_mgmt[al_row] = ls_null				  //20200507 jcb #15559
END IF

RETURN gi_success

end function

public function integer wf_init_header (long al_row);//DevOps #14803 info_gde 03/20/2020; Add New Profile (Profile Tab) - Section G.
//DevOps 15555 info_gde 05/07/2020; EQAI - Other Functions - Sec C Format
// The purpose of this function is to initialize the header values for a new record
datetime	ldt_today
long		ll_rowcount
string ls_null
setnull(ls_null)
IF al_row <= 0 THEN RETURN gi_failure

ldt_today = Datetime(today())

idw_header.Object.curr_status_code[al_row] = "P"
idw_header.Object.tracking_type[al_row] = "NEW"
idw_header.Object.document_update_status[al_row] = "A"
idw_header.Object.cert_flag[al_row] = "F"
idw_header.Object.ap_start_date[al_row] = ldt_today
idw_header.Object.ap_expiration_date[al_row] = RelativeDate(Date(ldt_today), 365)
idw_header.Object.max_load_start_date[al_row] = ldt_today
idw_header.Object.max_loads[al_row] = 9999
idw_header.Object.generic_flag[al_row] = "U"
idw_header.Object.labpack_flag[al_row] = "U"
idw_header.Object.bulk_flag[al_row] = "U"
idw_header.Object.reapproval_allowed[al_row] = "T"
idw_header.Object.OTS_flag[al_row] = "F"
idw_header.Object.transship_flag[al_row] = "F"
idw_header.Object.urgent_flag[al_row] = "F"
idw_header.Object.broker_flag[al_row] = "D"
idw_header.Object.SPOC_flag[al_row] = "F"
idw_header.Object.profile_tracking_id[al_row] = 1	// Added 10/30/06 JDB
idw_header.Object.received_date[al_row] = ldt_today
idw_header.Object.inactive_flag[al_row] = "F"  //DevOps:21238 - AM - When create new record set inactive_flag as F
// 06222012 SK Added RCRA fields initialization to N/A
idw_header.Object.rcra_listed[al_row] = "U"
idw_header.Object.rcra_characteristic[al_row] = "U"
idw_header.object.rcra_waste_code_flag[al_row]  = 'T'

// Shipping Info // GEM:54817  - hazmat from T to F
idw_header.Object.hazmat[al_row]=ls_null//DevOps 15555 info_gde 05/07/2020;
//idw_header.Object.hazmat[al_row] = "U"
//DevOps #14803 info_gde 03/20/2020 - start
//idw_header.Object.UN_NA_flag[al_row] = "X"
idw_header.Object.UN_NA_flag[al_row] = ls_null
// MPM - 5/1/2020 - DevOps 15385
idw_header.Object.dot_shipping_name[al_row]=ls_null//DevOps 15555 info_gde 05/07/2020;
//idw_header.Object.dot_shipping_name[al_row] = 'Material Not Regulated By D.O.T.'

//idw_header.Object.waste_water_flag[al_row] = "N"
idw_header.Object.waste_water_flag[al_row] = ls_null
//DevOps #14803 info_gde 03/20/2020 - end

// 20200504 jcb #15392 repl idw_header.Object.reportable_quantity_flag[al_row] = "F" 
idw_header.Object.reportable_quantity_flag[al_row]=ls_null//DevOps 15555 info_gde 05/07/2020;
//idw_header.Object.reportable_quantity_flag[al_row] = "U"       //20200504 jcb #15392 set to U on new


// 08112015 Added DEA_flag
idw_header.Object.DEA_flag[al_row] = "F"

idw_header.Object.reapproval_batch_bypass[al_row] = 'F'

ll_rowcount = idw_header.RowCount()
IF ll_rowcount <> 1 THEN
	SetMicroHelp(String(ll_rowcount) + " records")
ELSE
	SetMicroHelp("1 record")
END IF

RETURN gi_success

end function

public function integer wf_init_tracking (long al_row);// The purpose of this function is to initialize the profile tracking values for a new record
integer	li_department_id
string	ls_null

IF al_row <= 0 THEN RETURN gi_failure

IF al_row > 0 THEN
	SetNull(ls_null)
	
	idw_tracking.Object.tracking_id[al_row] = 1
	idw_tracking.Object.tracking_status[al_row] = "NEW"
	
	// Get user's department and insert here:
	li_department_id = wf_get_department_id(gs_user_id)
	
	idw_tracking.Object.department_id[al_row] = li_department_id
	idw_tracking.Object.EQ_contact[al_row] = gs_user_id
	idw_tracking.Object.time_in[al_row] = DateTime(Today(), Now())
	
	idw_tracking.Object.profile_curr_status_code[al_row] = "P"
	idw_tracking.Object.manual_bypass_tracking_flag[al_row] = "F"
	idw_tracking.Object.manual_bypass_tracking_reason[al_row] = ls_null
	idw_tracking.Object.manual_bypass_tracking_by[al_row] = ls_null
	// MPM - 6/11/2021 - DevOps 21506 - Set "tracked from"
	idw_tracking.Object.tracked_from[al_row] = gs_user_id				
END IF

RETURN gi_success
end function

public function integer wf_init_quoteheader (long al_row);// The purpose of this function is to initialize the Quote header values for a new record
IF al_row <= 0 THEN RETURN gi_failure

idw_quoteheader.Object.quote_type[al_row] = 'D'
idw_quoteheader.Object.start_date[al_row] = DateTime(RelativeDate(Today(), 1))
idw_quoteheader.Object.curr_status_code[al_row] = "A"
idw_quoteheader.Object.print_confirm_flag[al_row] = "F"
idw_quoteheader.Object.print_gen_flag[al_row] = "F"
idw_quoteheader.Object.fax_flag[al_row] = "F"

RETURN gi_success

end function

public function integer wf_init_forms ();long		ll_row, ll_rowcount

// Reset forms
idw_form.Reset()
idw_form.BringToTop = TRUE

// SK 06222012 This is not used anymore.
// Insert records into ProfileForm.  Set all checkboxes TRUE.
//ll_rowcount = idw_form_availability.Retrieve(0)

//FOR ll_row = 1 TO ll_rowcount
//	idw_form_availability.Object.include[ll_row] = 1
//NEXT

RETURN gi_success
end function

public subroutine wf_top6_renumber ();// The purpose of this function is to renumber the top 6 waste codes

long		ll_row_find, ll_row
string	ls_waste_code, ls_top6, ls_find
integer	li_sequence_id, li_idx, li_count, li_null
long		ll_waste_code_uid
datastore lds

idw_waste_code_fed.AcceptText()

IF idw_waste_code_fed.RowCount() > 0 THEN
	lds = CREATE DATASTORE
	lds.DataObject = "d_waste_code_top6"
	lds.SetTransObject(gtr_share)

	// Find the top 6
	ll_row_find = 1
	ls_find = "include > 0 AND NOT IsNull(sequence_id)"
	DO WHILE ll_row_find > 0
		ll_row_find = idw_waste_code_fed.Find(ls_find, ll_row_find, idw_waste_code_fed.RowCount() + 1)
		IF ll_row_find > 0 THEN
			ll_row = lds.InsertRow(0)
			li_sequence_id 	= idw_waste_code_fed.Object.sequence_id[ll_row_find]
			ls_waste_code  	= idw_waste_code_fed.Object.waste_code[ll_row_find]
			ll_waste_code_uid = idw_waste_code_fed.Object.waste_code_uid[ll_row_find]
			lds.Object.sequence_id[ll_row] 		= li_sequence_id
			lds.Object.waste_code[ll_row] 		= ls_waste_code
			lds.Object.waste_code_uid[ll_row] 	= ll_waste_code_uid
			lds.Object.waste_code_row[ll_row] 	= ll_row_find
			ll_row_find++
		END IF
	LOOP
	
	// Renumber
	IF lds.RowCount() > 0 THEN
		lds.SetSort("sequence_id A, waste_code A")
		lds.Sort()
		SetNull(li_null)
		
		FOR ll_row = 1 to lds.RowCount()
			IF ll_row <= ii_top6 THEN
				lds.Object.sequence_id[ll_row] = ll_row
			ELSE
				lds.Object.sequence_id[ll_row] = li_null
			END IF
		NEXT
	END IF
	
	// Reassign numbers if necessary
	FOR ll_row = 1 to lds.RowCount()
		ll_waste_code_uid	= lds.Object.waste_code_uid[ll_row]
		ls_waste_code 		= lds.Object.waste_code[ll_row]
		ll_row_find 		= lds.Object.waste_code_row[ll_row]
		li_sequence_id 	= lds.Object.sequence_id[ll_row]
		
		ls_find = "waste_code_uid =" + String(ll_waste_code_uid)
		ll_row_find = idw_waste_code_fed.Find( ls_find, 1, idw_waste_code_fed.rowcount()+1)
		
		IF IsNull(li_sequence_id) OR &
			idw_waste_code_fed.Object.sequence_id[ll_row_find] <> li_sequence_id THEN
			idw_waste_code_fed.Object.sequence_id[ll_row_find] = li_sequence_id	
		END IF
	NEXT
				
	DESTROY lds;
END IF

idw_waste_code_fed.sort()
wf_top6_show()

end subroutine

public subroutine wf_top6_show ();// The purpose of this function is to build the list of top 6 federal waste codes
// for display at the top of the fed waste code datawindow
integer	li_sequence_id, li_idx
long		ll_row_find
string	ls_waste_code, ls_top6, ls_find

ls_top6 = ""
IF idw_waste_code_fed.RowCount() > 0 THEN
	FOR li_idx = 1 TO MIN( ii_top6, idw_waste_code_fed.RowCount() )
		ls_find = "sequence_id = " + String(li_idx)
		ll_row_find = idw_waste_code_fed.Find(ls_find, 1, idw_waste_code_fed.RowCount() + 1)
		IF ll_row_find > 0 THEN
			ls_waste_code = idw_waste_code_fed.Object.waste_code[ll_row_find]
			IF ls_top6 = "" THEN
				ls_top6 = ls_waste_code
			ELSE
				ls_top6 = ls_top6 + ",  " + ls_waste_code 
			END IF
			
			// show primary
			IF li_idx = 1 THEN
				ls_top6 = ls_top6 + " (primary)"
			END IF
		END IF
	NEXT
END IF
IF IsValid(idw_waste_code_fed) THEN
	idw_waste_code_fed.Object.txt_top6.Text = ls_top6
END IF
end subroutine

public function long wf_get_orig_customer_id ();/////////////////////////////////////////////
// Function:  wf_get_orig_customer_id
/////////////////////////////////////////////
long	ll_customer_id

ll_customer_id = idw_header.Object.orig_customer_id[il_curr_row]

IF IsNull(ll_customer_id) OR ll_customer_id <= 0 THEN
	ll_customer_id = 0
END IF

RETURN ll_customer_id
end function

public function string wf_validate_waste_code ();integer	li_i, li_j, li_company_id, li_profit_ctr_id
integer	li_rowcount_approval
string	ls_waste_code, ls_permit, ls_error, ls_origin, ls_haz_flag,ls_tracking_type
Long		ll_row, ll_d_count, ll_fkpu_count, ll_state_haz_count, ll_state_nonhaz_count
Long		ll_waste_code_count, ll_waste_code_uid,ll_row_header

ls_error = ""
li_rowcount_approval = idw_approval.RowCount()
//DevOps:27511
ll_row_header = idw_header.GetRow()
IF ll_row_header > 0 THEN 
   ls_tracking_type	= idw_header.Object.tracking_type[ll_row_header]
END IF

FOR li_i = 1 TO li_rowcount_approval
	// MPM - 10/20/2020 - DevOps 17727 - Skip validation for inactive approvals
	IF idw_approval.object.status[li_i] = 'I' THEN CONTINUE
	li_company_id 		= idw_approval.Object.company_id[li_i]
	li_profit_ctr_id 	= idw_approval.Object.profit_ctr_id[li_i]
	// Loop Fed waste codes
	ll_waste_code_count = idw_waste_code_fed.Rowcount()
	FOR li_j = 1 TO ll_waste_code_count
		ll_waste_code_uid = idw_waste_code_fed.Object.waste_code_uid[li_j]
		ls_waste_code		= idw_waste_code_fed.Object.waste_code[li_j]
		SELECT ISNULL(permit_flag, 'F')
			INTO :ls_permit
			FROM WasteCodeXProfitCenter
			WHERE waste_code_uid = :ll_waste_code_uid
			AND company_id 		= :li_company_id
			AND profit_ctr_id 	= :li_profit_ctr_id
		USING itr_share;
		
		IF ls_permit = "F"  AND (ls_tracking_type = 'APRC' OR  ls_tracking_type = 'A') THEN // Dipankar - 5/8/2023 - Modified to include Approved Status (A) for #19000
			ls_error += "~rWaste Code '" + ls_waste_code &
				+ "' is not permitted for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		ELSEIF itr_share.SQLCode = 100 THEN
			ls_error += "~rWaste Code '" + ls_waste_code &
				+ "' was not found for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		ELSEIF itr_share.SQLCode <> 0 THEN
			ls_error += "~rError checking Waste Code '" + ls_waste_code &
				+ "' for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		END IF
			
		// Listed, Characteristic counts	
		CHOOSE CASE Upper (Left (ls_waste_code, 1))
			CASE "D"
				ll_d_count++
			CASE "F", "K", "P", "U"
				ll_fkpu_count++
		END CHOOSE
	NEXT
	
	// Loop State waste codes
	ll_waste_code_count = idw_waste_code_state.Rowcount()
	FOR li_j = 1 TO ll_waste_code_count
		ll_waste_code_uid = idw_waste_code_state.Object.waste_code_uid[li_j]
		ls_waste_code		= idw_waste_code_state.Object.waste_code[li_j]
		SELECT ISNULL(permit_flag, 'F')
			INTO :ls_permit
			FROM WasteCodeXProfitCenter
			WHERE waste_code_uid = :ll_waste_code_uid
			AND company_id 		= :li_company_id
			AND profit_ctr_id 	= :li_profit_ctr_id
		USING itr_share;
		
		IF ls_permit = "F" AND (ls_tracking_type = 'APRC'  OR  ls_tracking_type = 'A') THEN // Dipankar - 5/8/2023 - Modified to include Approved Status (A) for #19000
			ls_error += "~rWaste Code '" + ls_waste_code &
				+ "' is not permitted for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		ELSEIF itr_share.SQLCode = 100 THEN
			ls_error += "~rWaste Code '" + ls_waste_code &
				+ "' was not found for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		ELSEIF itr_share.SQLCode <> 0 THEN
			ls_error += "~rError checking Waste Code '" + ls_waste_code &
				+ "' for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		END IF
			
		// Haz, Non-Haz counts
		SELECT ISNULL(haz_flag,'F')
		INTO :ls_haz_flag
		FROM WasteCode (nolock)
		WHERE waste_code_uid = :ll_waste_code_uid
		USING itr_share;
		
		IF ls_haz_flag = "T" THEN
			ll_state_haz_count++
		ELSE
			ll_state_nonhaz_count++
		END IF
	NEXT
	
	// Loop EQ waste codes
	ll_waste_code_count = idw_waste_code_eq.Rowcount()
	FOR li_j = 1 TO ll_waste_code_count
		ll_waste_code_uid = idw_waste_code_eq.Object.waste_code_uid[li_j]
		ls_waste_code		= idw_waste_code_eq.Object.waste_code[li_j]
		SELECT ISNULL(permit_flag, 'F')
			INTO :ls_permit
			FROM WasteCodeXProfitCenter
			WHERE waste_code_uid = :ll_waste_code_uid
			AND company_id 		= :li_company_id
			AND profit_ctr_id 	= :li_profit_ctr_id
		USING itr_share;
		
		IF ls_permit = "F"  AND (ls_tracking_type = 'APRC'  OR  ls_tracking_type = 'A') THEN // Dipankar - 5/8/2023 - Modified to include Approved Status (A) for #19000
			ls_error += "~rWaste Code '" + ls_waste_code &
				+ "' is not permitted for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		ELSEIF itr_share.SQLCode = 100  AND ls_tracking_type = 'APRC'   THEN
			ls_error += "~rWaste Code '" + ls_waste_code &
				+ "' was not found for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		ELSEIF itr_share.SQLCode <> 0 THEN
			ls_error += "~rError checking Waste Code '" + ls_waste_code &
				+ "' for EQ Company " &
				+ String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		END IF
	NEXT
NEXT

ll_row = idw_header.getRow( )
If ll_d_count > 0 AND idw_header.Object.rcra_characteristic[ll_row] = "F" Then
	If ls_error > "" Then
		ls_error = ls_error + "~r"
	End If
	ls_error = ls_error + "Error: EPA RCRA characteristic hazardous waste (D001-D043) exists, but the flag is set to No."
End If
If ll_fkpu_count > 0 AND idw_header.Object.rcra_listed[ll_row] = "F" Then
	If ls_error > "" Then
		ls_error = ls_error + "~r"
	End If
	ls_error = ls_error + "~Error: EPA RCRA listed hazardous waste (F, K, P or U) exists, but the flag is set to No."
End If

ll_row = idw_technical.GetRow()
// State Haz 
if idw_technical.RowCount() > 0 then //Will not execute unless > 0 rows (avoiding error Invalid row range) JXM 03/07/2019
	if ll_state_haz_count > 0 AND idw_technical.Object.state_waste_code_flag[ll_row] = "F" then
		If ls_error > "" Then
			ls_error = ls_error + "~r"
		End If
		ls_error = ls_error + "Error: State Specific Hazardous Waste Code exists, but the flag is set to No."
	end if
end if

// State Non Haz 
if idw_technical.RowCount() > 0 then  //Will not execute unless > 0 rows (avoiding error Invalid row range) JXM 03/07/2019
	if ll_state_nonhaz_count > 0 AND idw_technical.Object.michigan_non_haz[ll_row] = "F" then
		If ls_error > "" Then
			ls_error = ls_error + "~r"
		End If
		ls_error = ls_error + "Error: State Specific Non-Hazardous Waste Code exists, but the flag is set to No."
	end if
end if

RETURN ls_error
end function

public function string wf_build_waste_code_where ();integer	li_i, li_company_id, li_profit_ctr_id, li_rowcount_approval
string	ls_where, ls_and, ls_access 

ls_where = ""
li_rowcount_approval = idw_approval.RowCount()

FOR li_i = 1 TO li_rowcount_approval
	IF idw_approval.Object.status[li_i] = "I" THEN CONTINUE // Dipankar - 5/8/2023 - Added for #19000
	li_company_id = idw_approval.Object.company_id[li_i]
	
	// User must have access to this company
	ls_access = wf_profile_access(li_company_id)
	IF ls_access = 'N' OR ls_access = 'V' OR ls_access = "P" OR ls_access = "B" THEN
		CONTINUE
	ELSE
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[li_i]
		IF ls_where = "" THEN
			ls_and = ""
		ELSE
			ls_and = "AND"
		END IF
		
		ls_where += ls_and + " WasteCode.waste_code_uid IN (" &
			+ "SELECT DISTINCT waste_code_uid " &
			+ "FROM WasteCodeXProfitCenter " &
			+ "WHERE permit_flag = 'T' " &
			+ "AND company_id = " + String(li_company_id) + " " &
			+ "AND profit_ctr_id = " + String(li_profit_ctr_id) + ") "
	END IF
NEXT

RETURN ls_where
end function

public function string wf_profile_access (integer ai_company_id);string	ls_access, ls_access_broker, ls_find
long		ll_row_find

// Initialize

ls_access = 'N'

// Get this user's access to this company
ls_find = "company_id = " + string(ai_company_id)
ll_row_find = dw_profile_access.Find(ls_find, 1, dw_profile_access.RowCount()+1)
IF ll_row_find > 0 THEN
	ls_access = dw_profile_access.Object.approval[ll_row_find]
	
	// Check broker access
	IF ls_access = "B" THEN
		ls_access_broker = wf_check_broker_access()
		ls_access = ls_access_broker
	END IF
END IF

RETURN ls_access
end function

public function integer wf_audit (datawindow adw_name, long al_profile_id, long al_row, boolean ab_delete);/* 

// COR2 - JAG

Function/Event: wf_audit function
Author        : 
Created       : 
Purpose       : 

 Note(s). 
 
 Input Parameters:None

 Output Parameters:None

 ---------------------- Revision History ------------------------------------------------
Version  Modified by   Date    Description of change
-------    -------------  -------- ---------------------------------------------------------
   01         JAG          1/2019  5513, 5515             

*/

// COR2 - JAG
// Variable Declaration Section

// The purpose of this function is to write out the audit records for everything that has changed.
integer	li_before_length, li_after_length
long		ll_row, ll_row_audit, ll_row_start, ll_row_stop, ll_row_header , ll_form_id, ll_waste_code_uid
integer	li_rc, li_idx, li_column_count
string	ls_table_name, ls_column_name, ls_column_type, ls_before, ls_after, ls_continued, ls_null, ls_before2, ls_after2
string	ls_reference, ls_display_column_name, ls_key, ls_key_val, ls_updateable
boolean ib_process=False
Time lt_What_Time
dwItemStatus ldw_status

// COR2 - JAG
// Main Routine Starts

idt_save_date = DateTime(Today(), Now())
// Initialize
li_rc = gi_success
SetNull(ls_null)
ls_continued = "Change recorded on Audit Comments tab "

// No Rows, nothing changed
// MPM - DevOps 14555 - But don't return if deleted count > 0
IF adw_name.RowCount() = 0 AND adw_name.DeletedCount() = 0 THEN RETURN li_rc
				
// Check for special condition when a new Profile is being saved with Approved status.
ll_row_header = idw_header.GetRow()
IF ib_new_record = TRUE AND adw_name = idw_header AND ll_row_header > 0 THEN
	IF adw_name.Object.curr_status_code[ll_row_header] = 'A' AND &
		adw_name.Object.tracking_type[ll_row_header] = 'A' THEN
		ll_row_audit = idw_audit.InsertRow(1)
		IF ll_row_audit <= 0 THEN
			MessageBox(gs_app_name + ":  Profile Audit", "Cannot insert audit record.", Exclamation!)
			li_rc = gi_failure
		ELSE
			
			idw_audit.Object.profile_id[ll_row_audit] = al_profile_id
			idw_audit.Object.table_name[ll_row_audit] = "Profile"
			idw_audit.Object.column_name[ll_row_audit] = "curr_status_code"
			idw_audit.Object.column_name_display[ll_row_audit] = "curr_status_code"
			idw_audit.Object.before_value[ll_row_audit] = "(blank)"
			idw_audit.Object.after_value[ll_row_audit] = 'A'
			idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
			idw_audit.Object.date_modified[ll_row_audit] = idt_save_date
			
		END IF
	END IF
END IF
			
// On new records and copies we don't want to audit unitl the record is saved
// rg100306
IF ib_no_audit THEN RETURN li_rc

// rb 06/26/2012 Turn off redraw for the audit datawindow, speeds it up *a lot*
idw_audit.SetRedraw (false)
SetPointer (HourGlass!)

// Audit all rows or just the row being deleted?
IF al_row = 0 THEN
	ll_row_start = 1
	ll_row_stop = adw_name.Rowcount()
ELSE
	ll_row_start = al_row
	ll_row_stop = al_row
END IF

li_column_count = Integer(adw_name.Object.Datawindow.Column.count)
CHOOSE CASE adw_name
	CASE idw_header
		ls_table_name = "Profile"
	CASE idw_technical, idw_lab
		ls_table_name = "ProfileLab"
	CASE idw_waste, idw_waste_code_fed, idw_waste_code_state, idw_waste_code_eq
		ls_table_name = "ProfileWasteCode"
	CASE idw_const
		ls_table_name = "ProfileConstituent"
	CASE idw_composition
		ls_table_name = "ProfileComposition"
	CASE idw_quoteheader
		ls_table_name = "ProfileQuoteHeader"
	CASE idw_approval
		ls_table_name = "ProfileQuoteApproval"
	CASE idw_tracking
		ls_table_name = "ProfileTracking"
	CASE idw_form
		ls_table_name = 'FormWCR'
	CASE idw_form_availability
		ls_table_name = "ProfileForm"
	// rb - adding rules and category tabs
	CASE idw_rules
		ls_table_name = "ProfileXRegulatoryRule"
	CASE idw_category
		ls_table_name = "ProfileXMerchandiseCategory"
	CASE idw_recipe_update
		ls_table_name = "ProfileApprovalRecipe"
	CASE idw_site_type
		ls_table_name = "ProfileGeneratorSiteType"
// agc 10/14/19 temp comment out
//	// DevOps 10373
//	CASE idw_generator_locations
//		ls_table_name = "ProfileGeneratorLocation"
	// rb 04/27/2012
	case idw_shipping_unit
		// MPM - 6/20/2020 - DevOps 16428 - Under DevOps 16466, idw_shipping_unit was changed from updating ProfileShippingUnit to
		// ProfileContainerSize
		ls_table_name = "ProfileContainerSize"
	// Sk 08/03/2012
	case idw_ldr_subcategory
		ls_table_name = "ProfileLDRSubcategory"
	//sk 09/10/2012
	case	idw_profile_gen_contact_form
		ls_table_name = "ProfileContact"
	// COR2 - JAG
	case	idw_wcr_display_1  // JAG 1/2019 - 5516, 5513
		ls_table_name = is_table_name
	case	idw_wcr_display_3
		ls_table_name = "ProfileContact"
//	case	idw_wcr_display_4
//		ls_table_name = "ProfileContact"
	// SK 06/06/2012
//	case idw_profile_wcr_facility
//		ls_table_name = "ProfileWCRFacility"
	// COR2-MPM
	case idw_container_size
		ls_table_name = 'ProfileContainerSize'
	case idw_wcr_facility
		ls_table_name = 'ProfileUSEFacility'
				//COR2-AM
	case idw_profile_thermal_supplement_form
		ls_table_name = 'ProfileThermal'
	case  idw_benzene_waste_ops_supplemen
		ls_table_name = 'ProfileBenzene'	
	case idw_gen_knowledge_supplement
		ls_table_name = 'profileGeneratorKnowledge'
    case  idw_waste_import_supplement
		ls_table_name = 'ProfileWasteImport'	
	case idw_profile_cylinder_supplement_dragon
		ls_table_name = 'ProfileCGC'
	case idw_profile_debris_certification_dragon
		ls_table_name = 'Profile'	
	case idw_profile_used_oil_supplement_dragon
		ls_table_name = 'ProfileLab'	
	case idw_profile_illinois_disposal_supplemen
		ls_table_name = 'ProfileIllinoisDisposal'	
	case	idw_profile_ldr_form_dragon
		ls_table_name = 'Profile'	
	case idw_profile_pcb_supplement_dragon //COR2-JXM 02/20/2019
		ls_table_name = 'ProfileLab'		
    case idw_profile_radioactive_supplement_page_1
		ls_table_name = "ProfileRadioactive"
	case idw_profile_radioactive_supplement_page_2
		ls_table_name = "ProfileRadioactiveExempt"
	case idw_profile_radioactive_supplement_page_3
		ls_table_name = "ProfileRadioactiveusei"
	case idw_audit  //DevOps 18063 info_gde 07/06/2021; Profile Audit - Inserting duplicated audit records for Profile table
		ls_table_name = "Profile"
	case idw_profile_radioactive_supplement_3sub
	    ls_table_name = "ProfileRadioactiveusei"
	// MPM - 6/20/2020 - DevOps 16428
	case idw_ship_volume
		ls_table_name = "ProfileShippingUnit"
	// Dipankar - 9/1/2023 - Added for 69393
	case idw_profile_fuels_blending
		ls_table_name = 'ProfileEcoFLo'
	CASE ELSE
		MessageBox(gs_app_name + ":  Profile Audit", "Cannot audit unknown datawindow.~rPlease contact the I.T. Department.", Exclamation!)
		idw_audit.SetRedraw (true)
		RETURN gi_failure
END CHOOSE

SetMicroHelp('Working on ' + ls_table_name)

//DevOps 17097 info_gde 09/22/2020; Reject Form - Audit Tab
IF lower(ls_table_name)= "profile" THEN  
	if idw_detail.object.b_reject_form.visible then
								
		if ii_rejection= 0 then
			ll_row_audit=ll_row_audit + 1
			idw_audit.InsertRow(ll_row_audit)
			idw_audit.Object.table_name[ll_row_audit] = ls_table_name
			idw_audit.Object.profile_id[ll_row_audit] = al_profile_id
			idw_audit.Object.column_name[ll_row_audit] = 'Docs Pending Reason'
			idw_audit.Object.before_value[ll_row_audit] = '(Inserted)'
			idw_audit.Object.after_value[ll_row_audit] = 'Rejection in Process'
			idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
			idw_audit.Object.date_modified[ll_row_audit] = idt_save_date
			idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
			ii_rejection=1
			// rb 06/26/2012 Turn redraw back on
			idw_audit.SetRedraw (true)

					RETURN 1
		end if  //DevOps 17097 info_gde 09/22/2020; Reject Form - Audit Tab
	end if
end if
				
// MPM - GEM 57744 - Added ability to audit deleted rows
//first process deleted rows

// No Rows, nothing changed
IF adw_name.deletedCount() > 0 and al_row = 0 THEN 

	ll_row_start = 1
	ll_row_stop = adw_name.deletedcount()
	li_column_count = Integer(adw_name.Object.Datawindow.Column.count)

	// Check each row
	FOR ll_row = ll_row_start TO ll_row_stop
		IF li_rc = gi_failure THEN EXIT
		// build the key
		ls_reference = ""
		
		FOR li_idx = 1 TO li_column_count
			ls_key = lower(adw_name.Describe("#" + string(li_idx) + ".key")) 
				IF ls_key= "yes" THEN
					ls_column_name = Lower(adw_name.Describe("#"+string(li_idx) + ".Name"))
					ls_key_val = String(adw_name.Object.Data.delete[ll_row, li_idx])
					ls_reference = ls_reference + " " + ls_column_name + ": " + ls_key_val 
				END IF
			next
		//check each column
		FOR li_idx = 1 TO li_column_count
			IF li_rc = gi_failure THEN EXIT
//			ldw_status = adw_name.getitemstatus(ll_row,0,delete!)
			ls_updateable = lower(adw_name.Describe("#" + string(li_idx) + ".update"))
			IF ls_updateable = "yes" THEN
				// MPM - GEM 57744
				// MPM - DevOps 19139 - Added logic to prevent Profile.profile_tracking_days and Profile.profile_tracking_bus_days changes from
				// being audited.
				// Kamendra - DevOps #41960 - added logic to prevent generator_contact from being recorded in audit tab
				ls_column_name = RIGHT( Lower(adw_name.Describe("#" + String(li_idx) + ".Name")), 40 )
				IF ls_column_name = "date_added" OR ls_column_name = "date_modified" &
					OR ls_column_name = "added_by" OR ls_column_name = "created_by" &
					OR ls_column_name = "modified_by" OR ls_column_name ="profileradioactive_added_by" & 
					OR ls_column_name = "profileradioactive_date_added" OR ls_column_name="profileradioactive_modified_by" &
					OR ls_column_name = "profileradioactive_date_modified"  &
					OR ls_column_name = "profile_tracking_days" OR ls_column_name = "profile_tracking_bus_days" &
					OR ls_column_name = "generator_contact" THEN
					CONTINUE
					//DevOps 17135 info_gde 08/18/2020; PROD EQAI - Profile Tracking - Audit Tab - RAD Supplement 
				END IF
				//DevOps 16822 info_gde 08/18/2020; PROD EQAI - Profile - Audit - Profile Composition
				If lower(ls_table_name)='profilecomposition' Then
					adw_name.Modify("comp_description.Key = yes")
					adw_name.Modify("comp_from_pct.Key = yes")
					adw_name.Modify("comp_to_pct.Key = yes")
					adw_name.Modify("comp_typical_pct.Key = yes")
					adw_name.Modify("unit.Key = yes")
					adw_name.Modify("sequence_id.Key = yes")
				choose case lower(ls_column_name)
					case "comp_from_pct"
						ls_column_name='Composition "From"'
					case "comp_to_pct"
						ls_column_name='Composition "To"'
					case "comp_typical_pct"
						ls_column_name='Composition Typical %'
					case "sequence_id"
						ls_column_name='Sequence ID'
					case "unit"
						ls_column_name='Composition Unit'
					case "comp_description"
						ls_column_name='Comp Physical Desc'
                  /*statementblock*/
				end choose
				  adw_name.Modify("comp_description.Key = no")
				  adw_name.Modify("comp_from_pct.Key = no")
				  adw_name.Modify("comp_to_pct.Key = no")
				  adw_name.Modify("comp_typical_pct.Key = no")
				  adw_name.Modify("unit.Key = no")
				  adw_name.Modify("sequence_id.Key = no")
				//DevOps 16822 info_gde 08/18/2020; PROD EQAI - Profile - Audit - Profile Composition
				
				ls_display_column_name = ls_column_name 
				ls_after = "(deleted)"
				ls_column_type = Upper(adw_name.Describe("#" + String(li_idx) + ".ColType"))
				// MPM - 3/24/2020 - DevOps 14555
				IF Left(ls_column_type, 4) = "CHAR" THEN
					ls_before = adw_name.Object.Data.delete[ll_row, li_idx]
					IF Trim(ls_before) = '' THEN ls_before = '(blank)'
				ELSE
					ls_before = String(adw_name.Object.Data.delete[ll_row, li_idx])
				END IF
			else
				//DevOps 16822 info_gde 08/18/2020; PROD EQAI - Profile - Audit - Profile Composition
				
				// MPM - 3/24/2020 - DevOps 14555
				ls_display_column_name = ls_column_name + ' (' + ls_table_name + ')'
				ls_after = "(deleted)"
				ls_column_type = Upper(adw_name.Describe("#" + String(li_idx) + ".ColType"))
				// MPM - 3/24/2020 - DevOps 14555
				IF Left(ls_column_type, 4) = "CHAR" THEN
					ls_before = adw_name.Object.Data.delete[ll_row, li_idx]
					IF Trim(ls_before) = '' THEN ls_before = '(blank)'
				ELSE
					ls_before = String(adw_name.Object.Data.delete[ll_row, li_idx])
				END IF
			end if
								
				
				IF IsNull(ls_before) THEN ls_before = "(blank)"
			
				// MPM - GEM 57744
				If ls_table_name = "ProfileQuoteApproval" then
					if ls_column_name = 'lk_load_sampling_frequency_required_flag' then
						ls_column_name = 'bulk_load_sampling_frequency_reqd_flag'
					end if
					//Samanage 14189
					if ll_row > 0 and ll_row <= idw_approval.deletedcount() then
						ls_reference = 'Approval ' + idw_approval.getItemString(ll_row,'approval_code',Delete!,true) + ' for facility ' + String(idw_approval.getItemNumber(ll_row,'company_id',Delete!,true)) + ' / ' + String(idw_approval.getItemNumber(ll_row,'profit_ctr_id',Delete!,true)) 
					else
						ls_reference = ''
					end if
				Else
					ls_reference = ''
				End If
						
				ll_row_audit = idw_audit.InsertRow(1)
				IF ll_row_audit <= 0 THEN
					MessageBox(gs_app_name + ":  Profile Audit", "Cannot insert audit record.", Exclamation!)
					li_rc = gi_failure
				ELSE
					//DevOps 16872 info_gde 08/06/2020; ERP (CMMI)\Application_Development\EQAI
					choose case lower(ls_column_name)
					case 'const_id_2'		
						   if isNumber(ls_before) and ls_after='(deleted)' then
								ll_waste_code_uid=long(ls_before)
								
								SELECT Top 1 const_desc
								INTO :ls_before
								FROM Constituents c 
								WHERE c.const_id =:ll_waste_code_uid
								ORDER BY c.const_id
								USING itr_share;
								
								if ls_before = "(Inserted)" and ls_after='null' then continue
								ls_display_column_name='const_id_desc(ProfileConstituent)'
						         if ls_before = "(Inserted)" and ls_after="(blank)" then continue
								if ls_before = "(blank)" and ls_after="(Deleted)" then continue
								if ls_table_name='PROFILECONSTITUENT' then continue
								if ls_table_name='PROFILECOMPOSITION' then continue
								idw_audit.Object.profile_id[ll_row_audit] = al_profile_id 
								idw_audit.Object.table_name[ll_row_audit] = ls_table_name
								idw_audit.Object.column_name[ll_row_audit] = ls_column_name
							// MPM - 3/24/2020 - DevOps 14555
								idw_audit.Object.column_name_display[ll_row_audit] = ls_display_column_name
								idw_audit.object.audit_reference[ll_row_audit] = Trim(ls_reference)
								idw_audit.Object.before_value[ll_row_audit] = Left(ls_before, 255)
								idw_audit.Object.after_value[ll_row_audit] = Left(ls_after, 255)
								idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
								idw_audit.Object.date_modified[ll_row_audit] = idt_save_date
							end if
					case else
						 	if ls_before = "(Inserted)" and ls_after='null' then continue
						    if ls_before = "(Inserted)" and ls_after="(blank)" then continue
							if ls_before = "(blank)" and ls_after="(Deleted)" then continue
							if ls_table_name='PROFILECONSTITUENT' then continue
							if ls_table_name='PROFILECOMPOSITION' then continue
							idw_audit.Object.profile_id[ll_row_audit] = al_profile_id 
							idw_audit.Object.table_name[ll_row_audit] = ls_table_name
							idw_audit.Object.column_name[ll_row_audit] = ls_column_name
							// MPM - 3/24/2020 - DevOps 14555
							idw_audit.Object.column_name_display[ll_row_audit] = ls_display_column_name
							idw_audit.object.audit_reference[ll_row_audit] = Trim(ls_reference)
							idw_audit.Object.before_value[ll_row_audit] = Left(ls_before, 255)
							idw_audit.Object.after_value[ll_row_audit] = Left(ls_after, 255)
							idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
							idw_audit.Object.date_modified[ll_row_audit] = idt_save_date
					end choose
                     //DevOps 16872 info_gde 08/06/2020; ERP (CMMI)\Application_Development\EQAI
				END IF
			END IF
		NEXT
	NEXT
END IF
	//Task-10589 - Profile Renewal on cor.AM 
	// Getting rowcount for inserted rows
// Check each row
ll_row_stop = adw_name.Rowcount()
FOR ll_row = ll_row_start TO ll_row_stop
	IF li_rc = gi_failure THEN EXIT
	
	ldw_status = adw_name.GetItemStatus(ll_row,0,Primary!)
		
	// Check each column
	FOR li_idx = 1 TO li_column_count
		IF li_rc = gi_failure THEN EXIT
		   
		IF (IsNull(adw_name.Object.Data[ll_row, li_idx]) AND NOT IsNull(adw_name.Object.Data.Primary.Original[ll_row, li_idx])) OR &
			(NOT IsNull(adw_name.Object.Data[ll_row, li_idx]) AND IsNull(adw_name.Object.Data.Primary.Original[ll_row, li_idx])) OR &
			(NOT IsNull(adw_name.Object.Data[ll_row, li_idx]) AND NOT IsNull(adw_name.Object.Data.Primary.Original[ll_row, li_idx]) AND &
			adw_name.Object.Data[ll_row, li_idx] <> adw_name.Object.Data.Primary.Original[ll_row, li_idx]) OR &
			ab_delete = TRUE THEN
			
			// JCG 10/9/17 Consolidation Project - Added the RIGHT() function
			ls_column_name = RIGHT( Lower(adw_name.Describe("#" + String(li_idx) + ".Name")), 40 )
			
			// Skip added and modified columns
			// MPM - DevOps 19139 - Added logic to prevent Profile.profile_tracking_days and Profile.profile_tracking_bus_days changes from
			// being audited.
			// Kamendra - DevOps #41960 - added logic to prevent generator_contact from being recorded in audit tab
			IF ls_column_name = "date_added" OR ls_column_name = "date_modified" &
				OR ls_column_name = "added_by" OR ls_column_name = "created_by" &
				OR ls_column_name = "modified_by" OR ls_column_name ="profileradioactive_added_by" &
				OR ls_column_name = "profileradioactive_date_added" OR ls_column_name="profileradioactive_modified_by" &
				OR ls_column_name = "profileradioactive_date_modified" &
				OR ls_column_name = "profile_tracking_days" OR ls_column_name = "profile_tracking_bus_days" &
				OR ls_column_name = "generator_contact" THEN
				CONTINUE
				//DevOps 17135 info_gde 08/18/2020; PROD EQAI - Profile Tracking - Audit Tab - RAD Supplement 
			ELSE
				// MPM - 3/24/2020 - DevOps 14555
				ls_display_column_name = ls_column_name + ' (' + ls_table_name + ')'
				//SetMicroHelp('Working on ' + ls_column_name)
			
				ls_column_type = Upper(adw_name.Describe("#" + String(li_idx) + ".ColType"))
				
				IF Left(ls_column_type, 4) = "CHAR" THEN
					ls_before = adw_name.Object.Data.Primary.Original[ll_row, li_idx]
					// MPM - 3/16/2020 - DevOps 14555
					IF Trim(ls_before) = '' THEN ls_before = '(blank)'
					ls_after = adw_name.Object.Data.Primary[ll_row, li_idx]
					IF Trim(ls_after) = '' THEN ls_after = '(blank)'
				ELSE
					ls_before = String(adw_name.Object.Data.Primary.Original[ll_row, li_idx])
					ls_after = String(adw_name.Object.Data.Primary[ll_row, li_idx])
				END IF
				IF IsNull(ls_before) THEN ls_before = "(blank)"
				IF IsNull(ls_after) THEN ls_after = "(blank)"
			
				// No point in writing an audit record if the before and after values are the same
				If adw_name.GetItemStatus(ll_row,0,Primary!) = NewModified! Then
					ls_before = "(Inserted)"
				end If
				
				//DevOps 16766 info_gde 08/05/2020; PROD EQAI - Profile - Waste Code - Audit
				IF ls_table_name = "ProfileRadioactive" AND ls_before = "(Inserted)" AND ls_after = "(blank)" Then
					CONTINUE
				End If
				//DevOps 17135 info_gde 08/20/2020; PROD EQAI - Profile Tracking - Audit Tab - RAD Supplement on Every Profile edit
				IF ls_table_name = "FormRadioactiveExempt" AND ls_before = "(Inserted)" AND ls_after = "(blank)" Then
					CONTINUE
				End If
				
				
				IF ls_before = ls_after THEN
					CONTINUE
				ELSE
					// Handle Text field changes, show an entry but store whole change in table
					// This is a temporary fix to let them save the record.  Plan is to add an audit
					// tab to view the text field changes as a whole.  At least the changes are captured
					// If the insert fails, the first 255 characters are written
					li_before_length = Len(ls_before)
					li_after_length = Len(ls_after)

					IF li_before_length > 255 OR li_after_length > 255 THEN
						INSERT ProfileAuditComment (profile_id, table_name, column_name, before_value, after_value, audit_reference, modified_by, date_modified)
						VALUES(:al_profile_id, :ls_table_name, :ls_column_name, :ls_before, :ls_after, 
							:ls_null, :gs_user_id, :idt_save_date)
						USING itr_share;
						IF itr_share.SQLcode <> 0 THEN
							MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLErrText, Exclamation!)
							ls_before = Left(ls_before, 255)
							ls_after = Left(ls_after, 255)
						ELSE
							ls_before = ls_continued

							// Show value deleted?
							IF ab_delete = TRUE THEN 
								ls_after = "(deleted)"
							ELSE
								ls_after = ls_continued
							END IF
						END IF
					END IF
			
					// Record the change
					ll_row_audit = idw_audit.InsertRow(1)
					IF ll_row_audit <= 0 THEN
						MessageBox(gs_app_name + ":  Profile Audit", "Cannot insert audit record.", Exclamation!)
						li_rc = gi_failure
					ELSE
						If Upper(ls_table_name) = "PROFILEQUOTEAPPROVAL" then
							// MPM - 9/27/2018 - Task 5186
							if ls_column_name = 'lk_load_sampling_frequency_required_flag' then
								ls_column_name = 'bulk_load_sampling_frequency_reqd_flag'
							end if
							//Samanage 14189
							if ll_row > 0 and ll_row <= idw_approval.rowcount() then
								ls_reference = 'Approval ' + idw_approval.getItemString(ll_row,'approval_code') + ' for facility ' + String(idw_approval.getItemNumber(ll_row,'company_id')) + ' / ' + String(idw_approval.getItemNumber(ll_row,'profit_ctr_id')) 
							else
								ls_reference = ''
							end if
						elseif Upper(ls_table_name) = 'FORMWCR' THEN
							// SK 10/29/2013 Unlinking a WCR? Yes, then tweak to audit showing that form X was unlinked from current profile
							// Unlinking really means updating profile_id to NULL on that form record
							// so the column that's changed and is causing the below Insert is really the FormWCR.profile_id, but if we don't do
							// the following tweaking then audit to user will just show profile_id changed from current to null, which is not meaningful to them
							ll_form_id = adw_name.object.form_id[al_row]
							ls_column_name	= 'form_id'
							ls_display_column_name = 'Form ID'
							ls_reference = 'Unlinked from Profile ' + String(al_profile_id)
							ls_before = String(ll_form_id) 
							ls_after = "(Unlinked)" 
					
						elseif Upper(ls_table_name) = 'PROFILEWASTECODE' or Upper(ls_table_name) = 'PROFILECOMPOSITION' or  Upper(ls_table_name) = "PROFILECONSTITUENT" then
							// MPM - 3/16/2020 - DevOps 14555
							// build the key
							ls_reference = ""
							//DevOps 16766 info_gde 07/27/2020; PROD EQAI - Profile - Waste Code - Audit
							FOR li_idx = 1 TO li_column_count
								choose case Upper(ls_table_name)
								case 'PROFILECONSTITUENT'
									//DevOps 16766 info_gde 07/28/2020; DevOps 20987
//									  adw_name.Modify("typical_concentration.Key = yes")
//									   adw_name.Modify("min_concentration.Key = yes")
//										 adw_name.Modify("concentration.Key = yes")
//										  adw_name.Modify("unit.Key = yes")
//										   adw_name.Modify("tclp_flag.Key = yes")
//											 adw_name.Modify("uhc.Key = yes")  
//											  adw_name.Modify("exceeds_ldr.Key = yes")
											
									//ls_key = lower(adw_name.Describe("#" + string(li_idx) + ".key"))
									ls_updateable = lower(adw_name.Describe("#" + string(li_idx) + ".update"))
									ls_column_name = Lower(adw_name.Describe("#"+string(li_idx) + ".Name"))
									
								//IF ls_key= "yes" THEN
								   IF ls_updateable= "yes" THEN
										ls_column_name = Lower(adw_name.Describe("#"+string(li_idx) + ".Name"))
										choose case ls_column_name  //DevOps 17241 info_gde 10/08/2020 -- start
											case 'const_id_2' 
												if ls_before = "(Inserted)" and  isNumber(ls_after) then 
													ls_display_column_name= 'Const id desc (ProfileConstituent)'
													ls_after = string(adw_name.describe("evaluate('lookupdisplay(const_id_2)',"+string(ll_row) +")"))
												end if
												
												if ls_after = "(deleted)" and not isNumber(ls_before) then
													ls_display_column_name= 'Const id desc (ProfileConstituent)'
													ls_before2 =  string(adw_name.describe("evaluate('lookupdisplay(const_id_2)',"+string(ll_row) +")"))
												end if
												//update
												if ldw_status=datamodified! then continue
												
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												if isNull(ls_before2) OR ls_before2='' then ls_before2=ls_before

												ib_process=TRUE
												
											case 'typical_concentration'
												if isNumber(ls_before) and isNumber(ls_after) then
													ls_display_column_name= 'Typical_Concentration (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
												else
													ls_display_column_name= 'Typical_Concentration (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
												end if
												
												if ldw_status=datamodified! then
													ls_display_column_name= 'Typical_Concentration (ProfileConstituent)'
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													if ls_after=ls_before2 then continue
													if ls_before = ls_after then continue
													if isNull(ls_before2) and isNull(ls_after) then continue 
													if isNull(ls_before) and isNull(ls_after) then continue
													if isNumber(ls_before) AND isNull(ls_after) then ls_after="(blank)"
												end if
												
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												ib_process=TRUE
													
											case 'min_concentration'
												if isNumber(ls_before) and isNumber(ls_after) then
													ls_display_column_name= 'Min_Concentration (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
												else
													ls_display_column_name= 'Min_Concentration (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
												end if
												if ldw_status=datamodified! then
													ls_display_column_name= 'Min_Concentration (ProfileConstituent)'
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													if ls_after=ls_before2 then continue
													if ls_before = ls_after then continue
													if isNull(ls_before2) and isNull(ls_after) then continue 
													if isNull(ls_before) and isNull(ls_after) then continue
													if isNumber(ls_before) AND isNull(ls_after) then ls_after="(blank)"
												end if
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												if isNull(ls_before2) OR ls_before2='' then ls_before2=ls_before
												ib_process=TRUE
											
											case 'concentration'
												if isNumber(ls_before) and isNumber(ls_after) then
													ls_display_column_name= 'Concentration (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
												else
													ls_display_column_name= 'Concentration (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
												end if
												if ldw_status=datamodified! then
													ls_display_column_name= 'Concentration (ProfileConstituent)'
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													if ls_after=ls_before2 then continue
													if ls_before = ls_after then continue
													if isNull(ls_before2) and isNull(ls_after) then continue 
													if isNull(ls_before) and isNull(ls_after) then continue
													if isNumber(ls_before) AND isNull(ls_after) then ls_after="(blank)"
												end if
												
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												if isNull(ls_before2) OR ls_before2='' then ls_before2=ls_before
												ib_process=TRUE
												
											case 'unit'
												if isNumber(ls_before) and isNumber(ls_after) then
													ls_display_column_name= 'Unit (ProfileConstituent)'
													ls_after = String(adw_name.describe("evaluate('lookupdisplay(unit)',"+string(ll_row) +")"))
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
												else
													ls_display_column_name= 'Unit (ProfileConstituent)'
													ls_after = String(adw_name.describe("evaluate('lookupdisplay(unit)',"+string(ll_row) +")"))
												end if
												if ldw_status=datamodified! then
													ls_display_column_name= 'Unit (ProfileConstituent)'
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													if ls_after=ls_before2 then continue
													if ls_before = ls_after then continue
													if isNull(ls_before) and isNull(ls_after) then continue
													if isNull(ls_before2) and isNull(ls_after) then continue 
													if ls_after="(blank)" then continue
													if isNull(ls_after) then continue
													if ls_after='' then continue
												end if
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												if isNull(ls_before2) OR ls_before2='' then ls_before2=ls_before
												ib_process=TRUE
												
											case 'tclp_flag'
												if isNumber(ls_before) and isNumber(ls_after) then
													ls_display_column_name= 'Test Method (ProfileConstituent)'
													ls_after = String(adw_name.Object.tclp_flag[ll_row])
													ls_before2 = String(adw_name.Object.tclp_flag.Original[ll_row])
												else
													ls_display_column_name= 'Test Method (ProfileConstituent)'
													ls_after = String(adw_name.Object.tclp_flag[ll_row])
												end if
												if ldw_status=datamodified! then
													ls_display_column_name= 'Test Method (ProfileConstituent)'
													ls_before2 = String(adw_name.Object.tclp_flag.Original[ll_row])
													ls_after = String(adw_name.Object.tclp_flag[ll_row])
													if ls_after=ls_before2 then continue
													if ls_before = ls_after then continue
													if isNull(ls_before) and isNull(ls_after) then continue
													if isNull(ls_before2) and isNull(ls_after) then continue 
													if ls_after="(blank)" then continue
													if isNull(ls_after) then continue
													if ls_after='' then continue
												end if
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												if isNull(ls_before2) OR ls_before2='' then ls_before2=ls_before
												ib_process=TRUE
												
											case 'uhc'
												if isNumber(ls_before) and isNumber(ls_after) then
													ls_display_column_name= 'UHC (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
												else
													ls_display_column_name= 'UHC (ProfileConstituent)'
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
												end if
												if ldw_status=datamodified! then
													ls_display_column_name= 'UHC (ProfileConstituent)'
													ls_before2 = String(adw_name.Object.Data.Original[ll_row, li_idx])
													ls_after = String(adw_name.Object.Data[ll_row, li_idx])
													if ls_after=ls_before2 then continue
													if ls_before = ls_after then continue
													if isNull(ls_before) and isNull(ls_after) then continue
													if isNull(ls_before2) and isNull(ls_after) then continue 
													if ls_after="(blank)" then continue
													if isNull(ls_after) then continue
													if ls_after='' then continue
												end if
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												if isNull(ls_before2) OR ls_before2='' then ls_before2=ls_before
												ib_process=TRUE
												
											case 'exceeds_ldr'
												if isNumber(ls_before) and isNumber(ls_after) then
													ls_display_column_name= 'Exceeds_LDR (ProfileConstituent)'
													ls_after = String(adw_name.Object.exceeds_ldr[ll_row])
													ls_before2 = String(adw_name.Object.exceeds_ldr.Original[ll_row])
												else
													ls_display_column_name= 'Exceeds_LDR (ProfileConstituent)'
													ls_after = String(adw_name.Object.exceeds_ldr[ll_row])
												end if
												if ldw_status=datamodified! then
													ls_display_column_name= 'Exceeds_LDR (ProfileConstituent)'
													ls_before2 = String(adw_name.Object.exceeds_ldr.Original[ll_row])
													ls_after = String(adw_name.Object.exceeds_ldr[ll_row])
													if ls_after=ls_before2 then continue
													 if ls_before = ls_after then continue
													if isNull(ls_before) and isNull(ls_after) then continue
													if isNull(ls_before2) and isNull(ls_after) then continue 
													if isNull(ls_after) then continue
													if ls_after='' then continue
												end if
												if ls_before = "(Inserted)" and (isNull(ls_after) OR ls_after='null')  then ls_after="(blank)"
												if ls_before = "(Inserted)" and ls_after="(blank)" then continue
												if ls_before = "(blank)" and ls_after="(blank)" then continue
												ll_row_audit = idw_audit.InsertRow(0)   		
												ls_reference=''
												if isNull(ls_before2) OR ls_before2='' then ls_before2=ls_before
												ib_process=TRUE
												
										end choose  //DevOps 17241 info_gde 10/08/2020 -- end
//									  adw_name.Modify("typical_concentration.Key = no")  DevOps 20987
//									   adw_name.Modify("min_concentration.Key = no")
//										 adw_name.Modify("concentration.Key = no")
//										  adw_name.Modify("unit.Key = no")
//										   adw_name.Modify("tclp_flag.Key = no")
//											 adw_name.Modify("uhc.Key = no")
//											  adw_name.Modify("exceeds_ldr.Key = no")
									END IF
								 

								case 'PROFILEWASTECODE'
									//DevOps 16766 info_gde 07/28/2020;
									if adw_name.object.waste_code_uid.key='yes' then  adw_name.Modify("waste_code_uid.Key = No")
									if adw_name.object.profile_id.key='yes' then  adw_name.Modify("profile_id.Key = No")  
									if adw_name.object.profilewastecode_waste_code.key='no' then  adw_name.Modify("profilewastecode_waste_code.Key = Yes")
									
									ls_key = lower(adw_name.Describe("#" + string(li_idx) + ".key")) 
									
									IF ls_key= "yes" THEN
										ls_column_name = Lower(adw_name.Describe("#"+string(li_idx) + ".Name"))
										ls_key_val = String(adw_name.Object.Data[ll_row, li_idx])
										if ls_display_column_name = 'waste_code (Profile)' then
											ls_display_column_name = 'display_name (Profile)'											
											ls_after = ls_key_val
											ls_reference = ls_reference + " " + ls_column_name  
										end if
										
										if ls_display_column_name='profile_id (ProfileWasteCode)' and ls_before = "(Inserted)" then
											ls_after = ls_key_val
										   ls_display_column_name='display_name (ProfileWasteCode)'
										end if
										
										if ls_display_column_name='sequence_id (ProfileWasteCode)' and isNumber(ls_before) and  ls_after = "(blank)" then
											ls_before = String(adw_name.Object.waste_code[ll_row])
											ls_display_column_name = 'display_name (ProfileWasteCode)'
										end if
										
										//DevOps 16766 info_gde 08/05/2020; PROD EQAI - Profile - Waste Code - Audit
										if ls_display_column_name='sequence_id (ProfileWasteCode)' and isNumber(ls_before) and  isNumber(ls_after) then
											ls_before = String(adw_name.Object.waste_code.Primary.Original[ll_row])
											ls_after = String(adw_name.Object.waste_code.Primary[ll_row])
											ls_display_column_name = 'display_name (ProfileWasteCode)'
										end if
										
										//DevOps 16766 info_gde 08/05/2020; PROD EQAI - Profile - Waste Code - Audit
										if ls_display_column_name='sequence_id (ProfileWasteCode)' and ls_before = '(blank)' and  isNumber(ls_after) then
											ls_after = String(adw_name.Object.waste_code.Primary[ll_row])
											ls_display_column_name = 'display_name (ProfileWasteCode)'
										end if
										
										//ls_reference = ls_reference + " " + ls_column_name + ": " + ls_key_val 
									END IF
										adw_name.Modify("profile_id.Key = yes")  //DevOps 16766 info_gde 07/28/2020;
										adw_name.Modify("waste_code_uid.Key = yes")
										adw_name.Modify("profilewastecode_waste_code.Key = no")
									
								case 'PROFILECOMPOSITION'  //DevOps 16822 info_gde 07/30/2020; PROD EQAI - Profile - Audit - Profile Composition
									   adw_name.Modify("comp_description.Key = yes")
									   adw_name.Modify("comp_from_pct.Key = yes")
									   adw_name.Modify("comp_to_pct.Key = yes")
									   adw_name.Modify("comp_typical_pct.Key = yes")
									   adw_name.Modify("unit.Key = yes")
									   adw_name.Modify("sequence_id.Key = yes")

									ls_key = lower(adw_name.Describe("#" + string(li_idx) + ".key")) 
									 
									IF ls_key= "yes" THEN
										ls_column_name = Lower(adw_name.Describe("#"+string(li_idx) + ".Name"))
										//DevOps 16872 info_gde 08/07/2020; ERP (CMMI)\Application_Development\EQAI
										//DevOps 16822 info_gde 08/11/2020; PROD EQAI - Profile - Audit - Profile Composition
									//	if ls_before = "(Inserted)"  then
											Choose Case Lower(ls_column_name)
												Case 'comp_description' 		
													if adw_name.GetItemStatus(ll_row, "comp_description", Primary!)=NotModified! then continue
													ls_display_column_name = 'Comp Physical Desc'
													ls_before2 =  String(adw_name.Object.comp_description.Primary.Original[ll_row])
													ls_after = String(adw_name.Object.comp_description[ll_row])
													ll_row_audit = idw_audit.InsertRow(0)   		
													ls_reference=''
													if ls_before2<>ls_after then
														ib_process=TRUE
													elseif ls_before= "(Inserted)" then
														ib_process=TRUE
													end if
												Case 'comp_from_pct'
													if adw_name.GetItemStatus(ll_row, "comp_from_pct", Primary!)=NotModified! then continue
													ls_display_column_name = 'Composition "From"'
													ls_before2 =  String(adw_name.Object.comp_from_pct.Primary.Original[ll_row])
													ls_after = String(adw_name.Object.comp_from_pct[ll_row])
													ll_row_audit = idw_audit.InsertRow(0)   		
													ls_reference=''
													if ls_before2<>ls_after then
														ib_process=TRUE
													elseif ls_before= "(Inserted)" then
														ib_process=TRUE
													end if
												Case 'comp_to_pct' 
													if adw_name.GetItemStatus(ll_row, "comp_to_pct", Primary!)=NotModified! then continue
													ls_display_column_name = 'Composition "To"'
													ls_before2 =  String(adw_name.Object.comp_to_pct.Primary.Original[ll_row])
													ls_after = String(adw_name.Object.comp_to_pct[ll_row])
													ll_row_audit = idw_audit.InsertRow(0)   		
													ls_reference=''
													if ls_before2<>ls_after then
														ib_process=TRUE
														elseif ls_before= "(Inserted)" then
														ib_process=TRUE
													end if
													
												Case 'comp_typical_pct'
													if adw_name.GetItemStatus(ll_row, "comp_typical_pct", Primary!)=NotModified! then continue
													ls_display_column_name = 'Composition Typical %'
													ls_before2 =  String(adw_name.Object.comp_typical_pct.Primary.Original[ll_row])
													ls_after = String(adw_name.Object.comp_typical_pct[ll_row])
													ll_row_audit = idw_audit.InsertRow(0)   		
													ls_reference=''
													if ls_before2<>ls_after then
														ib_process=TRUE
													elseif ls_before= "(Inserted)" then
														ib_process=TRUE
													end if
												Case 'unit'
													if adw_name.GetItemStatus(ll_row, "unit", Primary!)=NotModified! then continue
													ls_display_column_name = 'Composition Unit'
													ls_before2 =  String(adw_name.Object.unit.Primary.Original[ll_row])
													ls_after = String(adw_name.Object.unit[ll_row])
													ll_row_audit = idw_audit.InsertRow(0)   		
													ls_reference=''
													if ls_before2<>ls_after then
														ib_process=TRUE
													elseif ls_before= "(Inserted)" then
														ib_process=TRUE
													end if
												Case 'sequence_id'
													if adw_name.GetItemStatus(ll_row, "sequence_id", Primary!)=NotModified! then continue
													ls_display_column_name = 'Sequence ID'
													ls_before2 =  String(adw_name.Object.sequence_id.Primary.Original[ll_row])
													ls_after = String(adw_name.Object.sequence_id[ll_row])
													ls_reference=''
													if ls_before2 <> ls_after then
														ib_process=TRUE
													elseif ls_before= "(Inserted)" then
														ib_process=TRUE
													end if
											End Choose		
											adw_name.Modify("comp_description.Key = no")
											adw_name.Modify("comp_from_pct.Key = no")
											adw_name.Modify("comp_to_pct.Key = no")
											adw_name.Modify("comp_typical_pct.Key = no")
											adw_name.Modify("unit.Key = no")
											adw_name.Modify("sequence_id.Key = no")
									END IF 
										adw_name.Modify("sequence_id.Key = yes")
										adw_name.object.comp_description.key='no'  
									 
								case else
								    ls_key = lower(adw_name.Describe("#" + string(li_idx) + ".key")) 
									IF ls_key= "yes" THEN
										ls_column_name = Lower(adw_name.Describe("#"+string(li_idx) + ".Name"))
										ls_key_val = String(adw_name.Object.Data[ll_row, li_idx])
										ls_reference = ls_reference + " " + ls_column_name + ": " + ls_key_val 
									END IF
								end choose
								//Added for DevOps #42054 - Kamendra - Begin
								idw_audit.Object.profile_id[ll_row_audit] = al_profile_id
								idw_audit.Object.table_name[ll_row_audit] = ls_table_name
								idw_audit.Object.column_name[ll_row_audit] = ls_column_name
								idw_audit.Object.column_name_display[ll_row_audit] = ls_display_column_name
								idw_audit.Object.before_value[ll_row_audit] = ls_before
								idw_audit.Object.audit_reference[ll_row_audit] = ls_reference
								idw_audit.Object.after_value[ll_row_audit] = ls_after
								idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
								idw_audit.Object.date_modified[ll_row_audit] = idt_save_date									
								//Added for DevOps #42054 - Kamendra - End
							NEXT
							
						Else
							ls_reference = ''
						End If
						
						 if ls_before = ls_after then continue
						 if ls_before = "(Inserted)" and ls_after='null' then continue
						 if ls_before = "(Inserted)" and ls_after="(blank)" then continue
				      	 if ls_before = "(blank)" and ls_after="(Deleted)" then continue
						 if ls_table_name='PROFILECONSTITUENT' then continue
						 if ls_table_name='PROFILECOMPOSITION' then continue

						 if not ib_process then
						 
						 //DevOps 17330 info_gde 11/02/2020; PROD EQAI - Format - Profile Tracking - Audit - Date fields
						 if pos(lower(ls_display_column_name), 'date')> 0 then
							If IsDate ( Left ( ls_after , 10 ) ) And IsTime ( Right ( ls_after , 8 ) ) Then 
								lt_What_Time = Time(ls_after)
								if lt_What_Time = Time("00:00:00") then
								   ls_after = string( Left ( ls_after , 10 ))
								end if
							end if
							
							If IsDate ( Left ( ls_before , 10 ) ) And IsTime ( Right ( ls_before , 8 ) ) Then 
								lt_What_Time = Time(ls_before)
								if lt_What_Time = Time("00:00:00") then
								   ls_before = string( Left ( ls_before , 10 ))
								end if
							end if
						end if
							 //Added for DevOps #42054 - Kamendra - Begin 
							idw_audit.Object.profile_id[ll_row_audit] = al_profile_id
							idw_audit.Object.table_name[ll_row_audit] = ls_table_name
							idw_audit.Object.column_name[ll_row_audit] = ls_column_name
							idw_audit.Object.column_name_display[ll_row_audit] = ls_display_column_name
							idw_audit.Object.before_value[ll_row_audit] = ls_before
							idw_audit.Object.audit_reference[ll_row_audit] = ls_reference
							idw_audit.Object.after_value[ll_row_audit] = ls_after
							idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
							idw_audit.Object.date_modified[ll_row_audit] = idt_save_date
							 //Added for DevOps #42054 - Kamendra - End
						 end if
						
					  	ib_process=FALSE
					END IF
				END IF
			END IF
		END IF

	NEXT
NEXT

// rb 06/26/2012 Turn redraw back on
idw_audit.SetRedraw (true)

RETURN li_rc
end function

public function integer wf_get_department_id (string as_user);integer	li_department_id

SELECT department_id
	INTO :li_department_id
	FROM Users
	WHERE user_code = :as_user
USING itr_share;

IF li_department_id = 0 THEN
	SetNull(li_department_id)
END IF

RETURN li_department_id
end function

public function integer wf_audit_message (string as_note);int li_rc

li_rc = itp_note.uf_create_audit_note(as_note)

return li_rc
end function

public function integer wf_getaccess ();integer		li_group, li_rc, li_idx, li_column_count
long			ll_rowcount, ll_row, ll_company_id, ll_row_find
string		ls_approval_by_company, ls_msg, ls_profile_tracking, ls_find, ls_mod, ls_approval_access
//COR2 JXM 11531 Handle access level for Approval/Super
boolean lb_right_group = false
long ll_rtn_count

// Initialize
li_Rc = gi_success
ls_msg = ''

// Retrieve the Profile access table - 2 step process until Access Management Project is implemented.
// When the Access Management Project is implemented, the ProfileAccess table will be a VIEW
// and the hidden datawindow on this screen can retrieve directly from the View and the List 
// will also retrieve directly from the View
//
// 1. Run stored procedure to populate the ProfileAcess table on the SHARE database
// 2. Retrieve from the ProfileAccess table

DECLARE lproc PROCEDURE FOR dbo.sp_profile_access
	@debug		= :gi_debug,
	@user_code	= :gs_user_id,
	@db_type		= :gs_connect_type
USING itr_share;
	
itr_share.AutoCommit = TRUE
EXECUTE lproc;
itr_share.AutoCommit = FALSE
IF itr_share.SQLCode < 0 THEN 
	MessageBox(gs_app_name+": Access Error", "Cannot retrieve Profile Access.~rSQL Error: " + itr_share.SQLErrText + " - Contact I.T.", Exclamation!)
	li_rc = gi_failure

ELSE	
	// Retrieve this user's access by company
	dw_profile_access.SetTransObject(itr_share)
	itr_share.AutoCommit = TRUE
	ll_rowcount = dw_profile_access.Retrieve(gs_user_id)
	itr_share.AutoCommit = FALSE
	
	IF ll_rowcount <= 0 THEN
		MessageBox(gs_app_name+": Access Error", "Cannot retrieve Profile Access.~rSQL Error: " + itr_share.SQLErrText + " - Contact I.T.", Exclamation!)
		li_rc = gi_failure
	END IF
END IF
IF li_rc = gi_failure THEN RETURN li_rc

// Validate the access settings
ls_profile_tracking = dw_profile_access.Object.profile_tracking[1]
IF IsNull(ls_profile_tracking) THEN
	ls_msg = "A NULL or blank profile_tracking access is not valid."
	li_rc = gi_failure
ELSE
	// All profile tracking values must match
	ls_find = "(IsNull(profile_tracking) OR profile_tracking <> '" + ls_profile_tracking + "') AND company_id > 0"
	ll_row_find = dw_profile_access.Find(ls_find, 1, dw_profile_access.RowCount() + 1)
	IF ll_row_find > 0 THEN
		ls_msg = "Profile Tracking access must match for all companies."
		li_rc = gi_failure
	ELSE
		// All Approval values must be valid
		CHOOSE CASE ls_profile_tracking
			// None, View, No Price, Broker, and Lab
			CASE "N", "V", "P", "B", "L"
				// Approval must match
				ls_find = "(IsNull(approval) OR approval <> '" + ls_profile_tracking + "') AND company_id > 0"
				ll_row_find = dw_profile_access.Find(ls_find, 1, dw_profile_access.RowCount() + 1)
				IF ll_row_find > 0 THEN
					ls_msg = "Profile Tracking access must match Approval access."
					li_rc = gi_failure
				END IF	
			// Customer Service	
			CASE "C"
				// Approval can be C OR B
				ls_find = "(IsNull(approval) OR (approval <> 'C' AND approval <> 'B')) AND company_id > 0"
				ll_row_find = dw_profile_access.Find(ls_find, 1, dw_profile_access.RowCount() + 1)
				IF ll_row_find > 0 THEN
					ls_msg = "Profile Tracking access is Customer Service and Approval access must be Customer Service or Broker."
					li_rc = gi_failure
				END IF	
			// Approve
			CASE "A"
				// Approval can be A OR V
				ls_find = "(IsNull(approval) OR (approval <> 'A' AND approval <> 'V')) AND company_id > 0"
				ll_row_find = dw_profile_access.Find(ls_find, 1, dw_profile_access.RowCount() + 1)
				IF ll_row_find > 0 THEN
					ls_msg = "Profile Tracking access is Approval and Approval access must be Approve or View."
					li_rc = gi_failure
				END IF	
			// Super
			CASE "S"
				// Approval can be S OR B
				ls_find = "(IsNull(approval) OR (approval <> 'S' AND approval <> 'B')) AND company_id > 0"
				ll_row_find = dw_profile_access.Find(ls_find, 1, dw_profile_access.RowCount() + 1)
				IF ll_row_find > 0 THEN
					ls_msg = "Profile Tracking access is Super and Approval access must be Super or Broker."
					li_rc = gi_failure
				END IF	
			CASE ELSE
		END CHOOSE
	END IF
	
	IF li_rc = gi_failure THEN
		MessageBox(gs_app_name+": Profile Access Error", "There is a problem with your access to the Profile Tracking screen.  Please contact the I.T. Department with this message:~r" + ls_msg, Exclamation!)
		RETURN li_Rc
	END IF
END IF

	
// Setup the string used to delineate waste code and treatment retrieval
is_access_companies = ''
FOR ll_row = 1 TO dw_profile_access.RowCount()
	ls_approval_by_company = dw_profile_access.Object.approval[ll_row]
	IF ls_approval_by_company = 'N' OR ls_approval_by_company = 'V' OR &
		ls_approval_by_company = 'P' OR ls_approval_by_company = 'B' THEN
		CONTINUE
	ELSE
		ll_company_id = dw_profile_access.Object.company_id[ll_row]
		IF is_access_companies = '' THEN
			is_access_companies = string(ll_company_id)
		ELSE
			is_access_companies = is_access_companies + ',' + string(ll_company_id)
		END IF				
	END IF	
NEXT

// Set global access
is_access = ls_profile_tracking
is_access_to_scan = dw_profile_access.Object.approval_scan[1]

// A  for Approve, no access to technical info, can Approve profile

// C  for Customer Service - just like Approve access but cannot Approve
IF is_access = "A" OR is_access = "C" THEN
	idw_lab.Object.DataWindow.ReadOnly = 'yes'
	idw_comment.Object.lab_comments.protect = 1
END IF

// Lab can edit lab comment only
IF is_access = "L" THEN
	li_column_count = Integer(idw_comment.Object.Datawindow.Column.count)
	FOR li_idx = 1 TO li_column_count
		ls_mod = idw_comment.Modify("#"+ string(li_idx) +".protect=1")
	NEXT
	idw_comment.Object.lab_comments.protect = 0
END IF
	
// Approve access has view only access to pricing: quoteheader and prices on price tab
// They can work with approvals
IF is_access = "A" THEN
	idw_quoteheader.Object.DataWindow.ReadOnly = 'yes'
END IF	

// View and No Price
IF is_access = "V" OR is_access = "P" THEN
	idw_header.Object.DataWindow.ReadOnly = 'yes'
	idw_detail.Object.DataWindow.ReadOnly = 'yes'
	
	// SK 08/11/2015 Set the individual fields to display only, but don't lock the entire DW. This will allow vertical scroll bars to function
	//idw_comment.Object.DataWindow.ReadOnly = 'yes'
	idw_comment.Object.hand_instruct.Edit.Displayonly = 'yes'
	idw_comment.Object.approval_comments.Edit.Displayonly = 'yes'
	idw_comment.Object.schedule_comments.Edit.Displayonly = 'yes'
	idw_comment.Object.comments_1.Edit.Displayonly = 'yes'
	idw_comment.Object.comments_2.Edit.Displayonly = 'yes'
	idw_comment.Object.comments_3.Edit.Displayonly = 'yes'
	idw_comment.Object.lab_comments.Edit.Displayonly = 'yes'
	
	idw_technical.Object.DataWindow.ReadOnly = 'yes'
	idw_lab.Object.DataWindow.ReadOnly = 'yes'
	idw_waste.Object.DataWindow.ReadOnly = 'yes'
	idw_waste_other.Object.DataWindow.ReadOnly = 'yes'
	idw_waste_profilelab.Object.DataWindow.ReadOnly = 'yes'
	idw_const.Object.DataWindow.ReadOnly = 'yes'
	tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_unit.Enabled = FALSE
    tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_test_method.Enabled = FALSE 
	idw_composition.Object.DataWindow.ReadOnly = 'yes'
	idw_composition_epa.Object.DataWindow.ReadOnly = 'yes'
	idw_composition_other.Object.DataWindow.ReadOnly = 'yes'
	idw_quoteheader.Object.DataWindow.ReadOnly = 'yes'
	idw_approval.Object.DataWindow.ReadOnly = 'yes'
	idw_shipping.Object.DataWindow.ReadOnly = 'yes'
	idw_form_availability.Object.DataWindow.ReadOnly = 'yes'
	iudw_document.uf_set_dw_read_only( )
	// rb - added rules and category tabs
	idw_rules.Object.DataWindow.ReadOnly = 'yes'
	idw_category.Object.DataWindow.ReadOnly = 'yes'
	idw_recipe.Object.DataWindow.ReadOnly = 'yes'
	// rb 04/27/2012
	idw_wcr_display_1.Object.DataWindow.ReadOnly = 'yes'
	idw_wcr_display_2.Object.DataWindow.ReadOnly = 'yes'
	idw_wcr_display_3.Object.DataWindow.ReadOnly = 'yes'
//	idw_wcr_display_4.Object.DataWindow.ReadOnly = 'yes'
	idw_shipping_unit.Object.DataWindow.ReadOnly = 'yes'
	idw_profile_gen_contact_form.Object.DataWindow.ReadOnly = 'yes'
	idw_ldr_subcategory.Object.DataWindow.ReadOnly = 'yes'
//	idw_profile_wcr_facility.Object.DataWindow.ReadOnly = 'yes'
	
	ib_access_new = FALSE
	ib_access_quote = FALSE
END IF

// Broker access
IF is_access = "B" THEN
	idw_header.Object.DataWindow.ReadOnly = 'yes'
	idw_detail.Object.DataWindow.ReadOnly = 'yes'
	
	// SK 08/11/2015 Set the individual fields to display only, but don't lock the entire DW. This will allow vertical scroll bars to function
	//idw_comment.Object.DataWindow.ReadOnly = 'yes'
	idw_comment.Object.hand_instruct.Edit.Displayonly = 'yes'
	idw_comment.Object.approval_comments.Edit.Displayonly = 'yes'
	idw_comment.Object.schedule_comments.Edit.Displayonly = 'yes'
	idw_comment.Object.comments_1.Edit.Displayonly = 'yes'
	idw_comment.Object.comments_2.Edit.Displayonly = 'yes'
	idw_comment.Object.comments_3.Edit.Displayonly = 'yes'
	idw_comment.Object.lab_comments.Edit.Displayonly = 'yes'

	idw_technical.Object.DataWindow.ReadOnly = 'yes'
	idw_lab.Object.DataWindow.ReadOnly = 'yes'
	idw_waste.Object.DataWindow.ReadOnly = 'yes'
	idw_waste_other.Object.DataWindow.ReadOnly = 'yes'
	idw_waste_profilelab.Object.DataWindow.ReadOnly = 'yes'
	idw_const.Object.DataWindow.ReadOnly = 'yes'
	tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_unit.Enabled = FALSE
    tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_test_method.Enabled = FALSE 
	idw_composition.Object.DataWindow.ReadOnly = 'yes'
	idw_composition_epa.Object.DataWindow.ReadOnly = 'yes'
	idw_composition_other.Object.DataWindow.ReadOnly = 'yes'
	idw_quoteheader.Object.DataWindow.ReadOnly = 'yes'
	idw_approval.Object.DataWindow.ReadOnly = 'yes'
	idw_form_availability.Object.DataWindow.ReadOnly = 'yes'
	// rb - added rules and category tabs
	idw_rules.Object.DataWindow.ReadOnly = 'yes'
	idw_category.Object.DataWindow.ReadOnly = 'yes'
	idw_recipe.Object.DataWindow.ReadOnly = 'yes'
	idw_profile_gen_contact_form.Object.DataWindow.ReadOnly = 'yes'
	idw_wcr_display_1.Object.DataWindow.ReadOnly = 'yes'
	idw_wcr_display_2.Object.DataWindow.ReadOnly = 'yes'
	idw_wcr_display_3.Object.DataWindow.ReadOnly = 'yes'
//	idw_wcr_display_4.Object.DataWindow.ReadOnly = 'yes'
	ib_access_new = FALSE
	ib_access_quote = FALSE
END IF

// No price
// MPM - 6/2/2020 - DevOps 15160 - Modified to allow groups with Lab access to view prices
IF is_access = "P" /*OR is_access = "B" OR is_access = "L"*/ THEN
	tab_1.tabpage_3.Text = "List without Prices"
	idw_list_prices.DataObject = "d_profile_list_wo_prices_dragon"
ELSE
	tab_1.tabpage_3.Text = "List with Prices"
	idw_list_prices.DataObject = "d_profile_list_prices_dragon"
END IF
idw_list_prices.SetTransObject(itr_share)

//COR2 JXM 11531 Handle access level for Approval/Super
select count(distinct users.user_id)
into :ll_rtn_count
from users
join access
	on users.group_id = access.group_id
   and access.group_id = 3021
where users.user_code = :gs_user_id
group by users.user_id, users.group_id
using itr_share;

if isValid(idw_approval) then
	if idw_approval.getrow() > 0 then
		if ((is_access = "A" or is_access = "S") and ll_rtn_count > 0) then
			idw_approval.Object.dragon_reviewed_flag.protect = 0
			li_rc = gi_success
		else //((is_access <> "A" or is_access <> "S") and ll_rtn_count < 1) then
			idw_approval.Object.dragon_reviewed_flag.protect = 1 
		//	MessageBox(gs_app_name + ":  Dragon Reviewed", "You do not have access to change the Dragon Reviewed flag.", Exclamation!)
		//	li_rc = gi_failure
		end if
	end if
end if
//DevOps:38343 - AM - Restrict the flag so that "Approvals group" can only edit the flag.
if isValid(idw_const) then
	if idw_const.getrow() > 0 then
		if (is_access = "A" or is_access = "S") then
			idw_const.Object.cor_lock_flag.protect = 0
		else 
			idw_const.Object.cor_lock_flag.protect = 1 
		end if
	end if
end if

// MPM - 5/12/2021 - DevOps 20750 - Only Approve (A) and Superuser (S) access can edit the Inactive checkbox on idw_detail
// MPM - 5/18/2022 - DevOps 39096 - Allow groups that have Access.profile_tracking = 'C' AND Access.approval = 'C' the ability to edit the Inactive checkbox on idw_detail, too
ls_approval_access = wf_profile_access(gi_company_id)
IF idw_detail.Object.DataWindow.ReadOnly = 'no' AND NOT ((is_access = 'A' OR is_access = 'S') OR (is_access = 'C' AND ls_approval_access = 'C')) THEN
	idw_detail.Object.inactive_flag.Protect = 1
	idw_detail.Object.inactive_flag.Background.Color = TRANSPARENT
END IF

// rb TO DO: access to Rules and Category

RETURN (li_rc)
end function

public function string wf_check_broker_access ();string	ls_access, ls_eq_flag, ls_find, ls_broker
long	ll_customer_id, ll_eq_company_id, ll_row_header, ll_row_find

// Check Broker access.  The Customer must be valid to check if it is an EQ company.
// If it's an EQ company, get the company ID. It must match the company that this
// user has broker access for in order for the user to be able to change customer pricing
// for all facilities that profile is approved for.
ls_access = "V"
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN ls_access


// Get the customer
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
IF NOT IsNull(ll_customer_id) THEN
	
	// Is this an EQ company?
	SELECT IsNull(eq_flag,'N'), IsNull(eq_company,0)
	INTO :ls_eq_flag, :ll_eq_company_id
	FROM Customer
	WHERE customer_id = :ll_customer_id
	USING itr_share;
	
	IF itr_share.SQLcode < 0 THEN
		MessageBox(gs_app_name+": Broker Access", "Cannot check Broker Access.~rSQL Error: " + itr_share.SQLerrtext, Exclamation!)
	ELSEIF itr_share.SQLcode = 100 THEN
		MessageBox(gs_app_name+": Broker Access", "Cannot check Broker Access. Customer is not valid.", Exclamation!)

	// Check this EQ customer company id
	ELSEIF ls_eq_flag = "T" THEN
		
		// Check the broker access for this company
		ls_find = "company_id = " + string(ll_eq_company_id)
		ll_row_find = dw_profile_access.Find(ls_find, 1, dw_profile_access.Rowcount() + 1)
		IF ll_row_find > 0 THEN
			ls_broker = dw_profile_access.Object.broker[ll_row_find]
			IF ls_broker = "Y" THEN
				// Finally!  This user has access to change the original customer price!
				ls_access = "B"
			END IF
		END IF
	END IF
END IF

RETURN ls_access
end function

public function integer wf_access_waste_const ();// The purpose of this function is to check if this user has access to change
// waste codes and constituents.  The profile_tracking access value controls
// access until the Profile is approved. When the Profile is approved, the
// approval per company access controls changing waste and constituents - permission
// granted only when approval access is good for all approval facilities

long		ll_row, ll_row_header
integer	li_rc, li_company_id
string	ls_curr_status_code, ls_access

// Initialize
li_rc = gi_success
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN gi_no_action

// Get Profile status
ls_curr_status_code = idw_header.Object.curr_status_code[ll_row_header]
IF NOT IsNull(ls_curr_status_code) AND ls_curr_status_code = 'A' THEN
	
	// Approval by company controlled
	FOR ll_row = 1 TO idw_approval.RowCount()
		// Check only active companies
		IF idw_approval.Object.status[ll_row] = 'A' THEN
			li_company_id = idw_approval.Object.company_id[ll_row]
			ls_access = wf_profile_access(li_company_id)
			IF ls_access <> 'C' AND ls_access <> 'S' AND ls_access <> 'A' THEN
				li_rc = gi_failure
				EXIT
			END IF
		END IF
	NEXT
	
ELSE
	// Check profile
	IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
		li_rc = gi_failure
	END IF
END IF

RETURN li_rc

end function

public function long wf_retrieve_documents (long al_row_header, long al_profile_id);integer	li_null
long		ll_rowcount, ll_customer_id, ll_generator_id, ll_modified_count
datawindowchild	ldwc

ll_modified_count = iudw_document.uf_modifiedcount( )
if ll_modified_count > 0 then
	return iudw_document.uf_get_rowcount( )
end if

SetNull(li_null)
// Retrieve documents, signed forms and scanned images for this profile
//wf_reset_documents()

ll_customer_id = idw_header.Object.customer_id[al_row_header]
ll_generator_id = idw_header.Object.generator_id[al_row_header]

ll_rowcount = iudw_document.uf_Retrieve(is_document_source, li_null, li_null, -99999, ll_customer_id, al_profile_id, -99999, ll_generator_id, li_null, li_null, '',li_null, li_null, is_access_to_scan,0)

ib_retrieved_documents = TRUE

RETURN ll_rowcount

end function

public subroutine wf_reset_forms ();idw_form.Reset()


end subroutine

public subroutine wf_reset_documents ();iudw_document.uf_Reset()
ii_rejection=100  //DevOps 17097 info_gde 09/22/2020; Reject Form - Audit Tab
ib_retrieved_documents = FALSE


end subroutine

public function integer wf_attach_doc (string as_file_path, string as_file_name, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, string as_approval_code, long al_profile_id, long al_customer_id, long al_generator_id);integer	li_return, li_max_wait
long		ll_image_id, ll_row, ll_new_form_id, ll_null
string	ls_null, ls_run_string, ls_new_status

SetNull(ls_null)
SetNull(ll_null)
ll_image_id = f_sequence("ScanImage.image_id")
//rg122106 added code to check for valid image id
IF ll_image_id <= 0 THEN
	MessageBox("Profile Document", "Unable to get next Image ID for document " + as_file_name + "." )
	RETURN gi_failure
END IF

DECLARE lproc_get_report PROCEDURE FOR dbo.sp_DocProcessing_upload_insert  
	@image_id = :ll_image_id,
	@file_name = :as_file_name,
	@file_location = :as_file_path,
	@description = '',
	@document_source = :is_document_source,
	@app_source = :gs_app_name,
	@server_flag = 'D',
	@ip_address = 'EQAI-IP',
	@added_by = :gs_user_id,
	@form_id = :al_form_id,
	@revision_id = :ai_revision_id,
	@company_id = :ai_company_id,
	@profit_ctr_id = :ai_profit_ctr_id,
	@profile_id = :al_profile_id,
	@receipt_id = :ll_null,
	@workorder_id = :ll_null,
	@customer_id = :al_customer_id,
	@generator_id = :al_generator_id,
	@merchandise_id = :ll_null,
	@trip_id = :ll_null
USING itr_image;

EXECUTE lproc_get_report;
COMMIT USING itr_image;
//DevOps:58800  - AM - 03/1/2023 - Added gs_eqai_path as a 6th parameter to get right eqai path from docprocess
ls_run_string = gs_eqai_path + "\EQAIDocProcess.exe " + String(ll_image_id) &
	+ " " + gs_connect_type &
	+ " " + gs_user_id_2 &
	+ " " + gs_password_2 &
	+ " " + gs_server &
	+ " " + gs_eqai_path 

li_return = Run(ls_run_string)

li_max_wait = 120
IF li_return = 1 THEN

	FOR ll_row = 1 TO li_max_wait
		Sleep(1)
		SELECT status
			INTO :ls_new_status
			FROM DocProcessing
			WHERE image_id = :ll_image_id
		USING itr_image;
		
		IF ls_new_status = "C" OR ls_new_status = "A" OR ls_new_status = "F" THEN EXIT
	NEXT
ELSE
	MessageBox("Call to EQAIDocProcess failed", &
		"Attempt to run " + gs_eqai_path + "\EQAIDocProcess.exe " + String(ll_image_id) + " failed!" &
		+ "~r~rPlease contact I.T. immediately!", Exclamation!)
END IF

IF isNull(ls_new_status) THEN ls_new_status = ""

IF Upper(ls_new_status) = "C" OR Upper(ls_new_status) = "A" THEN
	li_return = gi_success
ELSEIF Upper(ls_new_status) = "P" OR Upper(ls_new_status) = "I" THEN
	li_return = -2
ELSE
	li_return = gi_failure
END IF

RETURN li_return
end function

public subroutine wf_billing_project_select (long al_row);boolean	lb_ok_to_replace
decimal	lc_po_amt,ld_eir_rate
integer	li_idx, li_rc, li_company_id, li_profit_ctr_id, li_response
long		ll_row_header, ll_customer_id, ll_billing_project_id, ll_count, ll_po_sequence_id
long		ll_billing_project_id_current, li_po_sequence_id_current
string	ls_cust_name, ls_where, ls_project_name, ls_purchase_order, ls_release, ls_territory_code
string	ls_result, ls_purchase_order_current, ls_release_current, ls_customerbilling_consolidate_cont_flag
string	ls_insurance_surcharge_flag, ls_ensr_flag, ls_null
str_pick	lstr_pick
str_pass	lstr_pass

ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN

SetNull(ls_null)
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
IF IsNull(ll_customer_id) OR ll_customer_id = 0 THEN RETURN
SetNull(ll_billing_project_id)

// Get current billing project information and determine if user entered it
// or if it was selected from the popup
ll_billing_project_id_current = idw_approval.Object.billing_project_id[al_row]
ls_purchase_order_current = idw_approval.Object.purchase_order[al_row]
ls_release_current = idw_approval.Object.release[al_row]
li_po_sequence_id_current = idw_approval.Object.po_sequence_id[al_row]

// Nothing entered, just replace
IF IsNull(ll_billing_project_id_current) AND &
	IsNull(li_po_sequence_id_current) AND &
	(IsNull(ls_purchase_order_current) OR TRIM(ls_purchase_order_current) = "") AND &
	(IsNull(ls_release_current) OR TRIM(ls_release_current) = "") THEN
	lb_ok_to_replace = TRUE

// If there is no po sequence ID and there is a purchase order or a release, then it was entered by user
ELSEIF IsNull(li_po_sequence_id_current) AND &
	((NOT IsNull(ls_purchase_order_current) AND TRIM(ls_purchase_order_current) <> "") OR &
	(NOT IsNull(ls_release_current) AND TRIM(ls_release_current) <> "")) THEN
	lb_ok_to_replace = FALSE

// IF billing project info is populated, check to see if the purchase order and/or release was entered
ELSEIF NOT IsNull(ll_billing_project_id_current) AND &
	NOT IsNull(li_po_sequence_id_current) AND &
	((NOT IsNull(ls_purchase_order_current) AND TRIM(ls_purchase_order_current) <> "") OR &
	(NOT IsNull(ls_release_current) AND TRIM(ls_release_current) <> "")) THEN
	SELECT 
		CustomerBillingPO.billing_project_id,
		CustomerBillingPO.purchase_order,
		CustomerBillingPO.release,
		CustomerBillingPO.sequence_id
	INTO
		:ll_billing_project_id,
		:ls_purchase_order,
		:ls_release,
		:ll_po_sequence_id
	FROM CustomerBillingPO
	WHERE CustomerBillingPO.customer_id = :ll_customer_id
	AND CustomerBillingPO.billing_project_id = :ll_billing_project_id_current
	AND CustomerBillingPO.purchase_order = :ls_purchase_order_current
	AND CustomerBillingPO.release = :ls_release_current
	AND CustomerBillingPO.sequence_id = :li_po_sequence_id_current
	USING gtr_share;
	// If this exists, then it's ok to replace
	IF gtr_share.SQLcode = 0 THEN
		lb_ok_to_replace = TRUE
	END IF
ELSE
	lb_ok_to_replace = FALSE
END IF

// 11/10/07 Decided that a billing project is not required on a profile and in fact, should be
// able to be deleted, so there is no default setting.  SCC
// Immediately re-decided not to implement the day before deploying.  The s_button_all feature of
// the popup_quick_select has already been modified to support "No Billing Project"

// 11/19/07 Added support for selecting "No Billing Project."  JDB

// Popup to select billing project
ls_cust_name = idw_header.Object.customer_name[ll_row_header]
li_company_id = idw_approval.Object.company_id[al_row]
li_profit_ctr_id = idw_approval.Object.profit_ctr_id[al_row]

ls_where = "CustomerBilling.status = 'A'" &
	+ " AND CustomerBilling.customer_id = " + String(ll_customer_id) &
	+ " AND (CustomerBilling.all_facilities_flag = 'T' OR" &
	+ " (CustomerBilling.all_facilities_flag = 'F'" &
	+ " AND CustomerBillingXProfitCenter.company_id = " + String(li_company_id) &
	+ " AND CustomerBillingXprofitCenter.profit_ctr_id = " + String(li_profit_ctr_id) &
	+ " ))"

// Setup for NEW billing project
lstr_pass.po[1]	= This
lstr_pass.l[1]		= ll_customer_id
lstr_pass.s[1]		= "Billing"
 
lstr_pick.s_window_title			= "Billing Projects for " + String(ll_customer_id) + "  " + ls_cust_name
lstr_pick.i_window_width			= 0
lstr_pick.b_multipick				= FALSE
lstr_pick.i_return_column_count	=  20 //30574
lstr_pick.to_transaction			= itr_share
lstr_pick.str_pass					= lstr_pass

// Use the ALL button to allow the user to select No billing project
lstr_pick.s_button_all = "No Billing Project"

//li_idx++
//lstr_pick.s_tab_title[li_idx]			= "Billing Projects"
//lstr_pick.i_tabpage_type[li_idx]		= 1
//lstr_pick.s_dataobject[li_idx]		= "d_quick_select_billing_project_po"
//lstr_pick.s_where[li_idx]				= ls_where
//lstr_pick.s_retrieve_by[li_idx]		= ""
//lstr_pick.s_new_reference[li_idx]	= "customer po"
//
//li_idx++
//lstr_pick.s_tab_title[li_idx]			= "Billing Projects - Blank PO"
//lstr_pick.i_tabpage_type[li_idx]		= 1
//lstr_pick.s_dataobject[li_idx]		= "d_quick_select_billing_project_blank"
//lstr_pick.s_where[li_idx]				= ls_where
//lstr_pick.s_retrieve_by[li_idx]		= ""
//lstr_pick.s_new_reference[li_idx]	= "customer po"

li_idx++
lstr_pick.s_tab_title[li_idx]			= "Customer Billing Project"
lstr_pick.i_tabpage_type[li_idx]		= 1
lstr_pick.s_dataobject[li_idx]		= "d_quick_select_arg_billing_project_po"
lstr_pick.s_where[li_idx]				= ""
lstr_pick.s_retrieve_by[li_idx]		= ""
lstr_pick.s_new_reference[li_idx]	= ""
lstr_pick.s_arg[1] = String(ll_customer_id)
lstr_pick.s_arg[2] = String(gi_company_id)
lstr_pick.s_arg[3] = String(ii_profit_ctr_id)

lstr_pick.i_tab_count				= li_idx

OpenWithParm(w_popup_quick_select, lstr_pick)
lstr_pick = Message.PowerObjectParm
IF IsValid(lstr_pick) THEN
	FOR li_idx = 1 TO lstr_pick.i_return_record_count
		// Look for the 'ALL' button result.  If we get the 'ALL' button
		// that means that the user wants no billing project
		ls_result = String(lstr_pick.return1[li_idx])
		IF IsNumber(ls_result) THEN
			// They selected a billing project
			ll_billing_project_id = Long(lstr_pick.return1[li_idx])
			ls_project_name = String(lstr_pick.return2[li_idx])
			
			// If user chose the blank po/release, the project name will be NULL
			IF ll_billing_project_id = 0 AND IsNull(ls_project_name) THEN
				ls_project_name = gs_billing_project_name
			END IF
			ls_purchase_order 				= String(lstr_pick.return3[li_idx])
			ls_release							= String(lstr_pick.return4[li_idx])
			lc_po_amt 							= Dec(lstr_pick.return12[li_idx])
			ll_po_sequence_id					= Long(lstr_pick.return8[li_idx])
			ls_territory_code					= String(lstr_pick.return5[li_idx])
			ls_insurance_surcharge_flag	= String(lstr_pick.return11[li_idx])
			ls_ensr_flag						= String(lstr_pick.return19[li_idx])
			ld_eir_rate 			             = Dec(lstr_pick.return20[li_idx])
			// IF the user had typed in a po and/or a release, ask them if they want to replace it?
			// Replace PO or Not?
			IF lb_ok_to_replace = FALSE THEN
				li_response = MessageBox(gs_app_name + ":  Billing Project", "Do you want to replace the current purchase order and release?", Question!, YesNoCancel!, 3)
				IF li_response = 3 THEN
					RETURN 
				ELSEIF li_response = 2 THEN
					ls_purchase_order = ls_purchase_order_current
					ls_release = ls_release_current
					SetNull(ll_po_sequence_id)
					SetNull(lc_po_amt)
				END IF
			END IF
			
		ELSE
			SetNull(ll_billing_project_id)
			SetNull(ls_project_name)
//			SetNull(ls_purchase_order)
//			SetNull(ls_release)
			SetNull(ls_territory_code)
			SetNull(ls_insurance_surcharge_flag)
			SetNull(ls_ensr_flag)
			SetNull(ll_po_sequence_id)
			SetNull(lc_po_amt)
		END IF

		// Populate with their choice
		idw_approval.Object.billing_project_id[al_row] = ll_billing_project_id
		idw_approval.Object.project_name[al_row] = ls_project_name
		If IsNumber(ls_result) Then
			idw_approval.Object.purchase_order[al_row] = ls_purchase_order
			idw_approval.Object.release[al_row] = ls_release
		End If
		idw_approval.Object.territory_code[al_row] = ls_territory_code
		idw_approval.Object.customerbilling_insurance_surcharge_flag[al_row] = ls_insurance_surcharge_flag
		idw_approval.Object.customerbilling_ensr_flag[al_row] = ls_ensr_flag
			idw_approval.Object.eir_rate[al_row] = ld_eir_rate
		idw_approval.Object.po_sequence_id[al_row] = ll_po_sequence_id
		idw_approval.Object.customerbillingpo_po_amt[al_row] = lc_po_amt
		// SK 09/16/2015 Get the consolidate container flag value
		SELECT consolidate_containers_flag
			INTO :ls_customerbilling_consolidate_cont_flag
			FROM CustomerBilling
			WHERE CustomerBilling.customer_ID = :ll_customer_id
			AND CustomerBilling.billing_project_id = :ll_billing_project_id
			AND CustomerBilling.status = 'A'
		USING itr_share;
		
		IF itr_share.SQLcode < 0 THEN
			MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
		ELSEIF itr_share.SQLcode = 100 THEN
			idw_approval.Object.consolidate_containers_flag[al_row] = ls_null
		ELSE
			idw_approval.Object.consolidate_containers_flag[al_row] = ls_customerbilling_consolidate_cont_flag
		END IF
						
		ib_changed_approval = TRUE
		 wf_price("REFRESH", 0) 
	NEXT
END IF
end subroutine

public function integer wf_validate_billing (long al_row, boolean ab_msg);// The purpose of this function is to validate the Billing Project for an Approval
integer	li_rc
long		ll_count, ll_billing_project_id, ll_po_sequence_id, ll_customer_id, ll_row_header, ll_null
string	ls_purchase_order, ls_release, ls_project_name

ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN gi_no_action
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
IF IsNull(ll_customer_id) OR ll_customer_id = 0 THEN RETURN gi_no_action
li_rc = gi_success

SetNull(ll_null)

// Check what is there
ls_purchase_order = idw_approval.Object.purchase_order[al_row]
ls_release = idw_approval.Object.release[al_row]
ll_billing_project_id = idw_approval.Object.billing_project_id[al_row]
ll_po_sequence_id = idw_approval.Object.po_sequence_id[al_row]
	
// Try an exact match
SELECT COUNT(*)
	INTO :ll_count
	FROM CustomerBillingPO
	WHERE customer_id = :ll_customer_id
	AND purchase_order = :ls_purchase_order
	AND release = :ls_release
	AND billing_project_id = :ll_billing_project_id
	AND sequence_id = :ll_po_sequence_id
	AND status = 'A'
USING itr_share;

IF ll_count <> 1 THEN
	// Check for a match on billing project with no po record
	// This is OK
	SELECT COUNT(*)
		INTO :ll_count
		FROM CustomerBilling
		WHERE customer_id = :ll_customer_id
		AND billing_project_id = :ll_billing_project_id
		AND status = 'A'
	USING itr_share;
	IF ll_count = 0 THEN
		// We let slide whatever they entered
		IF ll_billing_project_id <> gl_billing_project_id THEN
			idw_approval.Object.billing_project_id[al_row] = ll_null
			idw_approval.Object.po_sequence_id[al_row] = ll_null
			idw_approval.Object.project_name[al_row] = "(No Billing Project Assigned)"
		END IF
	END IF
END IF

RETURN li_rc
end function

public function integer wf_setup_select_buttons ();// thse use sqlca

//pb_approval_code_to 
//pb_approval_code_from
//pb_territory_code
//pb_treatment_id_to
//pb_treatment_id_from

// these use share
tab_1.tabpage_select.pb_contact.uf_set_transaction(itr_share)

tab_1.tabpage_select.pb_generator_id_to.uf_set_transaction(itr_share)
tab_1.tabpage_select.pb_generator_name_to.uf_set_transaction(itr_share)
tab_1.tabpage_select.pb_epa_id_to.uf_set_transaction(itr_share)
tab_1.tabpage_select.pb_epa_id_from.uf_set_transaction(itr_share)
tab_1.tabpage_select.pb_customer_from.uf_set_transaction(itr_share)
tab_1.tabpage_select.pb_customer_to.uf_set_transaction(itr_share)
tab_1.tabpage_select.pb_generator_id_from.uf_set_transaction(itr_share)
tab_1.tabpage_select.pb_generator_name_from.uf_set_transaction(itr_share)

return 0 


end function

public function integer wf_calc_tracking_days (long al_profile);// This function recalculates the profile tracking days for a given profile
// and then updates this information in the profile.
datetime	ldt_modified
long		ll_track_days, ll_bus_days,ll_old_track_days,ll_old_bus_days

if isnull(al_profile) then return -1
if al_profile <= 0 then return -1

//DevOps 17685 info_gde 11/12/2020; Profile - Audit showing extra items
// This information is REMOVED, because it is no longer wanted to appear on the audit

declare calc_days procedure for dbo.sp_calc_profile_track_days @profile_id = :al_profile,
                                                          @update_flag = 1,
																			 @user_code = :gs_user_id
using itr_share;

execute calc_days;

if itr_share.sqlcode <> 0 then
	messagebox("Profile","Unable to calculate tracking days.  Error was: " + itr_share.sqlerrtext )
	rollback using itr_share;
	return -1
end if

fetch calc_days into :ll_track_days, :ll_bus_days,:ll_old_track_days,:ll_old_bus_days,:ldt_modified;

if itr_share.sqlcode <> 0 then
	messagebox("Profile","Unable to retrieve tracking days.  Error was: " + itr_share.sqlerrtext )
	rollback using itr_share;
	return -1
end if

close calc_days ;
//
// reretrieve the audit records
idw_audit.retrieve(al_profile)
idw_tracking.retrieve(al_profile)

COMMIT USING itr_share;				// Moved this line below these 2 retrieves to stop open trans 3/10/08 JDB

RETURN 0
end function

public function integer wf_populate_pq (long al_profile_id, string as_approval_code, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, long al_row_header, string as_new_or_update, long al_ref_form_id, long al_tracking_id, long al_generator_id);integer	li_rc, li_connect
long		ll_null
string	ls_null, ls_gen_name, ls_epa_id
str_pass	lstr


Select generator_name, epa_id into :ls_gen_name, :ls_epa_id
		from Generator where generator_id = :al_generator_id using gtr_share;


IF ib_connected_forms THEN
	SetNull(ll_null)
	SetNull(ls_null)
	
	lstr.l[1] = al_form_id
	lstr.l[2] = idw_header.Object.customer_id[al_row_header]
	lstr.l[3] = al_generator_id
	lstr.l[4] = idw_header.Object.profile_id[al_row_header]

	lstr.l[5] = al_ref_form_id
	lstr.l[6] = ll_null	// Preapproval Key
	lstr.l[7] = al_tracking_id	// Tracking ID is null if from approval, use tracking_id from WCR
	
	lstr.s[1] = as_approval_code
	lstr.s[2] = idw_header.Object.customer_name[al_row_header]
	lstr.s[3] = idw_header.Object.approval_desc[al_row_header]
	lstr.s[4] = as_new_or_update
	lstr.s[5] = ls_epa_id	// EPA ID			(not used here; use generator_id)
	lstr.s[6] = ls_gen_name	// Generator Name	(not used here; use generator_id)
 
	lstr.i[2] = ai_profit_ctr_id
	lstr.i[3] = ai_revision_id
	lstr.i[4] = ai_company_id
	
	lstr.tr_trans = itr_forms
	OpenWithParm(w_popup_get_values_pq, lstr)
	
	lstr = Message.PowerObjectParm
	IF IsValid(lstr) THEN
		li_rc = lstr.i[1]
	END IF
ELSE
	li_rc = -1

END IF

RETURN li_rc
end function

public function integer wf_clear_client_types ();long	ll_type_count, ll_cntr, ll_location_count, ll_row
integer	li_ans, li_return
string	ls_text, ls_various_type_flag

li_return = 1
ll_type_count = idw_site_type.Rowcount()
// DevOps 10373
// agc 10/14/19 temp comment out
//ll_location_count = idw_generator_locations.RowCount()
If ll_type_count + ll_location_count > 0 Then
	li_ans = Messagebox('Remove Types/Locations','Changing the Customer or Generator will remove the generator site type/location restrictions from this profile.  Do you wish to proceed?', Question!,YesNo!)
	If li_ans = 1 then
		setnull(ls_various_type_flag)
		setnull(is_various_type)
		ll_row = idw_header.getrow()
// agc 10/14/19 temp comment out
//		if ll_row > 0 then
//			idw_header.setitem(ll_row,'various_type_flag',ls_various_type_flag)
//		end if
		For ll_cntr = ll_type_count to 1 step -1
			idw_site_type.DeleteRow(ll_cntr)
		Next
		ls_text = 'Types..'
		idw_header.object.b_types.text = ls_text
		
// agc 10/14/19 temp comment out
//		//DevOps 10373
//		For ll_cntr = ll_location_count to 1 step -1
//			idw_generator_locations.DeleteRow(ll_cntr)
//		Next
//		ls_text = 'Locs..'
//		idw_header.object.b_locations.text = ls_text
	Else
		li_return = -1
	End If
End If

return li_return
end function

public function long wf_get_report (string as_report, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, integer ai_form_version_id, string as_approval_code, long al_profile_id, long al_contact_id, long al_generator_id);integer	li_return, li_max_wait
long		ll_image_id, ll_row, ll_new_form_id, ll_null
string	ls_null, ls_run_string, ls_comments

SetNull(ls_null)
SetNull(ll_null)
ll_image_id = f_sequence("ScanImage.image_id")
IF ll_image_id <= 0 THEN
	MessageBox("Profile Error", "Unable to get next Image ID." )
	RETURN 1		// Return a positive number since all of the checks for the return
					// of this function are for negative form IDs.  JDB 12/27/06
END IF

DECLARE lproc_get_report PROCEDURE FOR dbo.sp_DocProcessing_formview_insert  
	@image_id = :ll_image_id,
	@report = :as_report,
	@company_id = :ai_company_id,
	@profit_ctr_id = :ai_profit_ctr_id,
	@form_id = :al_form_id,
	@revision_id = :ai_revision_id,
	@form_version_id = :ai_form_version_id,
	@approval_code = :as_approval_code,
	@profile_id = :al_profile_id,
	@file_location = :ls_null,
	@contact_id = :al_contact_id,
	@server_flag = 'D',
	@app_source = 'EQAI',
	@print_pdf = 0,
	@ip_address = 'EQAI-IP',
	@session_id = 'EQAI-SESSION',
	@added_by = :gs_user_id,
	@workorder_id = :ll_null,
	@manifest = :ls_null,
	@lines_to_include = :ls_null,
	@generator_id = :al_generator_id
USING itr_image;

EXECUTE lproc_get_report;
COMMIT USING itr_image;
//DevOps:58800  - AM - 03/1/2023 - Added gs_eqai_path as a 6th parameter to get right eqai path from docprocess
//ls_run_string = is_eqai_test + "\EQAIDocProcess.exe " + String(ll_image_id) &
ls_run_string = gs_eqai_path + "\EQAIDocProcess.exe " + String(ll_image_id) &
	+ " " + gs_connect_type &
	+ " " + gs_user_id_2 &
	+ " " + gs_password_2 &
	+ " " + gs_server &
     + " " + gs_eqai_path 
	
li_return = Run(ls_run_string)

//DevOps:18960 - Added sql error messagebox to check in debug on citrix server
//IF itr_image.SQLcode < 0 THEN
//	MessageBox(gs_app_name + ":  SQL Error",  gs_eqai_path  + " | " +  itr_image.SQLerrtext, Exclamation!)
//END IF

IF li_return = 1 THEN
	li_max_wait = 120
	FOR ll_row = 1 TO li_max_wait

		Sleep(1)
		SELECT form_id
			INTO :ll_new_form_id
			FROM DocProcessing
			WHERE image_id = :ll_image_id
			AND status IN ('C', 'A')
		USING itr_image;
		
		IF ll_new_form_id < 0 THEN EXIT
	NEXT
	
	//DevOps 26956 AGC 11/04/2021 add comments to error messagebox
	if ll_new_form_id < 0 then
		is_docprocessing_comments = ''
	else
		select comments
		into :is_docprocessing_comments
		from plt_image.dbo.DocProcessing
		where image_id = :ll_image_id
		using itr_image;
	
		if itr_image.sqlcode <> 0 then
			messagebox('SQL Error','Unable to query DocProcessing record')
		end if
	end if
ELSE
	//DevOps 26956 AGC 11/04/2021 add comments to error messagebox
	select comments
	into :ls_comments
	from plt_image.dbo.DocProcessing
	where image_id = :ll_image_id
	using itr_image;
	
	if itr_image.sqlcode <> 0 then
		messagebox('SQL Error','Unable to query DocProcessing record')
	end if
	MessageBox("Call to EQAIDocProcess failed", &
		"Attempt to run " + gs_eqai_path + "\EQAIDocProcess.exe " + String(ll_image_id) + " failed!" &
		+ "~r~rPlease contact I.T. immediately!~r~r" + ls_comments, Exclamation!)
END IF

RETURN ll_new_form_id
end function

public subroutine wf_save ();

This.TriggerEvent("ue_save")

return
end subroutine

public function integer wf_validate_dates ();
integer	li_return
string	ls_datetime

li_return = 1
idw_select.Accepttext()

// Check for accurate Dates on the select window.

idw_select.SetColumn("ap_start_date_from")
ls_dateTime = Trim(idw_select.GetText())
If Not IsNull(ls_dateTime) and ls_datetime > "" Then
	If Not Isdate(ls_dateTime) Then
		MessageBox('Invalid Date','The start date you entered is invalid.',stopsign!,OK!)
		idw_select.SetColumn("ap_start_date_from")
		li_Return = -1
	End IF
End if
If li_return = 1 Then
	idw_select.SetColumn("ap_expiration_date_to")
	ls_dateTime = Trim(idw_select.GetText())
	If NOT IsNull(ls_dateTime) and ls_datetime > "" Then
		If Not Isdate(ls_dateTime) Then
			MessageBox('Invalid Date','The expiration date you entered is invalid.',stopsign!,OK!)
			idw_select.SetColumn("ap_expiration_date_to")
			li_Return = -1
		End IF
	End if
End If
If li_return = 1 Then
	idw_select.SetColumn("ap_expiration_date_from")
	ls_dateTime = Trim(idw_select.GetText())
	If Not IsNull(ls_dateTime) and ls_datetime > "" Then
		If NOT Isdate(ls_dateTime) Then
			MessageBox('Invalid Date','The expiration date you entered is invalid.',stopsign!,OK!)
			idw_select.SetColumn("ap_expiration_date_from")
			li_Return = -1
		End IF
	End if
End If
If li_return = 1 Then
	idw_select.SetColumn("date_modified_from")
	ls_dateTime = Trim(idw_select.GetText())
	If Not IsNull(ls_dateTime) and ls_datetime > "" Then
		If Not Isdate(ls_dateTime) Then
			MessageBox('Invalid Date','The modified date you entered is invalid.',stopsign!,OK!)
			idw_select.SetColumn("date_modified_from")
			li_Return = -1
		End IF
	End if
End IF
If li_return = 1 Then	
	idw_select.SetColumn("date_modified_to")
	ls_dateTime = Trim(idw_select.GetText())
	If Not IsNull(ls_dateTime) and ls_datetime > "" Then
		If Not Isdate(ls_dateTime) Then
			MessageBox('Invalid Date','The modified date you entered is invalid.',stopsign!,OK!)
			idw_select.SetColumn("date_modified_to")
			li_Return = -1
		End IF
	End if
End IF
If li_return = 1 Then
	idw_select.SetColumn("ap_start_date_to")
	ls_dateTime = Trim(idw_select.GetText())
	If Not IsNull(ls_dateTime) and ls_datetime > "" Then
		If Not Isdate(ls_dateTime) Then
			MessageBox('Invalid Date','The start date you entered is invalid.',stopsign!,OK!)
			idw_select.SetColumn("ap_start_date_to")
			li_Return = -1
		End IF
	End if
End If

return li_return
end function

public subroutine wf_update_receipt_for_ots (long al_profile_id, integer ai_call_type);/***********************************************************************************************
al_profile_id	= The profile sent in
ai_call_type	= 0 if the user clicked the button to update receipts
					= 1 if the user just changed the OTS flag (don't show messagebox in this case)
************************************************************************************************/
long		ll_rowcount
str_pass	lstr_pass


ll_rowcount = dw_receipt_ots_approval_list.Retrieve(al_profile_id)
IF ll_rowcount <= 0 THEN
	IF ai_call_type = 0 THEN
		MessageBox(gs_app_name, "There are no open receipts using this approval.")
	END IF
ELSE
	// Get list of receipts using this OTS approval
	lstr_pass.l[1] = al_profile_id
	
	// Get the Window Title
	lstr_pass.s[1] = "Select Receipts to Update"
	
	OpenWithParm(w_popup_receipt_ots_approval, lstr_pass)
END IF
end subroutine

public function long wf_get_salestax_count_customer (long al_customer_id);long		ll_customer_tax_count

SELECT COUNT(sales_tax_id) 
	INTO :ll_customer_tax_count
	FROM CustomerSalesTax 
	WHERE customer_id = :al_customer_id
	AND tax_flag = 'T'
USING itr_share;

RETURN ll_customer_tax_count
end function

public function long wf_get_salestax_count_generator (long al_generator_id);long		ll_generator_tax_count

SELECT COUNT(sales_tax_id) 
	INTO :ll_generator_tax_count
	FROM GeneratorSalesTax 
	WHERE generator_id = :al_generator_id
	AND tax_flag = 'T'
USING itr_share;

RETURN ll_generator_tax_count
end function

public function integer wf_set_wcr_sect_display (integer ai_sect_id);//DevOps #15003 info_gde 04/07/2020; EQAI (Radioactive Supplement) Page 3 Issues
//DevOps #15255 info_gde 04/21/2020; EQAI-Process-Profile Tracking-New Profile-Cylinder Supplement:Q9
//DevOps #15380 info_gde 04/25/2020; EQAI/COR2 - Profile Tracking- Profile tab
//20200501 jcb #15434
//DevOps #15554 info_gde 05/07/2020;EQAI - Other Functions - Profile ID Format
/* 

// COR2 - JAG

Function/Event: wf_set_wcr_sect_display function
Author        :
Created       : 
Purpose       : 

 Note(s). 
 
 Input Parameters:
 					ai_sect_id -

 Output Parameters:None

 ---------------------- Revision History ------------------------------------------------
Version  Modified by   Date        Description of change
-------    -----------     ----------   ---------------------------------------------------------
   01         jag           10/11/18   5516     , 5513     , 5518
  02		  jxm          02/14/19   8828  	, 5520	, 5345
*/

// COR2 - JAG

// rb 04/24/2012 - added back from unused
//// Set Display for the appropriate section of WCR
//
Int	 li_ans, li_rc, i, j
Long	 ll_customer_id, ll_generator_id, ll_row, ll_header_row, ll_null,ll_technical_row, ll_i, ll_mod_count, ll_rowcount, ll_profile_id, ll_num_rows,ll_find
String ls_volume_bill_unit,ls_temp, ls_filter, ls_curr_status_code, ls_tracking_type, ls_const_req_treat_flag,ls_state_waste_flag,ls_rcra_waste_flag, ls_uhcs, ls_waste_meets_ldr_standards,ls_bill,ls_null
string ls_waste_water_flag,ls_meets_alt_soil_treatment_stds,ls_more_than_50_pct_debris,ls_debris_separated,ls_debris_not_mixed_or_diluted,ls_exceed_ldr_standards
string ls_comp_dscr, ls_comp_dscr2,ls_requires_treatment_flag
integer li_row_cnt, l
Datawindowchild	dwc_facility
datawindowchild	ldwc, ldwc2, dwc_cylinders
dwobject				ldwo
dwItemStatus     ldwItemStatus
SetNull(ll_null)
SetNull(ls_null)
wf_accepttext()


//idw_wcr_display_1.SetRedraw(FALSE) DevOps #15217 info_gde 04/23/2020; EQAI - View Format
//idw_wcr_display_2.SetRedraw(FALSE) DevOps #15217 info_gde 04/23/2020; EQAI - View Format


ll_header_row = idw_header.getrow()
ll_technical_row = idw_technical.getrow()

//reset the height
// COR2-MPM
//idw_wcr_display_1.height = ii_dw_height_main

// hide dws
idw_wcr_display_3.Hide()
//idw_wcr_display_4.Hide()
// COR2-MPM
idw_wcr_display_5.Hide()

// COR2-MPM
// Set some default values
//
//DevOps 17332 info_gde 10/07/2020; Constituent Tab - First Line Wiping Value
if not ib_save_in_process then
idw_wcr_display_1.VScrollBar = FALSE
// MPM - 7/1/2020 - DevOps 16489 - Commented out all lines in this function that reset the height of idw_wcr_display_1
//idw_wcr_display_1.Height = 1980

idw_wcr_display_2.VScrollBar = FALSE
idw_wcr_display_2.border = FALSE
idw_wcr_display_2.x = 782
idw_wcr_display_2.Y = 1180
idw_wcr_display_2.Height = 320
//idw_wcr_display_2.Width = 3625 DevOps 16152 info_gde 06/05/2020;
idw_wcr_display_1.HScrollBar = FALSE
end if
//DevOps 17332 info_gde 10/07/2020; Constituent Tab - First Line Wiping Value

CHOOSE CASE ai_sect_id
		
	CASE 1
		// COR2-MPM
		// idw_wcr_display_1.dataobject = "d_profile_facility_instr_form"
		idw_wcr_display_1.dataobject = "d_profile_facility_instr_form_dragon"
		// rb 07/16/2012 ShareData was acting flakey, now uses column map
		//idw_header.ShareData(idw_wcr_display_1)
		idw_wcr_display_1.InsertRow (0)

//		idw_profile_wcr_facility.ShareData (idw_wcr_display_1)
	CASE 2
		// Section A
		// COR2-MPM
		idw_wcr_display_1.dataobject = "d_profile_generator_form_dragon"
//		idw_wcr_display_1.dataobject = "d_profile_generator_form"
		// rb 05/01/2012
//		idw_wcr_display_1.SetTransObject(itr_share)
//		idw_wcr_display_1.Retrieve (idw_header.Object.profile_id[ll_header_row])
//		commit using itr_share;

		//idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.height = ii_dw_height_main
		idw_wcr_display_2.dataobject = "d_profile_gen_contact_form_dragon"
		idw_profile_gen_contact_form.Sharedata(idw_wcr_display_2)
//		idw_wcr_display_2.y = idw_wcr_display_4.Y
//		idw_wcr_display_2.height = idw_wcr_display_4.height
//		idw_wcr_display_2.y = 1180
//		idw_wcr_display_2.height = 320
//		idw_wcr_display_2.width = idw_wcr_display_4.width
		idw_wcr_display_2.vscrollbar = FALSE
		idw_wcr_display_2.Show()
		idw_wcr_display_3.Show()
		//idw_wcr_display_4.Show()
	CASE 3
		// Section B
		// COR2-MPM
		idw_wcr_display_1.dataobject = "d_profile_waste_material_stream_form_dragon"
//		idw_wcr_display_1.dataobject = "d_profile_shipping_form"
//		idw_wcr_display_2.dataobject = "d_profile_shipping_form_contd"
//// rb 04/24/2012
////		idw_header.ShareData(idw_wcr_display_2)
//		idw_shipping_unit.ShareData (idw_wcr_display_1)
//		// Set Height & Visibility for shipping datawindows
//		idw_wcr_display_1.height = ( idw_wcr_display_1.Rowcount() * 80 ) + 304 + 40
//		ii_dw2_height = 972
//		ii_dw_height = idw_wcr_display_1.height
//		idw_wcr_display_2.y = ii_dw_height
//		idw_wcr_display_2.height = ii_dw2_height
//		idw_wcr_display_2.Width = idw_wcr_display_1.Width
//		idw_wcr_display_1.GetChild ("bill_unit_code", ldwc)
//		ldwc.SetTransObject (itr_share)
//		ldwc.Retrieve ()
//		idw_wcr_display_2.GetChild ("hazmat_class", ldwc)
//		ldwc.SetTransObject (itr_share)
//		ldwc.Retrieve ()
//		commit using itr_share;
//		idw_wcr_display_2.InsertRow (0)
//		idw_wcr_display_2.Show()
//		// rb 07/10/2012 Automatically add row if empty
//		if idw_wcr_display_1.RowCount() < 1 then
//			ldwo = idw_wcr_display_1.Object.b_add_volume
//			idw_wcr_display_1.Event buttonclicked (0, 0, ldwo)
//		end if
	CASE 4
		// Section C
		// COR2-MPM
//		idw_wcr_display_1.dataobject = "d_profile_special_properties_form"
// rb 04/25/2012
//		idw_technical.ShareData(idw_wcr_display_1)
//		idw_wcr_display_1.InsertRow (0)
		idw_wcr_display_1.Dataobject = "d_profile_ship_pkg_info_form_dragon_2"
		idw_wcr_display_2.Dataobject = "d_profile_ship_pkg_info_form_volume_dragon" 
		idw_wcr_display_2.VScrollBar = TRUE 
		 ll_profile_id = this.wf_get_profile_id( )
		idw_ship_volume.ShareData (idw_wcr_display_2) 
		idw_container_size.ShareData(idw_wcr_display_5)
		idw_wcr_display_5.Show()
		// Set Height & Visibility for shipping datawindows
		//idw_wcr_display_2.height = ( idw_wcr_display_2.Rowcount() * 80 ) + 80 + 40
		ii_dw2_height = 972
//		ii_dw_height = idw_wcr_display_1.height
//		idw_wcr_display_1.y = idw_wcr_display_2.height //ii_dw_height
	    idw_wcr_display_2.height = 160 //ii_dw2_height
		idw_wcr_display_2.vscrollbar = false
//		idw_wcr_display_1.height = 1020//ii_dw2_height
		idw_wcr_display_2.Width = idw_wcr_display_1.Width
		idw_wcr_display_2.y = 1350
		
//		idw_wcr_display_2.SettransObject(itr_share)
//		idw_wcr_display_2.Retrieve(ll_profile_id)

		idw_wcr_display_2.GetChild ("bill_unit_code", ldwc)
		ldwc.SetTransObject (itr_share)
		ll_row = ldwc.Retrieve ()
	
//		FOR i = 1 to ll_row
//		    ls_volume_bill_unit =  ldwc.GetItemString(i,"bill_unit_code")
//			 FOR j = 1 to idw_wcr_display_2.RowCount()
//		          ls_bill = idw_wcr_display_2.Object.bill_unit_code[j]
//					ll_find = ldwc.Find ("bill_unit_code = " + "'" +  ls_bill + "'" ,1,ldwc.rowcount())
//				 IF ll_find > 0   THEN
//					idw_wcr_display_2.Object.bill_unit_code[idw_wcr_display_2.GetRow()] = ls_bill
//					idw_wcr_display_2.SetItemStatus(1,0, Primary!, NotModified! )
//				 ELSE
//					idw_wcr_display_2.Object.bill_unit_code[idw_wcr_display_2.GetRow()] = ls_null
//					idw_wcr_display_2.SetItemStatus(1,0, Primary!, NotModified! )
//				 END IF	
//			NEXT
//		NEXT
		idw_wcr_display_1.GetChild ("hazmat_class", ldwc)
		ldwc.SetTransObject (itr_share)
		ldwc.Retrieve ()
		commit using itr_share;
//		if ib_retrieve_after_copy = TRUE then 
//			idw_header.sharedata(idw_wcr_display_1)
//		else
		  idw_wcr_display_1.InsertRow (0)
//	     end if
		idw_wcr_display_2.Show()
		// rb 07/10/2012 Automatically add row if empty
		if idw_wcr_display_2.RowCount() < 1 then
//			ldwo = idw_wcr_display_2.Object.b_add_volume
//			idw_wcr_display_2.Event buttonclicked (0, 0, ldwo)
		     idw_wcr_display_2.InsertRow (0)
			  ib_shipping_volume  = FALSE
		ELSE
			//DevOps:17163
			IF idw_wcr_display_2.Object.Profile_id [idw_wcr_display_2.getrow()] = 0 OR IsNull(idw_wcr_display_2.Object.Profile_id [idw_wcr_display_2.getrow()] ) THEN
			   ib_shipping_volume  = FALSE
		    ELSE
		     	ib_shipping_volume  = TRUE
			END IF
		end if
		
		// Set the DOT shipping Description
		POST wf_build_dot_shipping_desc()
		
	CASE 5
		// Section D
		// COR2-MPM
// rb 04/26/2012
//		idw_wcr_display_1.dataobject = "d_profile_waste_composition_form"
//		ds_wcr_waste_composition_master.ShareData(idw_wcr_display_1)
//		idw_wcr_display_2.dataobject = "d_profile_generating_process_form"
//		ds_wcr_master.ShareData(idw_wcr_display_2)
//		// Set Height & Visibility for shipping datawindows
//		idw_wcr_display_1.height = ( idw_wcr_display_1.Rowcount() * 88 ) + 348 + 40
//		ii_dw2_height = 800
//		ii_dw_height = idw_wcr_display_1.height
//		idw_wcr_display_2.y = ii_dw_height
//		idw_wcr_display_2.height = ii_dw2_height
//DevOps 17238 info_gde 11/18/2020; PROD EQAI - Profile - Section E6 - Decimal Format
//        if idw_wcr_display_2.dataobject='d_profile_composition_form_dragon' AND ib_save_in_process then
//			li_row_cnt=idw_wcr_display_2.rowcount()
//         for l=1 to li_row_cnt
//	    		ls_comp_dscr = idw_wcr_display_2.object.comp_description[l]
//			if isNull(ls_comp_dscr) OR trim(ls_comp_dscr) ="" then
//				idw_wcr_display_2.RowsCopy(l, l, Primary!, idw_composition, l, Primary!) 
//			end if
//		 next
//		end if
		 	
//			li_row_cnt=idw_composition.rowcount()
//         for l=1 to li_row_cnt
//	    		ls_comp_dscr2 = idw_composition.object.comp_description[l]		
//			if isNull(ls_comp_dscr2) OR trim(ls_comp_dscr2) ="" then
//				idw_composition.RowsCopy(l, l, Primary!,idw_composition, l, Primary!) 
//			end if
//		 next
		
//DevOps #15412 info_gde 04/28/2020; EQAI - New Profile - Physical Properties - D.1 Physical Description
 		idw_wcr_display_2.Width = idw_wcr_display_1.Width - 160	// DevOps 17146 Make run for moving button to the left.fhc.
//		idw_wcr_display_2.Show()
		idw_wcr_display_1.dataobject = "d_profile_special_properties_form_dragon"
		idw_wcr_display_2.dataobject = "d_profile_composition_form_dragon"
		idw_wcr_display_2.border = TRUE
		idw_wcr_display_2.Height = 420	
		idw_wcr_display_2.VScrollBar = TRUE
		idw_wcr_display_2.y = 100
		idw_wcr_display_2.Show()
		idw_wcr_display_1.InsertRow (0)
		// MPM - 11/30/2020 - DevOps 18101 - Don't insert a blank composition row if there are no rows
		// rb 07/10/2012 Automatically add row if empty
//		if idw_composition.RowCount() < 1 then
//			ldwo = idw_composition.Object.b_add_comp
//			idw_composition.Event buttonclicked (0, 0, ldwo)
//			// MPM - 8/19/2020 - DevOps 17158 - Moved the change made under DevOps 17084 to below
//			IF idw_composition.RowCount() > 0 THEN
//				idw_composition.SetItemStatus (1, 0, Primary!, NotModified!)
//			END IF
//		end if
		li_rc=idw_composition.rowcount()
		//DevOps #15325 info_gde 04/29/2020; Add New Profile (Profile Tab) - Section D. limit char 50
		// MPM - 5/17/2020 - DevOps 15763 - Removed call to ShareData() below.  We don't need this.  Use the WCR functions to manage this.
		// MPM - 3/30/2021 - DevOps 19724 - Changed this section to use ShareData().
      	idw_composition.sharedata(idw_wcr_display_2)
		 	wf_format_rows() //DevOps 15348 info_gde 05/07/2020
//		 for i = 1 to li_rc
//			idw_wcr_display_2.insertrow(0)
//		      idw_wcr_display_2.object.comp_description.Primary[i] =idw_composition.object.comp_description.Primary[i]
//			 idw_wcr_display_2.object.comp_from_pct.Primary[i] =idw_composition.object.comp_from_pct.Primary[i]
//		      idw_wcr_display_2.object.comp_to_pct.Primary[i] =idw_composition.object.comp_to_pct.Primary[i]
//		      idw_wcr_display_2.object.sequence_id.Primary[i] =idw_composition.object.sequence_id.Primary[i]
//		      idw_wcr_display_2.object.comp_typical_pct.Primary[i] =idw_composition.object.comp_typical_pct.Primary[i]
//			
//			
//             if idw_composition.GetItemStatus(i,0, Primary!) <> DataModified! then 
//			   idw_wcr_display_2.SetItemStatus (i, 0, Primary!, DataModified! )
//			   idw_wcr_display_2.SetItemStatus (i, 0, Primary!, NotModified! )
//			   ldwItemStatus = idw_wcr_display_2.GetItemStatus (i, 0, Primary! )
//			 end if
//			  
//		next
	   
		  
//		is_orig_value=idw_composition.object.comp_description.Primary.Original[1]
//		ldwItemStatus=idw_wcr_display_2.GetItemStatus(1,0, Primary!)
//
//		if  idw_wcr_display_2.GetItemStatus(1,0, Primary!) = DataModified! then
//			idw_composition.object.comp_description.Primary[1]=idw_wcr_display_2.object.comp_description.Primary[1]
//	        
//		ELSEIF ldwItemStatus=New! AND idw_composition.object.comp_description.Primary[1]<>is_orig_value THEN
//			 idw_wcr_display_2.object.comp_description.Primary[1]=is_orig_value
//			 idw_composition.object.comp_description.Primary[1]=is_orig_value
//		      idw_wcr_display_2.SetItemStatus(1,0, Primary!, DataModified!)
//		ELSE
//			idw_wcr_display_2.object.comp_description.Primary[1] = is_orig_value 
//		      
//		end if
		//DevOps #15412 info_gde 04/28/2020; EQAI - New Profile - Physical Properties - D.1 Physical Description
         //DevOps #15325 info_gde 04/29/2020; Add New Profile (Profile Tab) - Section D. limit char 50

//		commit using itr_share;
          
		// idw_composition.object.comp_description[1].sharedata(ldwc)
		 
// MPM - DevOps 14162 - This fix included backing out the changes that were made under DevOps 12289 and redoing them, including commenting out the block below:	
//		 //anitha
//			
//	    ll_rowcount = idw_composition.Rowcount()
//		FOR ll_row = ll_rowcount TO 1 Step -1 
//			   ldwItemStatus = idw_composition.GetItemStatus( idw_composition.Rowcount(), 0, Primary!)
//         IF ldwItemStatus = NewModified! THEN
//				 idw_composition.object.comp_description[ll_row]
//			IF  NOT IsNull(idw_composition.object.comp_description[ll_row]) AND idw_composition.object.comp_description[ll_row] <> '' THEN
//				/* AlonB issue 12289 per Anitha  */
//				//idw_composition.object.sequence_id[ll_row] = ll_row
//				/* AlonB issue 12289   */
//				 ib_changed_comp = TRUE
//			ELSE
//				//DevOps:17084 -  Save loop causing the the problem.
//				ll_mod_count = idw_composition.SetItemStatus (1 ,0 , Primary! , NotModified! )
//				
//			END IF
//		END IF
//		NEXT
//		//end
		
	CASE 6
		//Section E
		//DevOps 17332 info_gde 10/07/2020; Constituent Tab - First Line Wiping Value - start
		if not ib_save_in_process then
		SetPointer(HourGlass!)
		// COR2-MPM
//		idw_wcr_display_1.dataobject = "d_profile_hazardous_wastes_form"
		idw_wcr_display_1.dataobject = "d_profile_characterization_form_dragon"
		idw_wcr_display_1.SetTransObject(itr_share) //DevOps #61003 || 5/10/2023  - Added by Uday for Addition of constituents into section E6 and verify that users are able to add them into LDR question 10. 
		idw_wcr_display_2.dataobject = "d_profile_const_form_dragon"
		idw_wcr_display_2.SetTransObject(itr_share) //DevOps #61003 || 5/10/2023  - Added by Uday for Addition of constituents into section E6 and verify that users are able to add them into LDR question 10. 
		idw_wcr_display_2.border = TRUE
		idw_wcr_display_2.VScrollBar = TRUE
		idw_wcr_display_2.HScrollBar = TRUE
// rb 04/25/2012
//		ll_row = idw_wcr_display_1.getrow()
//		IF ll_row <= 0 THEN ll_row = idw_wcr_display_1.InsertRow(0)
//		//Assign Profile Information
//		idw_wcr_display_1.object.epa_source_code[ll_row] = idw_header.object.epa_source_code[ll_header_row]
//		idw_wcr_display_1.object.epa_form_code[ll_row] = idw_header.object.epa_form_code[ll_header_row]
//		idw_wcr_display_1.object.rcra_haz_flag[ll_row] = idw_header.object.rcra_haz_flag[ll_header_row]
//		idw_wcr_display_1.object.waste_water_flag[ll_row] = idw_header.object.waste_water_flag[ll_header_row]
//		//Assign Technical Information
//		idw_wcr_display_1.object.cyanide_plating[ll_row] = idw_technical.object.cyanide_plating[ll_technical_row]
//		idw_wcr_display_1.object.flammable[ll_row] = idw_technical.object.flammable[ll_technical_row]
//		idw_wcr_display_1.object.oxidizer[ll_row] = idw_technical.object.oxidizer[ll_technical_row]
//		idw_wcr_display_1.object.meets_alt_soil_treatment_stds[ll_row] = idw_technical.object.meets_alt_soil_treatment_stds[ll_technical_row]
//		idw_wcr_display_1.object.more_than_50_pct_debris[ll_row] = idw_technical.object.more_than_50_pct_debris[ll_technical_row]
//		idw_wcr_display_1.object.debris_dimension_weight[ll_row] = idw_technical.object.debris_dimension_weight[ll_technical_row]
		ll_row = idw_wcr_display_1.InsertRow (0)

		// make sure the waste codes are synced up
		wf_populate_wastecodes_wcr('all')
		 
		IF is_pa_state_waste_codes <> '' THEN 
			idw_wcr_display_1.object.pa_state_waste_codes.text = is_pa_state_waste_codes
			idw_wcr_display_1.object.pa_residual_waste_flag[ll_row] = 'F'
		ELSE
			idw_wcr_display_1.object.pa_residual_waste_flag[ll_row] = 'T'
		END IF
		
		//TX wstecodes
		IF is_tx_state_waste_codes <> '' THEN 
			idw_wcr_display_1.object.texas_state_waste_code.text = is_tx_state_waste_codes
			//idw_header.object.texas_state_waste_code[idw_header.GetRow()] = is_tx_state_waste_codes
		ELSE
			ll_header_row = idw_header.GetRow()
			// is_tx_state_waste_codes =  idw_header.Object.texas_state_waste_code[ll_header_row]
		END  IF

		//COR2 JXM 04/24/2019 - 9819 Add row check before accessing dw column
		if ll_technical_row > 0 then ls_state_waste_flag = idw_technical.object.state_waste_code_flag[ll_technical_row] 
			
		IF is_state_waste_codes <> ''  THEN 
			idw_wcr_display_1.object.state_waste_codes.text = is_state_waste_codes
			idw_wcr_display_1.object.state_waste_code_flag[ll_row] = 'T'
		ELSE
//			IF ls_state_waste_flag = 'T' THEN 
//			    idw_wcr_display_1.object.state_waste_code_flag[ll_row] = 'F'
//			ELSEIF ls_state_waste_flag = 'U' THEN 
//			    idw_wcr_display_1.object.state_waste_code_flag[ll_row] = 'T'
//			ELSE
//             IF is_tx_state_waste_codes <> '' THEN 
//				idw_wcr_display_1.object.state_waste_code_flag[ll_row] = 'T'
//			ELSE	
//				idw_wcr_display_1.object.state_waste_code_flag[ll_row] = 'F'
//		    END IF
		END IF
		
		if ll_header_row > 0 then ls_rcra_waste_flag = idw_header.object.rcra_waste_code_flag[ll_header_row] 
				  
		IF is_rcra_waste_codes <> '' THEN 
			//DevOps 17814 info_gde 12/04/2020; EQAI: Profile tab chemical composition not displaying correctly
			//idw_wcr_display_1.object.rcra_waste_codes.text = is_rcra_waste_codes
			idw_wcr_display_1.object.rcra_waste_codes[ll_row] = is_rcra_waste_codes
			//DevOps 16457 don't update rcra_waste_code_flag if value is already 'T'
			if ls_rcra_waste_flag <> 'T' then idw_wcr_display_1.object.rcra_waste_code_flag[ll_row] = 'T'
			if ls_rcra_waste_flag <> 'T' then idw_header.object.rcra_waste_code_flag[ll_header_row] = 'T'
		ELSE
//		   IF ls_rcra_waste_flag = 'T' THEN 
//			 idw_wcr_display_1.object.rcra_waste_code_flag[ll_row] = 'F'
//			 idw_header.object.rcra_waste_code_flag[ll_header_row] = 'F'
//		   ELSEIF  ls_rcra_waste_flag = 'U' THEN
//			 idw_wcr_display_1.object.rcra_waste_code_flag[ll_row] = 'T'
//			 idw_header.object.rcra_waste_code_flag[ll_header_row] = 'T'
//		   ELSE
			    FOR i = 1 TO UpperBound(is_rcra_waste_codes_for_g4[] )
					IF is_rcra_waste_codes_for_g4[i]  <> ''  THEN
						 is_rcra_waste_codes_for_g4[i] = ''
					END IF
				NEXT
//			 idw_wcr_display_1.object.rcra_waste_code_flag[ll_row] = 'F'
//              idw_header.object.rcra_waste_code_flag[ll_header_row] = 'F'
//		    END IF
		END IF
 		     	
//		idw_wcr_display_1.GetChild ("epa_form_code", ldwc)
//		ldwc.SetTransObject (itr_share)
//		ldwc.Retrieve ()
//		commit using itr_share;
		
/* AlonB 10/03/2019  issue #12424 */
//DevOps:20880 - Commented below if condition and ib_LDR_setFilter =FALSE statement.This is causing not to showing constituents when LDR Supplement - Question 10 - is No
		//section E constituents should show all the time, this is not based on  LDR Supplement - Question 10.
		//if (ib_LDR_setFilter =TRUE) then  
			idw_const.SetFilter("")  
			idw_const.Filter()
		//  idw_const.setredraw(true)
			//ib_LDR_setFilter =FALSE
		//end if 	
/* AlonB 10/03/2019  issue #12424 */
		
		idw_const.GetChild ("const_id_2", ldwc)
		idw_wcr_display_2.GetChild ("const_id_2", ldwc2)
		ldwc.RowsCopy (1, ldwc.RowCount(), Primary!, ldwc2, 99999, Primary!)
		li_rc = idw_const.ShareData (idw_wcr_display_2)
		idw_wcr_display_2.Show()
		idw_wcr_display_2.Height = idw_wcr_display_1.Height - Long(idw_wcr_display_1.Describe("evaluate('rowHeight()', 1)"))	- 108 - 30
		idw_wcr_display_2.Y = Long(idw_wcr_display_1.Describe("evaluate('rowHeight()', 1)")) + 108 + 30
		//DevOps #15380 info_gde 04/25/2020 start
		If idw_wcr_display_1.rowcount()>0 Then
			idw_wcr_display_1.SetFocus()
			idw_wcr_display_1.object.info_basis_analysis[idw_wcr_display_1.getrow()]=trim(is_info_basis_analysis)
			idw_wcr_display_1.object.info_basis_msds[idw_wcr_display_1.getrow()]=trim(is_info_basis_msds)
			idw_wcr_display_1.object.info_basis_knowledge[idw_wcr_display_1.getrow()]=trim(is_info_basis_knowledge)
			idw_header.SetFocus()
		end If
		//DevOps #15380 info_gde 04/25/2020 end
			
		//wf_format_rows() //DevOps 15348 info_gde 05/07/2020
		SetPointer(Arrow!)
		//idw_const.setitemstatus(1,0,Primary!,NotModified!)
		//idw_wcr_display_2.SetItemStatus(1,0, Primary!, NotModified! )
		end if
		//DevOps 17332 info_gde 10/07/2020; Constituent Tab - First Line Wiping Value - end
		ib_save_in_process=FALSE //DevOps 17332 info_gde 10/07/2020; Constituent Tab - First Line Wiping Value
		idw_wcr_display_1.SetColumn("rcra_waste_codes")
	
	CASE 7
//		idw_wcr_display_1.dataobject = "d_profile_underlying_haz_const"
//		ds_wcr_master.ShareData(idw_wcr_display_1)
//		idw_wcr_display_2.dataobject = "d_profile_constituent_form"
//		ds_wcr_constituent_master.ShareData(idw_wcr_display_2)
//		idw_wcr_display_1.height = 220
//		ii_dw_height = idw_wcr_display_1.height
//		idw_wcr_display_2.y = ii_dw_height
//		idw_wcr_display_2.height = 800
//		idw_wcr_display_2.Width = idw_wcr_display_1.Width
//		idw_wcr_display_2.Show()
//		idw_wcr_display_1.SetFocus()

// rb 05/31/2012 Have question in display_1, details in display_2
//		idw_wcr_display_1.dataobject = "d_profile_underlying_haz_const_form"
//		//idw_const.ShareData (idw_wcr_display_1)
//		idw_const.GetChild ("const_id_2", ldwc)
//		idw_wcr_display_1.GetChild ("const_id_2", ldwc2)
//		ldwc.RowsCopy (1, ldwc.RowCount(), Primary!, ldwc2, 99999, Primary!)
//		idw_const.RowsCopy (1, idw_const.RowCount(), Primary!, idw_wcr_display_1, 99999, Primary!)
//		idw_wcr_display_1.SetFilter ("uhc='T'")
//		idw_wcr_display_1.Filter ()
//		idw_wcr_display_1.dataobject = "d_profile_underlying_haz_const_form"
//		idw_wcr_display_2.dataobject = "d_profile_underlying_haz_const_form_cont"
//		idw_wcr_display_1.height = 296 + 40 + 64
//		ii_dw2_height = 1572
//		ii_dw_height = idw_wcr_display_1.height
//		idw_wcr_display_2.y = ii_dw_height
		// COR2-MPM
		// Section F
		idw_wcr_display_1.dataobject = "d_profile_additional_properties_form_dragon"
//		idw_wcr_display_2.VScrollBar = FALSE
//		idw_wcr_display_2.height = ii_dw2_height
//		idw_wcr_display_2.Width = idw_wcr_display_1.Width 
//		idw_const.GetChild ("const_id_2", ldwc)
//		idw_wcr_display_2.GetChild ("const_id_2", ldwc2)
//		ldwc.RowsCopy (1, ldwc.RowCount(), Primary!, ldwc2, 99999, Primary!)
// rb 07/11/2012 Need to ShareData instead
//		idw_const.RowsCopy (1, idw_const.RowCount(), Primary!, idw_wcr_display_2, 99999, Primary!)
//		idw_wcr_display_2.SetFilter ("uhc='T'")
//		idw_wcr_display_2.Filter ()
// SK 07122013 All Constituents should be displayed on both the tabs
//		ls_filter = idw_const.Describe ("DataWindow.Table.Filter")
//		if ls_filter = "?" then ls_filter = ""
//		if Pos (ls_filter, "uhc='T'") < 1 then
//			if Len (ls_filter) > 0 then
//				ls_filter += " and "
//			end if
//			ls_filter += "uhc='T'"
//		end if
//		idw_const.SetFilter (ls_filter)
//		idw_const.Filter ()
//		idw_const.Sort ()
//		idw_const.ShareData (idw_wcr_display_2)
//		idw_wcr_display_2.VScrollBar = true
//		idw_wcr_display_2.Show()

// COR2 - MPM - 2/4/2019 - Fixed kludge from last build:
		idw_wcr_display_1.InsertRow (0)
//		ll_profile_id = this.wf_get_profile_id( )
//		idw_wcr_display_1.SetTransObject (itr_share)
//		idw_wcr_display_1.Retrieve (ll_profile_id)
		
//	CASE 8
//		SetPointer(HourGlass!)
//		idw_wcr_display_1.dataobject = "d_profile_non_hazardous_wastes_form"
//// rb 04/25/2012
//////		ds_wcr_master.ShareData(idw_wcr_display_1)
//		// rb 07/12/2012 The non-haz codes were not being set
//		wf_populate_wastecodes_wcr('state')
//		IF len(is_michigan_non_haz_waste_codes) > 65 THEN
//			ls_temp = left(is_michigan_non_haz_waste_codes,65) + "...MORE"
//		ELSE
//			ls_temp = is_michigan_non_haz_waste_codes
//		END IF
//		idw_wcr_display_1.InsertRow (0)
//		idw_wcr_display_1.object.michigan_non_haz_codes.text = ls_temp
//		SetPointer(Arrow!) 
//	CASE 9
//		idw_wcr_display_1.dataobject = "d_profile_tsca_form"
////		ds_wcr_master.ShareData(idw_wcr_display_1)
//// rb 04/25/2012
//		idw_wcr_display_1.InsertRow (0)
	// COR2 - MPM
	case 8 // Regulatory Information
		idw_wcr_display_1.dataobject = "d_profile_regulatory_information_dragon_g"
		idw_wcr_display_1.InsertRow (0)
	
		//COR2 JXM 04/08/2019 Add LDR Subcategory as Display/Lookup to Section H/Q4
		idw_wcr_display_2.dataobject = "d_profile_ldr_subcategory_dragon"
		idw_ldr_subcategory.ShareData(idw_wcr_display_2)
		idw_wcr_display_2.border = TRUE
		idw_wcr_display_2.VScrollBar = TRUE
		idw_wcr_display_2.x =  841
		idw_wcr_display_2.y = 1092 + (100)
		idw_wcr_display_2.width =  2010
		idw_wcr_display_2.height = 280
		idw_wcr_display_2.Show()
		
	// COR2 - MPM
	case 9 // Generator certificatiuon
		idw_wcr_display_1.dataobject = "d_profile_generator_certification_dragon_h"
		idw_wcr_display_2.dataobject = "d_profile_use_facility_dragon"
		idw_wcr_display_2.border = TRUE
		idw_wcr_display_2.VScrollBar = TRUE
		idw_wcr_display_2.x = 1632
		idw_wcr_display_2.y = 788
		idw_wcr_display_2.width = 2267
		idw_wcr_facility.ShareData(idw_wcr_display_2)
		idw_wcr_display_2.Show()
		idw_wcr_display_1.InsertRow(0)
		
	CASE 16 // COR2 - JAG 5516 . changed from 10 to 16
		idw_wcr_display_1.dataobject = "d_profile_clean_air_act_form"
//		ds_wcr_master.ShareData(idw_wcr_display_1)
// rb 04/25/2012
		idw_wcr_display_1.InsertRow (0)
	// dz 07/11/2012 Added certificaton form
	CASE 17 // COR2 - JAG 5513. changed from 11 to 17
		idw_wcr_display_1.dataobject = "d_profile_certification_form"
		idw_wcr_display_1.InsertRow (0)// SK 07092012 LDR & SREC supplemental forms not used..		
//	CASE 12
////		ll_row = idw_wcr_select.getrow()
////		IF ll_row > 0 THEN
////			IF idw_wcr_select.object.show_field[ll_row] = 'T' THEN
////				idw_wcr_display_1.dataobject = "d_profile_ldr"
////				ds_ldr_form.ShareData(idw_wcr_display_1)
////				idw_wcr_display_2.dataobject = "d_profile_ldr_detail"
////				ds_ldr_subform.ShareData(idw_wcr_display_2)
////				idw_wcr_display_1.height = 200
////				ii_dw_height = idw_wcr_display_1.height
////				idw_wcr_display_2.y = ii_dw_height
////				idw_wcr_display_2.height = 1600
////				idw_wcr_display_2.Width = idw_wcr_display_1.Width
////				idw_wcr_display_2.Show()
////				idw_wcr_display_1.SetFocus()
////			END IF
////		END IF
//		idw_wcr_display_1.dataobject = "d_profile_ldr_form"
//
//		idw_shipping.GetChild ("waste_managed_id_1", ldwc)
//		idw_wcr_display_1.GetChild ("manage_id", ldwc2)
//		ldwc.RowsCopy (1, ldwc.RowCount(), Primary!, ldwc2, 99999, Primary!)
//
//		idw_shipping.GetChild ("ldr_subcategory", ldwc)
//		idw_wcr_display_1.GetChild ("subcategory", ldwc2)
//		ldwc.RowsCopy (1, ldwc.RowCount(), Primary!, ldwc2, 99999, Primary!)
//
//		idw_wcr_display_1.InsertRow (0)
	CASE 13 // JCOR2 - AG 5518 - changed from 12 to 13
////		ll_row = idw_wcr_select.getrow()
////		IF ll_row > 0 THEN
////			IF idw_wcr_select.object.show_field[ll_row] = 'T' THEN
////				idw_wcr_display_1.dataobject = "d_profile_norm"
////				ds_norm.ShareData(idw_wcr_display_1)
////				// Acceptable NORM facilities are MDWTP & WDI only, so set filter for same
////				li_rc = idw_wcr_display_1.GetChild("disposal_facility_code", dwc_facility)
////				IF li_rc = 1 THEN
////					dwc_facility.SetFilter( "facility_code IN ('MDWTP', 'WDI')")
////					dwc_facility.Filter()
////				END IF
////			END IF
////		END IF
//		idw_wcr_display_1.dataobject = "d_profile_norm_form"
//		idw_wcr_display_1.InsertRow (0)

// SK 07092012 LDR & SREC supplemental forms not used..	
//	CASE 14
//		idw_wcr_display_1.dataobject = "d_profile_srec_form"
//
//		idw_wcr_display_1.InsertRow (0)
//
// 		for ll_i = 1 to idw_approval.RowCount()
//			if idw_approval.object.screen_access[ll_i] <> "N" and &
//				idw_approval.object.profitcenter_surcharge_flag[ll_i] = "T" and &
//				idw_approval.object.sr_type_code[ll_i] = "E" then
//			
//				wf_populate_srec_exempt_reasons (idw_approval.object.srec_exempt_id[ll_i])
//				idw_wcr_display_1.object.exempt_id[1] = idw_approval.object.srec_exempt_id[ll_i]
//				exit
//			end if
//		next
	
	// COR2 - JAG
	//jxm 02/14/2019 8828 re-numbered sort order for case statement
	//jxm 02/19/2019 re-ordered displayed supplmements/forms
	case 61 //120  // Import Supplememt //Waste import form 5518
		idw_wcr_display_1.dataobject = "d_profile_waste_import_supplement"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)
		//DevOps:29698
		idw_wcr_display_1.VScrollBar = TRUE
		
		idw_waste_import_supplement.sharedata(idw_wcr_display_1 )
		IF idw_wcr_display_1.Getrow () > 0 THEN
		      ll_profile_id = this.wf_get_profile_id( )
		END IF
		
		if (ll_profile_id > 0) then
			//COR2-AM - commented below 2 lines 
			//ll_num_rows = idw_wcr_display_1.Retrieve(ll_profile_id)
			//ll_num_rows =  idw_waste_import_supplement.Retrieve(ll_profile_id)
			//String ls_contact_name2, ls_contact_phone2, ls_contact_email2, ls_dataobject
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then 
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
						idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
						idw_wcr_display_1.SetItem(1, 'created_by', gs_user_id)
						idw_wcr_display_1.SetItem(1, 'date_created', DateTime(Today(), Now()))
						idw_wcr_display_1.SetItem(1,'profile_wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
						idw_wcr_display_1.SetItem(1,'profile_wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
						idw_wcr_display_1.SetItem(1,'profile_wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
						idw_wcr_display_1.SetItem(1,'profile_wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
							//Add Generator Information Section
						idw_wcr_display_1.Object.generator_id[1] = idw_header.Object.generator_id[ll_header_row]
						idw_wcr_display_1.Object.importing_generator_name[1] = idw_header.Object.generator_name[ll_header_row] 
						idw_wcr_display_1.Object.importing_generator_address[1] = idw_header.Object.generator_address_1[ll_header_row]
						idw_wcr_display_1.Object.importing_generator_city[1] = idw_header.Object.generator_city[ll_header_row]
						idw_wcr_display_1.Object.importing_generator_province_territory[1] = idw_header.Object.generator_state[ll_header_row]
						idw_wcr_display_1.Object.importing_generator_mail_code[1] = idw_header.Object.gen_mail_zip_code[ll_header_row]
						//idw_wcr_display_1.Object.contact_tech_contact_fax[1] = idw_wcr_display_4.Object.contact_phone[idw_wcr_display_4.GetRow()]
						idw_wcr_display_1.Object.country_name[1] = idw_header.Object.generator_country[ll_header_row]
						//idw_wcr_display_1.Object.contact_tech_cont_email[1] = idw_wcr_display_4.Object.contact_email[idw_wcr_display_4.GetRow()]
							//Add Facility Contact Information - COR2 JXM 04/01/2019
//						ls_dataobject = idw_wcr_display_4.DataObject
//						ls_contact_name2 = idw_wcr_display_4.object.contact_name[1] 
//						ls_contact_phone2 = idw_wcr_display_4.object.contact_phone[1]
//						ls_contact_email2 = idw_wcr_display_4.object.contact_email[1]
						idw_wcr_display_1.Object.tech_contact_name[1] = idw_profile_gen_contact_form.object.contact_name[idw_profile_gen_contact_form.GetRow()] 
						idw_wcr_display_1.Object.contact_tech_contact_phone[1] = idw_profile_gen_contact_form.object.contact_phone[idw_profile_gen_contact_form.GetRow()]
						idw_wcr_display_1.object.contact_tech_cont_email[1] 	= idw_profile_gen_contact_form.object.contact_email[idw_profile_gen_contact_form.GetRow()]
							//Add Common Name - COR2 JXM 04/01/2019
						idw_wcr_display_1.Object.profile_waste_stream_name[1] = idw_header.object.approval_desc[ll_header_row]
						
				end if
			else //(ll_num_rows>0) then Profile record retrieved, so set the signature columns JXM 3/25/2019
				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
				idw_wcr_display_1.SetItem(1, 'created_by', gs_user_id)
				idw_wcr_display_1.SetItem(1, 'date_created', DateTime(Today(), Now()))
				idw_wcr_display_1.SetItem(1,'profile_wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1,'profile_wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1,'profile_wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1,'profile_wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				//Add Generator Information Section
				idw_wcr_display_1.Object.generator_id[1] = idw_header.Object.generator_id[ll_header_row]
				idw_wcr_display_1.Object.importing_generator_name[1] = idw_header.Object.generator_name[ll_header_row] 
				idw_wcr_display_1.Object.importing_generator_address[1] = idw_header.Object.generator_address_1[ll_header_row]
				idw_wcr_display_1.Object.importing_generator_city[1] = idw_header.Object.generator_city[ll_header_row]
				idw_wcr_display_1.Object.importing_generator_province_territory[1] = idw_header.Object.generator_state[ll_header_row]
				idw_wcr_display_1.Object.importing_generator_mail_code[1] = idw_header.Object.gen_mail_zip_code[ll_header_row]
				//idw_wcr_display_1.Object.contact_tech_contact_fax[1] = idw_wcr_display_4.Object.contact_phone[idw_wcr_display_4.GetRow()]
				idw_wcr_display_1.Object.country_name[1] = idw_header.Object.generator_country[ll_header_row]
				//idw_wcr_display_1.Object.contact_tech_cont_email[1] = idw_wcr_display_4.Object.contact_email[idw_wcr_display_4.GetRow()]
					//Add Facility Contact Information - COR2 JXM 04/01/2019
//						ls_dataobject = idw_wcr_display_4.DataObject
//						ls_contact_name2 = idw_wcr_display_4.object.contact_name[1] 
//						ls_contact_phone2 = idw_wcr_display_4.object.contact_phone[1]
//						ls_contact_email2 = idw_wcr_display_4.object.contact_email[1]
				idw_wcr_display_1.Object.tech_contact_name[1] = idw_profile_gen_contact_form.object.contact_name[idw_profile_gen_contact_form.GetRow()] 
				idw_wcr_display_1.Object.contact_tech_contact_phone[1] = idw_profile_gen_contact_form.object.contact_phone[idw_profile_gen_contact_form.GetRow()]
				idw_wcr_display_1.object.contact_tech_cont_email[1] = idw_profile_gen_contact_form.object.contact_email[idw_profile_gen_contact_form.GetRow()]
					//Add Common Name - COR2 JXM 04/01/2019
				idw_wcr_display_1.Object.profile_waste_stream_name[1] = idw_header.object.approval_desc[ll_header_row]
			end if
		else //(ll_profile_id <= 0) then
		  	ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if ( ll_num_rows > 0) then 
					ll_profile_id = this.wf_get_profile_id()
					if ll_profile_id=0 then ll_profile_id=ll_null //DevOps #15554 info_gde 05/07/2020;
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) 
					idw_wcr_display_1.SetItem(1, 'created_by', gs_user_id)
					idw_wcr_display_1.SetItem(1, 'date_created', DateTime(Today(), Now()))
					idw_wcr_display_1.SetItem(1,'profile_wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1,'profile_wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1,'profile_wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1,'profile_wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
					//Add Generator Information Section
					idw_wcr_display_1.Object.generator_id[1] = idw_header.Object.generator_id[ll_header_row]
					idw_wcr_display_1.Object.importing_generator_name[1] = idw_header.Object.generator_name[ll_header_row] 
					idw_wcr_display_1.Object.importing_generator_address[1] = idw_header.Object.generator_address_1[ll_header_row]
					idw_wcr_display_1.Object.importing_generator_city[1] = idw_header.Object.generator_city[ll_header_row]
					idw_wcr_display_1.Object.importing_generator_province_territory[1] = idw_header.Object.generator_state[ll_header_row]
					idw_wcr_display_1.Object.importing_generator_mail_code[1] = idw_header.Object.gen_mail_zip_code[ll_header_row]
					//idw_wcr_display_1.Object.contact_tech_contact_fax[1] = idw_wcr_display_4.Object.contact_phone[idw_wcr_display_4.GetRow()]
					idw_wcr_display_1.Object.country_name[1] = idw_header.Object.generator_country[ll_header_row]
					//idw_wcr_display_1.Object.contact_tech_cont_email[1] = idw_wcr_display_4.Object.contact_email[idw_wcr_display_4.GetRow()]
						//Add Facility Contact Information - COR2 JXM 04/01/2019
//						ls_dataobject = idw_wcr_display_4.DataObject
//						ls_contact_name2 = idw_wcr_display_4.object.contact_name[1] 
//						ls_contact_phone2 = idw_wcr_display_4.object.contact_phone[1]
//						ls_contact_email2 = idw_wcr_display_4.object.contact_email[1]
					idw_wcr_display_1.Object.tech_contact_name[1] = idw_profile_gen_contact_form.object.contact_name[idw_profile_gen_contact_form.GetRow()] 
					idw_wcr_display_1.Object.contact_tech_contact_phone[1] = idw_profile_gen_contact_form.object.contact_phone[idw_profile_gen_contact_form.GetRow()]
					idw_wcr_display_1.object.contact_tech_cont_email[1]  = idw_profile_gen_contact_form.object.contact_email[idw_profile_gen_contact_form.GetRow()]
						//Add Common Name - COR2 JXM 04/01/2019
					idw_wcr_display_1.Object.profile_waste_stream_name[1] = idw_header.object.approval_desc[ll_header_row]
				end if
			end if
		end if	
		
		//COR2 JXM 04/26/2019 9819 Show RCRA Waste codes
		wf_populate_wastecodes_wcr('all')
		Long ll_waste_row
		if isValid(idw_waste_import_supplement) then
			ll_waste_row = idw_waste_import_supplement.GetRow()
			if ll_waste_row > 0 then 
				//Bug 9819 commented out if statement because codes need to be removed from waste import if removed from updateable datawindow
//				if is_rcra_waste_codes <> '' then idw_wcr_display_1.Object.rcra_waste_code_1[idw_wcr_display_1.GetRow()] = is_rcra_waste_codes
				idw_wcr_display_1.Object.rcra_waste_code_1[idw_wcr_display_1.GetRow()] = is_rcra_waste_codes
			end if
		end if
		
	// COR2 - JAG
	//jxm 02/14/2019 8828 re-numbered sort order for case statement
	case 30  // Benzene waste operations supplement Form 5513
		idw_wcr_display_1.dataobject =  "d_profile_benzene_waste_ops_supplement"
		idw_wcr_display_1.settransobject( itr_share)
		
		ll_row = idw_wcr_display_1.insertrow(0)
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980

	   idw_benzene_waste_ops_supplemen.sharedata(idw_wcr_display_1)
   
		IF idw_wcr_display_1.Getrow () > 0 THEN
			ll_profile_id = this.wf_get_profile_id( )
		END IF
	
		if (ll_profile_id > 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
					idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
			else //(ll_num_rows = 0) then Profile record retrieved, so set the signature columns JXM 03/25/2019
				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
				idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
			end if
		else //(ll_profile_id <= 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					ll_profile_id = this.wf_get_profile_id()
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
					idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
					end if
				end if
			end if	
		
		IF idw_wcr_display_1.Getrow() > 0 THEN 
			// wf_set_benzene_supplemen_same_as_above()
			  IF idw_wcr_display_1.Object.originating_generator_name[idw_wcr_display_1.getrow()] =  idw_wcr_display_1.Object.generator_name[idw_wcr_display_1.getrow()] AND &
				idw_wcr_display_1.Object.originating_generator_epa_id[idw_wcr_display_1.getrow()] =  idw_wcr_display_1.Object.generator_epa_id[idw_wcr_display_1.getrow()] THEN
				idw_wcr_display_1.Object.same_as_above[idw_wcr_display_1.getrow()] = 'Y'
				idw_wcr_display_1.SetColumn('same_as_above')
			ELSE
				idw_wcr_display_1.Object.same_as_above[idw_wcr_display_1.getrow()] = 'N'
			END IF
		END IF
		//DevOps:15313
//		IF idw_wcr_display_1.GetItemString(1, 'classified_as_process_wastewater_stream') = 'F' AND &
//			 idw_wcr_display_1.GetItemString(1, 'classified_as_landfill_leachate') = 'F' AND &
//			 idw_wcr_display_1.GetItemString(1, 'classified_as_product_tank_drawdown') = 'F'  THEN 
//			idw_wcr_display_1.SetItem(1, 'none_of_the_three','T')						
//		END IF

	//COR2 - JXM 02/20/2019 - Build and add PCB Supplment dw to Profile Tab

     case 80
		idw_wcr_display_1.dataobject = "d_profile_pcb_supplement_dragon"
		idw_wcr_display_1.settransobject( itr_share)
		ll_row = idw_wcr_display_1.insertrow(0)
			
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980
		//idw_wcr_display_1.HScrollBar = TRUE JXM 03/25/2019 removed scrollbar
		idw_profile_pcb_supplement_dragon.sharedata(idw_wcr_display_1 )
		IF idw_wcr_display_1.Getrow () > 0 THEN
			ll_profile_id = this.wf_get_profile_id( )
		END IF
	
		if (ll_profile_id > 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
					idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
			else //(ll_num_rows = 0) then Profile record retrieved, so set the signature columns JXM 03/25/2019
				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
				idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
			end if
		else //(ll_profile_id <= 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					ll_profile_id = this.wf_get_profile_id()
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id)
					idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
					end if
				end if
			end if
		
	// COR2 - JAG
	//COR2 - JXM 02/14/2019 8828 re-numbered sort order for case statement
	case 120 // Thermal Supplement Form 5516
		idw_wcr_display_1.dataobject = "d_profile_thermal_supplement_form"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)
			
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980
		
		idw_profile_thermal_supplement_form.sharedata(idw_wcr_display_1 )
		IF idw_wcr_display_1.Getrow () > 0 THEN
			ll_profile_id = this.wf_get_profile_id( )
		END IF
	
		if (ll_profile_id > 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					idw_wcr_display_1.SetItem(1, 'profilethermal_profile_id', ll_profile_id)
					idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
			else //(ll_num_rows = 0) then Profile record retrieved, so set the signature columns JXM 03/25/2019
				idw_wcr_display_1.SetItem(1, 'profilethermal_profile_id', ll_profile_id)
				idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
			end if
		else //(ll_profile_id <= 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					ll_profile_id = this.wf_get_profile_id()
					idw_wcr_display_1.SetItem(1, 'profilethermal_profile_id', ll_profile_id)
					idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'profile_wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
					end if
				end if
			end if	
		POST wf_set_thermal_supplement_same_as_above()

	case 40  // COR2-AM - Cylinder Supplement
		
		idw_wcr_display_1.dataobject = "d_profile_cylinder_supplement_dragon"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)
		
		//DevOps #15255 info_gde 04/21/2020 - start
		idw_wcr_display_1.GetChild("cylinder_type_id", dwc_cylinders)
		dwc_cylinders.SetTransObject(itr_share)
		li_rc=dwc_cylinders.Retrieve()
		li_rc++
		li_rc=dwc_cylinders.InsertRow(1)
		//DevOps #15255 info_gde 04/21/2020 - end
		
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980
		//idw_wcr_display_1.HScrollBar = TRUE JXM 03/25/2019 removed scrollbar
		
		idw_profile_cylinder_supplement_dragon.sharedata(idw_wcr_display_1 )
		IF idw_wcr_display_1.Getrow () > 0 THEN
			ll_profile_id = this.wf_get_profile_id( )
		END IF
		
		if (ll_profile_id > 0) then	//Existing record
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 02.23.2019
					idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
			else //(ll_num_rows>0) then Profile record retrieved, so set the signature columns JXM 3/25/2019
				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 02.23.2019
				idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
			end if			
		else //(ll_profile_id <= 0) then	//New record
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					ll_profile_id = this.wf_get_profile_id()
					if ll_profile_id=0 then ll_profile_id=ll_null //DevOps #15554 info_gde 05/07/2020;
			 		idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 02.23.2019
					idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
		     	end if
			end if
		end if
			
	// COR2 - AGC
	//jxm 02/14/2019  8828 re-numbered sort order for case statement
	//Task 9649 AGC 04/05/2019
	case 70  // Land Disposal Restriction Form
		//COMMENT OUT  JXM 03/14/2019
		//un-comment out agc 4/5/19
		idw_wcr_display_1.dataobject = "d_profile_ldr_form_dragon"
		idw_wcr_display_1.settransobject( itr_share)
				
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980
		idw_wcr_display_1.HScrollBar = FALSE
				
		ll_num_rows = idw_wcr_display_1.InsertRow(0)
		
		POST wf_set_ldr_form() //<<<++++ CHECK THIS OUT jxm

		//Task 9649 AGC 04/04/2019
		idw_wcr_display_2.dataobject = "d_profile_ldr_const_dragon"
		idw_wcr_display_2.settransobject( itr_share)
//		idw_wcr_display_2.InsertRow(0)
		idw_wcr_display_2.border = TRUE 
		idw_wcr_display_2.BorderStyle = StyleBox!
	    //DevOps:21617 - Reset idw_wcr_display_2 other properties
		idw_wcr_display_2.x =818 //788
		idw_wcr_display_2.y = 1648 //1012 //828
		idw_wcr_display_2.Width = 1723  // DevOps 17146 fhc 8/14/20
		idw_wcr_display_2.Height = 492
		il_current_wcr_display_2_pos = 1648 // 1012 //828
	
		il_old_scrollpos = 0
		idw_wcr_display_2.VScrollBar = TRUE
		
		if (ib_LDR_setFilter =TRUE) then  
			idw_const.SetFilter("")  
			idw_const.Filter()
			ib_LDR_setFilter =FALSE
		end if 	
		
		li_rc = idw_const.sharedata(idw_wcr_display_2)
		ll_row = idw_wcr_display_1.Getrow ()
		if ll_row > 0 then
			ls_const_req_treat_flag = idw_wcr_display_1.getitemstring(ll_row,'constituents_requiring_treatment_flag')
		end if
		ll_rowcount = idw_wcr_display_2.rowcount()
		if ls_const_req_treat_flag = 'T' then
			for ll_row = 1 to ll_rowcount
				if isnull(idw_wcr_display_2.getitemstring(ll_row,'requiring_treatment_flag')) then
					idw_wcr_display_2.setitem(ll_row,'requiring_treatment_flag','T')
				end if
				if isnull(idw_wcr_display_2.getitemstring(ll_row,'uhc')) then
					idw_wcr_display_2.setitem(ll_row,'uhc','U')
				end if
				if idw_wcr_display_2.getitemstring(ll_row,'uhc') = 'T' then
					if ls_uhcs = '' then
						ls_uhcs = idw_wcr_display_2.describe("Evaluate('lookupdisplay(const_id_2)', " + String(ll_row) + ")")
					else
						ls_uhcs = ls_uhcs + ', ' + idw_wcr_display_2.describe("Evaluate('lookupdisplay(const_id_2)', " + String(ll_row) + ")")
					end if
				end if
			next
		else
			for ll_row = 1 to ll_rowcount
				if isnull(idw_wcr_display_2.getitemstring(ll_row,'uhc')) then
					idw_wcr_display_2.setitem(ll_row,'uhc','U')
				end if
				if idw_wcr_display_2.getitemstring(ll_row,'uhc') = 'T' then
					if ls_uhcs = '' then
						ls_uhcs = idw_wcr_display_2.describe("Evaluate('lookupdisplay(const_id_2)', " + String(ll_row) + ")")
					else
						ls_uhcs = ls_uhcs + ', ' + idw_wcr_display_2.describe("Evaluate('lookupdisplay(const_id_2)', " + String(ll_row) + ")")
					end if
				end if
			next
		end if
		//DevOps:19087
		
//			li_rc = idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
//			li_rc = idw_wcr_display_2.Filter()
//			ib_LDR_setFilter = true

				idw_wcr_display_2.Show()
				
		ll_row = idw_wcr_display_1.Getrow ()
		if ll_row > 0 then
			ls_const_req_treat_flag = idw_wcr_display_1.getitemstring(ll_row,'constituents_requiring_treatment_flag')
		end if
		
		IF ls_const_req_treat_flag = 'T' THEN 
			li_rc = idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
			li_rc = idw_wcr_display_2.Filter()
			ib_LDR_setFilter = true
		ELSE
//			setnull(ls_requires_treatment_flag)
//			idw_wcr_display_2.SetFilter('')
//			idw_wcr_display_2.Filter()
//			ll_rowcount = idw_wcr_display_2.rowcount()
//			for ll_row = 1 to  ll_rowcount 
//				idw_wcr_display_2.setitem(ll_row,'requiring_treatment_flag','F')
//			next
//			idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
//			idw_wcr_display_2.Filter()
//			idw_wcr_display_2.SetRedraw(true)
		END IF
		
		IF idw_wcr_display_1.Getrow () > 0 THEN
			ll_profile_id = this.wf_get_profile_id( )
		END IF
		
		if (ll_profile_id > 0) then
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then 
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 02.23.2019
					idw_wcr_display_1.SetItem(1, 'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1, 'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if	
			else //(ll_num_rows = 0) then Profile record retrieved, so set the signature columns JXM 03/25/2019
				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 03.25.2019
				idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
			end if
		else //(ll_profile_id <= 0) then	
			 ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if ( ll_num_rows > 0) then 
					ll_profile_id = this.wf_get_profile_id( )
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 02.23.2019
					idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
			end if
		end if
		    idw_wcr_display_1.SetItem(1,'uhcs',ls_uhcs)
			idw_const.SetItemStatus(1,0, Primary!, NotModified! )
			idw_wcr_display_1.SetItemStatus(1,0, Primary!, NotModified! )
         	idw_wcr_display_2.SetItemStatus(1,0, Primary!, NotModified! )
			idw_profile_ldr_form_dragon.SetItemStatus(1,0, Primary!, NotModified! )
		
	//jxm 02/14/2019 Add Debris Certifcation to Profile list	***incomplete***
	//COR2 JXM 03/06/2019 add signture fields to Profile/Debris Display
	CASE 50
		// COR - Profile
		idw_wcr_display_1.dataobject = "d_profile_debris_certification_dragon"
		idw_wcr_display_1.settransobject(itr_share)
			idw_wcr_display_1.insertrow(0)
			
		idw_wcr_display_1.VScrollBar = TRUE
	//	idw_wcr_display_1.Height = 1980
		
	CASE 60
		idw_wcr_display_1.dataobject = "d_profile_illinois_disposal_supplement_dragon"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)
			
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980
		
		idw_profile_illinois_disposal_supplemen.sharedata(idw_wcr_display_1 )
			IF idw_wcr_display_1.Getrow () > 0 THEN
		      ll_profile_id = this.wf_get_profile_id( )
		    END IF
		
		if (ll_profile_id > 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
					
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 02.24.2019
					idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
			else //(ll_num_rows = 0) then Profile record retrieved, so set the signature columns JXM 03/25/2019
				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 03.25.2019
				idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
			end if			
		else //(ll_profile_id <= 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0  )then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if ( ll_num_rows > 0) then 
					ll_profile_id = this.wf_get_profile_id( )
					if ll_profile_id=0 then ll_profile_id=ll_null //DevOps #15554 info_gde 05/07/2020;
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 02.24.2019
					//COR2 - JXM - 03.25.2019
					idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
			end if
		end if

	//jxm 02/14/2019 Add Used Oil Suplement to Profile list
	//JXM 02/28/2019 Add extended to code
	CASE 130
		// COR - Profile
		idw_wcr_display_1.dataobject = "d_profile_used_oil_supplement_dragon"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)
			
		idw_profile_used_oil_supplement_dragon.sharedata(idw_wcr_display_1 )
		IF idw_wcr_display_1.Getrow () > 0 THEN
		     ll_profile_id = this.wf_get_profile_id( )
		END IF
		
		if (ll_profile_id > 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then 
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
				if (ll_num_rows > 0) then
						idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) 
						idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
						idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
						idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
						idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if		
			else
				//(ll_num_rows = 0) then Profile record retrieved, so set the signature columns JXM 03/25/2019
				idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 03.25.2019
				idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
				idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
			end if
		else // (ll_profile_id <= 0) then	
			ll_num_rows = idw_wcr_display_1.rowcount()
			if (ll_num_rows = 0) then
				ll_num_rows = idw_wcr_display_1.InsertRow(0)
			    	if (ll_num_rows > 0) then 
					ll_profile_id = this.wf_get_profile_id()
					idw_wcr_display_1.SetItem(1, 'profile_id', ll_profile_id) //COR2 - JXM - 03.25.2019
					idw_wcr_display_1.SetItem(1,'wcr_sign_name',idw_header.Object.wcr_sign_name[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_company',idw_header.Object.wcr_sign_company[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_title',idw_header.Object.wcr_sign_title[ll_header_row])
					idw_wcr_display_1.SetItem(1,'wcr_sign_date',idw_header.Object.wcr_sign_date[ll_header_row])
				end if
	      	end if
		end if	
	
	CASE 100
		//COR2 - AGC radioactive supplement form page 1
		idw_wcr_display_1.dataobject = "d_profile_radioactive_supplement_page_1"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)
			
		//COR2 JXM Add VScrollbar 3.13.2019
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980
					idw_profile_radioactive_supplement_page_1.ShareData(idw_wcr_display_1)
	CASE 101
		//COR2 - AGC radioactive supplement form page 2
		idw_wcr_display_1.dataobject = "d_profile_radioactive_supplement_page_2"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.VScrollBar = TRUE
//		idw_wcr_display_1.Height = 1980
		
		// MPM - DevOps 15205 - Added a blank row for user entry, if there are no rows yet
		idw_profile_radioactive_supplement_page_2.ShareData(idw_wcr_display_1)
		IF idw_profile_radioactive_supplement_page_2.RowCount() = 0 THEN
			ldwo = idw_profile_radioactive_supplement_page_2.Object.b_add_comp
			idw_wcr_display_1.Post Event buttonclicked (0, 0, ldwo)
		END IF

	CASE 102
		//COR2 - AGC radioactive supplement form page 3
		idw_wcr_display_1.dataobject = "d_profile_radioactive_supplement_page_3"
		idw_wcr_display_2.dataobject = "d_profile_radioactive_supplement_page_3sub"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_2.settransobject( itr_share)
		idw_wcr_display_1.InsertRow(0)
		idw_wcr_display_2.border = TRUE 
		idw_wcr_display_2.BorderStyle = StyleBox!
		idw_wcr_display_2.Height = 392
		//idw_wcr_display_2.Width = 3529  DevOps 16152 info_gde 06/05/2020;
		idw_wcr_display_2.Width = 1723	// DevOps 17146 fhc 8/14/2020
		idw_wcr_display_2.VScrollBar = TRUE
		idw_wcr_display_1.VScrollBar = TRUE
		//DevOps #15003 info_gde 04/07/2020 start
		//idw_wcr_display_2.y = 190 
		//idw_wcr_display_2.x = 770
		idw_wcr_display_2.y = 219 
		idw_wcr_display_2.x = 809
		//DevOps #15003 info_gde 04/07/202 end
		// DevOps 17161 Fix Scrolling Issue fhc 8/13/2020
			il_current_wcr_display_2_pos = 219 
			il_old_scrollpos = 0
			
		li_rc = idw_profile_radioactive_supplement_3sub.sharedata(idw_wcr_display_2)
		// MPM - DevOps 15205 - Added a blank row for user entry, if there are no rows yet
//		IF idw_profile_radioactive_supplement_3sub.RowCount() = 0 THEN
//			ldwo = idw_profile_radioactive_supplement_3sub.Object.b_add_comp
//			idw_wcr_display_2.Post Event buttonclicked (0, 0, ldwo)
//		END IF
		idw_wcr_display_2.Show()
		
	CASE 131
		//Dev17845 COR2 - Pharmaceutical Supplement
		idw_wcr_display_1.dataobject = "d_profile_pharmaceutical_supplement_dragon"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)

      	idw_profile_pharmaceutical_supplement.sharedata(idw_wcr_display_1 )
	CASE 132
		idw_wcr_display_1.dataobject = "d_profile_gen_knowledge_supplement_form"
		idw_wcr_display_1.settransobject( itr_share)
		idw_wcr_display_1.insertrow(0)
		idw_wcr_display_1.VScrollBar = TRUE
      	idw_gen_knowledge_supplement.sharedata(idw_wcr_display_1 )
						
		// DevOps:21536- AM - Q3 of the supplement only maps from E1 - Texas State Waste Code. Pennsylvania state codes, or any state codes from E2 should not map into Q3 of the supplement form.
		IF is_tx_state_waste_codes <> '' THEN 
			idw_wcr_display_1.object.state_waste_codes.text = is_tx_state_waste_codes
//		IF is_state_waste_codes <> ''  THEN 
//			idw_wcr_display_1.object.state_waste_codes.text = is_state_waste_codes
		END IF
	// Dipankar - 08/31/2023 - Added for DevOps 69393
	CASE 133
		idw_wcr_display_1.dataobject = "d_profile_fuels_blending_supplement"
		idw_wcr_display_1.SetTransObject(itr_share)
		idw_wcr_display_1.InsertRow(0)

      	idw_profile_fuels_blending.ShareData(idw_wcr_display_1 )

		ll_profile_id = THIS.wf_get_profile_id()
			
		IF idw_wcr_display_1.RowCount () = 0 THEN
			ll_num_rows = idw_wcr_display_1.InsertRow(0)		    
		END IF
		
		idw_wcr_display_1.Object.profile_id 				[1] = ll_profile_id
		idw_wcr_display_1.Object.wcr_sign_name		[1] = idw_header.Object.wcr_sign_name		[ll_header_row]
		idw_wcr_display_1.Object.wcr_sign_company 	[1] = idw_header.Object.wcr_sign_company	[ll_header_row]
		idw_wcr_display_1.Object.wcr_sign_title 		[1] = idw_header.Object.wcr_sign_title			[ll_header_row]
		idw_wcr_display_1.Object.wcr_sign_date 		[1] = idw_header.Object.wcr_sign_date			[ll_header_row]
	CASE ELSE
		// Nothing to do			
END CHOOSE

idw_wcr_display_1.SetFocus ()

// rb 06/04/2012 Need to display fields with rightclickability
idw_wcr_display_1.Post dynamic uof_show_fields ()
idw_wcr_display_2.Post dynamic uof_show_fields ()
// COR2-MPM
idw_wcr_display_3.Post dynamic uof_show_fields ()

// rb 07/12/2012 Load data from this function
wf_wcr_profile_map_load_wcr_sect ()

// SK 09262012 Call fn to show locks/unlocks on profile that is a template
wf_set_template_lock_fields(idw_wcr_display_1)
wf_set_template_lock_fields(idw_wcr_display_2)

//20200430 jcb #15424 add
if idw_wcr_display_1.dataobject = 'd_profile_generator_certification_dragon_h' then
               if idw_wcr_display_1.rowcount() > 0 then
                              if idw_wcr_display_1.object.specific_technology_requested[1] = 'F' then
                                             idw_wcr_display_2.hide()	
										idw_wcr_display_1.object.requested_technology.protect = 1
										idw_wcr_display_1.setitem(1, 'requested_technology','')         						// blank out 
										idw_wcr_display_1.object.requested_technology.background.color  = 536870912 // not this grey 12632256     // grey  lighter is 14737632
										li_rc = idw_wcr_display_1.accepttext()   
							end if
							// 20200503 jcb #15424 adding here to insure field is unprotected
                               if idw_wcr_display_1.object.specific_technology_requested[1] = 'T' then
										idw_wcr_display_1.object.requested_technology.protect = 0
										idw_wcr_display_2.visible = TRUE
										idw_wcr_display_1.object.requested_technology.background.color  = 16777215  // white
										li_rc = idw_wcr_display_1.accepttext()   
							end if
			end if 
end if			 


// SK 09132012 After we are done loading everything, check what access they should have
CHOOSE CASE Upper(is_access)
	CASE 'V', 'P', 'B'
		f_set_dw_and_buttons_read_only(idw_wcr_display_1, TRUE, TRUE)
		f_set_dw_and_buttons_read_only(idw_wcr_display_2, TRUE, TRUE)
		f_set_dw_and_buttons_read_only(idw_wcr_display_3, TRUE, TRUE)
//		f_set_dw_and_buttons_read_only(idw_wcr_display_4, TRUE, TRUE)
		// COR2 - MPM
		f_set_dw_and_buttons_read_only(idw_wcr_display_5, TRUE, TRUE)
		
	CASE 'L'
		IF ll_header_row > 0 THEN
			ls_curr_status_code 	= Upper(idw_header.object.curr_status_code[ll_header_row])
			ls_tracking_type 		= Upper(idw_header.object.tracking_type[ll_header_row])
			IF (ls_curr_status_code = 'A' OR ls_tracking_type = 'A') THEN
				f_set_dw_and_buttons_read_only(idw_wcr_display_1, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_2, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_3, TRUE, TRUE)
//				f_set_dw_and_buttons_read_only(idw_wcr_display_4, TRUE, TRUE)
				// COR2 - MPM
				f_set_dw_and_buttons_read_only(idw_wcr_display_5, TRUE, TRUE)
			END IF
		END IF
		
	CASE ELSE
END CHOOSE

//idw_wcr_display_1.SetRedraw(TRUE) DevOps #15217 info_gde 04/23/2020; EQAI - View Format
//idw_wcr_display_2.SetRedraw(TRUE) DevOps #15217 info_gde 04/23/2020; EQAI - View Format

Return li_rc
end function

public subroutine wf_wcr_profile_map_create ();// rb 04/24/2012 WCR / Profile column mapping
//DevOps #14243 info_gde 03/03/2020;Add New Profile (Profile Tab) - Section H.
//DevOps #15412 info_gde 04/28/2020; EQAI - New Profile - Physical Properties - D.1 Physical Description
long	ll_i

// rb 06/14/2012 - Script size exceeded max size allowed by powerbuider, reduced script
//							size by not initially populating profile_column...loop through at
//							then end and if blank (same name as WCR column), set it then

// rb 07/13/2012 Facility
// COR2-MPM - Made multiple changes to this function for Dragon

// USE Facilities
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_facility_instr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "facility_instruction"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// Section A
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "customer_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "generator_epa_id"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_address_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_city"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_state"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 04/19/2019 Issue 10033 Section A - Add Generator Phone to Generator/Customer Information dw
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_phone"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_zip_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "emergency_phone_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_mail_addr1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_mail_addr2"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_mail_city"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_mail_state"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_mail_zip_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "cust_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "customer_name"

// MPM - 5/16/2022 - DevOps 41846 - changed customer address columns to "bill to" customer address columns
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "bill_to_addr1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "bill_to_city"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "bill_to_state"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "bill_to_zip_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "bill_to_country"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_mail_country"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_country"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_type"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "naics_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "state_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "po_required_from_form"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "purchase_order_from_form"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// Section B
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_material_stream_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "approval_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_material_stream_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_process"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_material_stream_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "EPA_source_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_material_stream_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "EPA_form_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// Section C
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_shipping_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "hazmat"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_shipping_desc_additional"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_sp_permit_text"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "reportable_quantity_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "un_na_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "un_na_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "hazmat_class"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "subsidiary_haz_mat_class"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "package_group"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "erg_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "erg_suffix"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_rq_threshold"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "rq_reason"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//14804 - profile_emergency_phone_number to emergency_phone_number
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "emergency_phone_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_inhalation_haz_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_bulk"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_totes"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_pallet"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_boxes"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_drums"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_cylinder"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_labpack"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_combination"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_combination_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "container_type_other_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "shipping_frequency"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "shipping_frequency_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_sp_permit_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "manifest_dot_sp_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_emergency_phone_number"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 10225 04/19/2019 Add dot_waste_flag
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ship_pkg_info_form_dragon_2"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_waste_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_certification_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "signing_name"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_certification_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "signing_title"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_certification_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "signing_company"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "inv_contact_id"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_id"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//istr_wcr_profile_map[ll_i].profile_column	= "contact_id"
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "generator_contact_id"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "contact_name"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//istr_wcr_profile_map[ll_i].profile_column	= "generator_contact_name"
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "contact_title"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//istr_wcr_profile_map[ll_i].profile_column	= "generator_contact_title"
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "contact_phone"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//istr_wcr_profile_map[ll_i].profile_column	= "generator_contact_phone"

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "contact_fax"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//istr_wcr_profile_map[ll_i].profile_column	= "generator_contact_fax"
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "contact_email"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//istr_wcr_profile_map[ll_i].profile_column	= "generator_contact_email"

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "inv_contact_name"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "inv_contact_phone"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "inv_contact_fax"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_name"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_phone"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_fax"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_mobile"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_pager"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "tech_cont_email"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_detail
//
// Shipping
/*
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "shipping_volume_unit_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "shipping_frequency"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "shipping_frequency_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "shipping_frequency_other"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "hazmat"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "dot_shipping_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "hazmat_class"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "package_group"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "un_na_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "un_na_flag"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "un_na_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "un_na_number"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "erg_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "subsidiary_haz_mat_class"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "erg_suffix"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "erg_suffix"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "reportable_quantity_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "rq_reason"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "rq_reason"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "manifest_dot_sp_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_shipping_form_contd"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_rq_threshold"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "profile_rq_threshold"
*/

// Section D
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "color"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_strength"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ldr_notification_frequency"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_type_ammonia"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_type_amines"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_type_mercaptans"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_type_sulfur"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_type_organic_acid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_type_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_other_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_solid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_dust"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_debris"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_sludge"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_liquid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_gas_aerosol"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_varies"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "liquid_phase"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "paint_filter_solid_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "incidental_liquid_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_compare_symbol"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical


ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_compare_temperature"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_does_not_flash"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_flammable_solid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "btu_lt_gt_5000"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profilelab_btu_per_lb"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "btu_per_lb"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon" 
istr_wcr_profile_map[ll_i].wcr_column		= "handling_issue"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "handling_issue"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "handling_issue_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "handling_issue_desc"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "odor_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ph_gt_10_lt_12_5"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ph_gt_2_lt_5"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ph_gte_12_5"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ph_gte_5_lte_10"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ph_lte_2"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ph_na"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_lt_90"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_90_139"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_140_199"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_gte_200"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ignitability_NA"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// MPM - DevOps 14162 - corrected the .dw_profile value in the next 4 blocks:
// MPM - 3/30/2021 - DevOps 19724 - Because I changed the composition dw on Section D of the Profile tab to ShareData() with idw_composition, I 
// commented out the next 4 blocks, since these are no longer needed.
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_composition_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "comp_description"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_composition //idw_technical;//DevOps #15412 info_gde 04/28/2020;
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_composition_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "comp_typical_pct"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_composition //idw_technical;//DevOps #15412 info_gde 04/28/2020;
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_composition_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "comp_from_pct"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_composition // idw_technical;//DevOps #15412 info_gde 04/28/2020;
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_composition_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "comp_to_pct"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_composition //idw_technical///DevOps #15412 info_gde 04/28/2020;

// Section E
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "texas_waste_material_type"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_other

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "texas_state_waste_code"
////istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	="d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "PA_residual_waste_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_other

// MPM - 6/8/2020 - DevOps 16185
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	="d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "PA_residual_waste_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_exempt_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_exempt_reason"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_listed"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_characteristic"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "cyanide_plating"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "state_waste_code_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "info_basis_knowledge"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "info_basis_analysis"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_characterization_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "info_basis_msds"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// Section F
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ammonia_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "asbestos_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "asbestos_friable_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "beryllium_present"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "biodegradable_sorbents"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "biohazard"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "compressed_gas"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "contains_pcb"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "dioxins_or_furans"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "explosives"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "hazardous_secondary_material"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "hazardous_secondary_material_cert"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "metal_fines_powder_paste"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other
istr_wcr_profile_map[ll_i].profile_column	= "metal_fines"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "organic_peroxide"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "oxidizer"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pharma_waste_subject_to_prescription"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "pharmaceutical_flag"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pyrophoric_waste"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "radioactive"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other
istr_wcr_profile_map[ll_i].profile_column	= "radioactive_waste"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "react_sulfide"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "react_sulfide_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "reactcyanide"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other
istr_wcr_profile_map[ll_i].profile_column	= "react_cyanide"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "reactcyanide_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other
istr_wcr_profile_map[ll_i].profile_column	= "react_cyanide_ppm"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "reactive_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "reactive_other_description"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "shock_sensitive_waste"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "temp_ctrl_org_peroxide"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "thermally_unstable"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "tires"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "used_oil"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "section_F_none_apply_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_contains_spec_hand_none"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr		= idw_wcr_display_1 //DevOps 42864
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_additional_properties_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "PFAS_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_other


// Section G
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "ccvocgr500"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_treated_after_generation"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header


ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_treated_after_generation_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_water_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "meets_alt_soil_treatment_stds"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "more_than_50_pct_debris"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "debris_separated"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "debris_not_mixed_or_diluted"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
// DevOps 14241/14841 - 3/26/2020 - MPM - Replace "Profile.exceed_LDR_standards" on Section G with "Profile.waste_meets_ldr_standards"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_meets_ldr_standards"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "ldr_subcategory"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "subject_to_mact_neshap"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "neshap_standards_part"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "neshap_subpart"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "origin_refinery"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// MPM - 4/3/2020 - DevOps 15029 - Logic for new Profile.section_G3_none_of_the_above_flag column.
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_regulatory_information_dragon_g"
istr_wcr_profile_map[ll_i].wcr_column		= "section_g3_none_of_the_above_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// Section H
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "specific_technology_requested"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//DevOps #14243 info_gde 03/03/2020 -- Start
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "requested_technology"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//DevOps #14243 info_gde 03/03/2020 -- End

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "facility_instruction"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "thermal_process_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "other_restrictions_requested"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_generator_certification_dragon_h"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "free_liquid"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "oily_residue"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "asbestos_friable"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "pyrophoric_waste"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "metal_fines"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "dioxins"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "radioactive_waste"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "react_sulfide"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "norm"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "tenorm"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "water_reactive"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "furans"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "air_reactive"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "react_cyanide"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "biohazard"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "aluminum"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "isocyanates"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_special_properties_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "explosives"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// Composition
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_2
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_comp_and_gen_proc_form_contd"
//istr_wcr_profile_map[ll_i].wcr_column		= "gen_process"
//// rb 12/03/2012
////istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_epa

// Hazardous Waste form
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_hazardous_wastes_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "flammable"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_hazardous_wastes_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "oxidizer"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical


//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_hazardous_wastes_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "epa_source_code"
//// rb 12/03/2012
////istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_epa

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_hazardous_wastes_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "epa_form_code"
//// rb 12/03/2012
////istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//istr_wcr_profile_map[ll_i].dw_profile		= idw_composition_epa

// SK 07122012 Multiple fields for info_basis
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "debris_dimension_weight"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_underlying_haz_const_form"
istr_wcr_profile_map[ll_i].wcr_column		= "underlying_haz_constituents"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "underlying_haz_constituents"

// Non Hazardous Waste form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_non_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "michigan_non_haz"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// SK 07122012 universal_recyclable_commodity single field
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_non_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "universal_recyclable_commodity"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_non_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "used_oil"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// 07/03/2012 replaced "ppm_halogens" with "wwa_halogen_gt_1000"
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_non_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "wwa_halogen_gt_1000"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_non_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_non_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_non_hazardous_wastes_form"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// TSCA form
// SK 07122012 pcb_concentration multiple fields
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_none"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_0_49"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_50_499"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_500"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_source_concentration_gr_50"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "processed_into_non_liquid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "processd_into_nonlqd_prior_pcb"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_non_lqd_contaminated_media"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_manufacturer"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_tsca_form"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_article_decontaminated"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// Clean Air Act form
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "ccvocgr500"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "ddvohapgr500"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "neshap_chem_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "neshap_chem_2"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// SK 07122012 neshap_standards_part single field
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "contains_benzene_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "contains_benzene_flag"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_neshap"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "benzene_neshap"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "neshap_sic"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "neshap_sic"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_onsite_mgmt"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_onsite_mgmt_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "tab_gr_10"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "avg_h20_gr_10"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "tab"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_tab"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "benzene"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_clean_air_act_form"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_unit"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "benzene_unit"

// LDR
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "ww_or_nww"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "waste_water_flag"

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "subcategory"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "ldr_subcategory"


//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form"
//istr_wcr_profile_map[ll_i].wcr_column		= "manage_id"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
//istr_wcr_profile_map[ll_i].profile_column	= "waste_managed_id"

// NORM/TENORM // SK 08312012 Fixed the bad col names for Profile
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_norm_form"
istr_wcr_profile_map[ll_i].wcr_column		= "disposal_restriction_exempt"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
istr_wcr_profile_map[ll_i].profile_column	= "norm_disposal_restriction_exempt"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_norm_form"
istr_wcr_profile_map[ll_i].wcr_column		= "nuclear_reg_state_license"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping
istr_wcr_profile_map[ll_i].profile_column	= "norm_nuclear_reg_state_license"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_norm_form"
istr_wcr_profile_map[ll_i].wcr_column		= "shipping_dates"
istr_wcr_profile_map[ll_i].dw_profile		= idw_shipping

// Section H

//COR2-AM - Waste Import supplement 
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "same_as_foreign_generator"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_address"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profilewasteimport_foreign_exporter_address"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_contact_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_phone"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_fax"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_email"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "epa_notice_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "epa_consent_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "effective_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "expiration_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "approved_volume"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "approved_volume_unit"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "importing_generator_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "importing_generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "importing_generator_address"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "importing_generator_city"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "importing_generator_province_territory"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "importing_generator_mail_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "importing_generator_epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

//DevOps:29698 - Added below fields
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_city"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_province_territory"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_mail_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "foreign_exporter_country"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

//COR JXM 04/26/2019 9819 Add profile column to mapping of Technical Contact fields
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement
istr_wcr_profile_map[ll_i].profile_column	= "contact_name"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "contact_tech_contact_phone"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement
istr_wcr_profile_map[ll_i].profile_column	= "contact_phone"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "contact_tech_cont_email"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement
istr_wcr_profile_map[ll_i].profile_column	= "contact_email"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "tech_contact_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "contact_tech_contact_phone"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "contact_tech_cont_email"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "contact_tech_contact_fax"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "country_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_stream_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_2"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_3"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_4"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_5"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_6"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_7"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_8"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_9"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_10"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_11"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_waste_code_12"
istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_import_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_company" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_title" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_waste_import_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_date" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_header



//Cylinder Supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "cylinder_quantity"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "CGA_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "original_label_visible_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "manufacturer"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "markings_warnings_comments"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_shippable_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "poisonous_inhalation_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "hazard_zone"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_not_shippable_reason"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "DOT_ICC_number"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "cylinder_type_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "heaviest_gross_weight"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "heaviest_gross_weight_unit"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "external_condition"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "cylinder_pressure"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pressure_relief_device"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "protective_cover_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "workable_valve_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "threads_impaired_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "valve_condition"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "corrosion_color"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "corrosion_color"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

// MPM - 8/23/2021 - DevOps 14288 - Added additional_docs_flag
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "additional_docs_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon

//ll_i++ //jxm 02/19/2019 - added signiture fields to mapping
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "created_by"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon
//ll_i++ //jxm 02/19/2019 - added signiture fields to mapping
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "date_created"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon
//ll_i++ //jxm 02/19/2019 - added signiture fields to mapping
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "modified_by"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon
//ll_i++ //jxm 02/19/2019 - added signiture fields to mapping
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "date_modified"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_cylinder_supplement_dragon
//
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_cylinder_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//COR2 - AGC script too large error so broke into two functions
wf_wcr_profile_map_create_2(ll_i)

// END OF SCRIPT
// Populate profile_column names that are identical to wcr column names
for ll_i = 1 to UpperBound (istr_wcr_profile_map)
	if istr_wcr_profile_map[ll_i].profile_column = "" then
		istr_wcr_profile_map[ll_i].profile_column = istr_wcr_profile_map[ll_i].wcr_column
	end if
next

end subroutine

public function boolean wf_wcr_profile_map_sync (datawindow adw, string as_column, long al_row, string as_data);// rb 04/24/2012 Sync modified fields between WCR and Profile
// DevOps #13832; info_GDE 01/31/20 Other Functions - Data Correctness; Mapping issue between Generator/Profile emergency phone
// DevOps #13045; info_GDE 02/05/20 Add New Profile - Section E.; Constraint on state_waste_codes field to accept ONLY TX state waste codes
//DevOps #14700 info_gde 03/25/2020;  EQAI - Maintenance - COR  - Form Management - New Profile - Accept

long	ll_i
int  li_rc
datawindow	ldw_src, ldw_dest
string		ls_col_src, ls_col_dest, ls_tx_waste_code, ls_null
string		ls_coltype
boolean	lb_found //agc 2/22/19

SetNull(ls_null)

// search by WCR source
for ll_i = 1 to UpperBound (istr_wcr_profile_map)

	if istr_wcr_profile_map[ll_i].dw_wcr = adw and &
		istr_wcr_profile_map[ll_i].wcr_dataobject = adw.dataobject and &
		Lower(istr_wcr_profile_map[ll_i].wcr_column) = Lower(as_column) then

		ldw_src		= istr_wcr_profile_map[ll_i].dw_wcr
		ls_col_src	= istr_wcr_profile_map[ll_i].wcr_column
		ldw_dest		= istr_wcr_profile_map[ll_i].dw_profile
		ls_col_dest	= istr_wcr_profile_map[ll_i].profile_column

		exit
	end if
	
next

// search by Profile source
if not IsValid (ldw_src) then

	for ll_i = 1 to UpperBound (istr_wcr_profile_map)

		if istr_wcr_profile_map[ll_i].dw_profile = adw and &
			Lower(istr_wcr_profile_map[ll_i].profile_column) = Lower(as_column) then

			ldw_src		= istr_wcr_profile_map[ll_i].dw_profile
			ls_col_src	= istr_wcr_profile_map[ll_i].profile_column

			if istr_wcr_profile_map[ll_i].dw_wcr.dataobject = istr_wcr_profile_map[ll_i].wcr_dataobject then
				ldw_dest		= istr_wcr_profile_map[ll_i].dw_wcr
				ls_col_dest	= istr_wcr_profile_map[ll_i].wcr_column

				lb_found = true //agc 2/22/19
				//agc 2/22/19 added code to copy value			
				// if we found a match, copy the value
				if IsValid (ldw_src) and IsValid (ldw_dest) then

					// PLACE EXCEPTIONS FOR EXACT DATA COPY HERE
				//	choose case ls_col_dest
				//
				//		// rcra_haz_flag - T/F for WCR, H/N/E for Profile
				//		case "rcra_haz_flag"
				//			if ldw_dest = idw_wcr_display_1 and as_data <> "E" then
				//				as_data = "F"
				//			end if
				//
				//	end choose

					// copy the data
					// rb 12/05/2012 al_row came in as zero during debugging
					/*AlonB  09/21 2019  issue 12289 */
//						if al_row = 0 then 
							// MPM - 3/25/2021 - DevOps 19724 - UNcommented the following line, and commented out the IF wrapper around it:
							al_row = ldw_dest.GetRow ()
//						end if 
					/*AlonB  09/21 2019  issue 12289 */
					ls_coltype = ldw_src.Describe (ls_col_src + ".ColType")
					choose case Left (ls_coltype, 5)
						case "char("
							li_rc=ldw_dest.SetItem (al_row, ls_col_dest, as_data)
							//DevOps #14700 info_gde 03/25/2020 - start
							if ls_col_dest='package_group' and as_data='N/A' then 
								as_data=ls_null
								li_rc=ldw_dest.SetItem (al_row, ls_col_dest, as_data)
							end if
							//DevOps #14700 info_gde 03/25/2020 - end

							// DevOps #13832; info_GDE 01/31/20 - start
//							if ls_col_dest='emergency_phone_number' and Not IsNull(as_data) then is_profile_emergency_phone=as_data
//							if ls_col_dest='profile_emergency_phone_number' and IsNull(as_data) then 
//								ldw_dest.SetItem (al_row, ls_col_dest, is_profile_emergency_phone)
//							end if
							// DevOps #13832; info_GDE 01/31/20 - end
						case "int", "long", "ulong"
							ldw_dest.SetItem (al_row, ls_col_dest, Long (as_data))
						case "decim", "real", "numbe"
							ldw_dest.SetItem (al_row, ls_col_dest, Dec (as_data))
							 
						// COR2 - MPM
						case "datet"
							ldw_dest.SetItem (al_row, ls_col_dest, DateTime (Date(as_data)))
			
					//Date
					//DateTime
					//Time
					//Timestamp
					end choose

					setnull(ldw_dest)
				end if
			end if
//agc 2/22/19 commented out exit
//			exit
		end if
	
	next
end if

//agc 2/22/19 return true if profile to wcr copy already done
if lb_found then
	
	
	
	return true
else
	// if we found a match, copy the value
	if IsValid (ldw_src) and IsValid (ldw_dest) then

		// PLACE EXCEPTIONS FOR EXACT DATA COPY HERE
	//	choose case ls_col_dest
	//
	//		// rcra_haz_flag - T/F for WCR, H/N/E for Profile
	//		case "rcra_haz_flag"
	//			if ldw_dest = idw_wcr_display_1 and as_data <> "E" then
	//				as_data = "F"
	//			end if
	//
	//	end choose

		// copy the data
		// rb 12/05/2012 al_row came in as zero during debugging
		//DevOps:16339 - when al_row is not 0 and coming with for example 3 it is making 1 by using getrow function.
		// MPM - 3/25/2021 - DevOps 19724 - commented out the IF block wrapper below:
//		IF al_row = 0 THEN 
		    al_row = ldw_dest.GetRow ()
//		END IF		
		ls_coltype = ldw_src.Describe (ls_col_src + ".ColType")
		choose case Left (ls_coltype, 5)
			case "char("
				// DevOps #13045;  -- start
				//	ldw_dest.SetItem (al_row, ls_col_dest, as_data)
				IF ls_col_dest='texas_state_waste_code' THEN
					SELECT Top 1 p.waste_code
					INTO:ls_tx_waste_code
					FROM profilewastecode p, wastecode w
					WHERE  p.waste_code_uid=w.waste_code_uid
					AND p.waste_code=w.waste_code
					AND p.Texas_primary_flag = 'T'
					AND w.state='TX'
			 	    AND p.waste_code = :as_data
					USING itr_forms;
				 
 					If  trim(ls_tx_waste_code)="" Then
						SELECT DISTINCT WasteCode.display_name 
						INTO :ls_tx_waste_code
						FROM WasteCode   
						WHERE WasteCode.status = 'A'
						AND WasteCode.waste_code_origin = 'S'
					//	AND WasteCode.Waste_code_uid IN (SELECT DISTINCT waste_code_uid FROM WasteCodeXProfitCenter WHERE permit_flag = 'T' AND company_id = 2 AND profit_ctr_id = 0)
						AND WasteCode.State = 'TX'
						AND WasteCode.display_name = :as_data
						USING itr_forms;

										
						if  trim(ls_tx_waste_code)="" then
							MessageBox(gs_app_name + " Warning:  TEXAS Waste Code", "Waste code value: "+as_data+" entered is not a valid entry. ~rPlease enter a valid State of Texas waste code value!", Exclamation!)
							ldw_dest.SetItem (al_row, ls_col_dest,ls_null)
							ldw_dest.AcceptText()
					    		Return True
						else
							ldw_dest.SetItem (al_row, ls_col_dest, as_data)
						end if
 					Else
						
 						ldw_dest.SetItem (al_row, ls_col_dest, as_data)	
         			End If
					
				ELSE
						
					
					ldw_dest.SetItem (al_row, ls_col_dest, as_data)  
				END IF
				// DevOps #13045;  -- end
			case "int", "long", "ulong"
				ldw_dest.SetItem (al_row, ls_col_dest, Long (as_data))
			case "decim", "real", "numbe"
				ldw_dest.SetItem (al_row, ls_col_dest, Dec (as_data))
			// COR2 - MPM
			case "datet"
				ldw_dest.SetItem (al_row, ls_col_dest, DateTime (Date(as_data)))
			
		//Date
		//DateTime
		//Time
		//Timestamp
		end choose

 

		return true
	end if
end if

// match not found
if (adw = idw_wcr_display_1 or adw = idw_wcr_display_2) and not IsValid (ldw_dest) then
	MessageBox ("ERROR: wf_sync_wcr_profile()", "No match found for " + adw.dataobject + &
					"." + as_column)
end if

return false

end function

public subroutine wf_wcr_profile_map_load_wcr_sect ();// rb 04/24/2012 Load WCR section values from profile datawindows using the map sync
long	ll_i, ll_j, ll_beg, ll_end, ll_row
datawindow	ldw_src, ldw_dest
string		ls_col_src //, ls_col_dest
string		ls_coltype, ls_data

// search by WCR source
for ll_i = 1 to UpperBound (istr_wcr_profile_map)
	

	if istr_wcr_profile_map[ll_i].wcr_dataobject = idw_wcr_display_1.dataobject or &
		istr_wcr_profile_map[ll_i].wcr_dataobject = idw_wcr_display_2.dataobject then

		ldw_src		= istr_wcr_profile_map[ll_i].dw_profile
		ls_col_src	= istr_wcr_profile_map[ll_i].profile_column
		ldw_dest		= istr_wcr_profile_map[ll_i].dw_wcr
		
	else
		continue  

	end if

	ls_coltype = ldw_src.Describe (ls_col_src + ".ColType")
	
	// rb 06/25/2012 When multiple Profiles retrieved, we need to only load single rows
	choose case ldw_dest.dataobject


// COR2-MPM
//		case "d_profile_comp_and_gen_form", "d_profile_shipping_form", &
//				"d_profile_underlying_haz_const_form_contd"
		case /*"d_profile_ship_pkg_info_form_volume_dragon",*/ &
				"d_profile_underlying_haz_const_form_contd", "d_profile_composition_form_dragon"

			ll_beg = 1
			ll_end = ldw_src.RowCount()

		case else
						
			ll_beg = ldw_src.GetRow()
			ll_end = ll_beg

		end choose	
		
	// MPM - DevOps 14162 - This fix included backing out the changes that were made under DevOps 12289 and redoing them, including commenting out the block below:	
//		/*AlonB 09/21/2019 12289 */
//			ll_beg = 1
//			ll_end = ldw_src.RowCount()
//	/*AlonB 09/21/2019 12289 */

	if ll_beg < 1 or ll_end < 1 then return
  
	ll_row = 0
	for ll_j = ll_beg to ll_end	
	
		ll_row++
		if ldw_dest.RowCount() < ll_row then ldw_dest.InsertRow (0)

		choose case Left (ls_coltype, 5)
		
			case "char("
				// MPM - 5/27/2020 - DevOps 16003 through 16009 - Commented out the line below, which was changed incorrectly under DevOps 15417, 
				// and replaced it with the previous function call.
				//wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_j, ldw_src.GetItemString (ll_j, ls_col_src)) //ll_row to ll_j
//				IF  ib_retrieve_after_copy = TRUE AND ldw_dest.dataobject = 'd_profile_ship_pkg_info_form_dragon_2' THEN 
//				     wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_j, ldw_src.GetItemString (ll_j, ls_col_src)) 
//				ELSE
					 wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_row, ldw_src.GetItemString (ll_j, ls_col_src)) 
//				END IF
			case "int", "long", "ulong"
				// MPM - 5/27/2020 - DevOps 16003 through 16009 - Commented out the line below, which was changed incorrectly under DevOps 15417, 
				// and replaced it with the previous function call.
				//wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_j, String (ldw_src.GetItemNumber (ll_j, ls_col_src)))//ll_row to ll_j
				wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_row, String (ldw_src.GetItemNumber (ll_j, ls_col_src)))

			case "decim", "real", "numbe"
				// MPM - 5/27/2020 - DevOps 16003 through 16009 - Commented out the line below, which was changed incorrectly under DevOps 15417, 
				// and replaced it with the previous function call.
				//wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_j, String (ldw_src.GetItemDecimal (ll_j, ls_col_src)))//ll_row to ll_j
				wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_row, String (ldw_src.GetItemDecimal (ll_j, ls_col_src)))
				
			// MPM - COR2
			case "datet"
				// MPM - 5/27/2020 - DevOps 16003 through 16009 - Commented out the line below, which was changed incorrectly under DevOps 15417, 
				// and replaced it with the previous function call.
				//wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_j, String (ldw_src.GetItemDateTime (ll_j, ls_col_src)))//ll_row to ll_j
				wf_wcr_profile_map_sync (ldw_src, ls_col_src, ll_row, String (ldw_src.GetItemDateTime (ll_j, ls_col_src)))				
			//Date
			//DateTime
			//Time
			//Timestamp
		end choose

	next
	

next











end subroutine

public function integer wf_populate_wcr (long al_form_id, long al_profile_id, integer ai_company_id, integer ai_profit_ctr_id);// rb 05/10/2012 Added to support creating a WCR with a positive form ID

itr_share.AutoCommit = true
declare p_wcr procedure for dbo.sp_populate_form_WCR
	@form_id			= :al_form_id,
	@profile_id		= :al_profile_id,
	@company_id		= :ai_company_id,
	@profit_ctr_id	= :ai_profit_ctr_id,
	@added_by		= :gs_user_id
using itr_share;

execute p_wcr;
close p_wcr;
itr_share.AutoCommit = false

return gi_success

end function

public function integer wf_populate_srec (long al_profile_id, string as_approval_code, integer ai_company_id, integer ai_profit_ctr_id, long al_form_id, integer ai_revision_id, integer ai_exempt_id, string as_manifest, string as_new_or_update, boolean ab_insert);integer	li_rc, li_current_form_version_id
string	ls_cmd, ls_status, ls_source, ls_locked, ls_exempt_id, ls_cmd_waste_codes


// Initialize
as_new_or_update = Lower(as_new_or_update)
ls_status = "A"
ls_locked = "U"
ls_source = "A"

IF IsNull(ai_exempt_id) OR ai_exempt_id = 0 THEN
	ls_exempt_id = "NULL"
ELSEIF ai_exempt_id > 0 THEN
	ls_exempt_id = String(ai_exempt_id)
END IF

// SK 06152012 Approval & co-pc are optional
IF IsNull(as_approval_code) THEN as_approval_code 	= ''
IF IsNull(ai_company_id) THEN ai_company_id 			= 0
IF IsNull(ai_profit_ctr_id) THEN ai_profit_ctr_id 	= 0

EXECUTE IMMEDIATE "SET XACT_ABORT ON" USING itr_forms;

IF as_new_or_update = "new" &
	OR (as_new_or_update = "update" AND ab_insert = TRUE) THEN

	SELECT current_form_version
		INTO :li_current_form_version_id
		FROM FormType
		WHERE form_type = 'SREC'
	USING itr_forms;
	
	ls_cmd = "INSERT INTO " + gs_database_share + ".dbo.FormSREC " &
		+ "SELECT " + String(al_form_id) + " AS form_id, " &
		+ String(ai_revision_id) + " AS revision_id, " &
		+ String(li_current_form_version_id) + " AS form_version_id, " &
		+ "Profile.customer_id AS customer_id_from_form, " &
		+ "Profile.customer_id, " &
		+ "NULL AS app_id, " &
		+ "'" + ls_status + "' AS status, " &
		+ "'" + ls_locked + "' AS locked, " &
		+ "'" + ls_source + "' AS source, " &
		+ "ProfileQuoteApproval.approval_code, " &
		+ "Profile.profile_id AS  approval_key, " &
		+ "ProfileQuoteApproval.company_id, " &
		+ "ProfileQuoteApproval.profit_ctr_id, " &
		+ "NULL AS signing_name, " &
		+ "NULL AS signing_company, " &
		+ "NULL AS signing_title, " &
		+ "NULL AS signing_date, " &
		+ "GETDATE() AS date_created, " &
		+ "GETDATE() AS date_modified, " &
		+ "'" + gs_user_id + "' AS created_by, " &
		+ "'" + gs_user_id + "' AS modified_by, " &
		+ ls_exempt_id + " AS exempt_id, " &
		+ "'' AS waste_type, " &
		+ "Profile.approval_desc AS waste_common_name, " &
		+ "'" + as_manifest + "' AS manifest, " &
		+ "Customer.cust_name, " &
		+ "Generator.generator_name, " &
		+ "Generator.EPA_ID, " &
		+ "Profile.generator_id, " &
		+ "Generator.gen_mail_addr1, " &
		+ "Generator.gen_mail_addr2, " &
		+ "Generator.gen_mail_addr3, " &
		+ "Generator.gen_mail_addr4, " &
		+ "gen_mail_addr5 = RTrim(CASE WHEN Profile.generator_id = 0 THEN '' WHEN (Generator.gen_mail_city + ', ' + Generator.gen_mail_state + ' ' + IsNull(Generator.gen_mail_zip_code,'')) IS NULL THEN 'Missing Mailing City, State, and ZipCode' " &
			+ "	ELSE (Generator.gen_mail_city + ', ' + Generator.gen_mail_state + ' ' + IsNull(Generator.gen_mail_zip_code,'')) END), " &
		+ "Generator.gen_mail_city, " &
		+ "Generator.gen_mail_state, " &
		+ "Generator.gen_mail_zip_code, " &
		+ "ProfitCenter.EPA_ID, " &
		+ "ProfitCenter.profit_ctr_name, " &
		+ "ProfitCenter.address_1, " &
		+ "ProfitCenter.address_2, " &
		+ "ProfitCenter.address_3, " &
		+ "ProfitCenter.phone, " &
		+ "ProfitCenter.fax, " &
		+ "NEWID() AS rowguid, " &
		+ "Profile.profile_id, " &
		+ "NULL AS qty_units_desc, " &
		+ "NULL AS disposal_date, NULL, NULL " &
		+ "FROM Profile " &
		+ "JOIN Customer ON Profile.customer_id = Customer.customer_id " &
		+ "JOIN Generator ON  Profile.generator_id = Generator.generator_id " &
		+ "LEFT OUTER JOIN ProfileQuoteApproval ON Profile.profile_id = ProfileQuoteApproval.profile_id " &
		+ "	AND ProfileQuoteApproval.company_id = " + String(ai_company_id) + " " &
		+ "	AND ProfileQuoteApproval.profit_ctr_id = " + String(ai_profit_ctr_id) + " " &
		+ "	AND ProfileQuoteApproval.approval_code = '" + Trim(as_approval_code) + "' " &
		+ "LEFT OUTER JOIN ProfitCenter ON ProfileQuoteApproval.company_id = ProfitCenter.company_id " &
		+ "	AND ProfileQuoteApproval.profit_ctr_id = ProfitCenter.profit_ctr_id " &
		+ "WHERE Profile.curr_status_code IN ('A', 'H', 'P') " &
		+ " AND Profile.profile_id = " +String(al_profile_id)
			
	// AGC - 03/21/2020 DevOps 15288 added lock_flag
	ls_cmd_waste_codes = "INSERT INTO " + gs_database_share + ".dbo.FormXWasteCode " &
		+ "SELECT " + String(al_form_id) + " AS form_id, " &
		+ String(ai_revision_id) + " AS revision_id, " &
		+ "NULL AS page_number, " &
		+ "NULL AS line_item, " &
		+ "ProfileWasteCode.waste_code_uid, " &
		+ "ProfileWasteCode.waste_code, " &
		+ "NULL AS specifier, 'F' AS lock_flag " &
		+ "FROM ProfileWasteCode JOIN WasteCode ON WasteCode.waste_code_UID = ProfileWasteCode.waste_code_uid AND WasteCode.status = 'A' " &
		+ "WHERE ProfileWastecode.profile_id = " + String(al_profile_id)
		
ELSEIF (as_new_or_update = "update" AND ab_insert = FALSE) THEN
	ls_cmd = "UPDATE " + gs_database_share + ".dbo.FormSREC " &
		+ "SET exempt_id = " + ls_exempt_id + ", " &
		+ "manifest = '" + as_manifest + "', " &
		+ "modified_by = '" + gs_user_id + "', " &
		+ "date_modified = GETDATE() " &
		+ "WHERE form_id = " + String(al_form_id) &
		+ "AND revision_id = " + String(ai_revision_id)
END IF

EXECUTE IMMEDIATE :ls_cmd
	USING itr_forms;
IF itr_forms.SQLCode = 0 THEN
	EXECUTE IMMEDIATE :ls_cmd_waste_codes
	USING itr_forms;
	IF itr_forms.SQLCode = 0 THEN
		li_rc = gi_success
	ELSE
		li_rc = gi_failure
	END IF
ELSE
	li_rc = gi_failure
END IF
EXECUTE IMMEDIATE "SET XACT_ABORT OFF" USING itr_forms;
	
RETURN li_rc
end function

public function string wf_wcr_profile_map_get_value (string as_profile_column);// rb 05/30/2012 Return string version of value, currently only used for validation
long			ll_i, ll_row
datawindow	ldw
string		ls_coltype, ls_val

// search by Profile source
for ll_i = 1 to UpperBound (istr_wcr_profile_map)

	if Lower(istr_wcr_profile_map[ll_i].profile_column) = Lower(as_profile_column) then exit
next
if ll_i > UpperBound (istr_wcr_profile_map) then
	MessageBox ("Error: wf_wcr_profile_map_get_value()", "Could not find a match for profile column: " + as_profile_column)  
	return ""
end if

// Found a match, get value
ldw = istr_wcr_profile_map[ll_i].dw_profile
if ldw.GetRow() < 1 then
	MessageBox ("Error: wf_wcr_profile_map_get_value()", "Datawindow does not contain a valid row: " + ldw.ClassName())
	return ""
end if

ls_coltype = ldw.Describe (as_profile_column + ".ColType")

choose case Left (ls_coltype, 5)
	case "char("
		ls_val =	Trim (ldw.GetItemString (ldw.GetRow(), as_profile_column))
	case "int", "long", "numbe", "ulong"
		ls_val =	String (ldw.GetItemNumber (ldw.GetRow(), as_profile_column))
	case "decim", "real"
		ls_val =	String (ldw.GetItemDecimal (ldw.GetRow(), as_profile_column))
	// COR2 - MPM
	case "datet"
		ls_val =	String (ldw.GetItemDateTime (ldw.GetRow(), as_profile_column))

	//Date
	//Time
	//Timestamp
end choose

if IsNull (ls_val) then ls_val = ""
return ls_val

end function

public subroutine wf_populate_srec_exempt_reasons (integer ai_exempt_id);// Copied over from uo_wcr_form
// This populates the SREC exempt id code table on dw_display_2.. 
// assuming that the  dataobject is already set to d_wcr_srec_detail

int		li_exempt_id, li_version
long 		ll_row, ll_rowcount
string	ls_exempt_text
datastore lds_srec_exempt_reason

lds_srec_exempt_reason = CREATE Datastore
lds_srec_exempt_reason.Dataobject = 'd_form_srec_exempt_reason'
lds_srec_exempt_reason.SetTrans(itr_share)

SELECT Max(version)
INTO :li_version
FROM SRECExemptReason
USING itr_share;

// rb - need populated even if ai_exempt_id is null
if IsNull(ai_exempt_id) then ai_exempt_id = -1

ll_rowcount = lds_srec_exempt_reason.Retrieve(li_version, ai_exempt_id)
IF ll_rowcount > 0 THEN idw_wcr_display_1.ClearValues("exempt_id")
FOR ll_row = 1 TO ll_rowcount
	// retrieve the details and set the code table
	li_exempt_id 	= lds_srec_exempt_reason.object.exempt_id[ll_row]
	ls_exempt_text = lds_srec_exempt_reason.object.exempt_text[ll_row]
	idw_wcr_display_1.SetValue("exempt_id", ll_row, ls_exempt_text + "~t" + String(li_exempt_id))
NEXT
end subroutine

public subroutine wf_populate_generator_info (long al_generator_id, string as_epa_id);// pass in either a generator_id or an epa_id
// if both passed in empty, clear the fields out
decimal	ld_generator_tab, ld_null
long		ll_row, ll_profile_id, ll_customer_id, ll_technical_row
long		ll_null, ll_generator_id, ll_generator_type_id
long		ll_generator_tax_count, ll_naics_code
string	ls_customer_eq_flag, ls_generator_eq_flag, ls_null, ls_gen_name
string	ls_generator_status, ls_epa_id, ls_outbound_restricted
string	ls_profile_status, ls_customer_ins_sr_flag, ls_customer_ensr_flag
string	ls_approval_code, ls_customer_cost_flag, ls_initial_customer_name, ls_territory_code
string	ls_cust_addr1, ls_cust_city, ls_cust_state, ls_cust_zip_code, ls_cust_country, ls_generator_country
string	ls_gen_addr1, ls_gen_city, ls_gen_state, ls_gen_zip_code, ls_gen_emergency_phone, ls_gen_mail_country, ls_generator_phone
string	ls_gen_mail_addr1,ls_gen_mail_addr2, ls_gen_mail_city, ls_gen_mail_state, ls_gen_mail_zip_code, ls_generator_type, ls_state_id

SetNull (ll_null)
SetNull (ls_null)
SetNull(ld_null)

ll_row = idw_header.GetRow()
if ll_row < 1 then return

ll_technical_row = idw_technical.getrow()
if ll_technical_row < 1 then return

if al_generator_id < 1 then SetNull (al_generator_id)
if not IsNull (as_epa_id) then as_epa_id = Trim (as_epa_id)
if as_epa_id = "" then SetNull (as_epa_id)

//clear out fields
if IsNull (al_generator_id) and IsNull (as_epa_id) then
//	idw_header.Object.generator_epa_id[ll_row] = ls_null
//	idw_header.Object.generator_id[ll_row] = ll_null
	idw_header.Object.generator_type_id[ll_row] = ll_null
	// COR2-MPM
	idw_header.Object.generator_type[ll_row] = ls_null
	idw_header.Object.generator_status[ll_row] = ls_null
//	idw_header.Object.generator_name[ll_row] = ls_null
	idw_header.Object.generator_outbound_restricted[ll_row] = "F"
	idw_approval.Object.t_outbound_restricted.visible = 0
	idw_approval.Object.b_outbound_restricted_info.visible = 0
	idw_header.Object.generator_eq_flag[ll_row] = "F"
	ls_customer_eq_flag = idw_header.Object.customer_eq_flag[ll_row]
	IF IsNull(ls_customer_eq_flag) OR ls_customer_eq_flag = "F" THEN
		idw_header.Object.broker_flag[ll_row] = "D"
	ELSEIF ls_customer_eq_flag = "T" THEN
		idw_header.Object.broker_flag[ll_row] = "O"
	END IF
	idw_header.Object.generator_tax_count[ll_row] = 0
	idw_header.Object.generator_address_1[ll_row] = ls_null
	idw_header.Object.generator_city[ll_row] = ls_null
	idw_header.Object.generator_state[ll_row] = ls_null
	idw_header.Object.generator_zip_code[ll_row] = ls_null
	idw_header.Object.gen_emergency_phone_number[ll_row] = ls_null
	// COR2-MPM
	idw_header.Object.generator_country[ll_row] = ls_null
	idw_header.Object.gen_mail_addr1[ll_row] = ls_null
	idw_header.Object.gen_mail_addr2[ll_row] = ls_null
	idw_header.Object.gen_mail_city[ll_row] = ls_null
	idw_header.Object.gen_mail_state[ll_row] = ls_null
	idw_header.Object.gen_mail_zip_code[ll_row] = ls_null
	// COR2-MPM
	idw_header.Object.gen_mail_country[ll_row] = ls_null
	idw_technical.object.generator_tab[ll_technical_row] = ld_null
	// COR2-MPM
	idw_header.Object.naics_code[ll_row] = ll_null
	idw_header.Object.state_id[ll_row] = ls_null
	// MPM - 5/1/2020 - DevOps 15360
	idw_header.Object.generator_phone[ll_row] = ls_null
	RETURN   //DZ  07/11/2012

// search by generator_id
elseif not IsNull (al_generator_id) then

	// COR2-MPM
	SELECT generator_id,
			generator_name,
			Generator.generator_type_id,
			status,
			outbound_restricted,
			eq_flag,
			generator_address_1,
			generator_city,
			generator_state,
			generator_zip_code,
			emergency_phone_number,
			gen_mail_addr1,
			gen_mail_addr2,
			gen_mail_city,
			gen_mail_state,
			gen_mail_zip_code,
			epa_id,
			tab,
			generator_type,
			naics_code,
			state_id,
			generator_country,
			gen_mail_country,
			generator_phone
	INTO :ll_generator_id,
			:ls_gen_name,
			:ll_generator_type_id,
			:ls_generator_status,
			:ls_outbound_restricted,
			:ls_generator_eq_flag,
			:ls_gen_addr1,
			:ls_gen_city,
			:ls_gen_state,
			:ls_gen_zip_code,
			:ls_gen_emergency_phone,
			:ls_gen_mail_addr1,
			:ls_gen_mail_addr2,
			:ls_gen_mail_city,
			:ls_gen_mail_state,
			:ls_gen_mail_zip_code,
			:ls_epa_id,
			:ld_generator_tab,
			:ls_generator_type,
			:ll_naics_code,
			:ls_state_id,
			:ls_generator_country,
			:ls_gen_mail_country,
			:ls_generator_phone
	FROM Generator
	LEFT OUTER JOIN GeneratorType
	ON GeneratorType.generator_type_id = Generator.generator_type_id
	WHERE generator_id = :al_generator_id
	USING itr_share;

// search by epa_id
else
	// COR2-MPM
	SELECT generator_id,
			generator_name,
			Generator.generator_type_id,
			status,
			outbound_restricted,
			eq_flag,
			generator_address_1,
			generator_city,
			generator_state,
			generator_zip_code,
			emergency_phone_number,
			gen_mail_addr1,
			gen_mail_addr2,
			gen_mail_city,
			gen_mail_state,
			gen_mail_zip_code,
			epa_id,
			tab,
			generator_type,
			naics_code,
			state_id,
			generator_country,
			gen_mail_country,
			generator_phone
	INTO :ll_generator_id,
			:ls_gen_name,
			:ll_generator_type_id,
			:ls_generator_status,
			:ls_outbound_restricted,
			:ls_generator_eq_flag,
			:ls_gen_addr1,
			:ls_gen_city,
			:ls_gen_state,
			:ls_gen_zip_code,
			:ls_gen_emergency_phone,
			:ls_gen_mail_addr1,
			:ls_gen_mail_addr2,
			:ls_gen_mail_city,
			:ls_gen_mail_state,
			:ls_gen_mail_zip_code,
			:ls_epa_id,
			:ld_generator_tab,
			:ls_generator_type,
			:ll_naics_code,
			:ls_state_id,
			:ls_generator_country,
			:ls_gen_mail_country,
			:ls_generator_phone
	FROM Generator
	LEFT OUTER JOIN GeneratorType
	ON GeneratorType.generator_type_id = Generator.generator_type_id
	WHERE EPA_ID = :as_epa_id
	USING itr_share;

end if

IF itr_share.SQLCode <> 0 THEN
	wf_populate_generator_info (0, "")
else
	idw_header.Object.generator_id[ll_row] = ll_generator_id
	idW_header.Object.generator_epa_id[ll_row] = ls_epa_id
	idw_header.Object.generator_type_id[ll_row] = ll_generator_type_id
	// COR2-MPM
	idw_header.Object.generator_type[ll_row] = ls_generator_type
	idw_header.Object.generator_status[ll_row] = ls_generator_status
	idw_header.Object.generator_name[ll_row] = ls_gen_name
	idw_header.Object.generator_outbound_restricted[ll_row] = ls_outbound_restricted
	idw_header.Object.generator_eq_flag[ll_row] = ls_generator_eq_flag
	ls_customer_eq_flag = idw_header.Object.customer_eq_flag[ll_row]
	IF IsNull(ls_customer_eq_flag) OR ls_customer_eq_flag = "F" THEN
		idw_header.Object.broker_flag[ll_row] = "D"
	ELSEIF ls_customer_eq_flag = "T" THEN
		IF ls_generator_eq_flag = "T" THEN
			idw_header.Object.broker_flag[ll_row] = "I"
		ELSE
			idw_header.Object.broker_flag[ll_row] = "O"
		END IF
	END IF
						
	ll_generator_tax_count = wf_get_salestax_count_generator(ll_generator_id)
	idw_header.Object.generator_tax_count[ll_row] = ll_generator_tax_count

	idw_header.Object.generator_address_1[ll_row] = ls_gen_addr1
	idw_header.Object.generator_city[ll_row] = ls_gen_city
	idw_header.Object.generator_state[ll_row] = ls_gen_state
	idw_header.Object.generator_zip_code[ll_row] = ls_gen_zip_code
	idw_header.Object.gen_emergency_phone_number[ll_row] = ls_gen_emergency_phone
	idw_header.Object.gen_mail_addr1[ll_row] = ls_gen_mail_addr1
	idw_header.Object.gen_mail_addr2[ll_row] = ls_gen_mail_addr2
	idw_header.Object.gen_mail_city[ll_row] = ls_gen_mail_city
	idw_header.Object.gen_mail_state[ll_row] = ls_gen_mail_state
	idw_header.Object.gen_mail_zip_code[ll_row] = ls_gen_mail_zip_code
	idw_technical.object.generator_tab[ll_technical_row] = ld_generator_tab
	// MPM - 5/1/2020 - DevOps 15360
	idw_header.Object.generator_phone[ll_row] = ls_generator_phone

	ll_customer_id = idw_header.object.customer_id[ll_row]
	ll_generator_id = idw_header.object.generator_id[ll_row]
	ll_profile_id = idw_header.object.profile_id[ll_row]
	iudw_document.uf_set_profile(ll_profile_id,ll_customer_id,ll_generator_id,false) 
	
	wf_generator_knowledge_acceptable_check(ll_generator_id) // sagar 29969	
	wf_generator_foreign_generator(ll_generator_id) 
	
	IF ls_outbound_restricted = "T" THEN
		idw_approval.Object.t_outbound_restricted.visible = 1
		idw_approval.Object.b_outbound_restricted_info.visible = 1
	ELSE
		idw_approval.Object.t_outbound_restricted.visible = 0
		idw_approval.Object.b_outbound_restricted_info.visible = 0
	END IF
	idw_header.Object.naics_code[ll_row] = ll_naics_code
	idw_header.Object.state_id[ll_row] = ls_state_id
	idw_header.Object.generator_country[ll_row] = ls_generator_country
	idw_header.Object.gen_mail_country[ll_row] = ls_gen_mail_country
end if

end subroutine

public function boolean wf_validate_adjoining (string as_string);boolean lb_adjoining = TRUE
boolean lb_found_t = FALSE
boolean lb_found_f = FALSE
int li_i

for li_i = 1 to 5
	if mid(as_string,li_i,1) = "T" then
		if lb_found_t and lb_found_f then
			lb_adjoining = FALSE
			exit
		end if
		lb_found_t = TRUE
	else
		if lb_found_t then
			lb_found_f = TRUE
		end if			
	end if
next	

return lb_adjoining
end function

public subroutine wf_wcr_set_waste_code_answers ();// rb 07/12/2012 Set Waste Code related answers for WPF (called whenever waste codes modified)
long	ll_i, ll_d_count, ll_fkpu_count, ll_state_haz_count, ll_state_nonhaz_count, ll_row
Long     ll_waste_code_uid
string	ls_wc, ls_origin, ls_haz_flag

// SK 08/12/2013 modified for Waste Code project
// Loop through Federals
FOR ll_i = 1 TO idw_waste_code_fed.Rowcount()
	ls_wc = idw_waste_code_fed.object.waste_code[ll_i]
	CHOOSE CASE Upper (Left (ls_wc, 1))
		CASE "D"
			ll_d_count++
		CASE "F", "K", "P", "U"
			ll_fkpu_count++
		CASE ELSE
	END CHOOSE
NEXT

//Loop through State waste codes
FOR ll_i = 1 TO idw_waste_code_state.Rowcount()
	ll_waste_code_uid = idw_waste_code_state.Object.waste_code_uid[ll_i]
	
	SELECT isnull(haz_flag,'F')
	into :ls_haz_flag
	from WasteCode (nolock)
	where waste_code_uid = :ll_waste_code_uid
	using itr_share;
	
	IF ls_haz_flag = "T" THEN
		ll_state_haz_count++
	ELSE
		ll_state_nonhaz_count++
	END IF	
NEXT

ll_row = idw_header.GetRow()

IF   ll_row > 0 THEN
	// RCRA characteristic
	if ll_d_count > 0  then
		idw_header.Object.rcra_characteristic[ll_row] = "T"
	elseif idw_header.Object.rcra_characteristic[ll_row] = "T"    then
		idw_header.Object.rcra_characteristic[ll_row] = "F"
	end if

	// RCRA listed
	if ll_fkpu_count > 0   then
		idw_header.Object.rcra_listed[ll_row] = "T"
	elseif idw_header.Object.rcra_listed[ll_row] = "T"   then
		idw_header.Object.rcra_listed[ll_row] = "F"
	end if
end if

ll_row = idw_technical.GetRow()

IF ll_row > 0 THEN
	// State Haz 
	// MPM - 3/26/2021 - DevOps 19726 - Corrected so that the E.2 "None" checkbox gets checked if there are any state waste codes
	// and unchecked if there are no state waste codes.
	if ll_state_haz_count + ll_state_nonhaz_count > 0 then
		IF idw_technical.Object.state_waste_code_flag[ll_row] = "F" THEN idw_technical.Object.state_waste_code_flag[ll_row] = "T"
	elseif idw_technical.Object.state_waste_code_flag[ll_row] = "T"   then
		idw_technical.Object.state_waste_code_flag[ll_row] = "F" //DevOps:15383
	end if

	// State Non Haz 
	if ll_state_nonhaz_count > 0  then
		idw_technical.Object.michigan_non_haz[ll_row] = "T"
	elseif idw_technical.Object.michigan_non_haz[ll_row] = "T"   then
		idw_technical.Object.michigan_non_haz[ll_row] = "F"
	end if

// MPM - COR2 - Set the RCRA waste code flag
//if ll_d_count > 0 or ll_fkpu_count > 0 then
//	idw_header.object.rcra_waste_code_flag[ll_row] = 'T'
//ELSE
//	idw_header.object.rcra_waste_code_flag[ll_row] = 'F'
//END IF

END IF
end subroutine

public function integer wf_copy_template (long al_form_id, integer ai_revision_id);//// THIS FUNCTION IS NEVER CALLED FROM ANYWHERE ! OBSOLETE- DO NOT MAINTAIN // SK 11/07/2013

Return 1


//boolean	lb_set_primary, lb_continue
//datetime	ldt_today
//double	ldb_null, ldb_wcr_concentration
//long		ll_idx, ll_len, ll_pos
//long		ll_row, ll_profile_id, ll_null
//long		ll_row_header, ll_newrow, ll_customer_id, ll_row_technical
//long		ll_wcr_cust, ll_wcr_gen, ll_wcr_srec_exempt_id
//long		ll_rowcount, ll_i, ll_const_id, ll_wcr_const_id, ll_waste_code_UID
//string	ls_status, ls_EPA_ID, ls_generator_name, ls_uhc, ls_null, ls_odor_desc, ls_odor_other_desc, ls_free_liquids
//string	ls_waste_common_name, ls_customer_name, ls_locked, ls_frequency, ls_frequency_other, ls_short_waste_code
//string	ls_wcr_waste_common_name, ls_wcr_color, ls_wcr_sr_exempt, ls_wcr_dot_shipping_name
//string	ls_shipping_volume_unit_other
//string	ls_cust_name, ls_gen_name, ls_waste_code, ls_unit, ls_wcr_unit
//string	ls_consistency_solid, ls_consistency_dust, ls_consistency_liquid, ls_consistency_sludge
//string	ls_consistency
//String	ls_ph_lte_2, ls_ph_gt_2_lt_5, ls_ph_gte_5_lte_10, ls_ph_gt_10_lt_12_5, ls_ph_gte_12_5, ls_pH_NA
//String	ls_ignitability_lt_90, ls_ignitability_90_139, ls_ignitability_140_199, ls_ignitability_gte_200, ls_ignitability_na
////Properties
//String	ls_properties_none, ls_shock_sensitive_waste, ls_biohazard, ls_aluminum, ls_oily_residue, ls_asbestos_friable
//String 	ls_pyrophoric_waste, ls_metal_fines, ls_dioxins, ls_furans, ls_air_reactive, ls_react_cyanide, ls_isocyanates
//String	ls_explosives, ls_radioactive_waste, ls_react_sulfide, ls_water_reactive, ls_asbestos_non_friable
//String	ls_biodegradable_sorbents, ls_temp_ctrl_org_peroxide, ls_norm, ls_tenorm
//
//String	ls_gen_process, ls_handling_issue, ls_handling_issue_desc
//String	ls_rcra_haz_flag, ls_rcra_exempt_reason, ls_rcra_listed, ls_rcra_characteristic, ls_cyanide_plating
//String	ls_epa_form_code, ls_epa_source_code
//String	ls_info_basis_knowledge, ls_info_basis_analysis, ls_info_basis_msds
//String	ls_exceed_ldr_standards
//String	ls_waste_water_flag, ls_meets_alt_soil_treatment_stds
//String	ls_more_than_50_pct_debris, ls_debris_dimension_weight
//String	ls_michigan_non_haz, ls_univ_recyclable_commodity, ls_used_oil, ls_wwa_halogen_gt_1000
//String	ls_halogen_source, ls_halogen_source_desc, ls_halogen_source_other
//String	ls_pcb_concentration_none,  ls_pcb_concentration_0_49, ls_pcb_concentration_50_499, ls_pcb_concentration_500, ls_pcb_source_concentration_gr_50
//String	ls_pcb_processed_into_non_liquid, ls_pcb_processd_into_nonlqd_prior
//String	ls_pcb_manufacturer, ls_pcb_article_decontaminated, ls_pcb_non_lqd_contaminated_media
//String	ls_ccvocgr500, ls_ddvohapgr500, ls_neshap_flag, ls_neshap_chem_1, ls_neshap_chem_2
//String	ls_neshap_subpart, ls_benzene, ls_neshap_sic
//String	ls_benzene_onsite_mgmt, ls_benzene_onsite_mgmt_desc
//String	ls_tab_gr_10, ls_avg_h20_gr_10
//LONG		ll_sic_code, ll_neshap_standards_part, ll_tab
//Long 		ll_source_form_id, ll_source_revision_id, ll_template_form_id
//         
//DOUBLE	ldb_benzene_concentration, ldb_comp_from_pct, ldb_comp_to_pct, ldb_concentration
//String	ls_benzene_unit, ls_comp_desc
//String	ls_dot_shipping_desc, ls_package_group, ls_un_na_flag, ls_erg_suffix, ls_hazmat_flag, ls_hazmat_class, ls_subsidiary_haz_mat_class, ls_rq, ls_rq_reason
//LONG		ll_un_na_number, ll_erg_number, ll_default_seq
//String	ls_template_name
//String	ls_state_waste_code_flag, ls_uhc_flag, ls_waste_code_origin, ls_state, ls_manifest_dot_sp_number, ls_rcra_exempt_flag, ls_composition_unit
//
//DWItemStatus	ldwitemstatus
//Datawindow		ldw
//DataStore ds_form_unit
//
//SetNull( ls_null )
//SetNull( ll_null )
//ldt_today = DateTime(Today(), Now())
//
//// fixed typo below
////		odor_desc = (case when FormWCR.odor_ammonia='T' then 'Ammonia,' else '' end )  + 
////		  				(case when FormWCR.odor_amines='T' then 'Amines,' else '' end )  + 
////		  				(case when FormWCR.odor_mercaptans='T' then 'Mercaptans,' else '' end )  + 
////		  				(case when FormWCR.odor_sulfur='T' then 'Sulfur,' else '' end )  + 
////		 				(case when FormWCR.odor_organic_acid='T' then 'Organic Acid,' else '' end )  + 
////						(case when FormWCR.odor_none='T' then 'None,' else '' end )  + 
////		  				(case when FormWCR.odor_other='T' then 'Other' else '' end ),
//						  
//SELECT generator_id,
//		EPA_ID,
//		generator_name,
//		waste_common_name,
//		customer_id,
//		cust_name,
//		locked,
//		customer_id, generator_id, waste_common_name, 
//		color, surcharge_exempt, srec_exempt_id, dot_shipping_name,
//		frequency, frequency_other, volume, odor, odor_other_desc,
//		consistency = (case when FormWCR.consistency_solid ='T' then 'SOLID:' else '' end )  + 
//						  (case when FormWCR.consistency_dust='T' then 'DUST/POWDER:' else '' end )  + 
//						  (case when FormWCR.consistency_debris='T' then 'DEBRIS:' else '' end )  + 
//						  (case when FormWCR.consistency_sludge='T' then 'SLUDGE:' else '' end )  + 
//						  (case when FormWCR.consistency_liquid='T' then 'LIQUID:' else '' end )  + 
//						  (case when FormWCR.consistency_gas_aerosol='T' then 'GAS/AEROSOL' else '' end ),
//		free_liquids, 
//		ignitability_lt_90, ignitability_90_139, ignitability_140_199, ignitability_gte_200, ignitability_na,
//		ph_lte_2, ph_gt_2_lt_5, ph_gte_5_lte_10, ph_gt_10_lt_12_5, ph_gte_12_5, pH_NA,
//		waste_contains_spec_hand_none,
//		shock_sensitive_waste,
//		biohazard,
//		aluminum,
//		oily_residue,
//		asbestos_friable,
//		pyrophoric_waste,
//		metal_fines,
//		dioxins,
//		furans,
//		air_reactive,
//		react_cyanide,
//		isocyanates,
//		explosives,
//		radioactive_waste,
//		react_sulfide,
//		water_reactive,
//		asbestos_non_friable,
//		biodegradable_sorbents,
//		temp_ctrl_org_peroxide,
//		norm,
//		tenorm,
//		gen_process,
//		handling_issue, handling_issue_desc,
//		rcra_exempt_flag, rcra_exempt_reason, rcra_listed, rcra_characteristic, cyanide_plating,
//		epa_source_code, epa_form_code,
//		info_basis_knowledge, info_basis_analysis, info_basis_msds,
//		exceed_ldr_standards,
//		waste_water_flag, meets_alt_soil_treatment_stds,
//		more_than_50_pct_debris, debris_dimension_weight,
//		michigan_non_haz, universal_recyclable_commodity, used_oil, wwa_halogen_gt_1000,
//		wwa_halogen_source, wwa_halogen_source_desc1, wwa_other_desc_1,
//		pcb_concentration_none,  pcb_concentration_0_49, pcb_concentration_50_499, pcb_concentration_500,
//		pcb_source_concentration_gr_50, processed_into_non_liquid, processd_into_nonlqd_prior_pcb,
//		pcb_manufacturer, pcb_article_decontaminated, pcb_non_lqd_contaminated_media,
//		ccvocgr500, ddvohapgr500, subject_to_mact_neshap, neshap_chem_1, neshap_chem_2,
//		neshap_standards_part, neshap_subpart, benzene, neshap_sic, sic_code,
//		benzene_onsite_mgmt, benzene_onsite_mgmt_desc,
//		tab_gr_10, avg_h20_gr_10, 
//		tab, benzene_concentration, benzene_unit,
//		dot_shipping_desc, package_group, un_na_flag, un_na_number, erg_number, erg_suffix, 
//		hazmat_flag, hazmat_class, subsidiary_haz_mat_class, reportable_quantity_flag, RQ_reason,
//		Coalesce(T1.name, T2.name),
//		state_waste_code_flag, underlying_haz_constituents, 
//		source_form_id, source_revision_id, FormWCR.template_form_id, manifest_dot_sp_number
//INTO	:ll_wcr_gen,
//		:ls_EPA_ID, 
//		:ls_generator_name, 
//		:ls_waste_common_name, 
//		:ll_customer_id, 
//		:ls_customer_name, 
//		:ls_locked,
//		:ll_wcr_cust, :ll_wcr_gen, :ls_wcr_waste_common_name, 
//		:ls_wcr_color, :ls_wcr_sr_exempt, :ll_wcr_srec_exempt_id, :ls_wcr_dot_shipping_name,
//		:ls_frequency, :ls_frequency_other, :ls_shipping_volume_unit_other,
//		:ls_odor_desc, :ls_odor_other_desc,
//		:ls_consistency,
//		:ls_free_liquids, 
//		:ls_ignitability_lt_90, :ls_ignitability_90_139, :ls_ignitability_140_199, :ls_ignitability_gte_200, :ls_ignitability_na,
//		:ls_ph_lte_2, :ls_ph_gt_2_lt_5, :ls_ph_gte_5_lte_10, :ls_ph_gt_10_lt_12_5, :ls_ph_gte_12_5, :ls_pH_NA,
//		:ls_properties_none,
//		:ls_shock_sensitive_waste,
//		:ls_biohazard,
//		:ls_aluminum,
//		:ls_oily_residue,
//		:ls_asbestos_friable,
//		:ls_pyrophoric_waste,
//		:ls_metal_fines,
//		:ls_dioxins,
//		:ls_furans,
//		:ls_air_reactive,
//		:ls_react_cyanide,
//		:ls_isocyanates,
//		:ls_explosives,
//		:ls_radioactive_waste,
//		:ls_react_sulfide,
//		:ls_water_reactive,
//		:ls_asbestos_non_friable,
//		:ls_biodegradable_sorbents,
//		:ls_temp_ctrl_org_peroxide,
//		:ls_norm,
//		:ls_tenorm,
//		:ls_gen_process,
//		:ls_handling_issue, :ls_handling_issue_desc,
//		:ls_rcra_exempt_flag, :ls_rcra_exempt_reason, :ls_rcra_listed, :ls_rcra_characteristic, :ls_cyanide_plating,
//		:ls_epa_source_code, :ls_epa_form_code,
//		:ls_info_basis_knowledge, :ls_info_basis_analysis, :ls_info_basis_msds,
//		:ls_exceed_ldr_standards,
//		:ls_waste_water_flag, :ls_meets_alt_soil_treatment_stds,
//		:ls_more_than_50_pct_debris, :ls_debris_dimension_weight,
//		:ls_michigan_non_haz, :ls_univ_recyclable_commodity, :ls_used_oil, :ls_wwa_halogen_gt_1000,
//		:ls_halogen_source, :ls_halogen_source_desc, :ls_halogen_source_other,
//		:ls_pcb_concentration_none,  :ls_pcb_concentration_0_49, :ls_pcb_concentration_50_499, 
//		:ls_pcb_concentration_500, :ls_pcb_source_concentration_gr_50,
//		:ls_pcb_processed_into_non_liquid, :ls_pcb_processd_into_nonlqd_prior,
//		:ls_pcb_manufacturer, :ls_pcb_article_decontaminated, :ls_pcb_non_lqd_contaminated_media,
//		:ls_ccvocgr500, :ls_ddvohapgr500, :ls_neshap_flag, :ls_neshap_chem_1, :ls_neshap_chem_2,
//		:ll_neshap_standards_part, :ls_neshap_subpart, :ls_benzene, :ls_neshap_sic, :ll_sic_code,
//		:ls_benzene_onsite_mgmt, :ls_benzene_onsite_mgmt_desc,
//		:ls_tab_gr_10, :ls_avg_h20_gr_10, 
//		:ll_tab, :ldb_benzene_concentration, :ls_benzene_unit,
//		:ls_dot_shipping_desc, :ls_package_group, :ls_un_na_flag, :ll_un_na_number, :ll_erg_number, :ls_erg_suffix,
//		:ls_hazmat_flag, :ls_hazmat_class, :ls_subsidiary_haz_mat_class, :ls_rq, :ls_rq_reason,
//		:ls_template_name,
//		:ls_state_waste_code_flag, :ls_uhc_flag,
//		:ll_source_form_id, :ll_source_revision_id, :ll_template_form_id, :ls_manifest_dot_sp_number
//FROM 	FormWCR
//LEFT OUTER JOIN FormWCRTemplate T1 ON T1.template_form_id = FormWCR.form_id // copying a template
//LEFT OUTER JOIN FormWCRTemplate T2 ON T2.template_form_id = FormWCR.template_form_id // copying a form that has a template
//WHERE form_id = :al_form_id
//AND 	revision_id = :ai_revision_id
//USING itr_forms;
//
////Profile
//ll_row_header = idw_header.GetRow()
//If ll_row_header > 0 Then
//	//waste common name
//	idw_header.Object.approval_desc[ll_row_header] = ls_wcr_waste_common_name
//	//shipping
//	idw_header.Object.dot_shipping_name[ll_row_header] = ls_wcr_dot_shipping_name
//	idw_header.Object.package_group[ll_row_header] = ls_package_group
//	idw_header.Object.un_na_flag[ll_row_header] = ls_un_na_flag
//	idw_header.Object.un_na_number[ll_row_header] = ll_un_na_number
//	idw_header.Object.erg_number[ll_row_header] = ll_erg_number
//	idw_header.Object.erg_suffix[ll_row_header] = ls_erg_suffix
//	idw_header.Object.hazmat[ll_row_header] = ls_hazmat_flag
//	idw_header.Object.hazmat_class[ll_row_header] = ls_hazmat_class
//	idw_header.Object.subsidiary_haz_mat_class[ll_row_header] = ls_subsidiary_haz_mat_class
//	idw_header.Object.reportable_quantity_flag[ll_row_header] = ls_rq
//	idw_header.Object.RQ_reason[ll_row_header] = ls_rq_reason
//
//	//Volume/Shipping Unit
//	idw_header.Object.shipping_volume_unit_other[ll_row_header] = ls_shipping_volume_unit_other
//	////Delete existing shipping unit
//	ll_rowcount = idw_shipping_unit.Rowcount()
//	FOR ll_idx = ll_rowcount TO 1 STEP -1
//		idw_shipping_unit.DeleteRow(ll_idx)
//		ll_rowcount --
//	NEXT
//	////copy shipping units from wcr unit
//	ds_form_unit = CREATE DATASTORE
//	ds_form_unit.dataobject = 'd_form_units'
//	ds_form_unit.SetTransObject(itr_forms)
//	ll_rowcount = ds_form_unit.Retrieve(al_form_id, ai_revision_id)
//	FOR ll_idx = 1 TO ll_rowcount
//		ll_newrow = idw_shipping_unit.InsertRow(0)
//		//ids_profile_shippingunit.object.profile_id[ll_newrow] 		= al_profile_id
//		idw_shipping_unit.object.quantity[ll_newrow]			= ds_form_unit.object.quantity[ll_idx]
//		idw_shipping_unit.object.bill_unit_code[ll_newrow]	= ds_form_unit.object.bill_unit_code[ll_idx]
//	NEXT
//	DESTROY ds_form_unit
//	If ll_rowcount = 0 Then
//		ll_newrow = idw_shipping_unit.InsertRow(0)
//	End If
//	
//	// Frequency
//	idw_header.object.shipping_frequency[ll_row_header] 		= ls_frequency
//	idw_header.object.shipping_frequency_other[ll_row_header] = ls_frequency_other
//	
//	// generating process
//	idw_header.object.gen_process[ll_row_header] = ls_gen_process
//	
//	//RCRA
////	If ls_rcra_haz_flag = "T" Then
////		ls_rcra_haz_flag = "E"
////	ELSEIF ls_rcra_haz_flag = 'F' THEN
////		IF (ls_rcra_listed = 'T' OR ls_rcra_characteristic = 'T' OR ls_state_waste_code_flag = 'T') THEN
////			ls_rcra_haz_flag = 'H'
////		ELSE
////			ls_rcra_haz_flag = 'N'
////		END IF
////	End If
//	idw_header.object.rcra_exempt_flag[ll_row_header] 		= ls_rcra_exempt_flag
//	idw_header.object.rcra_exempt_reason[ll_row_header]	= ls_rcra_exempt_reason
//	idw_header.object.rcra_listed[ll_row_header]				= ls_rcra_listed
//	idw_header.object.rcra_characteristic[ll_row_header] 	= ls_rcra_characteristic
//	
//	// EPA Source, form
//	idw_header.object.epa_source_code[ll_row_header] = ls_epa_source_code
//	idw_header.object.epa_form_code[ll_row_header] = ls_epa_form_code
//	
//	// Exceed LDR Standards
//	idw_header.object.exceed_ldr_standards[ll_row_header] = ls_exceed_ldr_standards
//
//	// Waste Water Flag
//	idw_header.object.waste_water_flag[ll_row_header] = ls_waste_water_flag
//	
//	//tempalte form id, revision id and template name
//	idw_header.object.template_form_id[ll_row_header] = ll_template_form_id
//	IF ll_template_form_id = al_form_id THEN 
//		idw_header.object.template_revision_id[ll_row_header] = ai_revision_id
//	ELSE
//		idw_header.object.template_revision_id[ll_row_header] = 1
//	END IF
//	idw_header.object.template_name[ll_row_header] = ls_template_name
//	
//	// source_form_id, source_revision_id
//	idw_header.object.source_form_id[ll_row_header] 		= ll_source_form_id
//	idw_header.object.source_revision_id[ll_row_header] 	= ll_source_revision_id
//End If
//
//ll_row_technical = idw_technical.GetRow()
//If ll_row_technical > 0 Then
//	//Color
//	idw_technical.Object.color[ll_row_technical] = ls_wcr_color
//	//Odor Desc
////	ll_len = Len( ls_odor_desc )
////	If LastPos ( ls_odor_desc, ',' ) = ll_len Then
////		ls_odor_desc = Left( ls_odor_desc, ll_len - 1 )
////	End If
//	idw_technical.Object.odor_desc[ll_row_technical] = ls_odor_desc
//	idw_technical.Object.odor_other_desc[ll_row_technical] = ls_odor_other_desc
//	
//	//free liquids
//	IF ls_free_liquids = "T" THEN
//		idw_technical.Object.free_liquid[ll_row_technical] = ls_free_liquids
//	END IF
//
//	//Consistency
//	ll_len = Len( ls_consistency )
//	ll_i = 0
//	ll_pos = 0
//	lb_continue = TRUE
//	DO WHILE lb_continue
//		ll_pos = Pos( ls_consistency, ':', ll_pos + 1 )
//		If ll_pos > 0 Then
//			ll_i ++
//			If ll_i = 2 OR ll_pos = ll_len Then 
//				lb_continue = FALSE
//			End If
//		Else
//			lb_continue = FALSE
//		End If
//	LOOP
//	If ll_pos > 0 Then ls_consistency = Left ( ls_consistency, ll_pos - 1 )
//	idw_technical.Object.consistency[ll_row_technical] = ls_consistency
//	
//	//PH
//	idw_technical.object.ph_lte_2[ll_row_technical] 			= ls_ph_lte_2
//	idw_technical.object.ph_gt_2_lt_5[ll_row_technical] 		= ls_ph_gt_2_lt_5
//	idw_technical.object.ph_gte_5_lte_10[ll_row_technical] 	= ls_ph_gte_5_lte_10
//	idw_technical.object.ph_gt_10_lt_12_5[ll_row_technical] 	= ls_ph_gt_10_lt_12_5
//	idw_technical.object.ph_gte_12_5[ll_row_technical] 		= ls_ph_gte_12_5
//	idw_technical.object.pH_NA[ll_row_technical] 				= ls_pH_NA
//	// also set the From & TO values
//	POST wf_set_ph_from_to()
//	
//	// Flashpoint
//	idw_technical.object.ignitability_lt_90[ll_row_technical]	= ls_ignitability_lt_90
//	idw_technical.object.ignitability_90_139[ll_row_technical]	= ls_ignitability_90_139
//	idw_technical.object.ignitability_140_199[ll_row_technical]	= ls_ignitability_140_199
//	idw_technical.object.ignitability_gte_200[ll_row_technical]	= ls_ignitability_gte_200
//	idw_technical.object.ignitability_na[ll_row_technical]		= ls_ignitability_na
//	// also set the ignitability
//	POST wf_set_ignitability()
//	
//	//	idw_technical.object.ignitability[ll_row_technical] = ls_ignitability
//	//	idw_technical.object.flammable[ll_row_technical] = ls_flammable
//	//	idw_technical.object.oxidizer[ll_row_technical] = ls_oxidizer
//	
//	//spl properties
//	idw_technical.object.waste_contains_spec_hand_none[ll_row_technical] = ls_properties_none
//	If ls_properties_none = "T" Then
//		idw_technical.object.shock_sensitive_waste[ll_row_technical] = ls_null
//		idw_technical.object.biohazard[ll_row_technical] = ls_null
//		idw_technical.object.aluminum[ll_row_technical] = ls_null
//		idw_technical.object.oily_residue[ll_row_technical] = ls_null
//		idw_technical.object.pyrophoric_waste[ll_row_technical] = ls_null
//		idw_technical.object.metal_fines[ll_row_technical] = ls_null
//		idw_technical.object.dioxins[ll_row_technical] = ls_null
//		idw_technical.object.furans[ll_row_technical] = ls_null
//		idw_technical.object.air_reactive[ll_row_technical] = ls_null
//		idw_technical.object.react_cyanide[ll_row_technical] = ls_null
//		idw_technical.object.isocyanates[ll_row_technical] = ls_null
//		idw_technical.object.explosives[ll_row_technical] = ls_null
//		idw_technical.object.radioactive_waste[ll_row_technical] = ls_null
//		idw_technical.object.react_sulfide[ll_row_technical] = ls_null
//		idw_technical.object.water_reactive[ll_row_technical] = ls_null
//		idw_technical.object.asbestos_friable[ll_row_technical] = ls_null
//		idw_technical.object.asbestos_non_friable[ll_row_technical] = ls_null
//		idw_technical.object.biodegradable_sorbents[ll_row_technical] = ls_null
//		idw_technical.object.temp_ctrl_org_peroxide[ll_row_technical] = ls_null
//		idw_technical.object.norm[ll_row_technical] = ls_null
//		idw_technical.object.tenorm[ll_row_technical] = ls_null
//	Else
//		idw_technical.object.shock_sensitive_waste[ll_row_technical] = ls_shock_sensitive_waste
//		idw_technical.object.biohazard[ll_row_technical] = ls_biohazard
//		idw_technical.object.aluminum[ll_row_technical] = ls_aluminum
//		idw_technical.object.oily_residue[ll_row_technical] = ls_oily_residue
//		idw_technical.object.pyrophoric_waste[ll_row_technical] = ls_pyrophoric_waste
//		idw_technical.object.metal_fines[ll_row_technical] = ls_metal_fines
//		idw_technical.object.dioxins[ll_row_technical] = ls_dioxins
//		idw_technical.object.furans[ll_row_technical] = ls_furans
//		idw_technical.object.air_reactive[ll_row_technical] = ls_air_reactive
//		idw_technical.object.react_cyanide[ll_row_technical] = ls_react_cyanide
//		idw_technical.object.isocyanates[ll_row_technical] = ls_isocyanates
//		idw_technical.object.explosives[ll_row_technical] = ls_explosives
//		idw_technical.object.radioactive_waste[ll_row_technical] = ls_radioactive_waste
//		idw_technical.object.react_sulfide[ll_row_technical] = ls_react_sulfide
//		idw_technical.object.water_reactive[ll_row_technical] = ls_water_reactive
//		idw_technical.object.asbestos_friable[ll_row_technical] = ls_asbestos_friable
//		idw_technical.object.asbestos_non_friable[ll_row_technical] = ls_asbestos_non_friable
//		idw_technical.object.biodegradable_sorbents[ll_row_technical] = ls_biodegradable_sorbents
//		idw_technical.object.temp_ctrl_org_peroxide[ll_row_technical] = ls_temp_ctrl_org_peroxide
//		idw_technical.object.norm[ll_row_technical] = ls_norm
//		idw_technical.object.tenorm[ll_row_technical] = ls_tenorm
//	End If
//	
//	
//	//Waste Composition
//	ll_rowcount = idw_composition.RowCount()
//	FOR ll_row = ll_rowcount TO 1 STEP -1
//		idw_composition.DeleteRow(ll_row)
//	NEXT
//	DECLARE wcr_composition_cursor CURSOR FOR  
//	SELECT DISTINCT comp_description, comp_from_pct, comp_to_pct
//	  FROM FormXWCRComposition
//	 WHERE form_id = :al_form_id
//		AND revision_id = :ai_revision_id
//	 ORDER BY comp_description 
//	 USING itr_forms;
//			
//	OPEN wcr_composition_cursor;
//	DO WHILE itr_forms.SQLCode = 0
//		FETCH wcr_composition_cursor 
//		 INTO :ls_comp_desc, :ldb_comp_from_pct, :ldb_comp_to_pct;
//		IF itr_forms.SQLCode = 0 THEN
//			ll_row = idw_composition.InsertRow(0)
//			//idw_composition.Object.profile_id[ll_row] = ll_profile_id
//			idw_composition.Object.comp_description[ll_row] = ls_comp_desc
//			idw_composition.Object.comp_from_pct[ll_row] = ldb_comp_from_pct
//			idw_composition.Object.comp_to_pct[ll_row] = ldb_comp_to_pct
//			ib_changed_comp = TRUE	
//		ELSEIF itr_forms.SQLCode = -1 THEN
//			MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Compositions" + &
//						"~nPress OK to Continue.", StopSign!)
//			CLOSE wcr_composition_cursor;
//			RETURN -1
//		END IF
//	LOOP
//	CLOSE wcr_composition_cursor;
//
//	// handling issue
//	idw_technical.object.handling_issue[ll_row_technical] = ls_handling_issue
//	idw_technical.object.handling_issue_desc[ll_row_technical] = ls_handling_issue_desc
//
//	//Cyanide
//	idw_technical.object.cyanide_plating[ll_row_technical] 		= ls_cyanide_plating
//	
//	//state waste code
//	idw_technical.object.state_waste_code_flag[ll_row_technical] = ls_state_waste_code_flag
//	
//	//uhc flag
//	idw_technical.object.underlying_haz_constituents[ll_row_technical] = ls_uhc_flag
//	
//	//Waste Codes
//	// Delete existing waste codes
//	ll_rowcount = idw_waste_code_fed.RowCount()
//	FOR ll_row = ll_rowcount TO 1 STEP -1
//		idw_waste_code_fed.DeleteRow(ll_row)
//		ib_changed_waste_code = TRUE
//	NEXT
//	ll_rowcount = idw_waste_code_state.RowCount()
//	FOR ll_row = ll_rowcount TO 1 STEP -1
//		idw_waste_code_state.DeleteRow(ll_row)
//		ib_changed_waste_code = TRUE
//	NEXT
//	ll_rowcount = idw_waste_code_eq.RowCount()
//	FOR ll_row = ll_rowcount TO 1 STEP -1
//		idw_waste_code_eq.DeleteRow(ll_row)
//		ib_changed_waste_code = TRUE
//	NEXT
//		
//	// Load the WCR Waste Codes
//	DECLARE wcr_waste_code_cursor CURSOR FOR  
//	 SELECT DISTINCT WC.display_name, FXW.waste_code_UID, WC.waste_code_origin, WC.sequence_id, WC.state, WC.waste_code, WC.status
//		FROM FormXWasteCode FXW
//		JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
//	  WHERE form_id = :al_form_id
//		 AND revision_id = :ai_revision_id
//	  ORDER BY FXW.waste_code_UID 
//	  USING itr_forms;
//
//	OPEN wcr_waste_code_cursor;
//	DO WHILE itr_forms.SQLCode = 0
//		FETCH wcr_waste_code_cursor INTO :ls_waste_code, :ll_waste_code_UID, :ls_waste_code_origin, :ll_default_seq, :ls_state, :ls_short_waste_code, :ls_status;
//		IF itr_forms.SQLCode = 0 THEN
//			CHOOSE CASE Upper(ls_waste_code_origin)
//				CASE 'F'
//					ldw = idw_waste_code_fed
//				CASE 'S'
//					ldw = idw_waste_code_state
//				CASE 'E'
//					// Form should never have an EQ code!! regardless we will add the assign code here
//					ldw = idw_waste_code_eq
//					
//				CASE ELSE
//			END CHOOSE
//			ll_row = ldw.InsertRow(0)
//			//ldw.Object.profile_id[ll_row] = ll_profile_id
//			ldw.Object.primary_flag[ll_row] = "F"
//			//ldw.Object.sequence_id[ll_row] = ll_null
//			ldw.Object.waste_code[ll_row] = ls_waste_code
//			ldw.Object.waste_code_UID[ll_row] = ll_waste_code_UID
//			ldw.Object.default_sequence_id[ll_row] = ll_default_seq
//			ldw.Object.profilewastecode_waste_code[ll_row] = ls_short_waste_code
//			ldw.Object.state[ll_row] = ls_state
//			ldw.Object.status[ll_row] = ls_status
//			CHOOSE CASE Upper(ls_waste_code_origin)
//				CASE 'F'
//					ldw.Object.sequence_flag[ll_row] = 'F'
//					IF ll_row <= ii_top6 THEN
//						ldw.object.include[ll_row] = 1
//						ldw.object.sequence_id[ll_row] = ll_row
//					ELSE
//						ldw.object.include[ll_row] = 0
//					END IF
//				CASE 'S'
//					ldw.Object.sequence_flag[ll_row] = 'A'
//				CASE 'E'
//					ldw.Object.sequence_flag[ll_row] = 'O'
//					IF ll_row <= ii_top6 THEN
//						ldw.object.include[ll_row] = 1
//					ELSE
//						ldw.object.include[ll_row] = 0
//					END IF
//				CASE ELSE
//			END CHOOSE
//			ib_changed_waste_code = TRUE
//		ELSEIF itr_forms.SQLCode = -1 THEN
//			MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
//				"~nPress OK to Continue.", StopSign!)
//			CLOSE wcr_waste_code_cursor;
//			RETURN -1
//		END IF
//	LOOP
//	CLOSE wcr_waste_code_cursor;
//	
//	IF ib_changed_waste_code THEN
//		idw_waste_code_fed.Sort()
//		idw_waste_code_state.Sort()
//		idw_waste_code_eq.Sort()
//		idw_waste_code_state.GroupCalc()
//		
//		wf_top6_renumber()
//		wf_set_waste_code_sequence(idw_waste_code_state)
//		wf_set_waste_code_sequence(idw_waste_code_eq)
//		POST wf_set_primary_waste_code()
//		
//		// rb 12/05/2012 The instance vars that WCR reference need to be updated
//		Post wf_populate_wastecodes_wcr ('all')
//		// set the answers for parent questions rcra listed, rcra characteristic, state haz and state nonhaz 
//		Post wf_wcr_set_waste_code_answers ()
//	END IF
//		
//	IF ll_row = 1 THEN
//		// There was only one waste code on the WCR, set it as primary
////			idw_waste.Object.primary_flag[ll_row] = "T"
////			idw_waste.Object.sequence_id[ll_row] = 1
////			idw_waste.Object.include[ll_row] = 1
//		idw_header.Object.waste_code[ll_row_header] = ls_waste_code
//		idw_header.Object.waste_code_uid[ll_row_header] = ll_waste_code_UID
//		this.wf_sync_waste_code( ll_waste_code_UID, ls_waste_code, FALSE)
//	END IF
//
//	//Constituents
//	ll_rowcount = idw_const.RowCount()
//	FOR ll_row = ll_rowcount TO 1 STEP -1
//		idw_const.DeleteRow(ll_row)
//	NEXT
//	DECLARE wcr_const_cursor CURSOR FOR  
//	SELECT DISTINCT t.const_id, t.concentration, t.unit, t.uhc
//	  FROM FormXConstituent t
//	 WHERE form_id = :al_form_id
//		AND revision_id = :ai_revision_id
//	 ORDER BY const_id 
//	 USING itr_forms;
//			
//	OPEN wcr_const_cursor;
//	DO WHILE itr_forms.SQLCode = 0
//		FETCH wcr_const_cursor 
//		 INTO :ll_const_id, :ldb_concentration, :ls_unit, :ls_uhc;
//		IF itr_forms.SQLCode = 0 THEN
//			// SK 08/28/2012 Fixed below was inserting row into idw_composition & referencing the wrong var ll_row
//			//ll_row = idw_composition.InsertRow(0)
//			ll_newrow = idw_const.InsertRow(0)
//			idw_const.Object.const_id[ll_newrow] = ll_const_id
//			idw_const.Object.concentration[ll_newrow] = ldb_concentration
//			idw_const.Object.unit[ll_newrow] = ls_unit
//			idw_const.Object.uhc[ll_newrow] = ls_uhc
//			idw_const.Object.added_by[ll_newrow] = gs_user_id
//			idw_const.Object.date_added[ll_newrow] = ldt_today
//			idw_const.Object.modified_by[ll_newrow] = gs_user_id
//			idw_const.Object.date_modified[ll_newrow] = ldt_today
//			ib_changed_const = TRUE
//		ELSEIF itr_forms.SQLCode = -1 THEN
//			MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Constituents" + &
//						"~nPress OK to Continue.", StopSign!)
//			CLOSE wcr_const_cursor;
//			RETURN -1
//		END IF
//	LOOP
//	CLOSE wcr_const_cursor;
//	
//	// Info Basis
//	idw_technical.object.info_basis_knowledge[ll_row_technical] = ls_info_basis_knowledge
//	idw_technical.object.info_basis_analysis[ll_row_technical] = ls_info_basis_analysis
//	idw_technical.object.info_basis_msds[ll_row_technical] = ls_info_basis_msds
//	
//	// Meet alt soil treat stds
//	idw_technical.object.meets_alt_soil_treatment_stds[ll_row_technical] = ls_meets_alt_soil_treatment_stds
//	
//	// More than 50 pct debris
//	idw_technical.object.more_than_50_pct_debris[ll_row_technical] = ls_more_than_50_pct_debris
//	
//	// Debris dimension and weight
//	idw_technical.object.debris_dimension_weight[ll_row_technical] = ls_debris_dimension_weight
//
//	/***** NON HAZARDOUS WASTES SECTION *************************************************************/
//	// State Non-Haz
//	idw_technical.object.michigan_non_haz[ll_row_technical] = ls_michigan_non_haz
//
//	// Universal Recyclable? 
//	idw_technical.object.universal_recyclable_commodity[ll_row_technical] = ls_univ_recyclable_commodity
//	
//	// Used Oil
//	idw_technical.object.used_oil[ll_row_technical] = ls_used_oil
//	
//	// Halogen greater than 1000
//	idw_technical.object.wwa_halogen_gt_1000[ll_row_technical] = ls_wwa_halogen_gt_1000
//	
//	// Halogen source
//	idw_technical.object.halogen_source[ll_row_technical] 			= ls_halogen_source
//	idw_technical.object.halogen_source_desc[ll_row_technical] 	= ls_halogen_source_desc
//	idw_technical.object.halogen_source_other[ll_row_technical] 	= ls_halogen_source_other
//
//	/***** TSCA SECTION *************************************************************/
//	idw_technical.object.pcb_concentration_none[ll_row_technical] 			= ls_pcb_concentration_none
//	idw_technical.object.pcb_concentration_0_49[ll_row_technical]			= ls_pcb_concentration_0_49
//	idw_technical.object.pcb_concentration_50_499[ll_row_technical] 		= ls_pcb_concentration_50_499
//	idw_technical.object.pcb_concentration_500[ll_row_technical] 			= ls_pcb_concentration_500
//	idw_technical.object.pcb_source_concentration_gr_50[ll_row_technical]= ls_pcb_source_concentration_gr_50
//	idw_technical.object.processed_into_non_liquid[ll_row_technical] 		= ls_pcb_processed_into_non_liquid
//	idw_technical.object.processd_into_nonlqd_prior_pcb[ll_row_technical]= ls_pcb_processd_into_nonlqd_prior
//	idw_technical.object.pcb_manufacturer[ll_row_technical] 					= ls_pcb_manufacturer
//	idw_technical.object.pcb_article_decontaminated[ll_row_technical] 	= ls_pcb_article_decontaminated
//	idw_technical.object.pcb_non_lqd_contaminated_media[ll_row_technical]= ls_pcb_non_lqd_contaminated_media
//
//	/***** CLEAN AIR ACT SECTION *************************************************************/
//	// rb 05/16/2012
//	idw_technical.object.ccvocgr500[ll_row_technical] = ls_ccvocgr500
//	idw_technical.object.ddvohapgr500[ll_row_technical] = ls_ddvohapgr500
//	
//	idw_technical.object.subject_to_mact_neshap[ll_row_technical]	= ls_neshap_flag
//	idw_technical.object.neshap_chem_1[ll_row_technical] 				= ls_neshap_chem_1
//	idw_technical.object.neshap_chem_2[ll_row_technical] 				= ls_neshap_chem_2
//	idw_technical.object.neshap_standards_part[ll_row_technical]	= ll_neshap_standards_part
//	idw_technical.object.neshap_subpart[ll_row_technical]				= ls_neshap_subpart
//	
//	idw_technical.object.contains_benzene_flag[ll_row_technical]	= ls_benzene
//	idw_technical.object.benzene_neshap[ll_row_technical]				= ls_neshap_sic
//	idw_technical.object.neshap_sic[ll_row_technical] 					= ll_sic_code
//	idw_technical.object.benzene_onsite_mgmt[ll_row_technical]		= ls_benzene_onsite_mgmt
//	idw_technical.object.benzene_onsite_mgmt_desc[ll_row_technical]= ls_benzene_onsite_mgmt_desc
//	idw_technical.object.tab_gr_10[ll_row_technical]					= ls_tab_gr_10
//	idw_technical.object.avg_h20_gr_10[ll_row_technical] 				= ls_avg_h20_gr_10
//	idw_technical.object.wcr_generator_total_annual_benzene[ll_row_technical]	= ll_tab
//	idw_technical.object.benzene[ll_row_technical]						= ldb_benzene_concentration
//	idw_technical.object.benzene_unit[ll_row_technical]				= ls_benzene_unit
//	idw_technical.object.neshap_exempt[ll_row_technical] 				= ls_neshap_sic
//
//End If
//

end function

public function integer wf_populate_gwa (long al_profile_id, long al_form_id, integer ai_revision_id, string as_amendment, string as_new_or_update, boolean ab_insert, string as_ra_profile_change_type);integer	li_rc, li_current_form_version_id, li_pos
string	ls_cmd, ls_status, ls_locked, ls_source, ls_amendment, ls_cmd_1 = '', ls_cmd_2 =''

// Initialize
as_new_or_update = Lower(as_new_or_update) 
ls_status = "A"
ls_locked = "U"
ls_source = "A"

EXECUTE IMMEDIATE "SET XACT_ABORT ON" USING itr_forms;

ls_amendment = as_amendment
IF as_new_or_update = "new" &
	OR (as_new_or_update = "update" AND ab_insert = TRUE) THEN
	
	SELECT current_form_version
		INTO :li_current_form_version_id
		FROM FormType
		WHERE form_type = 'GWA'
	USING itr_forms;
		
	li_pos = Pos(ls_amendment, "'", 1)
	DO UNTIL li_pos = 0
		ls_amendment = Replace(ls_amendment, li_pos + 1, 0, "'")
		
		li_pos = Pos(ls_amendment, "'", li_pos + 2)
	LOOP
	// MPM - 2/28/2020 - DevOps 14330 - Added column list to insert
	ls_cmd = "INSERT INTO " + gs_database_share + ".dbo.FormGWA " &
		+ " (form_id, revision_id, form_version_id, customer_id_from_form, customer_id, app_id, status, locked, source, approval_code, approval_key, company_id, profit_ctr_id, signing_name, signing_company, signing_title, " &
		+ " signing_date, date_created, date_modified, created_by, modified_by, generator_name, EPA_ID, generator_id, generator_address1, cust_name, cust_addr1, inv_contact_name, inv_contact_phone, inv_contact_fax, " &
		+ " tech_contact_name, tech_contact_phone, tech_contact_fax, waste_common_name, waste_code_comment, amendment, gen_mail_addr1, gen_mail_addr2, gen_mail_addr3, gen_mail_addr4, gen_mail_addr5, gen_mail_city, " &
		+ " gen_mail_state, gen_mail_zip_code, profitcenter_epa_id, profitcenter_profit_ctr_name, profitcenter_address_1, profitcenter_address_2, profitcenter_address_3, profitcenter_phone, profitcenter_fax, waste_code, " &
		+ " secondary_waste_code_list, rowguid, profile_id, ap_expiration_date, cust_fax, reapproval_profile_change, contact_id, contact_name, cust_addr2, cust_addr3, cust_addr4, cust_city, cust_state, cust_zip_code, " &
		+ " TAB) " &
		+ "SELECT " + String(al_form_id) + " AS form_id, " &
		+ String(ai_revision_id) + " AS revision_id, " &
		+ String(li_current_form_version_id) + " AS form_version_id, " &
		+ "P.customer_id AS customer_id_from_form, " &
		+ "P.customer_id, " &
		+ "NULL AS app_id, " &
		+ "'" + ls_status + "' AS status, " &
		+ "'" + ls_locked + "' AS locked, " &
		+ "'" + ls_source + "' AS source, " &
		+ "NULL AS approval_code, " &
		+ "P.profile_id AS approval_key, " &
		+ "NULL AS company_id, " &
		+ "NULL AS profit_ctr_id, " &
		+ "NULL AS signing_name, " &
		+ "NULL AS signing_company, " &
		+ "NULL AS signing_title, " &
		+ "NULL AS signing_date, " &
		+ "GETDATE() AS date_created, " &
		+ "GETDATE() AS date_modified, " &
		+ "'" + gs_user_id + "' AS created_by, " &
		+ "'" + gs_user_id + "' AS modified_by, " &
		+ "Generator.generator_name, " &
		+ "Generator.EPA_ID, " &
		+ "P.generator_id, " &
		+ "Generator.generator_address_1, " &
		+ "Customer.cust_name, " &
		+ "Customer.cust_addr1, " &
		+ "NULL AS inv_contact_name, " &
		+ "NULL AS inv_contact_phone, " &
		+ "NULL AS inv_contact_fax, " &
		+ "NULL AS tech_contact_name, " &
		+ "NULL AS tech_contact_phone, " &
		+ "NULL AS tech_contact_fax, " &
		+ "P.approval_desc AS waste_common_name, " &
		+ "WasteCode.waste_code_desc AS waste_code_comment, " &
		+ "'" + ls_amendment + "' AS amendment, " &
		+ "Generator.gen_mail_addr1, " &
		+ "Generator.gen_mail_addr2, " &
		+ "Generator.gen_mail_addr3, " &
		+ "Generator.gen_mail_addr4, " &
		+ "gen_mail_addr5 = RTrim(CASE WHEN P.generator_id = 0 THEN '' WHEN (Generator.gen_mail_city + ', ' + Generator.gen_mail_state + ' ' + IsNull(Generator.gen_mail_zip_code,'')) IS NULL THEN 'Missing Mailing City, State, and ZipCode' " &
			+ "	ELSE (Generator.gen_mail_city + ', ' + Generator.gen_mail_state + ' ' + IsNull(Generator.gen_mail_zip_code,'')) END), " &
		+ "Generator.gen_mail_city, " &
		+ "Generator.gen_mail_state, " &
		+ "Generator.gen_mail_zip_code, " &
		+ "NULL AS profitCenter_epa_id, " &
		+ "NULL AS profitCenter_profit_ctr_name, " &
		+ "NULL AS profitCenter_address_1, " &
		+ "NULL AS profitCenter_address_2, " &
		+ "NULL AS profitCenter_address_3, " &
		+ "NULL AS profitCenter_phone, " &
		+ "NULL AS profitCenter_fax, " &
		+ "P.waste_code, " &
		+ "NULL AS secondary_waste_code_list, " &
		+ "NEWID() AS rowguid, " &
		+ "P.profile_id, " &
		+ "P.ap_expiration_date, " &
		+ "Customer.cust_fax, " &
		+ "'" + as_ra_profile_change_type + "', " + &
		+ "NULL AS contact_id, " &
		+ "NULL AS contact_name, " &
		+ "Customer.cust_addr2, " &
		+ "Customer.cust_addr3, " &
		+ "Customer.cust_addr4, " &
		+ "Customer.cust_city, " &
		+ "Customer.cust_state, " &
		+ "Customer.cust_zip_code, " &
		+ "Generator.TAB " &
		+ "FROM Profile P " &
		+ "JOIN Customer " &
		+ "	ON Customer.customer_id = P.customer_id " &
		+ "JOIN Generator " &
		+ "	ON Generator.generator_id = P.generator_id " &
		+ "LEFT OUTER JOIN WasteCode " &
		+ "	ON WasteCode.waste_code_uid = P.waste_code_uid " &
		+ "WHERE P.profile_id = " + String(al_profile_id) + " " &
		+ "	AND P.curr_status_code in ('A','H','P') "
		
	// MPM - 2/28/2020 - DevOps 14330 - Added column list to insert
	ls_cmd_1 = "INSERT INTO " + gs_database_share + ".dbo.FORMXApproval " &
		+ " (form_type, form_id, revision_id, company_id, profit_ctr_id, profile_id, approval_code, profit_ctr_name, profit_ctr_EPA_ID, insurance_surcharge_percent, ensr_exempt, quotedetail_comment) " &
		+ "SELECT 'GWA', " &
		+ String(al_form_id) + " AS form_id, " &
		+ String(ai_revision_id) + " AS revision_id, " &
		+ "PQA.company_id, " &
		+ "PQA.profit_ctr_id, " &
		+ "PQA.profile_id, " &
		+ "PQA.approval_code, " &
		+ "ProfitCenter.profit_ctr_name, " &
		+ "ProfitCenter.EPA_ID, " &
		+ "NULL, " &
		+ "PQA.ensr_exempt, " &
		+ "NULL " &
		+ "FROM ProfileQuoteApproval PQA " &
		+ "JOIN ProfitCenter " &
			+ "ON ProfitCenter.company_ID = PQA.company_id " &
			+ "AND ProfitCenter.profit_ctr_ID = PQA.profit_ctr_id " &
		+ "WHERE PQA.profile_id = " + String(al_profile_id)
		
	// MPM - 2/28/2020 - DevOps 14330 - Added column list to insert
	ls_cmd_2 = "INSERT INTO " + gs_database_share + ".dbo.FORMXWasteCode " &
		+ " (form_id, revision_id, page_number, line_item, waste_code_uid, waste_code, specifier, lock_flag) " &
		+ "SELECT " + String(al_form_id) + " AS form_id, " &
		+ String(ai_revision_id) + " AS revision_id, " &
		+ "NULL, NULL, " &
		+ "PW.waste_code_UID , " &
		+ "PW.waste_code, " &
		+ "NULL, " &
		+ "'F' " &
		+ "FROM ProfileWasteCode PW JOIN WasteCode ON WasteCode.waste_code_UID = PW.waste_code_uid AND WasteCode.status = 'A' " &
		+ "WHERE PW.profile_id = " + String(al_profile_id)
		
ELSEIF (as_new_or_update = "update" AND ab_insert = FALSE) THEN
	ls_cmd = "UPDATE " + gs_database_share + ".dbo.FormGWA " &
		+ "SET amendment = '" + ls_amendment + "', " &
		+ "reapproval_profile_change = '" + as_ra_profile_change_type + "', " &
		+ "modified_by = '" + gs_user_id + "', " &
		+ "date_modified = GETDATE() " &
		+ "WHERE form_id = " + String(al_form_id) &
		+ "AND revision_id = " + String(ai_revision_id)
END IF

EXECUTE IMMEDIATE :ls_cmd
	USING itr_forms;
IF itr_forms.SQLCode = 0 THEN
	li_rc = gi_success
ELSE
	li_rc = gi_failure
END IF

IF li_rc = gi_success AND ls_cmd_1 > '' THEN
	EXECUTE IMMEDIATE :ls_cmd_1
	USING itr_forms;
	IF itr_forms.SQLCode = 0 THEN
		li_rc = gi_success
	ELSE
		li_rc = gi_failure
	END IF
END IF

IF li_rc = gi_success AND ls_cmd_2 > '' THEN
	EXECUTE IMMEDIATE :ls_cmd_2
	USING itr_forms;
	IF itr_forms.SQLCode = 0 THEN
		li_rc = gi_success
	ELSE
		li_rc = gi_failure
	END IF
END IF

EXECUTE IMMEDIATE "SET XACT_ABORT OFF" USING itr_forms;
	
RETURN li_rc
end function

public subroutine wf_set_access ();
// SK 09242012 This function sets access to profile based on profile status & access value

long		ll_header_row
string	ls_tracking_type, ls_curr_status_code

// Fetch Profile Status
ll_header_row = idw_header.getrow()
IF ll_header_row > 0 THEN
	ls_tracking_type 		= Upper(idw_header.Object.tracking_type[ll_header_row])
	ls_curr_status_code 	= Upper(idw_header.Object.curr_status_code[ll_header_row])
	ib_price_bund_ret_first_inst=False   //Devops 21596 & 58318-Added By Venu for lazy load implementation.
	CHOOSE CASE Upper(is_access)
		CASE 'L'		// Lab
			IF (ls_curr_status_code = 'A' AND ls_tracking_type = 'A') THEN
				// Readonly access for approved status
				f_set_dw_read_only(idw_header, TRUE, TRUE)
				f_set_dw_read_only(idw_detail, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_technical, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_shipping, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_waste, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_waste_other, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_waste_profilelab, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_const, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_composition, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_composition_epa, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_composition_other, TRUE, TRUE)
				f_set_dw_read_only(idw_quoteheader, TRUE, TRUE)
				f_set_dw_read_only(idw_approval, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_form_availability, TRUE, TRUE)
				tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_unit.Enabled = FALSE
			     tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_test_method.Enabled = FALSE 
				// rb - added rules and category tabs
				f_set_dw_read_only(idw_rules, TRUE, TRUE)
				f_set_dw_read_only(idw_category, TRUE, TRUE)
				f_set_dw_read_only(idw_recipe, TRUE, TRUE)   
				f_set_dw_and_buttons_read_only(idw_profile_gen_contact_form, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_1, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_2, TRUE, TRUE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_3, TRUE, TRUE)
//				f_set_dw_and_buttons_read_only(idw_wcr_display_4, TRUE, TRUE)
				// SK 12/07/2012 Lab should be able to click on new profile regardless of current profile's status
				ib_access_new = TRUE
				ib_access_quote = FALSE
			ELSE
				// Reset Readonly access for approved status
				f_set_dw_read_only(idw_header, FALSE, FALSE)
				f_set_dw_read_only(idw_detail, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_technical, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_shipping, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_waste, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_waste_other, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_waste_profilelab, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_const, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_composition, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_composition_epa, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_composition_other, FALSE, FALSE)
				f_set_dw_read_only(idw_quoteheader, FALSE, FALSE)
				f_set_dw_read_only(idw_approval, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_form_availability, FALSE, FALSE)
				tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_unit.Enabled = TRUE
				tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_test_method.Enabled = TRUE
				// rb - added rules and category tabs
				f_set_dw_read_only(idw_rules, FALSE, FALSE)
				f_set_dw_read_only(idw_category, FALSE, FALSE)
				f_set_dw_read_only(idw_recipe, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_profile_gen_contact_form, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_1, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_2, FALSE, FALSE)
				f_set_dw_and_buttons_read_only(idw_wcr_display_3, FALSE, FALSE)
//				f_set_dw_and_buttons_read_only(idw_wcr_display_4, FALSE, FALSE)
				ib_access_new = TRUE
				ib_access_quote = TRUE
			END IF
		
		CASE ELSE
	END CHOOSE
END IF
end subroutine

public subroutine wf_set_template_lock_fields (datawindow adw_display);
// This fn should be used to identify locked fields 
// for a Profile that is a template or started as a template.
// It can also indicate whether the field is locked or unlocked

int		li_idx, li_cntr
long		ll_template_form_id, ll_source_form_id, ll_hdr_row, ll_tech_row, ll_template_id
long		ll_field_cnt, ll_found_row, ll_col_cnt, ll_wcr_cnt
string	ls_find, ls_wcr_col_name, ls_col_type
string	ls_col_name, ls_err, ls_tab_order, ls_value_wcr, ls_value_profile
String 	ls_lock_file, ls_lock_name

datastore lds_template_data, lds_profile_lock_item

ll_hdr_row = idw_header.getrow()
IF ll_hdr_row > 0 THEN
	ll_template_form_id 	= idw_header.object.template_form_id[ll_hdr_row]
	ll_source_form_id 	= idw_header.object.source_form_id[ll_hdr_row]
	
	IF ll_template_form_id > 0 OR ll_source_form_id > 0 THEN 
		// only if this profile matches a template or was created from template, does the locking apply
		
		// create the datastores
		lds_template_data 			= CREATE DATASTORE
		lds_profile_lock_item 		= CREATE DATASTORE
				
		lds_template_data.dataobject 			= "d_wcr_master"
		lds_profile_lock_item.dataobject 	= "d_wcr_template_lockeditems"
		
		lds_template_data.SetTransObject(itr_share)
		lds_profile_lock_item.SetTransObject(itr_share)
		
		// does Profile currently match a template
		IF ll_template_form_id > 0 THEN
			ll_template_id = ll_template_form_id
		// Profile does not currently match a template, but was created from one!			
		ELSEIF ll_source_form_id > 0 THEN 
			ll_template_id = ll_source_form_id
		END IF
		
		// retrieve the lock items for the selected template
		ll_field_cnt = lds_profile_lock_item.retrieve(ll_template_id)
		// retrieve the template data
		ll_wcr_cnt = lds_template_data.retrieve(ll_template_id, 1) // should always return 1 row
		
		IF ll_field_cnt > 0 THEN
			// loop through columns on displayed datawindow and show locks/unlocks..
			ll_col_cnt = Long(adw_display.Object.DataWindow.Column.Count)
			FOR li_cntr = 1 to ll_col_cnt
				// only interested in columns that have a tab, i.e are shown on the object
				ls_col_name = adw_display.Describe("#"+ string(li_cntr) +".Name")
				ls_tab_order = adw_display.Describe(ls_col_name + '.TabSequence')
			   IF Long(ls_tab_order) > 0 THEN  
					// is this col locked?
					ls_find = 'Lower(profile_column) = "' + Lower(ls_col_name) + '"'
					ll_found_row = lds_profile_lock_item.Find(ls_find,1, ll_field_cnt+1)
					IF ll_found_row > 0 THEN
						// this is a lock item, show lock v/s unlock , depending on whether data matches
//						ls_wcr_col_name = lds_profile_lock_item.object.formwcr_column_name[ll_found_row]
//						ls_col_type = adw_display.Describe(ls_col_name +".ColType")
//						IF lower(left(ls_col_type, 4)) = 'char' THEN
//							ls_value_profile = lower(adw_display.Getitemstring(1, ls_col_name))
//							ls_value_wcr = lower(lds_template_data.Getitemstring(ll_wcr_cnt, ls_wcr_col_name))
//						ELSEIF lower(ls_col_type) = 'int' OR lower(ls_col_type) = 'long' THEN
//							ls_value_profile = lower(string(adw_display.Getitemnumber(1, ls_col_name)))
//							ls_value_wcr = lower(string(lds_template_data.Getitemnumber(ll_wcr_cnt, ls_wcr_col_name)))
//						END IF
						
						ls_lock_name = adw_display.Describe(ls_col_name + '.tag')
						// if the tag does not correctly specify the lock bmp on dw, correct it
						IF Pos(ls_lock_name, '_lock') = 0 THEN ls_lock_name = ls_lock_name + '_lock'
//						ls_lock_file = Lower(adw_display.Describe(ls_lock_name + '.FileName'))
//						IF ls_value_wcr = ls_value_profile OR &
//						(IsNull(ls_value_wcr) AND IsNull(ls_value_profile)) OR &
//						(IsNull(ls_value_wcr) AND (ls_value_profile = 'u')) THEN
//							// show lock
//							IF ls_lock_file <> '"c:\eqai-dev\resources\lock.bmp"' THEN 
//								ls_err = adw_display.Modify(ls_lock_name + '.FileName="c:\eqai-dev\resources\lock.bmp"')
//							END IF
//						ELSE
//							//show unlock
//							IF ls_lock_file <> '"c:\eqai-dev\resources\unlock.bmp"' THEN 
//								ls_err = adw_display.Modify(ls_lock_name + '.FileName="c:\eqai-dev\resources\unlock.bmp"')
//							END IF
//						END IF
						ls_err = adw_display.Modify(ls_lock_name + '.visible=1')	
						//ls_err = adw_display.Modify(ls_col_name +'.Protect = 1')
					END IF
				 END IF  
			NEXT
		END IF
		
	END IF
END IF

// destroy the datastores if valid
IF Isvalid(lds_template_data) THEN DESTROY lds_template_data
IF Isvalid(lds_profile_lock_item) THEN DESTROY lds_profile_lock_item

end subroutine

public function boolean wf_match_to_template (boolean ab_check_all, string as_col_name, string as_col_type, string as_data);// this fn decides if the profile value matches to the template value if applicable
Boolean	lb_match = TRUE
int		li_cntr
long		ll_template_form_id, ll_source_form_id, ll_hdr_row, ll_tech_row, ll_template_id, ll_row
long		ll_field_cnt, ll_found_row, ll_null
string	ls_find, ls_wcr_col_name, ls_col_type, ls_profile_column, ls_profile_table
string	ls_value_wcr, ls_value_profile, ls_profile_col_style
datawindow ldw_handle

SetNull(ll_null)
ll_hdr_row = idw_header.getrow()

IF ll_hdr_row > 0 THEN
	ll_template_form_id 	= idw_header.object.template_form_id[ll_hdr_row]
	ll_source_form_id 	= idw_header.object.source_form_id[ll_hdr_row]
	ll_field_cnt 			= ids_profile_lock_item.rowcount()
	
	// fetch our working template_id
	IF ll_template_form_id > 0 THEN 
		ll_template_id = ll_template_form_id
	ELSEIF ll_source_form_id > 0 THEN
		ll_template_id = ll_source_form_id
	ELSE
		// we do not have a template ID to work with
		RETURN lb_match
	END IF
		
	// make sure data stores are populated
	IF ll_field_cnt = 0 THEN ll_field_cnt = ids_profile_lock_item.retrieve(ll_template_id)
	IF ids_template_data.rowcount() = 0 THEN ids_template_data.retrieve(ll_template_id, 1)
	
	IF ll_field_cnt > 0 THEN
		IF NOT ab_check_all THEN
			// check only the current field as_col_name for match
			ls_find = 'Lower(profile_column) = "' + Lower(as_col_name) + '"'
			ll_found_row = ids_profile_lock_item.Find(ls_find,1, ll_field_cnt+1)
			IF ll_found_row > 0 THEN
				// this is a lock item
				ls_wcr_col_name = ids_profile_lock_item.object.formwcr_column_name[ll_found_row]
				IF lower(left(as_col_type, 4)) = 'char' THEN
					ls_value_wcr = lower(ids_template_data.Getitemstring(1, ls_wcr_col_name))
				ELSEIF lower(as_col_type) = 'int' OR lower(as_col_type) = 'long' THEN
					ls_value_wcr = lower(string(ids_template_data.Getitemnumber(1, ls_wcr_col_name)))
				END IF
				
				// special handling
				CHOOSE CASE lower(as_col_name)
					CASE 'consistency'
						
					CASE ELSE
						IF ls_value_wcr = as_data OR &
						(IsNull(ls_value_wcr) AND IsNull(as_data)) OR &
						(IsNull(ls_value_wcr) AND (as_data = 'u')) THEN
							// matches
						ELSE
							lb_match = FALSE
						END IF
				END CHOOSE
			END IF
		
			//IF NOT lb_match AND ll_template_form_id > 0 THEN idw_header.object.template_form_id[ll_hdr_row] = ll_null
		ELSE
			// check all locked fields for match
			ll_tech_row = idw_technical.getrow()
			FOR li_cntr = 1 TO ll_field_cnt
				ls_wcr_col_name 	= ids_profile_lock_item.object.formwcr_column_name[li_cntr]
				ls_profile_column	= ids_profile_lock_item.object.profile_column[li_cntr]
				ls_profile_table	= ids_profile_lock_item.object.profile_table[li_cntr]
				IF lower(ls_profile_table) = 'profile' THEN
					// match against idw_header
					ldw_handle = idw_header
					ll_row = ll_hdr_row
				ELSE
					// match against idw_technical
					ldw_handle = idw_technical
					ll_row = ll_tech_row
				END IF
				
				ls_col_type = ldw_handle.Describe(ls_profile_column + '.ColType')
				IF lower(left(ls_col_type, 4)) = 'char' THEN
					ls_value_wcr = lower(ids_template_data.Getitemstring(1, ls_wcr_col_name))
					ls_value_profile = lower(ldw_handle.GetItemString(ll_row, ls_profile_column))
				ELSEIF lower(ls_col_type) = 'int' OR lower(ls_col_type) = 'long' THEN
					ls_value_wcr = lower(string(ids_template_data.Getitemnumber(1, ls_wcr_col_name)))
					ls_value_profile = lower(string(ldw_handle.Getitemnumber(ll_row, ls_profile_column)))
				END IF
				
				// debug stmts
				//IF lower(ls_profile_column) = 'ph_na' THEN
//					Messagebox('Template Match', 'Profile value = ' + ls_value_profile + ', Form value = ' + ls_value_wcr + ', Column =' &
//							+ ls_wcr_col_name + ', Profile column = ' + ls_profile_column )
				//END IF
				
				IF ls_value_wcr = ls_value_profile OR &
					(IsNull(ls_value_wcr) AND IsNull(ls_value_profile)) OR &
					(IsNull(ls_value_wcr) AND (ls_value_profile = 'u' OR ls_value_profile = 'f')) THEN
					// match
				ELSE
					// special handling
					CHOOSE CASE lower(ls_wcr_col_name)
//						CASE 'rcra_haz_flag'
//							IF (ls_value_profile = 'e' AND ls_value_wcr = 'f') THEN
//								lb_match = FALSE
//								EXIT
//							END IF
				
//						CASE 'odor_ammonia'
//							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'ammonia') = 0 THEN 
//								lb_match = FALSE
//								EXIT
//							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'ammonia') > 0 THEN 
//								lb_match = FALSE
//								EXIT
//							END IF
//							
//						CASE 'odor_amines'
//							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'amines') = 0 THEN 
//								lb_match = FALSE
//								EXIT
//							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'amines') > 0 THEN 
//								lb_match = FALSE
//								EXIT
//							END IF
//								
//						CASE 'odor_mercaptans'
//							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'mercaptans') = 0 THEN 
//								lb_match = FALSE
//								EXIT
//							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'mercaptans') > 0 THEN 
//								lb_match = FALSE
//								EXIT
//							END IF
//							
//						CASE 'odor_sulfur'
//							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'sulfur') = 0 THEN 
//								lb_match = FALSE
//								EXIT
//							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'sulfur') > 0 THEN 
//								lb_match = FALSE
//								EXIT
//							END IF
//							
//						CASE 'odor_organic_acid'
//							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'organic acid') = 0 THEN 
//								lb_match = FALSE
//								EXIT
//							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'organic acid') > 0 THEN 
//								lb_match = FALSE
//								EXIT
//							END IF
//								
//						CASE 'odor_other'
//							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'other') = 0 THEN 
//								lb_match = FALSE
//								EXIT
//							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'other') > 0 THEN 
//								lb_match = FALSE
//								EXIT
//							END IF
//							
//						CASE 'odor_none'
//							IF ls_value_wcr = 't' AND Pos(ls_value_profile, 'none') = 0 THEN 
//								lb_match = FALSE
//								EXIT
//							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'none') > 0 THEN 
//								lb_match = FALSE
//								EXIT
//							END IF
//						
						CASE 'consistency_solid'
							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'solid') = 0 THEN 
								lb_match = FALSE
								EXIT
							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'solid') > 0 THEN 
								lb_match = FALSE
								EXIT
							END IF
							
						CASE 'consistency_dust'
							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'dust/powder') = 0 THEN 
								lb_match = FALSE
								EXIT
							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'dust/powder') > 0 THEN 
								lb_match = FALSE
								EXIT
							END IF
							
						CASE 'consistency_debris'
							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'debris') = 0 THEN 
								lb_match = FALSE
								EXIT
							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'debris') > 0 THEN 
								lb_match = FALSE
								EXIT
							END IF
													
						CASE 'consistency_sludge'
							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'sludge') = 0 THEN 
								lb_match = FALSE
								EXIT
							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'sludge') > 0 THEN 
								lb_match = FALSE
								EXIT
							END IF
							
						CASE 'consistency_liquid'
							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'liquid') = 0 THEN 
								lb_match = FALSE
								EXIT
							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'liquid') > 0 THEN 
								lb_match = FALSE
								EXIT
							END IF
							
						CASE 'consistency_gas_aerosol'
							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'gas/aerosol') = 0 THEN 
								lb_match = FALSE
								EXIT
							ELSEIF ls_value_wcr = 'f' AND POS(ls_value_profile, 'gas/aerosol') > 0 THEN 
								lb_match = FALSE
								EXIT
							END IF
							
						CASE 'consistency_varies'
							IF ls_value_wcr = 't' AND POS(ls_value_profile, 'varies') = 0 THEN 
								lb_match = FALSE
								EXIT
							END IF
							
						CASE ELSE
							lb_match = FALSE
							EXIT
				
					END CHOOSE
				END IF
			NEXT
			
			IF NOT lb_match THEN
				idw_header.object.template_form_id[ll_hdr_row] = ll_null
				// debug stmt
				//Messagebox('Template Match', 'Profile value = ' + ls_value_profile + ', Form value = ' + ls_value_wcr + ', Column =' &
					//			+ ls_wcr_col_name + ', Profile column = ' + ls_profile_column )
			END IF
		END IF
	END IF
END IF

RETURN lb_match

end function

public function integer wf_copy_wcr (str_pass astr_pass);//DevOps #14700 info_gde 03/25/2020;  EQAI - Maintenance - COR  - Form Management - New Profile - Accept
//DevOps #15380 info_gde 04/25/2020; EQAI/COR2 - Profile Tracking- Profile tab

boolean	lb_set_primary, lb_continue, lb_select_all, lb_copy_from_template = FALSE
datetime	ldt_today
double	ldb_null, ldb_wcr_concentration, ld_molecular_weight, ld_density, ld_vapor_pressure
decimal	ld_tab, ld_generator_tab
long		ll_idx, ll_len, ll_pos, ll_image_id
long		ll_row, ll_profile_id, ll_null, ll_form_id_wcr,ll_rev_id_wcr
long		ll_row_header, ll_newrow, ll_customer_id, ll_row_technical, ll_row_contact
long		ll_wcr_cust, ll_wcr_gen, ll_wcr_srec_exempt_id
long		ll_rowcount, ll_i, ll_const_id, ll_wcr_const_id
string	ls_status, ls_EPA_ID, ls_generator_name, ls_uhc, ls_null, ls_odor, ls_odor_desc, ls_odor_other_desc, ls_free_liquids
string	ls_waste_common_name, ls_locked, ls_frequency, ls_frequency_other
string	ls_wcr_waste_common_name, ls_wcr_color, ls_wcr_sr_exempt, ls_wcr_dot_shipping_name
string	ls_shipping_volume_unit_other
string	ls_cust_name, ls_gen_name, ls_waste_code, ls_unit, ls_wcr_unit
string	ls_consistency_solid, ls_consistency_dust, ls_consistency_liquid, ls_consistency_sludge,ls_short_waste_code
string	ls_consistency, ls_facility_instruction
String	ls_ph_lte_2, ls_ph_gt_2_lt_5, ls_ph_gte_5_lte_10, ls_ph_gt_10_lt_12_5, ls_ph_gte_12_5, ls_pH_NA
String	ls_ignitability_lt_90, ls_ignitability_90_139, ls_ignitability_140_199, ls_ignitability_gte_200, ls_ignitability_na
//Properties
String	ls_properties_none, ls_shock_sensitive_waste, ls_biohazard, ls_aluminum, ls_oily_residue, ls_asbestos_friable
String 	ls_pyrophoric_waste, ls_metal_fines, ls_dioxins, ls_furans, ls_air_reactive, ls_react_cyanide, ls_isocyanates
String	ls_explosives, ls_radioactive_waste, ls_react_sulfide, ls_water_reactive, ls_asbestos_non_friable
String	ls_biodegradable_sorbents, ls_temp_ctrl_org_peroxide, ls_norm, ls_tenorm
double  ld_fm25d, ld_fm305
String   ls_ddvoc, ls_voc, ls_caavoc
String	ls_gen_process, ls_handling_issue, ls_handling_issue_desc
String	ls_rcra_haz_flag, ls_rcra_exempt_reason, ls_rcra_listed, ls_rcra_characteristic, ls_cyanide_plating
String	ls_epa_form_code, ls_epa_source_code
String	ls_info_basis_knowledge, ls_info_basis_analysis, ls_info_basis_msds
String	ls_exceed_ldr_standards
String	ls_waste_water_flag, ls_meets_alt_soil_treatment_stds
String	ls_more_than_50_pct_debris, ls_debris_dimension_weight
String	ls_michigan_non_haz, ls_univ_recyclable_commodity, ls_used_oil, ls_wwa_halogen_gt_1000
String	ls_halogen_source, ls_halogen_source_desc, ls_halogen_source_other
String	ls_pcb_concentration_none,  ls_pcb_concentration_0_49, ls_pcb_concentration_50_499, ls_pcb_concentration_500, ls_pcb_source_concentration_gr_50
String	ls_pcb_processed_into_non_liquid, ls_pcb_processd_into_nonlqd_prior
String	ls_pcb_manufacturer, ls_pcb_article_decontaminated, ls_pcb_non_lqd_contaminated_media
String	ls_ccvocgr500, ls_ddvohapgr500, ls_neshap_flag, ls_neshap_chem_1, ls_neshap_chem_2
String	ls_neshap_subpart, ls_benzene, ls_neshap_sic
String	ls_benzene_onsite_mgmt, ls_benzene_onsite_mgmt_desc
String	ls_tab_gr_10, ls_avg_h20_gr_10
LONG		ll_sic_code, ll_neshap_standards_part
Long 		ll_source_form_id, ll_source_revision_id, ll_template_form_id
 int 		i        
DOUBLE	ldb_benzene_concentration, ldb_comp_from_pct, ldb_comp_to_pct, ldb_concentration, ldb_min_concentration
String	ls_benzene_unit, ls_comp_desc
String	ls_dot_shipping_desc, ls_package_group, ls_un_na_flag, ls_erg_suffix, ls_hazmat_flag, ls_hazmat_class, ls_subsidiary_haz_mat_class, ls_rq, ls_rq_reason
LONG		ll_un_na_number, ll_erg_number, ll_attachment_cnt
String	ls_template_name
String	ls_state_waste_code_flag, ls_uhc_flag
//contacts
String	ls_generator_contact, ls_generator_contact_title, ls_generator_phone, ls_generator_fax, ls_generator_email
String	ls_inv_contact_name, ls_inv_contact_phone, ls_inv_contact_fax
String	ls_tech_contact_name, ls_tech_contact_phone, ls_tech_contact_fax, ls_tech_cont_email, ls_tech_contact_mobile
Long		ll_waste_code_UID, ll_template_id, ll_default_seq, ll_sequence_id
String	ls_waste_code_origin, ls_state, ls_manifest_dot_sp_number, ls_rcra_exempt_flag, ls_composition_unit 

Datawindow	ldw
dwobject	ldwo

DWItemStatus	ldwitemstatus
DataStore ds_form_unit

SetNull( ls_null )
SetNull( ll_null )
ldt_today = DateTime(Today(), Now())

//If IsNull( :astr_pass.l[4] ) AND ll_template_id > 0 Then 
If IsNull( astr_pass.l[4] ) AND astr_pass.l[5] > 0 Then 
	lb_select_all = TRUE   //new profile, copy from template
	lb_copy_from_template = TRUE
Else
	lb_select_all = False
End If

// SK 07/17/2013 Corrected the logic used to determine the lb_copy_from_template value
//astr_pass.l[1] is the form ID and if it is a template then copy_From_template should be true
// Check for existence of template
SELECT FormWCRTemplate.template_form_id
INTO :ll_template_id
FROM FormWCRTemplate
WHERE FormWCRTemplate.template_form_id = :astr_pass.l[1]
USING itr_forms;

IF itr_forms.SQLCode = 0 AND ll_template_id > 0 THEN
	lb_copy_from_template = TRUE
END IF

		
SELECT facility_instruction, 
		FormWCR.generator_id,
		FormWCR.EPA_ID,
		FormWCR.generator_name,
		waste_common_name,
		customer_id,
		cust_name,
		locked,
		customer_id, FormWCR.generator_id, waste_common_name, 
		color, surcharge_exempt, srec_exempt_id, dot_shipping_name,
		frequency, frequency_other, volume, odor, odor_other_desc,
		consistency = (case when FormWCR.consistency_solid ='T' then 'SOLID:' else '' end )  + 
						  (case when FormWCR.consistency_dust='T' then 'DUST/POWDER:' else '' end )  + 
						  (case when FormWCR.consistency_debris='T' then 'DEBRIS:' else '' end )  + 
						  (case when FormWCR.consistency_sludge='T' then 'SLUDGE:' else '' end )  + 
						  (case when FormWCR.consistency_liquid='T' then 'LIQUID:' else '' end )  + 
						  (case when FormWCR.consistency_gas_aerosol='T' then 'GAS/AEROSOL' else '' end ) +
						  (case when FormWCR.consistency_varies='T' then 'VARIES' else '' end) ,
		free_liquids, 
		ignitability_lt_90, ignitability_90_139, ignitability_140_199, ignitability_gte_200, ignitability_na,
		ph_lte_2, ph_gt_2_lt_5, ph_gte_5_lte_10, ph_gt_10_lt_12_5, ph_gte_12_5, pH_NA,
		waste_contains_spec_hand_none,
		shock_sensitive_waste,
		biohazard,
		aluminum,
		oily_residue,
		asbestos_friable,
		pyrophoric_waste,
		metal_fines,
		dioxins,
		furans,
		air_reactive,
		react_cyanide,
		isocyanates,
		explosives,
		radioactive_waste,
		react_sulfide,
		water_reactive,
		asbestos_non_friable,
		biodegradable_sorbents,
		temp_ctrl_org_peroxide,
		norm,
		tenorm,
		gen_process,
		handling_issue, handling_issue_desc,
		rcra_exempt_flag, rcra_exempt_reason, rcra_listed, rcra_characteristic, cyanide_plating,
		epa_source_code, epa_form_code,
		info_basis_knowledge, info_basis_analysis, info_basis_msds,
		exceed_ldr_standards,
		waste_water_flag, meets_alt_soil_treatment_stds,
		more_than_50_pct_debris, debris_dimension_weight,
		michigan_non_haz, universal_recyclable_commodity, used_oil, wwa_halogen_gt_1000,
		wwa_halogen_source, wwa_halogen_source_desc1, wwa_other_desc_1,
		pcb_concentration_none,  pcb_concentration_0_49, pcb_concentration_50_499, pcb_concentration_500,
		pcb_source_concentration_gr_50, processed_into_non_liquid, processd_into_nonlqd_prior_pcb,
		pcb_manufacturer, pcb_article_decontaminated, pcb_non_lqd_contaminated_media,
		ccvocgr500, ddvohapgr500, subject_to_mact_neshap, neshap_chem_1, neshap_chem_2,
		neshap_standards_part, neshap_subpart, benzene, neshap_sic, FormWCR.sic_code,
		benzene_onsite_mgmt, benzene_onsite_mgmt_desc,
		tab_gr_10, avg_h20_gr_10, 
		FormWCR.tab, benzene_concentration, benzene_unit,
		dot_shipping_desc, package_group, un_na_flag, un_na_number, erg_number, erg_suffix, 
		hazmat_flag, hazmat_class, subsidiary_haz_mat_class, reportable_quantity_flag, RQ_reason,
		Coalesce(T1.name, T2.name),
		state_waste_code_flag, underlying_haz_constituents, 
		source_form_id, source_revision_id, FormWCR. template_form_id,
		generator_contact, generator_contact_title, FormWCR.generator_phone, FormWCR.generator_fax, FormWCR.generator_email,
		inv_contact_name, inv_contact_phone, inv_contact_fax,
		tech_contact_name, tech_contact_phone, tech_contact_fax, tech_cont_email, tech_contact_mobile, manifest_dot_sp_number,
		G.TAB
INTO	:ls_facility_instruction,
		:ll_wcr_gen,
		:ls_EPA_ID, 
		:ls_generator_name, 
		:ls_waste_common_name, 
		:ll_customer_id, 
		:ls_cust_name, 
		:ls_locked,
		:ll_wcr_cust, :ll_wcr_gen, :ls_wcr_waste_common_name, 
		:ls_wcr_color, :ls_wcr_sr_exempt, :ll_wcr_srec_exempt_id, :ls_wcr_dot_shipping_name,
		:ls_frequency, :ls_frequency_other, :ls_shipping_volume_unit_other,
		:ls_odor_desc, :ls_odor_other_desc,
		:ls_consistency,
		:ls_free_liquids, 
		:ls_ignitability_lt_90, :ls_ignitability_90_139, :ls_ignitability_140_199, :ls_ignitability_gte_200, :ls_ignitability_na,
		:ls_ph_lte_2, :ls_ph_gt_2_lt_5, :ls_ph_gte_5_lte_10, :ls_ph_gt_10_lt_12_5, :ls_ph_gte_12_5, :ls_pH_NA,
		:ls_properties_none,
		:ls_shock_sensitive_waste,
		:ls_biohazard,
		:ls_aluminum,
		:ls_oily_residue,
		:ls_asbestos_friable,
		:ls_pyrophoric_waste,
		:ls_metal_fines,
		:ls_dioxins,
		:ls_furans,
		:ls_air_reactive,
		:ls_react_cyanide,
		:ls_isocyanates,
		:ls_explosives,
		:ls_radioactive_waste,
		:ls_react_sulfide,
		:ls_water_reactive,
		:ls_asbestos_non_friable,
		:ls_biodegradable_sorbents,
		:ls_temp_ctrl_org_peroxide,
		:ls_norm,
		:ls_tenorm,
		:ls_gen_process,
		:ls_handling_issue, :ls_handling_issue_desc,
		:ls_rcra_exempt_flag, :ls_rcra_exempt_reason, :ls_rcra_listed, :ls_rcra_characteristic, :ls_cyanide_plating,
		:ls_epa_source_code, :ls_epa_form_code,
		:ls_info_basis_knowledge, :ls_info_basis_analysis, :ls_info_basis_msds,
		:ls_exceed_ldr_standards,
		:ls_waste_water_flag, :ls_meets_alt_soil_treatment_stds,
		:ls_more_than_50_pct_debris, :ls_debris_dimension_weight,
		:ls_michigan_non_haz, :ls_univ_recyclable_commodity, :ls_used_oil, :ls_wwa_halogen_gt_1000,
		:ls_halogen_source, :ls_halogen_source_desc, :ls_halogen_source_other,
		:ls_pcb_concentration_none,  :ls_pcb_concentration_0_49, :ls_pcb_concentration_50_499, 
		:ls_pcb_concentration_500, :ls_pcb_source_concentration_gr_50,
		:ls_pcb_processed_into_non_liquid, :ls_pcb_processd_into_nonlqd_prior,
		:ls_pcb_manufacturer, :ls_pcb_article_decontaminated, :ls_pcb_non_lqd_contaminated_media,
		:ls_ccvocgr500, :ls_ddvohapgr500, :ls_neshap_flag, :ls_neshap_chem_1, :ls_neshap_chem_2,
		:ll_neshap_standards_part, :ls_neshap_subpart, :ls_benzene, :ls_neshap_sic, :ll_sic_code,
		:ls_benzene_onsite_mgmt, :ls_benzene_onsite_mgmt_desc,
		:ls_tab_gr_10, :ls_avg_h20_gr_10, 
		:ld_tab, :ldb_benzene_concentration, :ls_benzene_unit,
		:ls_dot_shipping_desc, :ls_package_group, :ls_un_na_flag, :ll_un_na_number, :ll_erg_number, :ls_erg_suffix,
		:ls_hazmat_flag, :ls_hazmat_class, :ls_subsidiary_haz_mat_class, :ls_rq, :ls_rq_reason,
		:ls_template_name,
		:ls_state_waste_code_flag, :ls_uhc_flag,
		:ll_source_form_id, :ll_source_revision_id, :ll_template_form_id,
		:ls_generator_contact, :ls_generator_contact_title, :ls_generator_phone, :ls_generator_fax, :ls_generator_email,
		:ls_inv_contact_name, :ls_inv_contact_phone, :ls_inv_contact_fax,
		:ls_tech_contact_name, :ls_tech_contact_phone, :ls_tech_contact_fax, :ls_tech_cont_email, :ls_tech_contact_mobile,
		:ls_manifest_dot_sp_number, :ld_generator_tab 
FROM 	FormWCR
LEFT OUTER JOIN FormWCRTemplate T1 ON T1.template_form_id = FormWCR.form_id // copying a template
LEFT OUTER JOIN FormWCRTemplate T2 ON T2.template_form_id = FormWCR.template_form_id // copying a form that has a template
LEFT OUTER JOIN Generator G ON (G.generator_id = FormWCR.generator_id AND FormWCR.epa_id IS NULL) OR 
	(G.epa_id = FormWCR.epa_id AND FormWCR.epa_id IS NOT NULL)
WHERE form_id = :astr_pass.l[1]
AND 	revision_id = :astr_pass.l[2]
USING itr_forms;

//DevOps #15380 info_gde 04/25/2020  start
if not IsNull(ls_info_basis_knowledge) AND ls_info_basis_knowledge<>'' then
	is_info_basis_knowledge=ls_info_basis_knowledge
end if

if not IsNull(ls_info_basis_msds) AND ls_info_basis_msds<>'' then
	is_info_basis_msds=ls_info_basis_msds
end if

if not IsNull(ls_info_basis_analysis) AND ls_info_basis_analysis<>'' then
	is_info_basis_analysis=ls_info_basis_analysis
end if
//DevOps #15380 info_gde 04/25/2020 end 

ll_form_id_wcr = astr_pass.l[1]
ll_rev_id_wcr = astr_pass.l[2]

//Profile
ll_row_header = idw_header.GetRow()
If ll_row_header > 0 Then
	//customer
	If lb_select_all OR f_get_s_index( astr_pass.s, "customer_selected") > 0 Then
		idw_header.Object.customer_id[ll_row_header] = ll_customer_id
		ldwo = idw_header.Object.customer_id
		idw_header.Event itemchanged (ll_row_header, ldwo, String(ll_customer_id) )
	End If
	
	//generator
	If lb_select_all OR f_get_s_index( astr_pass.s, "generator_selected") > 0 Then
		idw_header.Object.generator_epa_id[ll_row_header] = ls_epa_id
		idw_header.Object.generator_id[ll_row_header] = ll_wcr_gen
		ldwo = idw_header.Object.generator_epa_id
		idw_header.Event itemchanged (ll_row_header, ldwo, ls_epa_id )
	End If

	//waste common name
	If lb_select_all OR f_get_s_index( astr_pass.s, "description_selected") > 0 Then
		idw_header.Object.approval_desc[ll_row_header] = ls_wcr_waste_common_name
	End If
	
	//facility instruction
	If lb_select_all OR f_get_s_index( astr_pass.s, "facility_selected") > 0 Then
		idw_header.Object.facility_instruction[ll_row_header] = ls_facility_instruction
	End If

	//dot shipping
	If lb_select_all OR f_get_s_index( astr_pass.s, "dot_selected") > 0 Then
		idw_header.Object.dot_shipping_name[ll_row_header] = ls_wcr_dot_shipping_name
		//DevOps #14700 info_gde 03/25/2020 - start
		//idw_header.Object.package_group[ll_row_header] = ls_package_group
		if  ls_package_group = 'N/A' then
		    ls_package_group = ls_null 
		end if
		idw_header.Object.package_group[ll_row_header] =  ls_package_group
         //DevOps #14700 info_gde 03/25/2020 - end

		idw_header.Object.un_na_flag[ll_row_header] = ls_un_na_flag
		idw_header.Object.un_na_number[ll_row_header] = ll_un_na_number
		idw_header.Object.erg_number[ll_row_header] = ll_erg_number
		idw_header.Object.erg_suffix[ll_row_header] = ls_erg_suffix
		idw_header.Object.hazmat[ll_row_header] = ls_hazmat_flag
		idw_header.Object.hazmat_class[ll_row_header] = ls_hazmat_class
		if Right(ls_subsidiary_haz_mat_class,1)=',' THEN ls_subsidiary_haz_mat_class=Left(ls_subsidiary_haz_mat_class,len(ls_subsidiary_haz_mat_class)-1)
		idw_header.Object.subsidiary_haz_mat_class[ll_row_header] = ls_subsidiary_haz_mat_class
		idw_header.Object.reportable_quantity_flag[ll_row_header] = ls_rq
		idw_header.Object.RQ_reason[ll_row_header] = ls_rq_reason
		idw_header.Object.manifest_dot_sp_number[ll_row_header] = ls_manifest_dot_sp_number
	End If

	//Volume/Shipping Unit
	////Delete existing shipping unit
	If lb_select_all OR f_get_s_index( astr_pass.s, "shipping_selected") > 0 Then
		idw_header.Object.shipping_volume_unit_other[ll_row_header] = ls_shipping_volume_unit_other
		ll_rowcount = idw_shipping_unit.Rowcount()
		FOR ll_idx = ll_rowcount TO 1 STEP -1
			idw_shipping_unit.DeleteRow(ll_idx)
			ll_rowcount --
		NEXT
		////copy shipping units from wcr unit
		ds_form_unit = CREATE DATASTORE
		ds_form_unit.dataobject = 'd_form_units'
		ds_form_unit.SetTransObject(itr_forms)
		ll_rowcount = ds_form_unit.Retrieve(astr_pass.l[1], astr_pass.l[2])
		FOR ll_idx = 1 TO ll_rowcount
			ll_newrow = idw_shipping_unit.InsertRow(0)
			//ids_profile_shippingunit.object.profile_id[ll_newrow] 		= al_profile_id
			idw_shipping_unit.object.quantity[ll_newrow]			= ds_form_unit.object.quantity[ll_idx]
			idw_shipping_unit.object.bill_unit_code[ll_newrow]	= ds_form_unit.object.bill_unit_code[ll_idx]
		NEXT
		DESTROY ds_form_unit
		If ll_rowcount = 0 Then
			ll_newrow = idw_shipping_unit.InsertRow(0)
		End If
	End If
	
	// Frequency
	If lb_select_all OR f_get_s_index( astr_pass.s, "frequency_selected") > 0 Then
		idw_header.object.shipping_frequency[ll_row_header] 		= ls_frequency
		idw_header.object.shipping_frequency_other[ll_row_header] = ls_frequency_other
	End If
	
	// generating process
	If lb_select_all OR f_get_s_index( astr_pass.s, "process_selected") > 0 Then
		idw_header.object.gen_process[ll_row_header] = ls_gen_process
	End If
	
	//RCRA
	If lb_select_all OR f_get_s_index( astr_pass.s, "rcra_selected") > 0 Then
		//RCRA
//		If ls_rcra_haz_flag = "T" Then
//			ls_rcra_haz_flag = "E"
//		ELSEIF ls_rcra_haz_flag = 'F' THEN
//			IF (ls_rcra_listed = 'T' OR ls_rcra_characteristic = 'T' OR ls_state_waste_code_flag = 'T') THEN
//				ls_rcra_haz_flag = 'H'
//			ELSE
//				ls_rcra_haz_flag = 'N'
//			END IF
//		End If
		idw_header.object.rcra_exempt_flag[ll_row_header] 		= ls_rcra_exempt_flag
		idw_header.object.rcra_exempt_reason[ll_row_header]	= ls_rcra_exempt_reason
		idw_header.object.rcra_listed[ll_row_header]				= ls_rcra_listed
		idw_header.object.rcra_characteristic[ll_row_header] 	= ls_rcra_characteristic
	End If
	
	// EPA Source, form
	If lb_select_all OR f_get_s_index( astr_pass.s, "epa_selected") > 0 Then
		idw_header.object.epa_source_code[ll_row_header] = ls_epa_source_code
		idw_header.object.epa_form_code[ll_row_header] = ls_epa_form_code
	End If
	
	// Exceed LDR Standards
	If lb_select_all OR f_get_s_index( astr_pass.s, "exceed_selected") > 0 Then
		idw_header.object.exceed_ldr_standards[ll_row_header] = ls_exceed_ldr_standards
	End If

	// Waste Water Flag
	If lb_select_all OR f_get_s_index( astr_pass.s, "wastewater_selected") > 0 Then
		idw_header.object.waste_water_flag[ll_row_header] = ls_waste_water_flag
	End If
	
	//tempalte form id, revision id and template name
	idw_header.object.template_form_id[ll_row_header] = ll_template_form_id
	IF ll_template_form_id = astr_pass.l[1] THEN 
		idw_header.object.template_revision_id[ll_row_header] = astr_pass.l[2]
	ELSE
		idw_header.object.template_revision_id[ll_row_header] = 1
	END IF
	idw_header.object.template_name[ll_row_header] = ls_template_name
	
	// source_form_id, source_revision_id
	idw_header.object.source_form_id[ll_row_header] 		= ll_source_form_id
	idw_header.object.source_revision_id[ll_row_header] 	= ll_source_revision_id
End If

ll_row_technical = idw_technical.GetRow()
If ll_row_technical > 0 Then
	//Color
	If lb_select_all OR f_get_s_index( astr_pass.s, "color_selected") > 0 Then
		idw_technical.Object.color[ll_row_technical] = ls_wcr_color
	End If

	If lb_select_all OR f_get_s_index( astr_pass.s, "odor_selected") > 0 Then
		//Odor Desc
		idw_technical.Object.odor_desc[ll_row_technical] = ls_odor_desc
		idw_technical.Object.odor_other_desc[ll_row_technical] = ls_odor_other_desc
	End If
	
	//Consistency	
	If lb_select_all OR f_get_s_index( astr_pass.s, "consistency_selected") > 0 Then
		ll_len = Len( ls_consistency )
		ll_i = 0
		ll_pos = 0
		lb_continue = TRUE
		DO WHILE lb_continue
			ll_pos = Pos( ls_consistency, ':', ll_pos + 1 )
			If ll_pos > 0 Then
				ll_i ++
				If ll_i = 2 OR ll_pos = ll_len Then 
					lb_continue = FALSE
				End If
			Else
				lb_continue = FALSE
			End If
		LOOP
		If ll_pos > 0 Then ls_consistency = Left ( ls_consistency, ll_pos - 1 )
		idw_technical.Object.consistency[ll_row_technical] = ls_consistency
	End If
	
	//PH
	If lb_select_all OR f_get_s_index( astr_pass.s, "ph_selected") > 0 Then
		idw_technical.object.ph_lte_2[ll_row_technical] 			= ls_ph_lte_2
		idw_technical.object.ph_gt_2_lt_5[ll_row_technical] 		= ls_ph_gt_2_lt_5
		idw_technical.object.ph_gte_5_lte_10[ll_row_technical] 	= ls_ph_gte_5_lte_10
		idw_technical.object.ph_gt_10_lt_12_5[ll_row_technical] 	= ls_ph_gt_10_lt_12_5
		idw_technical.object.ph_gte_12_5[ll_row_technical] 		= ls_ph_gte_12_5
		idw_technical.object.pH_NA[ll_row_technical] 				= ls_pH_NA
		// SK also set the pH from & pH TO values
		POST wf_set_ph_from_to()
	End If

	// Ignitability (Flashpoint)
	If lb_select_all OR f_get_s_index( astr_pass.s, "ignitability_selected") > 0 Then
		idw_technical.object.ignitability_lt_90[ll_row_technical]	= ls_ignitability_lt_90
		idw_technical.object.ignitability_90_139[ll_row_technical]	= ls_ignitability_90_139
		idw_technical.object.ignitability_140_199[ll_row_technical]	= ls_ignitability_140_199
		idw_technical.object.ignitability_gte_200[ll_row_technical]	= ls_ignitability_gte_200
		idw_technical.object.ignitability_na[ll_row_technical]		= ls_ignitability_na
		// also set the ignitability
		POST wf_set_ignitability()
	End If
	
	//spl properties
	If lb_select_all OR f_get_s_index( astr_pass.s, "properties_selected") > 0 Then
		idw_technical.object.waste_contains_spec_hand_none[ll_row_technical] = ls_properties_none
		If ls_properties_none = "T" Then
			idw_technical.object.shock_sensitive_waste[ll_row_technical] = ls_null
			idw_technical.object.biohazard[ll_row_technical] = ls_null
			idw_technical.object.aluminum[ll_row_technical] = ls_null
			idw_technical.object.oily_residue[ll_row_technical] = ls_null
			idw_technical.object.pyrophoric_waste[ll_row_technical] = ls_null
			idw_technical.object.metal_fines[ll_row_technical] = ls_null
			idw_technical.object.dioxins[ll_row_technical] = ls_null
			idw_technical.object.furans[ll_row_technical] = ls_null
			idw_technical.object.air_reactive[ll_row_technical] = ls_null
			idw_technical.object.react_cyanide[ll_row_technical] = ls_null
			idw_technical.object.isocyanates[ll_row_technical] = ls_null
			idw_technical.object.explosives[ll_row_technical] = ls_null
			idw_technical.object.radioactive_waste[ll_row_technical] = ls_null
			idw_technical.object.react_sulfide[ll_row_technical] = ls_null
			idw_technical.object.water_reactive[ll_row_technical] = ls_null
			idw_technical.object.asbestos_friable[ll_row_technical] = ls_null
			idw_technical.object.asbestos_non_friable[ll_row_technical] = ls_null
			idw_technical.object.biodegradable_sorbents[ll_row_technical] = ls_null
			idw_technical.object.temp_ctrl_org_peroxide[ll_row_technical] = ls_null
			idw_technical.object.norm[ll_row_technical] = ls_null
			idw_technical.object.tenorm[ll_row_technical] = ls_null
			idw_technical.Object.free_liquid[ll_row_technical] = ls_null
		Else
			idw_technical.object.shock_sensitive_waste[ll_row_technical] = ls_shock_sensitive_waste
			idw_technical.object.biohazard[ll_row_technical] = ls_biohazard
			idw_technical.object.aluminum[ll_row_technical] = ls_aluminum
			idw_technical.object.oily_residue[ll_row_technical] = ls_oily_residue
			idw_technical.object.pyrophoric_waste[ll_row_technical] = ls_pyrophoric_waste
			idw_technical.object.metal_fines[ll_row_technical] = ls_metal_fines
			idw_technical.object.dioxins[ll_row_technical] = ls_dioxins
			idw_technical.object.furans[ll_row_technical] = ls_furans
			idw_technical.object.air_reactive[ll_row_technical] = ls_air_reactive
			idw_technical.object.react_cyanide[ll_row_technical] = ls_react_cyanide
			idw_technical.object.isocyanates[ll_row_technical] = ls_isocyanates
			idw_technical.object.explosives[ll_row_technical] = ls_explosives
			idw_technical.object.radioactive_waste[ll_row_technical] = ls_radioactive_waste
			idw_technical.object.react_sulfide[ll_row_technical] = ls_react_sulfide
			idw_technical.object.water_reactive[ll_row_technical] = ls_water_reactive
			idw_technical.object.asbestos_friable[ll_row_technical] = ls_asbestos_friable
			idw_technical.object.asbestos_non_friable[ll_row_technical] = ls_asbestos_non_friable
			idw_technical.object.biodegradable_sorbents[ll_row_technical] = ls_biodegradable_sorbents
			idw_technical.object.temp_ctrl_org_peroxide[ll_row_technical] = ls_temp_ctrl_org_peroxide
			idw_technical.object.norm[ll_row_technical] = ls_norm
			idw_technical.object.tenorm[ll_row_technical] = ls_tenorm
			idw_technical.Object.free_liquid[ll_row_technical] = ls_free_liquids
		End If
	End If
	
	//Cyanide
	If lb_select_all OR f_get_s_index( astr_pass.s, "rcra_selected") > 0 Then
		idw_technical.object.cyanide_plating[ll_row_technical] 		= ls_cyanide_plating
	End If

	//Waste Composition	
	If lb_select_all OR f_get_s_index( astr_pass.s, "composition_selected") > 0 Then
		ll_rowcount = idw_composition.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_composition.DeleteRow(ll_row)
		NEXT
		DECLARE wcr_composition_cursor CURSOR FOR  
		SELECT DISTINCT comp_description, comp_from_pct, comp_to_pct, unit, sequence_id
		  FROM FormXWCRComposition
		 WHERE form_id = :astr_pass.l[1]
			AND revision_id = :astr_pass.l[2]
		 ORDER BY sequence_id 
		 USING itr_forms;
			
		OPEN wcr_composition_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_composition_cursor 
			 INTO :ls_comp_desc, :ldb_comp_from_pct, :ldb_comp_to_pct, :ls_composition_unit, :ll_sequence_id;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_composition.InsertRow(0)
				//idw_composition.Object.profile_id[ll_row] = ll_profile_id
				idw_composition.Object.comp_description[ll_row] = ls_comp_desc
				idw_composition.Object.comp_from_pct[ll_row] = ldb_comp_from_pct
				idw_composition.Object.comp_to_pct[ll_row] = ldb_comp_to_pct
				idw_composition.Object.unit[ll_row] = ls_composition_unit
				idw_composition.Object.sequence_id[ll_row] = ll_sequence_id
				ib_changed_comp = TRUE	
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Compositions" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_composition_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_composition_cursor;
	End If

	// handling issue
	If lb_select_all OR f_get_s_index( astr_pass.s, "handling_selected") > 0 Then
		idw_technical.object.handling_issue[ll_row_technical] = ls_handling_issue
		idw_technical.object.handling_issue_desc[ll_row_technical] = ls_handling_issue_desc
	End If

	//state waste code
	If lb_select_all OR f_get_s_index( astr_pass.s, "state_selected") > 0 Then
		idw_technical.object.state_waste_code_flag[ll_row_technical] = ls_state_waste_code_flag
	End If

	If lb_select_all OR f_get_s_index( astr_pass.s, "uhc_selected") > 0 Then
		//uhc flag
		idw_technical.object.underlying_haz_constituents[ll_row_technical] = ls_uhc_flag
		//Constituents
		ll_rowcount = idw_const.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_const.DeleteRow(ll_row)
		NEXT
		DECLARE wcr_const_cursor CURSOR FOR  
		SELECT DISTINCT t.const_id, t.concentration,t.min_concentration, t.unit, t.uhc
		  FROM FormXConstituent t
		 WHERE form_id = :astr_pass.l[1]
			AND revision_id = :astr_pass.l[2]
		 ORDER BY const_id 
		 USING itr_forms;
			
		OPEN wcr_const_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_const_cursor 
			 INTO :ll_const_id, :ldb_concentration, :ldb_min_concentration,:ls_unit, :ls_uhc;
			IF itr_forms.SQLCode = 0 THEN
				// SK 08/28/2012 Fixed below was inserting row into idw_composition & referencing the wrong var ll_row
				//ll_row = idw_composition.InsertRow(0)
				
				 Select caavoc,fm25d,fm305,ddvoc,voc, molecular_weight, density, vapor_pressure
				 Into  :ls_caavoc,:ld_fm25d, :ld_fm305, :ls_ddvoc, :ls_voc, :ld_molecular_weight, :ld_density, :ld_vapor_pressure
				 From  Constituents
				 Where const_id = :ll_const_id
				 Using gtr_share;

				ll_newrow = idw_const.InsertRow(0)
				idw_const.Object.const_id[ll_newrow] = ll_const_id
				idw_const.Object.concentration[ll_newrow] = ldb_concentration
				idw_const.Object.min_concentration[ll_newrow] = ldb_min_concentration
				idw_const.Object.unit[ll_newrow] = ls_unit
				idw_const.Object.uhc[ll_newrow] = ls_uhc
				idw_const.Object.caavoc[ll_newrow] = ls_caavoc
				idw_const.Object.fm25d[ll_newrow] = ld_fm25d
				idw_const.Object.fm305[ll_newrow] = ld_fm305
				idw_const.Object.ddvoc[ll_newrow] = ls_ddvoc
				idw_const.Object.voc[ll_newrow] = ls_voc
				idw_const.Object.molecular_weight [ll_newrow] = ld_molecular_weight
		  		idw_const.Object.density [ll_newrow] =  ld_density
				idw_const.Object.vapor_pressure[ll_newrow] = ld_vapor_pressure										 
				idw_const.Object.added_by[ll_newrow] = gs_user_id
				idw_const.Object.date_added[ll_newrow] = ldt_today
				idw_const.Object.modified_by[ll_newrow] = gs_user_id
				idw_const.Object.date_modified[ll_newrow] = ldt_today
				ib_changed_const = TRUE
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Constituents" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_const_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_const_cursor;
	End If
	
	//Waste Codes -- SK 08/13 Modified for Waste Code processing
	If lb_select_all OR f_get_s_index( astr_pass.s, "wastecodes_selected") > 0 Then
		// Delete existing waste codes
		ll_rowcount = idw_waste_code_fed.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_waste_code_fed.DeleteRow(ll_row)
			ib_changed_waste_code = TRUE
		NEXT
		ll_rowcount = idw_waste_code_state.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_waste_code_state.DeleteRow(ll_row)
			ib_changed_waste_code = TRUE
		NEXT
		ll_rowcount = idw_waste_code_eq.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_waste_code_eq.DeleteRow(ll_row)
			ib_changed_waste_code = TRUE
		NEXT
		
		// Load the WCR Waste Codes
		DECLARE wcr_waste_code_cursor CURSOR FOR  
		 SELECT DISTINCT WC.display_name, FXW.waste_code_UID, WC.waste_code_origin, WC.sequence_id, WC.state, WC.waste_code, WC.status
		   FROM FormXWasteCode FXW
			JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
		  WHERE form_id = :astr_pass.l[1]
		    AND revision_id = :astr_pass.l[2]
		  ORDER BY FXW.waste_code_UID 
		  USING itr_forms;

		OPEN wcr_waste_code_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_waste_code_cursor INTO :ls_waste_code, :ll_waste_code_UID, :ls_waste_code_origin, :ll_default_seq, :ls_state, :ls_short_waste_code, :ls_status;
			IF itr_forms.SQLCode = 0 THEN
				CHOOSE CASE Upper(ls_waste_code_origin)
					CASE 'F'
						ldw = idw_waste_code_fed
					CASE 'S'
						ldw = idw_waste_code_state
					CASE 'E'
						// Form should never have an EQ code!! regardless we will add the assign code here
						ldw = idw_waste_code_eq
						
					CASE ELSE
				END CHOOSE
				ll_row = ldw.InsertRow(0)
				//ldw.Object.profile_id[ll_row] = ll_profile_id
				ldw.Object.primary_flag[ll_row] = "F"
				//ldw.Object.sequence_id[ll_row] = ll_null
				ldw.Object.waste_code[ll_row] = ls_waste_code
				ldw.Object.waste_code_UID[ll_row] = ll_waste_code_UID
				ldw.Object.default_sequence_id[ll_row] = ll_default_seq
				ldw.Object.state[ll_row] = ls_state
				ldw.Object.status[ll_row] = ls_status
				ldw.Object.profilewastecode_waste_code[ll_row] = ls_short_waste_code
				CHOOSE CASE Upper(ls_waste_code_origin)
					CASE 'F'
						ldw.Object.sequence_flag[ll_row] = 'F'
						IF ll_row <= ii_top6 THEN
							ldw.object.include[ll_row] = 1
							ldw.object.sequence_id[ll_row] = ll_row
						ELSE
							ldw.object.include[ll_row] = 0
						END IF
					CASE 'S'
						ldw.Object.sequence_flag[ll_row] = 'A'
					CASE 'E'
						ldw.Object.sequence_flag[ll_row] = 'O'
						IF ll_row <= ii_top6 THEN
							ldw.object.include[ll_row] = 1
						ELSE
							ldw.object.include[ll_row] = 0
						END IF
					CASE ELSE
				END CHOOSE
				ib_changed_waste_code = TRUE
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
					"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_waste_code_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_waste_code_cursor;
		
		IF ib_changed_waste_code THEN
			idw_waste_code_fed.Sort()
			idw_waste_code_state.Sort()
			idw_waste_code_eq.Sort()
			idw_waste_code_state.GroupCalc()
			
			wf_top6_renumber()
			wf_set_waste_code_sequence(idw_waste_code_state)
			wf_set_waste_code_sequence(idw_waste_code_eq)
			POST wf_set_primary_waste_code()
			
			// rb 12/05/2012 The instance vars that WCR reference need to be updated
			Post wf_populate_wastecodes_wcr ('all')
			// set the answers for parent questions rcra listed, rcra characteristic, state haz and state nonhaz 
			Post wf_wcr_set_waste_code_answers ()
		END IF
			
		IF ll_row = 1 THEN
			// There was only one waste code on the WCR, set it as primary
//			idw_waste.Object.primary_flag[ll_row] = "T"
//			idw_waste.Object.sequence_id[ll_row] = 1
//			idw_waste.Object.include[ll_row] = 1
			idw_header.Object.waste_code[ll_row_header] = ls_waste_code
			idw_header.Object.waste_code_uid[ll_row_header] = ll_waste_code_UID
			this.wf_sync_waste_code( ll_waste_code_UID, ls_waste_code, FALSE)
		END IF
	End If
	
	// Info Basis
	If lb_select_all OR f_get_s_index( astr_pass.s, "info_selected") > 0 Then
		idw_technical.object.info_basis_knowledge[ll_row_technical] = ls_info_basis_knowledge
		idw_technical.object.info_basis_analysis[ll_row_technical] = ls_info_basis_analysis
		idw_technical.object.info_basis_msds[ll_row_technical] = ls_info_basis_msds
	End If
	
	// Meet alt soil treat stds
	If lb_select_all OR f_get_s_index( astr_pass.s, "meets_selected") > 0 Then
		idw_technical.object.meets_alt_soil_treatment_stds[ll_row_technical] = ls_meets_alt_soil_treatment_stds
	End If
	
	// More than 50 pct debris
	If lb_select_all OR f_get_s_index( astr_pass.s, "more_selected") > 0 Then
		idw_technical.object.more_than_50_pct_debris[ll_row_technical] = ls_more_than_50_pct_debris
	End If
	
	// Debris dimension and weight
	If lb_select_all OR f_get_s_index( astr_pass.s, "debris_selected") > 0 Then
		idw_technical.object.debris_dimension_weight[ll_row_technical] = ls_debris_dimension_weight
	End If

	/***** NON HAZARDOUS WASTES SECTION *************************************************************/
	// State Non-Haz
	If lb_select_all OR f_get_s_index( astr_pass.s, "michigan_selected") > 0 Then
		idw_technical.object.michigan_non_haz[ll_row_technical] = ls_michigan_non_haz
	End If

	// Universal Recyclable? 
	If lb_select_all OR f_get_s_index( astr_pass.s, "universal_selected") > 0 Then
		idw_technical.object.universal_recyclable_commodity[ll_row_technical] = ls_univ_recyclable_commodity
	End If
	
	// Used Oil
	If lb_select_all OR f_get_s_index( astr_pass.s, "used_selected") > 0 Then
		idw_technical.object.used_oil[ll_row_technical] = ls_used_oil
	End If
	
	// Halogen greater than 1000
	If lb_select_all OR f_get_s_index( astr_pass.s, "wwa_selected") > 0 Then
		idw_technical.object.wwa_halogen_gt_1000[ll_row_technical] = ls_wwa_halogen_gt_1000
	End If
	
	// Halogen source
	If lb_select_all OR f_get_s_index( astr_pass.s, "halogen_selected") > 0 Then
		idw_technical.object.halogen_source[ll_row_technical] 			= ls_halogen_source
		idw_technical.object.halogen_source_desc[ll_row_technical] 	= ls_halogen_source_desc
		idw_technical.object.halogen_source_other[ll_row_technical] 	= ls_halogen_source_other
	End If

	/***** TSCA SECTION *************************************************************/
	If lb_select_all OR f_get_s_index( astr_pass.s, "pcb_selected") > 0 Then
		idw_technical.object.pcb_concentration_none[ll_row_technical] 			= ls_pcb_concentration_none
		idw_technical.object.pcb_concentration_0_49[ll_row_technical]			= ls_pcb_concentration_0_49
		idw_technical.object.pcb_concentration_50_499[ll_row_technical] 		= ls_pcb_concentration_50_499
		idw_technical.object.pcb_concentration_500[ll_row_technical] 			= ls_pcb_concentration_500
		idw_technical.object.pcb_source_concentration_gr_50[ll_row_technical]= ls_pcb_source_concentration_gr_50
		idw_technical.object.processed_into_non_liquid[ll_row_technical] 		= ls_pcb_processed_into_non_liquid
		idw_technical.object.processd_into_nonlqd_prior_pcb[ll_row_technical]= ls_pcb_processd_into_nonlqd_prior
		idw_technical.object.pcb_manufacturer[ll_row_technical] 					= ls_pcb_manufacturer
		idw_technical.object.pcb_article_decontaminated[ll_row_technical] 	= ls_pcb_article_decontaminated
		idw_technical.object.pcb_non_lqd_contaminated_media[ll_row_technical]= ls_pcb_non_lqd_contaminated_media
	End If

	/***** CLEAN AIR ACT SECTION *************************************************************/
	// rb 05/16/2012
	If lb_select_all OR f_get_s_index( astr_pass.s, "ccvocgr500_selected") > 0 Then
		idw_technical.object.ccvocgr500[ll_row_technical] = ls_ccvocgr500
	End If
	
	If lb_select_all OR f_get_s_index( astr_pass.s, "ddvohapgr500_selected") > 0 Then
		idw_technical.object.ddvohapgr500[ll_row_technical] = ls_ddvohapgr500
	End If

	If lb_select_all OR f_get_s_index( astr_pass.s, "neshap_selected") > 0 Then
		idw_technical.object.subject_to_mact_neshap[ll_row_technical]	= ls_neshap_flag
		idw_technical.object.neshap_chem_1[ll_row_technical] 				= ls_neshap_chem_1
		idw_technical.object.neshap_chem_2[ll_row_technical] 				= ls_neshap_chem_2
		idw_technical.object.neshap_standards_part[ll_row_technical]	= ll_neshap_standards_part
		idw_technical.object.neshap_subpart[ll_row_technical]				= ls_neshap_subpart
	End If
	
	If lb_select_all OR f_get_s_index( astr_pass.s, "benzene_selected") > 0 Then
		idw_technical.object.contains_benzene_flag[ll_row_technical]	= ls_benzene
		idw_technical.object.benzene_neshap[ll_row_technical]				= ls_neshap_sic
		idw_technical.object.neshap_sic[ll_row_technical] 					= ll_sic_code
		idw_technical.object.benzene_onsite_mgmt[ll_row_technical]		= ls_benzene_onsite_mgmt
		idw_technical.object.benzene_onsite_mgmt_desc[ll_row_technical]= ls_benzene_onsite_mgmt_desc
		idw_technical.object.tab_gr_10[ll_row_technical]					= ls_tab_gr_10
		idw_technical.object.avg_h20_gr_10[ll_row_technical] 				= ls_avg_h20_gr_10
		idw_technical.object.tab[ll_row_technical]							= ld_tab
		idw_technical.object.generator_tab[ll_row_technical]				= ld_generator_tab
		idw_technical.object.benzene[ll_row_technical]						= ldb_benzene_concentration
		idw_technical.object.benzene_unit[ll_row_technical]				= ls_benzene_unit
		idw_technical.object.neshap_exempt[ll_row_technical] 				= ls_neshap_sic
	End If

End If

//generator contact
If f_get_s_index( astr_pass.s, "gencontact_selected") > 0 Then
	ll_row_contact = This.idw_profile_gen_contact_form.rowcount( )
	If ll_row_contact = 0 Then
		ll_row_contact = This.idw_profile_gen_contact_form.insertRow( 0 )
		idw_profile_gen_contact_form.object.profile_id[ll_row_contact] = idw_header.object.profile_id[ll_row_header]
		idw_profile_gen_contact_form.object.contact_type[ll_row_contact] = "Generator"
		idw_profile_gen_contact_form.object.added_by[ll_row_contact] = gs_user_id
		idw_profile_gen_contact_form.object.date_added[ll_row_contact] = DateTime(Today(), Now())
	Else
		idw_profile_gen_contact_form.object.modified_by[ll_row_contact] = gs_user_id
		idw_profile_gen_contact_form.object.date_modified[ll_row_contact] = DateTime(Today(), Now())
	End If
	idw_profile_gen_contact_form.object.contact_name[ll_row_contact] = ls_generator_contact
	idw_profile_gen_contact_form.object.contact_title[ll_row_contact] = ls_generator_contact_title
	idw_profile_gen_contact_form.object.contact_phone[ll_row_contact] = ls_generator_phone
	idw_profile_gen_contact_form.object.contact_email[ll_row_contact] = ls_generator_email
	idw_profile_gen_contact_form.object.contact_fax[ll_row_contact] 	= ls_generator_fax
End If

//invoice contact
If f_get_s_index( astr_pass.s, "inv_selected") > 0 Then
	ll_row_contact = This.idw_wcr_display_3 .rowcount( )
	If ll_row_contact = 0 Then
		ll_row_contact = This.idw_wcr_display_3.insertRow( 0 )
		idw_wcr_display_3.object.profile_id[ll_row_contact] = idw_header.object.profile_id[ll_row_header]
		idw_wcr_display_3.object.contact_type[ll_row_contact] = "Invoicing"
		idw_wcr_display_3.object.added_by[ll_row_contact] = gs_user_id
		idw_wcr_display_3.object.date_added[ll_row_contact] = DateTime(Today(), Now())
	Else
		idw_wcr_display_3.object.modified_by[ll_row_contact] = gs_user_id
		idw_wcr_display_3.object.date_modified[ll_row_contact] = DateTime(Today(), Now())
	End If
	idw_wcr_display_3.object.contact_name[ll_row_contact] = ls_inv_contact_name
	idw_wcr_display_3.object.contact_phone[ll_row_contact] = ls_inv_contact_phone
	idw_wcr_display_3.object.contact_fax[ll_row_contact] 	= ls_inv_contact_fax
End If

//technical contact
//If f_get_s_index( astr_pass.s, "tech_selected") > 0 Then
//	ll_row_contact = This.idw_wcr_display_4.rowcount( )
//	If ll_row_contact = 0 Then
//		ll_row_contact = This.idw_wcr_display_4.insertRow( 0 )
//		idw_wcr_display_4.object.profile_id[ll_row_contact] = idw_header.object.profile_id[ll_row_header]
//		idw_wcr_display_4.object.contact_type[ll_row_contact] = "Generator"
//		idw_wcr_display_4.object.added_by[ll_row_contact] = gs_user_id
//		idw_wcr_display_4.object.date_added[ll_row_contact] = DateTime(Today(), Now())
//	Else
//		idw_wcr_display_4.object.modified_by[ll_row_contact] = gs_user_id
//		idw_wcr_display_4.object.date_modified[ll_row_contact] = DateTime(Today(), Now())
//	End If
//	idw_wcr_display_4.object.contact_name[ll_row_contact] = ls_tech_contact_name
//	idw_wcr_display_4.object.contact_phone[ll_row_contact] = ls_tech_contact_phone
//	idw_wcr_display_4.object.contact_fax[ll_row_contact] 	= ls_tech_contact_fax
//	idw_wcr_display_4.object.contact_email[ll_row_contact] = ls_tech_cont_email
//	idw_wcr_display_4.object.contact_mobile[ll_row_contact] = ls_tech_contact_mobile
//End If

// mark this as primary wcr if there is none yet..
IF NOT(lb_copy_from_template) AND IsNull(idw_header.object.form_id_wcr[ll_row_header]) THEN
	idw_header.object.form_id_wcr[ll_row_header] = ll_form_id_wcr
END IF

// Make sure the WCR we just copied from gets linked to Profile
IF NOT(lb_copy_from_template) THEN 
	IF NOT ISValid(ids_form_wcr) THEN
		ids_form_wcr = CREATE Datastore
		ids_form_wcr.dataobject = 'd_wcr_master'
		ids_form_wcr.SetTransObject(itr_share)
	END IF
	ll_row = ids_form_wcr.retrieve(ll_form_id_wcr, ll_rev_id_wcr)
	IF ll_row > 0 THEN 
		ids_form_wcr.object.profile_id[ll_row] = idw_header.object.profile_id[ll_row_header]
		ids_form_wcr.object.date_last_profile_sync[ll_row] = DateTime(Today(), Now())
		IF idw_form.getrow() > 0 THEN 
		    idw_form.object.date_last_profile_sync[idw_form.getrow()] = DateTime(Today(), Now())
	     END IF
	END IF
	// also make sure the scan record for this WCR gets updated with the profile ID
	SELECT image_id
	INTO :ll_image_id
	FROM SCAN
	WHERE form_id = :ll_form_id_wcr
	AND revision_id = :ll_rev_id_wcr
	AND form_type = 'WCR'
	USING itr_image;
	
	IF ll_image_id > 0 THEN 
		IF NOT ISValid(ids_scan_wcr) THEN
//			ids_scan_wcr = CREATE Datastore
			ids_scan_wcr = CREATE u_datastore		// DevOps 17111 DBError capture.fhc.
			ids_scan_wcr.dataobject = 'd_scan'
			ids_scan_wcr.SetTransObject(itr_image)
		END IF
		ll_row = ids_scan_wcr.retrieve(ll_image_id)
		IF ll_row > 0 THEN 
			ids_scan_wcr.object.profile_id[ll_row] = idw_header.object.profile_id[ll_row_header]
		END IF
	END IF
END IF

// If the Form we just used, had its own attachment, then set the docs pending flag for this profile
// as these attachments will be pulled over once this Profile is SAVED!
SELECT Count(1) 
INTO :ll_attachment_cnt
FROM SCAN
WHERE form_id = :ll_form_id_wcr
AND revision_id = :ll_rev_id_wcr
AND form_type = 'ATTACH'
USING itr_image;

IF ll_attachment_cnt > 0 THEN
	idw_header.object.document_update_status[ll_row_header] = 'P'
END IF

wf_set_rcra_haz_flag()
wf_wcr_profile_map_load_wcr_sect()
tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.setrow(1)
tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.Event rowfocuschanged (1)
// MPM - COR2 - Changed the 1 to 2 in the function call below, because that corresponds to what is now the first section on the Profile tab
wf_set_wcr_sect_display(2)

Return 1
end function

public subroutine wf_set_ph_from_to ();
// this function sets the ph_from & ph_to values from the selected pH ranges

long	ll_tech_row, ll_null
string	ls_ph_lte_2, ls_ph_gt_2_lt_5, ls_ph_gte_5_lte_10, ls_ph_gt_10_lt_12_5, ls_ph_gte_12_5, ls_ph_na

setnull(ll_null)
ll_tech_row = idw_technical.getrow()
IF ll_tech_row > 0 THEN
	ls_ph_lte_2 			= Upper(idw_technical.object.ph_lte_2[ll_tech_row])
	ls_ph_gt_2_lt_5 		= Upper(idw_technical.object.ph_gt_2_lt_5[ll_tech_row])
	ls_ph_gte_5_lte_10 	= Upper(idw_technical.object.ph_gte_5_lte_10[ll_tech_row])
	ls_ph_gt_10_lt_12_5 	= Upper(idw_technical.object.ph_gt_10_lt_12_5[ll_tech_row])
	ls_ph_gte_12_5 		= Upper(idw_technical.object.ph_gte_12_5[ll_tech_row])
	ls_ph_na					= Upper(idw_technical.object.ph_na[ll_tech_row])
	
	IF ls_ph_na = 'T' THEN
		idw_technical.object.ph_from[ll_tech_row] = ll_null
		idw_technical.object.ph_to[ll_tech_row] = ll_null
	ELSE
		// set from
		IF ls_ph_lte_2 = 'T' THEN 
			idw_technical.object.ph_from[ll_tech_row] = 0
		ELSEIF ls_ph_gt_2_lt_5 = 'T' THEN
			idw_technical.object.ph_from[ll_tech_row] = 2.1
		ELSEIF ls_ph_gte_5_lte_10 = 'T' THEN
			idw_technical.object.ph_from[ll_tech_row] = 5
		ELSEIF ls_ph_gt_10_lt_12_5 = 'T' THEN
			idw_technical.object.ph_from[ll_tech_row] = 10.1
		ELSEIF ls_ph_gte_12_5 = 'T' THEN
			idw_technical.object.ph_from[ll_tech_row] = 12.5
		END IF
		
		// set to
		IF ls_ph_gte_12_5 = 'T' THEN 
			//DevOps 37330 AGC 02/18/2022 changed ph_to from 12.5 to 14
//			idw_technical.object.ph_to[ll_tech_row] = 12.5
			idw_technical.object.ph_to[ll_tech_row] = 14
		ELSEIF ls_ph_gt_10_lt_12_5 = 'T' THEN
			idw_technical.object.ph_to[ll_tech_row] = 12.4
		ELSEIF ls_ph_gte_5_lte_10 = 'T' THEN
			idw_technical.object.ph_to[ll_tech_row] = 10
		ELSEIF ls_ph_gt_2_lt_5 = 'T' THEN
			idw_technical.object.ph_to[ll_tech_row] = 4.9
		ELSEIF ls_ph_lte_2 = 'T' THEN
			idw_technical.object.ph_to[ll_tech_row] = 2
		END IF
		
		// all set to 'F' or null case
		IF (IsNull(ls_ph_lte_2) OR ls_ph_lte_2 = 'F') AND (IsNull(ls_ph_gt_2_lt_5) OR ls_ph_gt_2_lt_5 = 'F') AND &
			(IsNull(ls_ph_gte_5_lte_10) OR ls_ph_gte_5_lte_10 = 'F') AND (IsNull(ls_ph_gt_10_lt_12_5) OR ls_ph_gt_10_lt_12_5 = 'F') AND &
			(IsNull(ls_ph_gte_12_5) OR ls_ph_gte_12_5 = 'F') AND (IsNull(ls_ph_na) OR ls_ph_na = 'F') THEN
			idw_technical.object.ph_from[ll_tech_row] = ll_null
			idw_technical.object.ph_to[ll_tech_row] = ll_null
		END IF
	END IF
END IF
end subroutine

public subroutine wf_set_ignitability ();// this function sets the ignitability value from the selected ignitability ranges
// MPM - 6/12/2020 - DevOps 16233 - Added the numeric flashpoint entered to the determination of the ignitability value
long	ll_tech_row, ll_ignitability_compare_temp
string	ls_null, ls_fp_from, ls_fp_to
string	ls_fp_lt_90, ls_fp_90_139, ls_fp_140_199, ls_fp_gte_200, ls_fp_na, ls_fp_does_not_flash

setnull(ls_null)
ll_tech_row = idw_technical.getrow()
IF ll_tech_row > 0 THEN
	ls_fp_lt_90 			= Upper(idw_technical.object.ignitability_lt_90[ll_tech_row])
	ls_fp_90_139 		= Upper(idw_technical.object.ignitability_90_139[ll_tech_row])
	ls_fp_140_199 	= Upper(idw_technical.object.ignitability_140_199[ll_tech_row])
	ls_fp_gte_200 	= Upper(idw_technical.object.ignitability_gte_200[ll_tech_row])
	ls_fp_na					= Upper(idw_technical.object.ignitability_na[ll_tech_row])
	ll_ignitability_compare_temp = idw_technical.object.ignitability_compare_temperature[ll_tech_row]
	ls_fp_does_not_flash	= Upper(idw_technical.object.ignitability_does_not_flash[ll_tech_row])

	IF ls_fp_na = 'T' OR ls_fp_does_not_flash = 'T' THEN
		idw_technical.object.ignitability[ll_tech_row] = ls_null
	ELSE
		// set from
		IF NOT IsNull(ll_ignitability_compare_temp) THEN
			ls_fp_from = String(ll_ignitability_compare_temp)
			ls_fp_to = String(ll_ignitability_compare_temp)
		ELSEIF ls_fp_lt_90 = 'T' THEN 
			ls_fp_from = '0'
		ELSEIF ls_fp_90_139 = 'T' THEN
			ls_fp_from = '90'
		ELSEIF ls_fp_140_199 = 'T' THEN
			ls_fp_from = '140'
		ELSEIF ls_fp_gte_200 = 'T' THEN
			ls_fp_from = '200'
		END IF

		// set to
		IF IsNull(ll_ignitability_compare_temp) THEN
			IF ls_fp_gte_200 = 'T' THEN
				ls_fp_to = '200'
			ELSEIF ls_fp_140_199 = 'T' THEN
				ls_fp_to = '199'
			ELSEIF ls_fp_90_139 = 'T' THEN
				ls_fp_to = '139'
			ELSEIF ls_fp_lt_90 = 'T' THEN
				ls_fp_to = '90'
			END IF
		END IF
		
		// set the ignitability
		IF Upper(ls_fp_from) <> Upper(ls_fp_to) THEN
			idw_technical.object.ignitability[ll_tech_row] = ls_fp_from + '-' + ls_fp_to
		ELSEIF Upper(ls_fp_from) = Upper(ls_fp_to) THEN
			idw_technical.object.ignitability[ll_tech_row] = ls_fp_from
		END IF
		
		// all set to 'F' or null case
		IF (IsNull(ls_fp_lt_90) OR ls_fp_lt_90 = 'F') AND (IsNull(ls_fp_90_139) OR ls_fp_90_139 = 'F') AND &
			(IsNull(ls_fp_140_199) OR ls_fp_140_199 = 'F') AND (IsNull(ls_fp_gte_200) OR ls_fp_gte_200 = 'F') AND &
			(IsNull(ls_fp_na) OR ls_fp_na = 'F') AND IsNull(ll_ignitability_compare_temp) THEN
			idw_technical.object.ignitability[ll_tech_row] = ls_null
		END IF
	END IF
END IF
end subroutine

public subroutine wf_sync_profile_waste_codes (string as_waste_code_type, string as_waste_code_list, str_waste_code astr_waste_code);
// This fn syncs the waste codes that user added from questions on Profile tab to the Waste Code tab.

boolean	lb_set_primary = FALSE
Int		li_idx
Long		ll_found, ll_ctr, ll_row, ll_rowcount, ll_new_row, ll_profile_id, ll_hdr_row, ll_waste_code_UID, ll_null
Long		ll_default_seq_id
String	ls_waste_code_list, ls_waste_code, ls_waste_code_type, ls_find, ls_primary_flag, ls_null
String	ls_state
Datawindow ldw

SetNull(ls_null)
SetNull(ll_null)

ll_hdr_row = idw_header.getrow()
IF ll_hdr_row > 0 THEN 
	
	ll_profile_id = idw_header.object.profile_id[ll_hdr_row]
	
	// SK Modified for Waste Code Processing
	CHOOSE CASE Upper(as_waste_code_type)	
		CASE 'FTL', 'FTC'
			ldw = idw_waste_code_fed
			
		CASE 'ST', 'SF'
			ldw = idw_waste_code_state
			
		CASE ELSE
			//unknown
	END CHOOSE
		
	ll_rowcount = ldw.Rowcount()
	// Drop the one's from Waste tab, that user dropped on Profile tab
	FOR ll_row = ll_rowcount TO 1 Step -1
		ll_waste_code_UID 	= ldw.object.waste_code_uid[ll_row]
		ls_waste_code 			= ldw.object.waste_code[ll_row]
		ls_state 				= ldw.object.state[ll_row]
		ls_waste_code_type = f_waste_code_type(ll_waste_code_UID)
		IF Upper(ls_waste_code_type) = 'ST' OR Upper(ls_waste_code_type) = 'SF' THEN
			ls_waste_code = ls_state + '-' + ls_waste_code
		END IF
		IF Upper(ls_waste_code_type) = Upper(as_waste_code_type) THEN
			// type matches, decide whether to retain/drop
			IF Pos(as_waste_code_list, ls_waste_code) = 0 THEN
				//drop
				ldw.deleterow(ll_row)
				ll_rowcount --
			END IF
		END IF
	NEXT
	
	// Add codes from the list that are not on the waste code tab
	FOR li_idx = 1 TO astr_waste_code.waste_code_count
		ls_waste_code		= astr_waste_code.waste_code[li_idx]
		ll_waste_code_uid = astr_waste_code.waste_code_uid[li_idx]
//		ls_state				= astr_waste_code.state[li_idx]
//		ll_default_seq_id = astr_waste_code.default_seq_id[li_idx]
		ls_find = 'waste_code_uid = ' + String(ll_waste_code_uid)
		ll_found = ldw.Find(ls_find,1, ldw.rowcount()+1)
		IF ll_found = 0 THEN
			// add to the proper waste code dw
			ll_new_row = ldw.insertrow(0)
			ldw.object.waste_code[ll_new_row] = ls_waste_code
			ldw.object.waste_code_uid[ll_new_row] = ll_waste_code_uid
			ldw.Object.profile_id[ll_new_row] = ll_profile_id
			ldw.object.state[ll_new_row] = ls_state
			ldw.object.default_sequence_id[ll_new_row] = ll_default_seq_id
			CHOOSE CASE Upper(as_waste_code_type)	
				CASE 'FTL', 'FTC'
					ldw.object.include[ll_new_row] = 0
					ldw.object.sequence_flag[ll_new_row] = 'F'
					
				CASE 'ST', 'SF'
					ldw.object.sequence_flag[ll_new_row] = 'A'
					
				CASE ELSE
					//unknown
			END CHOOSE
			
//			IF idw_waste.RowCount() = 1 THEN
//				idw_waste.Object.primary_flag[ll_new_row] = "T"
//				idw_waste.Object.include[ll_new_row] = 1
//				idw_waste.Object.sequence_id[ll_new_row] = 1
//				lb_set_primary = FALSE
//				Post wf_sync_waste_code(ll_waste_code_uid, ls_waste_code, FALSE)
//			ELSE
//				idw_waste.Object.primary_flag[ll_new_row] = "F"
//				idw_waste.Object.include[ll_new_row] = 0
//			END IF						
			ib_changed_waste_code = TRUE
		END IF 
	NEXT

//IF lb_set_primary THEN Post wf_sync_waste_code(ll_null, ls_null, FALSE)
//
END IF
end subroutine

public function integer wf_sync_waste_code (long al_primary_waste_code_uid, string as_primary_waste_code, boolean ab_show_msg);boolean	lb_refresh
integer	li_rc, li_sequence_id, li_sequence_id_primary, li_i, li_null
long		ll_row_detail, ll_row_waste, ll_row_approval, ll_row_primary, ll_row_find, ll_rowcount, ll_waste_code_uid
string	ls_find, ls_msg, ls_top6, ls_waste_code, ls_tmp

// The purpose of this function is to synchronize the surcharge type.  
//
// NOTE: If transship_flag = 'F' then wasteCode.permit_flag must not be 'F' 
// and since we now exclusively select the primary waste code from the
// waste code quick select, the WasteCode.permit_flag will never be 'F'

idw_detail.accepttext()
idw_waste_code_fed.accepttext()
idw_waste_code_state.accepttext()
idw_waste_code_eq.accepttext()
//idw_waste.accepttext()

ll_row_detail = idw_detail.GetRow()
IF ll_row_detail <= 0 THEN RETURN gi_no_action
li_rc = gi_success
ls_msg = ""
lb_refresh = TRUE
SetNull(li_null)
SetNull(ll_waste_code_UID)

// Either no waste codes (deleted from waste code tab) or 
// no primary (deleted from detail tab)
IF IsNull(as_primary_waste_code) THEN
	// Set the surcharge type
	FOR ll_row_approval = 1 TO idw_approval.RowCount()
		li_rc = wf_set_sr_type_code(as_primary_waste_code, al_primary_waste_code_uid, ll_row_approval)
		IF li_rc = gi_failure THEN
			lb_refresh = FALSE
			EXIT
		END IF
	NEXT
	
// We have a primary waste code	
ELSE
	SELECT waste_code, waste_code_uid
		INTO :ls_tmp, :ll_waste_code_uid
		FROM WasteCode (nolock)
		WHERE WasteCode.waste_code_uid = :al_primary_waste_code_uid
	USING itr_share;
	
	IF itr_share.SQLCode < 0 THEN
		MessageBox ("SQL Error", itr_share.SQLErrText, Exclamation!)
		li_rc = gi_failure
	ELSEIF itr_share.SQLCode = 100 THEN
		MessageBox(gs_app_name + ":  Waste Code", "The waste code '" + as_primary_waste_code + "' is not valid.", Exclamation!)
		li_rc = gi_failure
	ELSE
		// Set the surcharge type
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			li_rc = wf_set_sr_type_code(as_primary_waste_code, al_primary_waste_code_uid, ll_row_approval)
			IF li_rc = gi_failure THEN
				lb_refresh = FALSE
				EXIT
			END IF
		NEXT
	END IF
END IF

IF li_rc = gi_success THEN
//	// Set Profile detail waste code
////	IF (IsNull(idw_detail.Object.waste_code[ll_row_detail]) AND NOT IsNull(as_primary_waste_code)) OR &
////		(NOT IsNull(idw_detail.Object.waste_code[ll_row_detail]) AND IsNull(as_primary_waste_code)) OR &
////		idw_detail.Object.waste_code[ll_row_detail] <> as_primary_waste_code THEN
//	IF (IsNull(idw_detail.Object.waste_code_uid[ll_row_detail]) AND NOT IsNull(al_primary_waste_code_uid)) OR &
//		(NOT IsNull(idw_detail.Object.waste_code_uid[ll_row_detail]) AND IsNull(al_primary_waste_code_uid)) OR &
//		idw_detail.Object.waste_code_uid[ll_row_detail] <> al_primary_waste_code_uid THEN	
//		idw_detail.Object.waste_code[ll_row_detail] = as_primary_waste_code
//		idw_detail.Object.waste_code_uid[ll_row_detail] = al_primary_waste_code_uid
//		ib_changed_profile = TRUE
//		
//	END IF
	
	IF lb_refresh = TRUE THEN
		wf_price("REFRESH", 0)
	END IF
END IF

RETURN li_rc
end function

public subroutine wf_populate_wastecodes_wcr (string as_source);// SK 08122013 Modified this function based on the new structure
// Added adw_source to tell which DW called this function and act accordingly
long ll_row,ll_rows, ll_waste_code_uid
string ls_waste_code, ls_state
string ls_waste_code_type, ls_texas_primary_flag
int		li_include




// COR2-MPM
/*AlonB test *   uncommented   */
/*
IF Lower(as_source) = 'fed' OR Lower(as_source) = 'all' THEN
	is_rcra_listed_waste_codes = ""
	is_rcra_characteristic_waste_code = ""
	ll_rows = idw_waste_code_fed.Rowcount()
	FOR ll_row = 1 TO ll_rows
		ll_waste_code_uid = idw_waste_code_fed.object.waste_code_uid[ll_row]
		ls_waste_code 		= idw_waste_code_fed.object.waste_code[ll_row]
		IF IsNull(ll_waste_code_uid) OR ll_waste_code_uid <= 0 THEN CONTINUE
		// new function to determine what type of waste code this is??
		ls_waste_code_type = wf_waste_code_type(ll_waste_code_uid)
		CHOOSE CASE Upper(ls_waste_code_type)
			CASE "FTL" //Fed Listed
				// make sure that we are not fetching duplicates
				IF Pos(Upper(is_rcra_listed_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_rcra_listed_waste_codes > "" then
						is_rcra_listed_waste_codes += " "	
					end if
					is_rcra_listed_waste_codes += ls_waste_code
				END IF				
			CASE "FTC" //Fed Characteristic
				// make sure that we are not fetching duplicates
				IF Pos(Upper(is_rcra_characteristic_waste_code), upper(ls_waste_code)) = 0 THEN
					IF is_rcra_characteristic_waste_code > "" THEN
						is_rcra_characteristic_waste_code += " "
					END IF
					is_rcra_characteristic_waste_code += ls_waste_code
				END IF
			CASE ELSE
		END CHOOSE
	NEXT
END IF	
	
IF Lower(as_source) = 'state' OR Lower(as_source) = 'all' THEN
	is_michigan_haz_waste_codes = ""
	is_michigan_non_haz_waste_codes = ""
	ll_rows = idw_waste_code_state.Rowcount()
	FOR ll_row = 1 TO ll_rows
		ll_waste_code_uid = idw_waste_code_state.object.waste_code_uid[ll_row]
		ls_waste_code 		= idw_waste_code_state.object.waste_code[ll_row]
		ls_state 		   = idw_waste_code_state.object.state[ll_row]
		IF IsNull(ll_waste_code_uid) OR ll_waste_code_uid <= 0 THEN CONTINUE
		// new function to determine what type of waste code this is??
		ls_waste_code_type = wf_waste_code_type(ll_waste_code_uid)
		CHOOSE CASE Upper(ls_waste_code_type)
			CASE "ST" //State Haz
				// make sure that we are not fetching duplicates
				ls_waste_code = ls_state + '-' + ls_waste_code
				IF Pos(Upper(is_michigan_haz_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_michigan_haz_waste_codes > "" then
						is_michigan_haz_waste_codes += " "
					end if
					is_michigan_haz_waste_codes += ls_waste_code
				END IF	
			CASE "SF" //State Non-Haz
				ls_waste_code = ls_state + '-' + ls_waste_code
				// make sure that we are not fetching duplicates
				IF Pos(Upper(is_michigan_non_haz_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_michigan_non_haz_waste_codes > "" then
						is_michigan_non_haz_waste_codes += " "
					end if
					is_michigan_non_haz_waste_codes += ls_waste_code
				END IF		
			CASE ELSE
		END CHOOSE
	NEXT
END IF	
/*AlonB test *   uncommented   */
*/


// COR2-MPM
/*AlonB test *   commented   */

IF Lower(as_source) = 'fed' OR Lower(as_source) = 'all' THEN
	is_rcra_waste_codes = ""
	ll_rows = idw_waste_code_fed.Rowcount()
		//DevOps:15851
	idw_waste_code_fed.SetSort(" waste_code A" )
	idw_waste_code_fed.Sort()
	FOR ll_row = 1 TO ll_rows
		ll_waste_code_uid = idw_waste_code_fed.object.waste_code_uid[ll_row]
		ls_waste_code 		= idw_waste_code_fed.object.waste_code[ll_row]
		li_include 		= idw_waste_code_fed.object.include[ll_row]
		IF IsNull(ll_waste_code_uid) OR ll_waste_code_uid <= 0 /*OR li_include = 0*/ THEN CONTINUE
		// new function to determine what type of waste code this is??
		ls_waste_code_type = wf_waste_code_type(ll_waste_code_uid)
		CHOOSE CASE Upper(ls_waste_code_type)
			CASE "FTL" //Fed Haz Listed
				IF Pos(Upper(is_rcra_listed_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_rcra_listed_waste_codes > "" then
						is_rcra_listed_waste_codes += " "	
					end if
					is_rcra_listed_waste_codes += ls_waste_code
				END IF				
				// make sure that we are not fetching duplicates
				IF Pos(Upper(is_rcra_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_rcra_waste_codes > "" then
						is_rcra_waste_codes += " "	
					end if
					is_rcra_waste_codes += ls_waste_code
					is_rcra_waste_codes_for_g4 [ll_row] = ls_waste_code //is_rcra_waste_codes_for_g4 += "'" + ls_waste_code + "'" + ','	
				END IF				
			CASE "FTC" //Fed Haz Characteristic
				// make sure that we are not fetching duplicates
				IF Pos(Upper(is_rcra_characteristic_waste_code), upper(ls_waste_code)) = 0 THEN
					IF is_rcra_characteristic_waste_code > "" THEN
						is_rcra_characteristic_waste_code += " "
					END IF
					is_rcra_characteristic_waste_code += ls_waste_code
				END IF
				// make sure that we are not fetching duplicates
				IF Pos(Upper(is_rcra_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_rcra_waste_codes > "" then
						is_rcra_waste_codes += " "	
					end if
					is_rcra_waste_codes += ls_waste_code
					is_rcra_waste_codes_for_g4 [ll_row] = ls_waste_code   //is_rcra_waste_codes_for_g4 += "'" + ls_waste_code + "'" + ','					
				END IF				
			CASE ELSE
		END CHOOSE
	NEXT
END IF	
	
IF Lower(as_source) = 'state' OR Lower(as_source) = 'all' THEN
	is_state_waste_codes = ""
	//DevOps:21145 - When retrieve multiple profiles, use the green arrows to navigate through the profiles and verify that E1 is not setting properly
	is_tx_state_waste_codes = ""
	ll_rows = idw_waste_code_state.Rowcount()
	FOR ll_row = 1 TO ll_rows
		ll_waste_code_uid = idw_waste_code_state.object.waste_code_uid[ll_row]
		ls_waste_code 		= idw_waste_code_state.object.waste_code[ll_row]
		ls_state 		   = idw_waste_code_state.object.state[ll_row]
		ls_texas_primary_flag =  idw_waste_code_state.object.texas_primary_flag[ll_row]
		// Exclude PA waste codes - these will be populated in is_pa_state_waste_codes
		IF IsNull(ll_waste_code_uid) OR ll_waste_code_uid <= 0 OR ls_state = 'PA'  THEN CONTINUE
		// new function to determine what type of waste code this is??
		ls_waste_code_type = wf_waste_code_type(ll_waste_code_uid)
		CHOOSE CASE Upper(ls_waste_code_type)
			CASE "ST", "SF" //State Haz, State Non-Haz
				// make sure that we are not fetching duplicates
				 IF  ls_state <> 'TX' THEN 
			     	ls_waste_code = ls_state + '-' + ls_waste_code
				ELSE 
					ls_waste_code =  ls_waste_code
				END IF
				IF Pos(Upper(is_state_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_state_waste_codes > "" then
						IF ls_state <> 'TX' THEN 
						    is_state_waste_codes += " "
						END IF
					end if
					    	IF ls_state <> 'TX' THEN 
					        is_state_waste_codes += ls_waste_code
					     END IF
				END IF	
				
				IF Pos(Upper(is_tx_state_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_tx_state_waste_codes > "" then
						is_tx_state_waste_codes += " "
					end if
					IF ls_state = 'TX' AND is_tx_state_waste_codes = "" AND ls_texas_primary_flag = 'T' THEN 
 					    is_tx_state_waste_codes += ls_waste_code
					END IF
				END IF	
				
			CASE ELSE
		END CHOOSE
	NEXT
END IF			

IF Lower(as_source) = 'pa_state' OR Lower(as_source) = 'all' THEN
	is_pa_state_waste_codes = ""
	ll_rows = idw_waste_code_state.Rowcount()
	FOR ll_row = 1 TO ll_rows
		ll_waste_code_uid = idw_waste_code_state.object.waste_code_uid[ll_row]
		ls_waste_code 		= idw_waste_code_state.object.waste_code[ll_row]
		ls_state 		   = idw_waste_code_state.object.state[ll_row]
		IF IsNull(ll_waste_code_uid) OR ll_waste_code_uid <= 0 OR ls_state <> 'PA' THEN CONTINUE
		// new function to determine what type of waste code this is??
		ls_waste_code_type = wf_waste_code_type(ll_waste_code_uid)
		CHOOSE CASE Upper(ls_waste_code_type)
			CASE "ST", "SF" //State Haz, State Non-Haz
				// make sure that we are not fetching duplicates
				//ls_waste_code = ls_state + '-' + ls_waste_code
				IF Pos(Upper(is_pa_state_waste_codes), upper(ls_waste_code)) = 0 THEN
					if is_pa_state_waste_codes > "" then
						is_pa_state_waste_codes += " "
					end if
					is_pa_state_waste_codes += ls_waste_code
				END IF	
			CASE ELSE
		END CHOOSE
	NEXT
END IF						
/*AlonB test *   commented   */

end subroutine

public function string wf_waste_code_type (long al_waste_code_uid);// Find the waste Code type
string	ls_return
string	ls_waste_type, ls_waste_code_origin, ls_haz_flag

IF IsNull(al_waste_code_uid) THEN
	ls_return = ''		// Not found
ELSE
	SELECT WasteCode.haz_flag, WasteCode.waste_code_origin, WasteCode.waste_type_code   
		INTO :ls_haz_flag, :ls_waste_code_origin, :ls_waste_type
	FROM WasteCode (nolock)    
	WHERE WasteCode.waste_code_uid = :al_waste_code_uid
	USING itr_share;
		
	IF itr_share.SQLCode < 0 THEN
		MessageBox ("SQL Error", itr_share.SQLErrText, exclamation!)
	ELSEIF itr_share.SQLCode = 100 THEN
		MessageBox ("wf_waste_code_type", "Unknown waste code: UID:" + String(al_waste_code_uid), exclamation!)
	END IF

	ls_return = ls_waste_code_origin + ls_haz_flag
	IF ls_waste_code_origin = "F" THEN
		ls_return += left(ls_waste_type,1)
	END IF
END IF

RETURN ls_return
end function

public subroutine wf_set_waste_code_sequence (datawindow adw);// SK 08/13/2013 This fn sets the sequence ID for the calling Datawindow
Int		li_seq, li_max_seq, li_include, li_count, li_rc, li_null
Long		ll_row, ll_rowcount, ll_row_header
String	ls_seq_flag, ls_state, ls_orig_filter , ls_filter

li_max_seq = 6 // applies only for Fed and EQ
SetNull(li_null)

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
END IF

CHOOSE CASE Lower(adw.Dataobject)
	CASE 'd_profile_waste_code_federal'
		// fed uses top6_renumber fn
//		// assign top 6 fed
//		li_seq = 0
//		ll_rowcount = adw.Rowcount()
//		FOR ll_row = 1 TO ll_rowcount
//			li_include = adw.object.include[ll_row]
//			IF li_include = 1 THEN
//				li_seq++
//				IF li_seq <= li_max_seq THEN
//					adw.object.sequence_id[ll_row] = li_seq
//				ELSE
//					EXIT
//				END IF
//			END IF
//		NEXT
//		adw.sort()
		
	CASE 'd_profile_waste_code_state'
		ll_rowcount = adw.Rowcount()
		IF ll_rowcount > 0 THEN
			// Sequence_flag = 'B'
			li_seq = 0
			FOR ll_row = 1 TO adw.Rowcount()
				ls_seq_flag = adw.object.sequence_flag[ll_row]
				IF Upper(ls_seq_flag) = 'B' THEN
					li_seq++
					adw.object.sequence_id[ll_row] = li_seq
				END IF
			NEXT
			// Sequence_flag = 'A'
			li_seq = 0
			FOR ll_row = 1 TO adw.Rowcount()
				ls_seq_flag = adw.object.sequence_flag[ll_row]
				IF Upper(ls_seq_flag) = 'A' THEN
					li_seq++
					adw.object.sequence_id[ll_row] = li_seq
				END IF
			NEXT
			// Sequence_flag = 'O'
			li_seq = 0
			FOR ll_row = 1 TO adw.Rowcount()
				ls_seq_flag = adw.object.sequence_flag[ll_row]
				IF Upper(ls_seq_flag) = 'O' THEN
					li_seq++
					adw.object.sequence_id[ll_row] = li_seq
				END IF
			NEXT
//			adw.sort()
//			adw.groupcalc()
		END IF
			
	CASE 'd_profile_waste_code_eq'
		// assign top 6 EQ, State waste codes should have a sequence_id set before working on EQ codes
		ll_rowcount = adw.Rowcount()
		IF ll_rowcount > 0 THEN
			// find the count of state waste codes set optional
			idw_waste_code_state.Setredraw(FALSE)
			ls_filter = "Upper(Sequence_flag) = 'O'"
			idw_waste_code_state.SetFilter(ls_filter)
			idw_waste_code_state.Filter()
			li_seq = idw_waste_code_state.Rowcount()
			li_max_seq = li_seq + 6 
			idw_waste_code_state.SetFilter('')
			idw_waste_code_state.Filter()
			idw_waste_code_state.Sort()
			idw_waste_code_state.GroupCalc()
			idw_waste_code_state.Setredraw(TRUE)
			FOR ll_row = 1 TO ll_rowcount
				li_include = adw.object.include[ll_row]
				IF li_include = 1 THEN
					li_seq++
					IF li_seq <= li_max_seq THEN
						adw.object.sequence_id[ll_row] = li_seq
					ELSE
						adw.object.sequence_id[ll_row] = li_null
					END IF
				ELSE
					adw.object.sequence_id[ll_row] = li_null
				END IF
			NEXT
		END IF
		
	CASE ELSE
END CHOOSE
end subroutine

public subroutine wf_set_primary_waste_code ();// The purpose of this function is to set Primary waste code
/*
	i.	First federal
	ii.  If there are no federals, then check if there is only one state(eg:MI) or multiple states (eg:MI, TX, CA) waste codes.  
	iii. If only one state exists, then assign the lowest sequence on that state as primary:
			1.	Lowest sequence before
			2.	Lowest sequence after
			3.	Lowest sequene optional
	iv. If more than one state exists, then check if there are EQ waste codes
	v.	If EQ waste codes exist then assign lowest sequence EQ code as primary.
	vi. If EQ codes don't exist then assign in following order:
			1.	First lowest sequence before
			2.	First lowest sequence After
			3.	First lowest sequence optional

*/
Boolean	lb_multi_state, lb_change_primary_waste
Int		li_rc
Long		ll_row, ll_rowcount, ll_found_row, ll_row_header, ll_waste_code_uid, ll_null, ll_found_none_primary, ll_found_other
String	ls_find, ls_short_waste_code, ls_null, ls_prev_state, ls_curr_state, ls_generic_flag, ls_labpack_flag
Datawindow	ldw

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
END IF

SetNull(ll_null)
SetNull(ls_null)

//reset
FOR ll_row = 1 TO idw_waste_code_fed.Rowcount()
	idw_waste_code_fed.object.primary_flag[ll_row] = 'F'
NEXT
FOR ll_row = 1 TO idw_waste_code_state.Rowcount()
	idw_waste_code_state.object.primary_flag[ll_row] = 'F'
NEXT
FOR ll_row = 1 TO idw_waste_code_eq.Rowcount()
	idw_waste_code_eq.object.primary_flag[ll_row] = 'F'
NEXT
idw_header.object.waste_code_uid[ll_row_header] = ll_null
idw_header.object.waste_code[ll_row_header] 		= ls_null

ls_find = 'sequence_id = 1'
ll_found_row = idw_waste_code_fed.Find(ls_find, 1, idw_waste_code_fed.Rowcount()+1)
IF ll_found_row > 0 THEN
	ll_waste_code_uid 	= idw_waste_code_fed.object.waste_code_uid[ll_found_row]
	ls_short_waste_code	= idw_waste_code_fed.object.ProfileWasteCode_waste_code[ll_found_row]
	idw_waste_code_fed.object.primary_flag[ll_found_row] = 'T'
	idw_header.object.waste_code_uid[ll_row_header] = ll_waste_code_uid
	idw_header.object.waste_code[ll_row_header] 		= ls_short_waste_code
	//POST wf_sync_waste_code(ll_waste_code_uid, ls_short_waste_code, FALSE )
ELSE
	// Fed waste code with sequence_id 1 dont exist, How many different states exist ? 
	// IF only one state then set lowest sequence as primary
	ll_rowcount = idw_waste_code_state.Rowcount()
	IF ll_rowcount > 0 THEN
		SetNull(ls_prev_state)
		lb_multi_state = FALSE
		FOR ll_row = 1 TO ll_rowcount
			ls_curr_state = idw_waste_code_state.object.state[ll_row]
			IF ll_row = 1 THEN 
				ls_prev_state = ls_curr_state
			ELSE 
				IF Upper(ls_prev_state) <> Upper(ls_curr_state) THEN
					lb_multi_state = TRUE
					EXIT // no need to continue
				ELSE
					ls_prev_state = ls_curr_state
				END IF
			END IF
		NEXT
		IF lb_multi_state THEN
			// try to set eq waste code as primary if exist
			ls_find = "sequence_id = 1"
			ll_found_row = idw_waste_code_eq.Find(ls_find, 1, idw_waste_code_eq.Rowcount()+1)
			IF ll_found_row > 0 THEN
				ldw = idw_waste_code_eq
			ELSE
				ldw = idw_waste_code_state
			END IF
		ELSE
			// set state lowest sequence as primary
			ldw = idw_waste_code_state
		END IF
	ELSE
		// no state waste codes, any EQ codes with seq id 1??
		ls_find = "sequence_id = 1"
		ll_found_row = idw_waste_code_eq.Find(ls_find, 1, idw_waste_code_eq.Rowcount()+1)
		IF ll_found_row > 0 THEN
			ldw = idw_waste_code_eq	
		ELSE
			// no fed waste codes with seq id 1, no state waste codes, no eq waste codes with seq id 1
			// cannot set primary !!!!!
		END IF
	END IF
		
	// IF ldw is valid, check what it is and set primary accordingly
	IF Isvalid(ldw) THEN
		CHOOSE CASE lower(ldw.dataobject)
			CASE 'd_profile_waste_code_state'
				ls_find = "Upper(sequence_flag) = 'B' AND sequence_id = 1"
				ll_found_row = idw_waste_code_state.Find(ls_find, 1, idw_waste_code_state.Rowcount()+1)
				IF ll_found_row > 0 THEN
					ll_waste_code_uid = idw_waste_code_state.object.waste_code_uid[ll_found_row]
					ls_short_waste_code = idw_waste_code_state.object.ProfileWasteCode_waste_code[ll_found_row]
					idw_waste_code_state.object.primary_flag[ll_found_row] = 'T'
					idw_header.object.waste_code_uid[ll_row_header] = ll_waste_code_uid
					idw_header.object.waste_code[ll_row_header] 		= ls_short_waste_code
					//POST wf_sync_waste_code(ll_waste_code_uid, ls_short_waste_code, FALSE )
				ELSE
					ls_find = "Upper(sequence_flag) = 'A' AND sequence_id = 1"
					ll_found_row = idw_waste_code_state.Find(ls_find, 1, idw_waste_code_state.Rowcount()+1)
					IF ll_found_row > 0 THEN
						ll_waste_code_uid = idw_waste_code_state.object.waste_code_uid[ll_found_row]
						ls_short_waste_code = idw_waste_code_state.object.ProfileWasteCode_waste_code[ll_found_row]
						idw_waste_code_state.object.primary_flag[ll_found_row] = 'T'
						idw_header.object.waste_code_uid[ll_row_header] = ll_waste_code_uid
						idw_header.object.waste_code[ll_row_header] 		= ls_short_waste_code
						//POST wf_sync_waste_code(ll_waste_code_uid, ls_short_waste_code, FALSE )
					ELSE
						ls_find = "Upper(sequence_flag) = 'O' AND sequence_id = 1"
						ll_found_row = idw_waste_code_state.Find(ls_find, 1, idw_waste_code_state.Rowcount()+1)
						IF ll_found_row > 0 THEN
							ll_waste_code_uid = idw_waste_code_state.object.waste_code_uid[ll_found_row]
							ls_short_waste_code = idw_waste_code_state.object.ProfileWasteCode_waste_code[ll_found_row]
							idw_waste_code_state.object.primary_flag[ll_found_row] = 'T'
							idw_header.object.waste_code_uid[ll_row_header] = ll_waste_code_uid
							idw_header.object.waste_code[ll_row_header] 		= ls_short_waste_code
							//POST wf_sync_waste_code(ll_waste_code_uid, ls_short_waste_code, FALSE )
						END IF
					END IF
				END IF
				
			CASE 'd_profile_waste_code_eq'
				
				// Dipankar - 03/19/2024 - Primary Waste Code update logic modified for #73446 for considering Non Generic, Non-Lab Pack, NONE Primary Waste Scenario
				ls_generic_flag = idw_header.Object.generic_flag[ll_row_header]
				ls_labpack_flag = idw_header.Object.labpack_flag[ll_row_header]
				
				IF IsNull(ls_generic_flag) THEN ls_generic_flag = 'F'
				IF IsNull(ls_labpack_flag) THEN ls_labpack_flag = 'F'								
				
				IF ls_generic_flag <> 'T' AND ls_labpack_flag <> 'T' THEN				
					ll_found_none_primary = idw_waste_code_eq.Find("sequence_id = 1 AND waste_code_uid = 751", 1, idw_waste_code_eq.Rowcount()) // NONE - Waste Code UID (751)
					
					IF ll_found_none_primary > 0 THEN
						ll_found_other = idw_waste_code_eq.Find("waste_code_uid <> 751", 1, idw_waste_code_eq.Rowcount())
					ELSE
						ll_found_row =  idw_waste_code_eq.Find("sequence_id = 1", 1, idw_waste_code_eq.Rowcount())
					END IF
					
					IF ll_found_other > 0 THEN
						ll_found_row = ll_found_other
						lb_change_primary_waste = TRUE
					ELSEIF ll_found_none_primary > 0 THEN
						ll_found_row = ll_found_none_primary										
					END IF					
				ELSE
					ls_find = "sequence_id = 1"
					ll_found_row = idw_waste_code_eq.Find(ls_find, 1, idw_waste_code_eq.Rowcount()+1)
					/* // Dipankar - 03/21/2024 - Below logic commented for #73446, this is taken care of later in the code 
					IF ll_found_row > 0 THEN
						ll_waste_code_uid = idw_waste_code_eq.object.waste_code_uid[ll_found_row]
						ls_short_waste_code = idw_waste_code_eq.object.ProfileWasteCode_waste_code[ll_found_row]
						idw_waste_code_eq.object.primary_flag[ll_found_row] = 'T'
						idw_header.object.waste_code_uid[ll_row_header] = ll_waste_code_uid
						idw_header.object.waste_code[ll_row_header] 		= ls_short_waste_code
						//POST wf_sync_waste_code(ll_waste_code_uid, ls_short_waste_code, FALSE )
					END IF
					*/
				END IF
				
				IF ll_found_row > 0 THEN
					ll_waste_code_uid = idw_waste_code_eq.object.waste_code_uid[ll_found_row]
					ls_short_waste_code =  idw_waste_code_eq.object.ProfileWasteCode_waste_code[ll_found_row]					
					idw_waste_code_eq.object.primary_flag[ll_found_row] = 'T'
					idw_header.object.waste_code_uid[ll_row_header] = ll_waste_code_uid 
					idw_header.object.waste_code	[ll_row_header] 	  = ls_short_waste_code
				END IF
				
				IF lb_change_primary_waste THEN
					idw_waste_code_eq.object.sequence_id[ll_found_none_primary] = idw_waste_code_eq.object.sequence_id[ll_found_row]
					idw_waste_code_eq.object.primary_flag[ll_found_none_primary] = 'F'
					
					idw_waste_code_eq.object.sequence_id[ll_found_row] = 1
					MessageBox(gs_app_name + ": Set Primary Waste Code", ls_short_waste_code + " has been updated to be the primary waste code.")
				END IF
			CASE ELSE
				// no ldw, can't set primary
		END CHOOSE
	END IF
END IF

end subroutine

public function integer wf_set_sr_type_code (string as_waste_code, long al_waste_code_uid, long al_row_approval);Boolean	lb_change_value = FALSE, lb_haz = FALSE, lb_non_haz = FALSE
datetime	ldt_null
long		ll_row_quoteheader, ll_row_detail, ll_row
integer	li_company_id, li_profit_ctr_id, li_rc, li_response
long		ll_waste_code_uid, ll_found_row
string	ls_surcharge_flag, ls_sr_type_code, ls_waste_type_code, ls_haz_flag, ls_approval, ls_null
string	ls_transship, ls_override_profile_sr_type, ls_waste_code_origin, ls_state, ls_find

SetNull(ldt_null)
SetNull(ls_null)
li_rc = gi_success

// NOTE: If transship_flag = 'T' AND the profit center allows you to override
// the surcharge type, then users can select 'P'erp Care (aka Tranship in companies 27, 28)
// even though the waste code should force it to 'H'az.

ll_row_detail = idw_detail.GetRow()
li_company_id = idw_approval.Object.company_id[al_row_approval]
li_profit_ctr_id = idw_approval.Object.profit_ctr_id[al_row_approval]

IF ll_row_detail > 0 THEN
	ls_transship = idw_detail.Object.transship_flag[ll_row_detail]
	IF IsNull(ls_transship) THEN ls_transship = "F"

	SELECT ISNULL(override_profile_sr_type_flag, 'F')
		INTO :ls_override_profile_sr_type
		FROM ProfitCenter
		WHERE company_id = :li_company_id
		AND profit_ctr_id = :li_profit_ctr_id
	USING itr_share;
ELSE
	ls_override_profile_sr_type = "F"
END IF

// Validate Surcharge type against primary waste code
IF IsNull(as_waste_code) THEN
	IF NOT IsNull(idw_approval.Object.sr_type_code[al_row_approval]) AND &
		idw_approval.Object.sr_type_code[al_row_approval] <> "E" THEN
		
		// Check Confirm status
		IF IsNull(idw_approval.Object.confirm_update_date[al_row_approval]) THEN
			idw_approval.Object.sr_type_code[al_row_approval] = "E"
		ELSE
			ls_approval = idw_approval.Object.approval_code[al_row_approval]
			li_response = MessageBox(gs_app_name + ":  Surcharge Type", "A change in the surcharge type will unconfirm pricing for Approval " + ls_approval + ".~rDo you want to continue?", Question!, YesNo!, 1)
			IF li_response = 1 THEN
				idw_approval.Object.sr_type_code[al_row_approval] = "E"
				idw_approval.Object.confirm_update_date[al_row_approval] = ldt_null
				idw_approval.Object.confirm_update_by[al_row_approval] = ls_null
				idw_approval.Object.confirm_author[al_row_approval] = ls_null
			ELSE
				li_rc = gi_failure
			END IF
		END IF
	END IF

// Waste code is NOT Null
ELSE
	ls_surcharge_flag = idw_approval.Object.profitcenter_surcharge_flag[al_row_approval]
	ls_sr_type_code = idw_approval.Object.sr_type_code[al_row_approval]
	
	// This profit center does not control surcharge price
	IF ls_surcharge_flag = "F" THEN
		IF ls_sr_type_code <> "E" THEN
			idw_approval.Object.sr_type_code[al_row_approval] = "E"
		END IF
		
	// This profit center does
	ELSEIF ls_surcharge_flag = "T" THEN
		
		// Preserve a change to Exempt
		IF idw_approval.Object.sr_type_code[al_row_approval] = "E" THEN
			// Do nothing
		ELSE
			// Check type of waste
			SELECT waste_type_code, haz_flag, waste_code_origin, WasteCode.state
				INTO :ls_waste_type_code, :ls_haz_flag, :ls_waste_code_origin, :ls_state
				FROM WasteCode, WasteCodeXProfitCenter
				WHERE WasteCode.waste_code_uid = WastecodeXProfitCenter.waste_code_uid
				and WastecodeXProfitCenter.waste_code_uid= :al_waste_code_uid
				AND WastecodeXProfitCenter.company_id = :li_company_id
				AND WastecodeXProfitCenter.profit_ctr_id = :li_profit_ctr_id
			USING itr_share;
			IF itr_share.SQLCode < 0 THEN
				MessageBox ("SQL Error", itr_share.SQLErrText, Exclamation!)
			ELSE
				IF Upper(ls_waste_code_origin) = 'F' OR (Upper(ls_waste_code_origin) = 'S' AND Upper(ls_state) = 'MI')THEN
					lb_change_value = TRUE
					IF ls_haz_flag = "T" THEN
						lb_haz = TRUE // Hazardous waste
					ELSEIF ls_waste_type_code = "N" THEN
						lb_non_haz = TRUE  // Non-Hazardous waste
					END IF
				ELSE
					// primary, not a federal waste code, not a MI State code check if there are any MI waste codes that are HAZ
					ls_find = "Upper(state) = 'MI'"
					ll_found_row = idw_waste_code_state.Find(ls_find, 1, idw_waste_code_state.rowcount()+1)
					IF ll_found_row <= 0 THEN
						// there are no MI waste codes, no fed waste codes
						lb_change_value = TRUE
						lb_non_haz = TRUE
					ELSE
						FOR ll_row = 1 TO idw_waste_code_state.rowcount()
							ls_state 			= idw_waste_code_state.object.state[ll_row]
							ll_waste_code_uid = idw_waste_code_state.object.waste_code_uid[ll_row]
							IF Upper(ls_state) = 'MI' THEN
								lb_change_value = TRUE
								SELECT haz_flag
								INTO :ls_haz_flag
								FROM WasteCode
								WHERE WasteCode.waste_code_uid = :ll_waste_code_uid
								USING itr_share;
								IF itr_share.SQLCode < 0 THEN
									MessageBox ("SQL Error", itr_share.SQLErrText, Exclamation!)
								ELSEIF Upper(ls_haz_flag) = 'T' THEN
									lb_haz = TRUE // Hazardous waste
									EXIT
								ELSE
									lb_non_haz = TRUE // Non-Hazardous waste
								END IF
							END IF
						NEXT
					END IF
				END IF
				
				IF lb_change_value THEN
					IF lb_haz THEN
						IF IsNull(idw_approval.Object.sr_type_code[al_row_approval]) OR &
							idw_approval.Object.sr_type_code[al_row_approval] <> "H" THEN
							
							IF ls_override_profile_sr_type = "T" AND ls_transship = "T" THEN
								// Don't automatically set this to Hazardous;
								// user can leave this as Perp Care / Tranship
							ELSE
								// Check Confirm status
								IF IsNull(idw_approval.Object.confirm_update_date[al_row_approval]) THEN
									// Not confirmed
									// MPM - 6/26/2020 - DevOps 16552 - Inform the user why the surcharge type is being changed
									ls_approval = idw_approval.Object.approval_code[al_row_approval]
									MessageBox(gs_app_name + ":  Surcharge Type", 'The surcharge type for Approval ' + ls_approval + ' will be set to "Hazardous" because the profile contains hazardous waste.')
									idw_approval.Object.sr_type_code[al_row_approval] = "H"
								ELSE
									// Confirmed
									ls_approval = idw_approval.Object.approval_code[al_row_approval]
									li_response = MessageBox(gs_app_name + ":  Surcharge Type", "A change in the surcharge type will unconfirm pricing for Approval " + ls_approval + ".~rDo you want to continue?", Question!, YesNo!, 1)
									IF li_response = 1 THEN
										idw_approval.Object.sr_type_code[al_row_approval] = "H"
										idw_approval.Object.confirm_update_date[al_row_approval] = ldt_null
										idw_approval.Object.confirm_update_by[al_row_approval] = ls_null
										idw_approval.Object.confirm_author[al_row_approval] = ls_null
									ELSE
										li_rc = gi_failure
									END IF
								END IF
							END IF
						END IF
					ELSEIF lb_non_haz THEN
						IF idw_approval.Object.company_id[al_row_approval] = 3 THEN
							// Company 3 - Wayne Disposal (WDI)
							IF IsNull(idw_approval.Object.sr_type_code[al_row_approval]) OR &
								idw_approval.Object.sr_type_code[al_row_approval] <> "E" THEN
							
								// Check Confirm status
								IF IsNull(idw_approval.Object.confirm_update_date[al_row_approval]) THEN
									// MPM - 6/26/2020 - DevOps 16552 - Inform the user why the surcharge type is being changed
									ls_approval = idw_approval.Object.approval_code[al_row_approval]
									MessageBox(gs_app_name + ":  Surcharge Type", 'The surcharge type for Approval ' + ls_approval + ' will be set to "Exempt".')
									idw_approval.Object.sr_type_code[al_row_approval] = "E"
								ELSE
									ls_approval = idw_approval.Object.approval_code[al_row_approval]
									li_response = MessageBox(gs_app_name + ":  Surcharge Type", "A change in the surcharge type will unconfirm pricing for Approval " + ls_approval + ".~rDo you want to continue?", Question!, YesNo!, 1)
									IF li_response = 1 THEN
										idw_approval.Object.sr_type_code[al_row_approval] = "E"
										idw_approval.Object.confirm_update_date[al_row_approval] = ldt_null
										idw_approval.Object.confirm_update_by[al_row_approval] = ls_null
										idw_approval.Object.confirm_author[al_row_approval] = ls_null
									ELSE
										li_rc = gi_failure
									END IF
								END IF
							END IF
						ELSE
							// All other companies
							IF IsNull(idw_approval.Object.sr_type_code[al_row_approval]) OR &
								idw_approval.Object.sr_type_code[al_row_approval] <> "P" THEN
							
								// Check Confirm status
								IF IsNull(idw_approval.Object.confirm_update_date[al_row_approval]) THEN
									// MPM - 6/26/2020 - DevOps 16552 - Inform the user why the surcharge type is being changed
									ls_approval = idw_approval.Object.approval_code[al_row_approval]
									MessageBox(gs_app_name + ":  Surcharge Type", 'The surcharge type for Approval ' + ls_approval + ' will be set to "Perp Care" because the profile does not contain hazardous waste.')
									idw_approval.Object.sr_type_code[al_row_approval] = "P"
								ELSE
									ls_approval = idw_approval.Object.approval_code[al_row_approval]
									li_response = MessageBox(gs_app_name + ":  Surcharge Type", "A change in the surcharge type will unconfirm pricing for Approval " + ls_approval + ".~rDo you want to continue?", Question!, YesNo!, 1)
									IF li_response = 1 THEN
										idw_approval.Object.sr_type_code[al_row_approval] = "P"
										idw_approval.Object.confirm_update_date[al_row_approval] = ldt_null
										idw_approval.Object.confirm_update_by[al_row_approval] = ls_null
										idw_approval.Object.confirm_author[al_row_approval] = ls_null
									ELSE
										li_rc = gi_failure
									END IF
								END IF
							END IF
						END IF
					END IF
				END IF
			END IF
		END IF
	END IF
END IF

// Keep the quoteheader in sync
IF li_rc = gi_success AND idw_approval.Object.primary_facility_flag[al_row_approval] = "T" THEN
	ll_row_quoteheader = idw_quoteheader.GetRow()
	IF ll_row_quoteheader > 0 THEN
		IF IsNull(idw_quoteheader.Object.sr_type_code[ll_row_quoteheader]) OR &
			idw_quoteheader.Object.sr_type_code[ll_row_quoteheader] <> &
			idw_approval.Object.sr_type_code[al_row_approval] THEN
			idw_quoteheader.Object.sr_type_code[ll_row_quoteheader] = &
			idw_approval.Object.sr_type_code[al_row_approval] 
		END IF
	END IF
END IF

RETURN li_rc
end function

public subroutine wf_build_dot_shipping_desc ();//Modifications
//DevOps #13742 01/29/2020 info_gde;  Add New Profile (Profile Tab) - Section C. Multiple prevent shipping name from being cropped off start
//DevOps #14700 03/10/2020 info_gde;  EQAI - Maintenance - COR  - Form Management - New Profile - Accept
// Builds dot shipping desc
//DevOps #14700 info_gde 03/25/2020;  EQAI - Maintenance - COR  - Form Management - New Profile - Accept

long		ll_un_na, ll_erg_num, ll_row
string	ls_erg_suff, ls_man_dot_sp, ls_DOT_shipping_desc,ls_man_dot_sp_additional,ls_profile_dragon_date
string	ls_un_na_flag, ls_dot_name, ls_null, ls_haz_class, ls_sub_haz_class, ls_pg, ls_rq, ls_rq_reason
SetNull(ls_null)

IF is_access = "V" OR is_access = "P" THEN
	RETURN
END IF
			
IF idw_header.getrow() > 0 THEN
	//17661 - Moved code inside getrow
	//DevOps 17341 info_gde; 09/30/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
    IF ib_docs_pending AND ib_posted_docs_pending=FALSE THEN 
		POST wf_docs_pending_msg()
		ib_posted_docs_pending=TRUE
	End If

	SELECT config_value
	INTO :ls_profile_dragon_date
	FROM Configuration
	WHERE config_key = 'profile_dragon_date'
	USING gtr_share;
				
	IF gtr_share.SQLCode = 100 THEN	
		MessageBox ("SQL Error", "The profile Dragon date was not found in the Configuration table.", Exclamation!)
		RETURN 
	ELSEIF gtr_share.SQLCode < 0 THEN
		MessageBox ("SQL Error", gtr_share.SQLErrText, Exclamation!)
		RETURN 
	END IF
	
	ll_row = idw_shipping.getrow()
	
	// MPM - 6/8/2020 - DevOps 16182 - Need to set the shipping dw row if it isn't currently set (like after copying a profile)
	IF ll_row < 1 AND idw_shipping.RowCount() > 0 THEN ll_row = idw_shipping.RowCount()
	
IF ll_row > 0 THEN 	
	// get values
	ls_un_na_flag 	= idw_shipping.object.un_na_flag[ll_row]
	ll_un_na			= idw_shipping.object.un_na_number[ll_row]
	ll_erg_num		= idw_shipping.object.erg_number[ll_row]
	ls_erg_suff		= idw_shipping.object.erg_suffix[ll_row]
	// MPM - 7/10/2020 - DevOps 16735 
	ls_dot_name = idw_shipping.object.dot_shipping_name[ll_row]
	ls_haz_class	= idw_shipping.object.hazmat_class[ll_row]
	ls_sub_haz_class	= idw_shipping.object.subsidiary_haz_mat_class[ll_row]
	
	//DevOps #14700 03/10/2020 - start
	//20200508 jcb #15547 repl 	If len(trim(ls_sub_haz_class)) = 1 Then ls_sub_haz_class = ''
	If len(trim(ls_sub_haz_class)) = 1 and ls_sub_haz_class = ',' Then ls_sub_haz_class = ''
	//DevOps #14700 03/10/2020 - end
	
	//DevOps #14700 info_gde 03/25/2020 - start
	ls_pg				= idw_shipping.object.package_group[ll_row]
	if ls_pg='N/A' then 
		ls_pg=ls_null
		idw_shipping.object.package_group[ll_row] = ls_pg
		
	end if
	//DevOps #14700 info_gde 03/25/2020
	
	ls_rq				= idw_shipping.object.reportable_quantity_flag[ll_row]
	ls_rq_reason	= idw_shipping.object.rq_reason[ll_row]
	ls_man_dot_sp	= idw_shipping.object.manifest_dot_sp_number[ll_row]
	//DevOps:17915 - Added trim to avoid space issue 
	ls_man_dot_sp_additional 	= Trim(  idw_shipping.object.dot_shipping_desc_additional[ll_row] , TRUE )

		//Task:10231 - Added C 2 DOT Shipping Name Additional Description fro dragon
		// rb 01/21/2016 GEM:35823 DOT Shipping description correction (function changed to match the MIM)
		// MPM - 9/3/2020 - DevOps 16816 - Modified so that manifest_dot_sp_number (DOT special permit number) will be displayed in the DOT Shipping Description field
		// (changed the 12th parameter in the function call below from F to T.)
		IF DateTime(ls_profile_dragon_date) < DateTime(Today(), Now()) THEN
				// MPM - 4/12/2022 - DevOps 30394 - Added empty string for class 7 additional description
				ls_DOT_shipping_desc = f_build_dot_shipping_desc_dragon("M", ls_un_na_flag, ll_un_na, ls_dot_name, ls_haz_class, ls_sub_haz_class, ls_pg, &
		         	ls_rq, ls_rq_reason, ll_erg_num, ls_erg_suff, "T", ls_man_dot_sp, "",ls_man_dot_sp_additional, "")
		ELSE				
		        ls_DOT_shipping_desc = f_build_dot_shipping_desc("M", ls_un_na_flag, ll_un_na, ls_dot_name, ls_haz_class, ls_sub_haz_class, ls_pg, &
			   	ls_rq, ls_rq_reason, ll_erg_num, ls_erg_suff, "F", ls_man_dot_sp, "")
	    END IF
	// rb 03/03/2016 GEM:36429 - The Profile tab WCR display_2 was never setup to handle double-quotes (it was crashing). Replace on the string variable itself instead
	//idw_shipping.object.t_dot_shipping_desc.text = f_replace_all (ls_DOT_shipping_desc, "~"", "~~~"")
	ls_DOT_shipping_desc = f_replace_all (ls_DOT_shipping_desc, "~"", "~~~"")
	
	//DevOps:74740 - AM - 01/17/2024 - Added Trim function to avoid Application Termination 
	tab_1.tabpage_view.tab_2.tabpage_shipping.dw_shipping.Object.t_dot_shipping_desc.text = Trim( ls_DOT_shipping_desc , true)

	// COR2-MPM
	//	IF Lower(idw_wcr_display_2.dataobject) = 'd_profile_shipping_form_contd' THEN
	IF Lower(idw_wcr_display_1.dataobject) = 'd_profile_ship_pkg_info_form_dragon_2' THEN
		idw_wcr_display_1.object.t_dot_shipping_desc.text = ls_DOT_shipping_desc
	END IF
END IF

END IF
end subroutine

public subroutine wf_set_composition_sequence_id ();// SK 11/06/2013 This fn sets the sequence ID for the Profile Composition data window
Int		li_null
Long		ll_row, ll_rowcount, ll_row_header, ll_profile_id
string  ls_desc
dwItemStatus	ldwItemStatus

SetNull(li_null)

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
ll_profile_id = idw_header.object.profile_id [ll_row_header]
IF ll_row_header <= 0 THEN
	RETURN
// MPM - 11/30/2020 - DevOps 18101 - comp_description can now be null or empty string, and we no longer want to delete any composition rows.
//ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
//	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
//	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
//	//Anitha added - Since It return before deleting empty row from idw_composition is giving an error so added code here to delete if there are any rows added
//	//  for not valid status.
//	idw_composition.AcceptText()
//	ll_rowcount = idw_composition.Rowcount()
//		FOR ll_row = ll_rowcount TO 1 Step -1 
//			// MPM - 5/15/2020 - DevOps 15763 - Modified to make sure that the row is empty before deleting it; also corrected to check each row's status, not just
//			// the status of the last row.
//			ldwItemStatus = idw_composition.GetItemStatus(ll_row, 0, Primary!)
//			ls_desc = idw_composition.Object.comp_description[ll_row]
//			IF ldwItemStatus = NewModified! AND (IsNull(ls_desc) OR Trim(ls_desc) = '') THEN
//				idw_composition.DeleteRow(ll_row)
//			END IF
//		NEXT
//		//Anitha end
//   RETURN
END IF

idw_composition.AcceptText()
	ll_rowcount = idw_composition.Rowcount()
	string ls_comp_from_pct, ls_comp_to_pct,ls_comp_typical_pct
		FOR ll_row = ll_rowcount TO 1 Step -1 
			// MPM - 11/30/2020 - DevOps 18101 - comp_description can now be null or empty string, and we no longer want to delete any composition rows.
//			ls_desc = idw_composition.object.comp_description[ll_row]
//			ls_comp_typical_pct = string(idw_composition.object.comp_typical_pct[ll_row])
//			ls_comp_from_pct = string(idw_composition.object.comp_from_pct[ll_row])
//			ls_comp_to_pct = string(idw_composition.object.comp_to_pct[ll_row])
//			// Dont Let user to save if they enter only spaces.
//			IF	trim (ls_desc) = "" THEN
//				SetNull (ls_desc)
//			END IF 
//			IF  NOT IsNull(ls_desc) AND ls_desc <> '' THEN
				idw_composition.object.sequence_id[ll_row] = ll_row
				ib_changed_comp = TRUE
//			ELSE
//				If (isNull(ls_comp_typical_pct) OR ls_comp_typical_pct="" OR  ls_comp_typical_pct='0') AND (isNull(ls_comp_from_pct) or ls_comp_from_pct="" OR  ls_comp_from_pct='0') AND (isNull(ls_comp_to_pct) or ls_comp_to_pct="" ) then
//				    
//					//idw_composition.DeleteRow(ll_row)   
//				end if
//			END IF
		NEXT
end subroutine

public subroutine wf_set_rcra_haz_flag ();
// 11/08/2013 SK This function sets the value of RCRA_HAZ_FLAG using the following logic as per GEM 24477

/* The RCRA_Haz_flag will be changed to be a calculated display only text field in the upper right hand corner of the waste tab. 
	Text values will be: “(RCRA Hazardous)”, “(RCRA Non-Hazardous)”, “(RCRA Exempt)”. 
	The calculation will be based on the actual federal waste codes on the profile.
	a. If there are no Federal Hazardous waste codes on the profile, text will display “(RCRA Non-Hazardous)”
	b. If there are Federal Hazardous waste codes on the profile, the text will display “(RCRA Hazardous)”
	c. If there are no Federal hazardous waste codes on the profile and RCRA Exempt is set to YES, then the text will display “(RCRA Exempt)”
	NOTE: When waste codes are RCRA Exempt, they are not added to the Profile  */

Int		li_rc, li_count
Long		ll_row_header
String	ls_rcra_exempt_flag

	
IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
END IF	

ls_rcra_exempt_flag = idw_header.object.rcra_exempt_flag[ll_row_header]
li_count = idw_waste_code_fed.Rowcount()

IF li_count > 0 THEN
	idw_header.Object.rcra_haz_flag[ll_row_header] = 'H' 
ELSEIF Upper(ls_rcra_exempt_flag) = 'T' THEN
	idw_header.Object.rcra_haz_flag[ll_row_header] = 'E' 
ELSE
	idw_header.Object.rcra_haz_flag[ll_row_header] = 'N' 
END IF
	

end subroutine

public subroutine wf_generator_knowledge_acceptable_check (long al_generator_id);string ls_knowledge_acceptble


SELECT generator_knowledge_acceptable_flag
INTO :ls_knowledge_acceptble
FROM Generator
WHERE generator_id = :al_generator_id
USING itr_share;
	
IF ls_knowledge_acceptble = 'F' THEN
	idw_approval.Object.t_knowledge_acceptable.Visible = 1
ELSE
	idw_approval.Object.t_knowledge_acceptable.Visible = 0
END IF

end subroutine

public subroutine wf_calculate_constituent ();Long ll_const_id, ll_row, ll_row_count
Decimal ld_concentration, ld_fm25d, ld_fm305, ld_calc_concentration, ld_calc_ccvoc_concentration, ld_calc_ddvoc_concentration, ld_calc_caavoc_concentration
Decimal ld_total_ccvoc_concentration,ld_total_ddvoc_concentration, ld_total_caavoc_concentration
string ls_ccvoc_flag,ls_dd_vo_hap_flag,ls_unit , ls_caavoc_flag

idw_const.Accepttext ()
idw_wcr_display_2.Accepttext ()

ll_row_count = idw_const.RowCount()

FOR ll_row = 1 to ll_row_count
	ld_calc_concentration = 0.0000
	ld_calc_ccvoc_concentration = 0.0000
	ld_calc_ddvoc_concentration = 0.0000
	ld_calc_caavoc_concentration = 0.0000
	
	ll_const_id = idw_const.GetItemNumber ( ll_row, "const_id" )
	
	ld_concentration =  idw_const.GetItemNumber ( ll_row, "concentration" )
	ld_fm25d =  idw_const.GetItemNumber ( ll_row, "FM25D" )
	ld_fm305 =  idw_const.GetItemNumber ( ll_row, "FM305" )
	
	IF IsNull (ld_fm25d ) THEN ld_fm25d = 0
	IF IsNull (ld_fm305 ) THEN ld_fm305 = 0
	
	ls_unit =  idw_const.GetItemString ( ll_row, "unit" )
	
	ls_ccvoc_flag = idw_const.GetItemString ( ll_row, "voc" )
	ls_caavoc_flag =  idw_const.GetItemString ( ll_row, "caavoc" )
	ls_dd_vo_hap_flag =  idw_const.GetItemString ( ll_row, "ddvoc" )
	
	//DevOps:17098 - AM - Added 'ug/kg', 'ppb' and 'ug/L' 
	IF ls_ccvoc_flag = 'T' THEN  
		// MPM - 3/21/2023 - DevOps 42226 - Corrected the calculations for 'ug/kg', 'ppb' and 'ug/L' 
		IF ls_unit  = 'ppm' OR ls_unit  = 'ppmw' OR ls_unit  = 'mg/kg' OR ls_unit  = 'mg/l' THEN  
			ld_calc_ccvoc_concentration =  (  ld_concentration *  ld_fm25d )
		ELSEIF ls_unit  =  'ug/kg' OR  ls_unit  = 'ppb' OR  ls_unit  =  'ug/L' THEN
			ld_calc_ccvoc_concentration =  (  ld_concentration *  ld_fm25d ) / 1000
		ELSEIF  ls_unit  = '%' THEN
			ld_calc_ccvoc_concentration =  ( (  ld_concentration *  ld_fm25d ) * 10000) 
		END IF
		IF IsNull (ld_calc_ccvoc_concentration) THEN ld_calc_ccvoc_concentration = 0.0000 	
	ELSE
		IF IsNull (ld_calc_ccvoc_concentration) THEN ld_calc_ccvoc_concentration = 0.0000  	
	END IF
  
	ld_total_ccvoc_concentration = ld_total_ccvoc_concentration + ld_calc_ccvoc_concentration
	
	//DevOps:17098 - AM - Added 'ug/kg', 'ppb' and 'ug/L' 
	IF ls_dd_vo_hap_flag = 'T' THEN
		// MPM - 3/21/2023 - DevOps 42226 - Corrected the calculations for 'ug/kg', 'ppb' and 'ug/L' 
		IF ls_unit  = 'ppm' OR ls_unit  = 'ppmw' OR ls_unit  = 'mg/kg' OR ls_unit  = 'mg/l' THEN  
			ld_calc_ddvoc_concentration =  (  ld_concentration *  ld_fm305 )
		ELSEIF ls_unit  =  'ug/kg' OR  ls_unit  = 'ppb' OR  ls_unit  =  'ug/L' THEN
			ld_calc_ddvoc_concentration =  (  ld_concentration *  ld_fm305 ) / 1000
		ELSEIF  ls_unit  = '%' THEN
			ld_calc_ddvoc_concentration =   ( (  ld_concentration *  ld_fm305 ) * 10000)
		END IF
		IF IsNull (ld_calc_ddvoc_concentration) THEN ld_calc_ddvoc_concentration = 0.0000
	ELSE
		IF IsNull (ld_calc_ddvoc_concentration) THEN ld_calc_ddvoc_concentration = 0.0000 
	END IF
  
	ld_total_ddvoc_concentration = ld_total_ddvoc_concentration + ld_calc_ddvoc_concentration
  
	IF ls_caavoc_flag = 'T' THEN
		//DevOps:17098 - AM - Added 'ug/kg', 'ppb' and 'ug/L' 
		// MPM - 3/21/2023 - DevOps 42226 - Corrected the calculations for 'ug/kg', 'ppb' and 'ug/L' 
		IF ls_unit  = 'ppm' OR ls_unit  = 'ppmw' OR ls_unit  = 'mg/kg' OR ls_unit  = 'mg/l' THEN  
			ld_calc_caavoc_concentration =  (  ld_concentration )
		ELSEIF ls_unit  =  'ug/kg' OR  ls_unit  = 'ppb' OR  ls_unit  =  'ug/L' THEN
			ld_calc_caavoc_concentration =  ld_concentration / 1000
		ELSEIF  ls_unit  = '%' THEN
			ld_calc_caavoc_concentration = ld_concentration * 10000
		END IF
		IF IsNull (ld_calc_caavoc_concentration) THEN ld_calc_caavoc_concentration = 0.0000 
	ELSE
		IF IsNull (ld_calc_caavoc_concentration) THEN ld_calc_caavoc_concentration = 0.0000 
	END IF
		
ld_total_caavoc_concentration = ld_total_caavoc_concentration + ld_calc_caavoc_concentration
NEXT
 
idw_const.object.t_caavoc.text	 = string ( round ( ld_total_caavoc_concentration , 4) )
idw_const.object.t_ddhapvoc.text	 = string (round ( ld_total_ddvoc_concentration , 4) )
idw_const.object.t_ccvoc.text	 = string (round ( ld_total_ccvoc_concentration , 4 ))


end subroutine

public subroutine wf_calculate_vapor_pressure_density ();long  ll_row_count, ll_row, ll_const_id
decimal ld_concentration, ld_concentration_total, ld_sum_concentration, ld_molecular_weight, ld_density, ld_vapor_pressure,ld_calc_concentration
decimal ld_total_wt_cons, ld_total_density, ld_total_vp, ld_sum_moles_per_con, ld_total_vapor_pressure_psia, ld_sum_vapor_pressure_psia
decimal ld_wt_constituent, ld_moles_per_con, ld_mole_fraction, ld_wt_avg_per_con, ld_partial_density_per_con, ld_partial_pressure_per_cons
string ls_unit

ld_total_wt_cons =0.0000 
ld_total_density =  0.0000
ld_total_vp =  0.0000
ld_sum_moles_per_con =  0.0000 
ld_wt_constituent =  0.0000 
ld_moles_per_con =  0.0000 
ld_mole_fraction =  0.0000 
ld_partial_pressure_per_cons =  0.0000 
ld_wt_avg_per_con =  0.0000 
ld_partial_density_per_con =  0.0000 
ld_total_vapor_pressure_psia  =  0.0000
ld_sum_vapor_pressure_psia =  0.0000

idw_const.Accepttext ()
idw_wcr_display_2.Accepttext ()

ll_row_count = idw_const.RowCount()

FOR ll_row = 1 to ll_row_count
	ld_molecular_weight = idw_const.GetItemNumber ( ll_row, "molecular_weight" ) 
	ld_concentration =  idw_const.GetItemNumber ( ll_row, "concentration" )
	ls_unit =  idw_const.GetItemString ( ll_row, "unit" )
	
	IF IsNull (ld_molecular_weight ) THEN ld_molecular_weight =  0.0000
	IF IsNull (ld_concentration ) THEN ld_concentration =  0.0000
	//DevOps:17098 - AM - Added 'ug/kg', 'ppb' and 'ug/L' 
	 IF ( ls_unit  = 'ppm' OR ls_unit  = 'ppmw' OR ls_unit  = 'mg/kg' OR ls_unit  = 'mg/l'  ) AND ld_concentration > 0  THEN  
		ld_wt_constituent = ( (  ld_concentration  /1000000 ) *100)
	 ELSEIF  ls_unit  = 'ug/kg' THEN
		ld_wt_constituent =  ( (  ld_concentration  /20000 ) *100)
	 ELSEIF  ls_unit  = 'ppb' THEN
		ld_wt_constituent =  ( (  ld_concentration  /1000 ) *100)
	 ELSEIF  ls_unit  = 'ug/L' THEN
		ld_wt_constituent =  ( (  ld_concentration  /1000 ) *100)
	 ELSEIF  ls_unit  = '%' THEN
		ld_wt_constituent =  (ld_concentration ) 
	 END IF
	 
    IF IsNull ( ld_wt_constituent ) THEN ld_wt_constituent =  0.0000
	 
   IF (   ld_wt_constituent > 0 ) AND  (  ld_molecular_weight > 0  ) THEN 
		ld_moles_per_con = ( ld_wt_constituent / ld_molecular_weight)
		ld_sum_moles_per_con = ld_sum_moles_per_con + ld_moles_per_con
		
		ld_total_wt_cons =  ld_total_wt_cons + ld_wt_constituent
  END IF
		  
NEXT	 
	 
FOR ll_row = 1 to ll_row_count
	
	ll_const_id = idw_const.GetItemNumber ( ll_row, "const_id" )
	ld_molecular_weight = idw_const.GetItemNumber ( ll_row, "molecular_weight" ) 
	ld_density = idw_const.GetItemNumber ( ll_row, "density" ) 
	ld_vapor_pressure = idw_const.GetItemNumber ( ll_row, "vapor_pressure" )  
	ld_concentration =  idw_const.GetItemNumber ( ll_row, "concentration" )
	ls_unit =  idw_const.GetItemString ( ll_row, "unit" )
	
	IF IsNull (ld_molecular_weight ) THEN ld_molecular_weight =  0.0000
	IF IsNull (ld_density ) THEN ld_density =  0.0000
	IF IsNull (ld_vapor_pressure ) THEN ld_vapor_pressure =  0.0000
	IF IsNull (ld_concentration ) THEN ld_concentration =  0.0000
	IF (IsNull (ls_unit) OR ls_unit = "" )  AND IsNull (ld_concentration )  THEN ld_wt_constituent = 0.0000
	//DevOps:17098 - AM - Added 'ug/kg', 'ppb' and 'ug/L' 
	 IF ( ls_unit  = 'ppm' OR ls_unit  = 'ppmw' OR ls_unit  = 'mg/kg' OR ls_unit  = 'mg/l'   ) AND ld_concentration > 0 THEN  
		ld_wt_constituent = ( (  ld_concentration  /1000000 ) *100) 
	 ELSEIF  ls_unit  = 'ug/kg' THEN
		ld_wt_constituent =  ( (  ld_concentration  /20000 ) *100)
	 ELSEIF  ls_unit  = 'ppb' THEN
		ld_wt_constituent =  ( (  ld_concentration  /1000 ) *100)
	 ELSEIF  ls_unit  = 'ug/L' THEN
		ld_wt_constituent =  ( (  ld_concentration  /1000 ) *100)
	 ELSEIF  ls_unit  = '%' THEN
		ld_wt_constituent =  (ld_concentration ) 
	 END IF
	 
    IF IsNull ( ld_wt_constituent ) THEN ld_wt_constituent = 0.0000 
	
	IF (   ld_wt_constituent > 0 ) AND  (  ld_molecular_weight > 0  ) AND ( ld_sum_moles_per_con > 0 ) THEN 
		ld_moles_per_con = ( ld_wt_constituent / ld_molecular_weight)
		ld_mole_fraction  = ld_moles_per_con / ld_sum_moles_per_con
		ld_partial_pressure_per_cons= ld_mole_fraction * ld_vapor_pressure
		ld_total_vp  = ld_total_vp +  ld_partial_pressure_per_cons
	END IF
	
	 //Total Density
    IF ld_density > 0 AND  ld_wt_constituent > 0  AND ld_total_wt_cons > 0   THEN
	   ld_wt_avg_per_con = ld_wt_constituent / ld_total_wt_cons 
	   ld_partial_density_per_con = ld_wt_avg_per_con  * ld_density
	   ld_total_density = ld_total_density  +   ld_partial_density_per_con
	END IF

NEXT

//Total Vapor pressure psia 
IF ld_total_vp > 0 THEN 
	ld_total_vapor_pressure_psia =  ( ( ld_total_vp  / 760 ) * 14.7 ) 
END IF
	
idw_const.object.t_vapor_pressure_mmhg.text	 = string (round (  ld_total_vp, 4) )
idw_const.object.t_density.text	 = string (  round ( ld_total_density ,4) )
idw_const.object.t_vapor_pressure_psia.text	 = string ( round (ld_total_vapor_pressure_psia, 4) )
end subroutine

public subroutine wf_generator_foreign_generator (long al_generator_id);string ls_foreign_generator_flag


SELECT foreign_generator_flag
INTO :ls_foreign_generator_flag
FROM Generator
WHERE generator_id = :al_generator_id
USING itr_share;
	
IF ls_foreign_generator_flag = 'T' THEN
	idw_approval.Object.t_foreign_generator.Visible = 1
ELSE
	idw_approval.Object.t_foreign_generator.Visible = 0
END IF
	
end subroutine

public function string wf_validate_outbound_waste_codes ();long				ll_ob_tsdf_approval_id, ll_row_approval, ll_ob_eq_profile_id, ll_company_id, ll_row, ll_row_find, ll_null, li_colcount, li_i
Long                ll_waste_code_uid,ll_OB_EQ_company_id,ll_profile_id,ll_rowcount,ll_generator_id
string				ls_waste_code, ls_find, ls_fed_waste_code_error, ls_null, ls_msg_waste_code, ls_column_name, ls_columns_modified, ls_haz_flag, ls_state
string				ls_state_waste_code_error, ls_approval_id,ls_outbound_state,ls_inbound_state,ls_in_state,ls_out_state,ls_outbound_location,ls_generator_state
datastore		lds_tsdf_approval_waste_code, lds_profile_waste_code
int 				i						
boolean			lb_row_was_modified, lb_any_row_was_modified = FALSE
dwItemStatus	ldwItemStatus_ob_approval, ldwItemStatus_generator

SetNull(ll_null)
SetNull(ls_null)
ls_msg_waste_code = ''

lds_tsdf_approval_waste_code = create datastore
lds_tsdf_approval_waste_code.DataObject = "d_tsdf_approval_waste_code"
lds_tsdf_approval_waste_code.SetTransObject(itr_share)

lds_profile_waste_code = create datastore
lds_profile_waste_code.DataObject = "d_profile_waste_code"
lds_profile_waste_code.SetTransObject(itr_share)

// For each approval, validate that the all of the profile's federal waste codes can be handled by the outbound approval location.
// MPM - 1/18/2022 - DevOps 21512 - For each approval, validate that the all of the profile's hazardous state waste codes can be 
// handled by the outbound approval location.
// MPM - 2/15/2022 - DevOps 30494 - Modified this function so that it validates only the newly added or newly modified outbound approvals.

FOR ll_row_approval = 1 TO idw_approval.Rowcount()
	
	// Skip inactive approvals
	IF idw_approval.Object.status[ll_row_approval] = 'I' THEN CONTINUE
	
	ls_fed_waste_code_error = ''
	ls_state_waste_code_error = ''
	
	ll_company_id = idw_approval.Object.company_id[ll_row_approval]
	ll_OB_TSDF_approval_id = idw_approval.Object.OB_TSDF_approval_id[ll_row_approval] 
	ll_OB_EQ_profile_id =  idw_approval.Object.OB_EQ_profile_id[ll_row_approval]
	ll_OB_EQ_company_id =  idw_approval.Object.OB_EQ_company_id[ll_row_approval]
	ls_inbound_state =  idw_approval.Object.tsdf_state[ll_row_approval] 
	ls_outbound_location=  idw_approval.Object.location[ll_row_approval]
	IF idw_header.GetRow() > 0 THEN 
 		ll_generator_id =  idw_header.Object.generator_id[idw_header.GetRow()]
	END IF
	
	SELECT tsdf_state  
	INTO :ls_outbound_state 
	FROM TSDF
	WHERE tsdf_code = :ls_outbound_location
	Using gtr_share;	
	
	IF gtr_share.SQLCode < 0 THEN
		MessageBox(gs_app_name + ":  SQL Error", gtr_share.SQLErrText, Exclamation!)
	END IF
	
	SELECT  generator_state
	INTO :ls_generator_state
	FROM Generator 
	WHERE generator_id = :ll_generator_id
	Using gtr_share;	
	
	IF gtr_share.SQLCode < 0 THEN
		MessageBox(gs_app_name + ":  SQL Error", gtr_share.SQLErrText, Exclamation!)
	END IF
	
	IF ll_OB_TSDF_approval_id > 0 THEN
		// Outbound approval is a TSDF approval
		
		// Uday - 6/13/2023 - DevOps #41689 - ldwItemStatus Modified to ldwItemStatus_ob_approval, added check for ldwItemStatus_generator so the validation triggers for Generator change too
		// MPM - 2/15/2022 - DevOps 30494 - Skip unmodified outbound approvals
		ldwItemStatus_ob_approval = idw_approval.GetItemStatus(ll_row_approval, 'OB_TSDF_approval_id', Primary!)
		ldwItemStatus_generator = idw_header.GetItemStatus(ll_row_approval, 'generator_id', Primary!)
		
		IF NOT (ldwItemStatus_ob_approval = NewModified! OR ldwItemStatus_ob_approval = DataModified! OR &
		            ldwItemStatus_generator = DataModified!) THEN CONTINUE
		
		// Validate fed waste codes
		lds_tsdf_approval_waste_code.Retrieve(ll_OB_TSDF_approval_id, ll_company_id)
		FOR ll_row = 1 TO idw_waste_code_fed.RowCount()
			ll_waste_code_uid = idw_waste_code_fed.Object.waste_code_uid[ll_row]
			ls_waste_code = idw_waste_code_fed.Object.waste_code[ll_row]
			IF lds_tsdf_approval_waste_code.RowCount() > 0 THEN
				ls_find = "waste_code_uid = "+ String(ll_waste_code_uid)
				ll_row_find = lds_tsdf_approval_waste_code.Find(ls_find, 1, lds_tsdf_approval_waste_code.RowCount() + 1 )
				IF ll_row_find <= 0 THEN
					IF ls_fed_waste_code_error = "" THEN
						ls_fed_waste_code_error = "Waste code(s) " + ls_waste_code
					ELSE
						ls_fed_waste_code_error = ls_fed_waste_code_error + ", " + ls_waste_code
					END IF
				END IF
			END IF
		NEXT
		  //DevOPs:38602 - AM - Commented the scenario below, where waste comes in to inbound and goes outbound, any state waste codes that are 
		   //not in inbound or outbound should be ignored.  Currently Texas, California and other state codes are being required on the outbound in order to use it, but they should not.
	
		// MPM - 1/18/2022 - DevOps 21512 - Added validation for hazardous state waste codes
		FOR ll_row = 1 TO idw_waste_code_state.RowCount()
			// Skip non-haz waste codes
			IF idw_waste_code_state.Object.haz_flag[ll_row] <> 'T' THEN CONTINUE
			ll_waste_code_uid = idw_waste_code_state.Object.waste_code_uid[ll_row]
			ls_waste_code = idw_waste_code_state.Object.waste_code[ll_row]
			ls_in_state = idw_waste_code_state.object.state[ll_row]
			
			IF lds_tsdf_approval_waste_code.RowCount() > 0 THEN
				IF ( ls_in_state = ls_outbound_state )  AND ( ls_in_state = ls_generator_state) THEN  //If outbound state = Inbound state then check the inbound waste code is in out bound, if not in outbound then error out. Also added generator state check too
					ls_find = "waste_code_uid = "+ String(ll_waste_code_uid) + " AND waste_code_origin = 'S' "  
					ll_row_find = lds_tsdf_approval_waste_code.Find(ls_find, 1, lds_tsdf_approval_waste_code.RowCount() + 1 )
					IF ll_row_find <= 0 THEN
						IF ls_state_waste_code_error = "" THEN
							ls_state_waste_code_error = "State waste code(s) " + ls_waste_code
						ELSE
							ls_state_waste_code_error = ls_state_waste_code_error + ", " + ls_waste_code
						END IF
					END IF
				END IF
			END IF
		NEXT
		
	ELSEIF ll_OB_EQ_profile_id > 0 THEN
		// Outbound approval is a profile approval
		
		// Uday - 6/13/2023 - DevOps #41689 - ldwItemStatus Modified to ldwItemStatus_ob_approval, added check for ldwItemStatus_generator so the validation triggers for Generator change too
		// MPM - 2/15/2022 - DevOps 30494 - Skip newly added or newly modified outbound approvals
		ldwItemStatus_ob_approval = idw_approval.GetItemStatus(ll_row_approval, 'OB_EQ_profile_id', Primary!)
		ldwItemStatus_generator = idw_header.GetItemStatus(ll_row_approval, 'generator_id', Primary!)
		
		IF NOT (ldwItemStatus_ob_approval = NewModified! OR ldwItemStatus_ob_approval = DataModified! OR &
		       	   ldwItemStatus_generator = DataModified!) THEN CONTINUE
		
		// Validate fed waste codes
		lds_profile_waste_code.Retrieve(ll_OB_EQ_profile_id)
		FOR ll_row = 1 TO idw_waste_code_fed.RowCount()
			ll_waste_code_uid = idw_waste_code_fed.Object.waste_code_uid[ll_row]
			ls_waste_code = idw_waste_code_fed.Object.waste_code[ll_row]
			IF lds_profile_waste_code.RowCount() > 0 THEN
				ls_find = "waste_code_uid = "+ String(ll_waste_code_uid)
				ll_row_find = lds_profile_waste_code.Find(ls_find, 1, lds_profile_waste_code.RowCount() + 1 )
				IF ll_row_find <= 0 THEN
					IF ls_fed_waste_code_error = "" THEN
						ls_fed_waste_code_error = "Waste code(s) " + ls_waste_code
					ELSE
						ls_fed_waste_code_error = ls_fed_waste_code_error + ", " + ls_waste_code
					END IF
				END IF
			END IF
		NEXT
       //DevOPs:38602 - AM - Commented the scenario below, where waste comes in to inbound and goes outbound, any state waste codes that are 
		   //not in inbound or outbound should be ignored.  Currently Texas, California and other state codes are being required on the outbound in order to use it, but they should not.
		// MPM - 1/18/2022 - DevOps 21512 - Added validation for hazardous state waste codes
		//DevOPs:38602 - AM - Added setfilter to get correct rows and removed dot notation and added getitem to get correct data. Somehow PB acting strange 
		 //when using dot notation
		idw_waste_code_state.SetFilter("")
		idw_waste_code_state.Filter()
		ll_profile_id = idw_header.Object.profile_id[idw_header.GetRow()]
		ll_rowcount = idw_waste_code_state.Retrieve(ll_profile_id)
		
		FOR ll_row = 1 TO ll_rowcount // idw_waste_code_state.RowCount()
			ls_haz_flag = idw_waste_code_state.GetItemString (ll_row,'haz_flag')
		    ll_waste_code_uid = idw_waste_code_state.GetItemnumber (ll_row,'waste_code_uid')
			ls_waste_code = idw_waste_code_state.GetItemString (ll_row,'waste_code')
			ls_in_state = idw_waste_code_state.GetItemString (ll_row,'state')
			// Skip non-haz waste codes
			IF ls_haz_flag <>  'T' THEN CONTINUE //idw_waste_code_state.Object.haz_flag[ll_row] <> 'T' THEN CONTINUE
//			ll_waste_code_uid = idw_waste_code_state.Object.waste_code_uid[ll_row]
//			ls_waste_code = idw_waste_code_state.Object.waste_code[ll_row]
//			ls_in_state = idw_waste_code_state.object.state[ll_row]
			
			IF lds_profile_waste_code.RowCount() > 0 THEN					
				IF ( ls_in_state = ls_outbound_state ) AND ( ls_in_state = ls_generator_state) THEN  //If outbound state = Inbound state then check the inbound waste code is in out bound, if not in outbound then error out
					ls_find = "waste_code_uid = "+ String(ll_waste_code_uid) + " AND waste_code_origin = 'S' "  // + " AND ( state = " +  "'" +   ls_outbound_state + "'" + " or state = " +  "'" +  ls_inbound_state +  "'"  +  ") " 
					ll_row_find = lds_profile_waste_code.Find(ls_find, 1, lds_profile_waste_code.RowCount() + 1 )
					IF ll_row_find <= 0 THEN
						IF ls_state_waste_code_error = "" THEN
							ls_state_waste_code_error = "State waste code(s) " + ls_waste_code
						ELSE
							ls_state_waste_code_error = ls_state_waste_code_error + ", " + ls_waste_code
						END IF
					END IF
				END IF
			END IF
		NEXT
	END IF

	IF ls_fed_waste_code_error <> ""  OR ls_state_waste_code_error <> "" THEN

		IF IsNull(ll_OB_TSDF_approval_id) THEN 
			ls_approval_id = String(ll_OB_EQ_profile_id)
		ELSE
			ls_approval_id = String(ll_OB_TSDF_approval_id)
		END IF
			
		IF ls_fed_waste_code_error <> "" THEN
			
			ls_fed_waste_code_error += " on the inbound approval are not valid for the pre-assigned outbound approval " + ls_approval_id + &
				" for company " + String(ll_company_id) + &
				  ', so the pre-assigned outbound approval and pre-assigned outbound location cannot be used for this inbound approval and will be removed.'
			IF ls_msg_waste_code = "" THEN
				ls_msg_waste_code = ls_fed_waste_code_error
			ELSE
				ls_msg_waste_code += '~r~r' + ls_fed_waste_code_error
			END IF
		END IF

		IF ls_state_waste_code_error <> "" THEN
			ls_state_waste_code_error += " on the inbound approval are not valid for the pre-assigned outbound approval " + ls_approval_id + &
				" for company " + String(ll_company_id) + &
				  ', so the pre-assigned outbound approval and pre-assigned outbound location cannot be used for this inbound approval and will be removed.'
			IF ls_msg_waste_code = "" THEN
				ls_msg_waste_code = ls_state_waste_code_error
			ELSE
				ls_msg_waste_code += '~r~r' + ls_state_waste_code_error
			END IF
		END IF

		// Remove the pre-assigned outbound location and pre-assigned outbound approval values, if any are not null
		IF NOT IsNull(idw_approval.GetItemNumber(ll_row_approval, "ob_eq_profile_id")) THEN 
			idw_approval.Object.ob_eq_profile_id[ll_row_approval] = ll_null
			ib_changed_approval = TRUE
		END IF
		IF NOT IsNull(idw_approval.GetItemNumber(ll_row_approval, "ob_eq_company_id")) THEN 
			idw_approval.Object.ob_eq_company_id[ll_row_approval] = ll_null
			ib_changed_approval = TRUE
		END IF
		IF NOT IsNull(idw_approval.GetItemNumber(ll_row_approval, "ob_eq_profit_ctr_id")) THEN 
			idw_approval.Object.ob_eq_profit_ctr_id[ll_row_approval] = ll_null
			ib_changed_approval = TRUE
		END IF
		IF NOT IsNull(idw_approval.GetItemString(ll_row_approval, "location")) THEN 
			idw_approval.Object.location[ll_row_approval] = ls_null
			ib_changed_approval = TRUE
		END IF
		IF NOT IsNull(idw_approval.GetItemString(ll_row_approval, "location_type")) THEN 
			idw_approval.Object.location_type[ll_row_approval] = ls_null
			ib_changed_approval = TRUE
		END IF
		IF NOT IsNull(idw_approval.GetItemString(ll_row_approval, "location_control")) THEN 
			idw_approval.Object.location_control[ll_row_approval] = ls_null
			ib_changed_approval = TRUE
		END IF
		IF NOT IsNull(idw_approval.GetItemNumber(ll_row_approval, "ob_tsdf_approval_id")) THEN 
			idw_approval.Object.ob_tsdf_approval_id[ll_row_approval] = ll_null
			ib_changed_approval = TRUE
		END IF
		IF NOT IsNull(idw_approval.GetItemString(ll_row_approval, "ob_approval")) THEN 
			idw_approval.Object.ob_approval[ll_row_approval] = ls_null
			ib_changed_approval = TRUE
		END IF
	END IF
	
NEXT

DESTROY lds_tsdf_approval_waste_code
DESTROY lds_profile_waste_code

IF ls_msg_waste_code <> "" THEN
	MessageBox(gs_app_name + ":  Validation Warning(s)", ls_msg_waste_code + "~r~rAny other pending profile changes will be saved to the database if there are no validation errors.", Exclamation!)
END IF
	
RETURN ls_msg_waste_code
end function

public function boolean wf_calculate_uts_constituent (boolean ab_get_answer);Long ll_const_id, ll_row, ll_row_count, ll_ldwc_row
Decimal ld_concentration, ld_calc_concentration,ld_uts_concentration, ld_conversion_concentration
string ls_uhc, ls_unit, ls_uts_unit, ls_const_desc, ls_msg_error, ls_other_message
Boolean lb_ret = TRUE
int  li_rc, ll_i
datawindowchild ldwc

idw_const.Accepttext ()
idw_wcr_display_2.Accepttext ()

ls_msg_error = ""

ll_row_count = idw_const.RowCount()

FOR ll_row = 1 to ll_row_count
   ld_calc_concentration = 0.0000
	
	ll_const_id = idw_const.GetItemNumber ( ll_row, "const_id" )
	
	idw_const.GetChild (  "const_id_2" ,ldwc )
	ll_i = ldwc.Find ("const_id=" + String(ll_const_id), 1, ldwc.RowCount())
	if ll_i > 0 then
		ls_const_desc = ldwc.GetItemString (ll_i, "const_desc")
	end if
	
	ld_concentration =  idw_const.GetItemNumber ( ll_row, "concentration" )
	ld_uts_concentration =  idw_const.GetItemNumber ( ll_row, "univ_treatment_std_nww" )

	ls_unit =  idw_const.GetItemString ( ll_row, "unit" )
	ls_uts_unit =  idw_const.GetItemString ( ll_row, "univ_treatment_std_nww_unit" )
	ls_uhc = idw_const.GetItemString ( ll_row, "uhc" )
	 
	IF ld_concentration > ld_uts_concentration AND  ( ls_uhc = 'F' OR  ls_uhc = 'U' )   THEN
	    ld_conversion_concentration =   f_concentration_exceeds ( ll_const_id,ls_uhc,ls_uts_unit,ls_unit,ld_concentration, ld_uts_concentration )  
		 IF ls_msg_error = "" THEN
			 ls_msg_error =  "~r " + string ( ls_const_desc  ) + " maximum concentration " + "(" + string ( ld_concentration ) +" " + ls_unit +  ")" + " " + " exceeds the UTS concentration  " + "(" + string ( ld_uts_concentration ) + " " + ls_uts_unit + ")"    
		ELSE
			  ls_msg_error = ls_msg_error + "~r " + string ( ls_const_desc  ) + " maximum concentration " + "(" + string ( ld_concentration ) + ")" + " " + " exceeds the UTS concentration  " + "(" + string ( ld_uts_concentration ) + " " + ls_uts_unit + ")" 
		 END IF 
	  END IF
NEXT

IF ls_msg_error <>  ""  THEN
	ls_other_message = "UHC is not selected for all above constituents."
	IF ab_get_answer THEN
		li_rc =	Messagebox (gs_app_name +" " + 'UTS Value Exceeded' ,  "This profile is currently approved and the following constituents on this profile exceed the UTS values and the UHC flag is not set:~r~r" + ls_msg_error + "~r~r" + ls_other_message + "~r~r" + "Do you want to continue?" ,Question!, YesNo!, 1)
	  	IF li_rc = 1 THEN
			Return  lb_ret = TRUE
	  	ELSE
		  	Return  lb_ret = FALSE
	  	END IF
	ELSE
		Messagebox (gs_app_name +" " + 'UTS Value Exceeded' ,  "This profile is currently approved and the following constituents on this profile exceed the UTS values and the UHC flag is not set:~r~r" + ls_msg_error + "~r~r" + ls_other_message ,Exclamation!)
		RETURN TRUE
	END IF
END IF


end function

public subroutine wf_filter_cwt_category (long al_row);datawindowchild	ldwc
int						li_company_id, li_profit_ctr_id
string					ls_filter

idw_approval.GetChild("cwt_category_uid", ldwc)

IF al_row > 0 THEN
	// Get the company ID and profit center ID of the current row
	li_company_id = idw_approval.object.company_id[al_row]
	li_profit_ctr_id = idw_approval.object.profit_ctr_id[al_row]
	IF NOT IsNull(li_company_id) AND NOT IsNull(li_profit_ctr_id) THEN
		idw_approval.SetRedraw(FALSE)
		// Remove any filter that might be on the CWT category DDDW
		ldwc.SetFilter("")
		ldwc.Filter()
		// Set the detail height for all rows in the DDDW to 60
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 60)
		// Construct a filter string that will filter the rows that we DON'T want to see in the DDDW
		ls_filter = "company_id <> " + String(li_company_id) + " OR profit_ctr_id <> " + String(li_profit_ctr_id)
		// Filter the DDDW 
		ldwc.SetFilter(ls_filter)
		ldwc.Filter()
		// Set the detail height to 0 for those rows
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 0)
		// Remove the filter, and we should see only the rows that match on the company ID and profit center ID
		ldwc.SetFilter("")
		ldwc.Filter()

		idw_approval.SetRedraw(TRUE)
	END IF
END IF


end subroutine

public subroutine wf_filter_consolidation_group (long al_row);
// JCG 9/29/17 Consolodation Group project
datawindowchild	ldwc
int						li_company_id, li_profit_ctr_id
string					ls_filter

idw_approval.GetChild("consolidation_group_uid", ldwc)

IF al_row > 0 THEN
	// Get the company ID and profit center ID of the current row
	li_company_id = idw_approval.object.company_id[al_row]
	li_profit_ctr_id = idw_approval.object.profit_ctr_id[al_row]
	IF NOT IsNull(li_company_id) AND NOT IsNull(li_profit_ctr_id) THEN
		idw_approval.SetRedraw(FALSE)
		// Remove any filter that might be on the CWT category DDDW
		ldwc.SetFilter("")
		ldwc.Filter()
		// Set the detail height for all rows in the DDDW to 60
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 60)
		// Construct a filter string that will filter the rows that we DON'T want to see in the DDDW
		ls_filter = "company_id <> " + String(li_company_id) + " OR profit_ctr_id <> " + String(li_profit_ctr_id)
		// Filter the DDDW 
		ldwc.SetFilter(ls_filter)
		ldwc.Filter()
		// Set the detail height to 0 for those rows
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 0)
		// Remove the filter, and we should see only the rows that match on the company ID and profit center ID
		ldwc.SetFilter("")
		ldwc.Filter()
		idw_approval.SetRedraw(TRUE)
	END IF
END IF


end subroutine

public subroutine wf_filter_default_disposal_location (long al_row);
// JCG 10/6/17 Consolodation Group project
datawindowchild	ldwc
int						li_company_id, li_profit_ctr_id, li_rtn
string					ls_filter

li_rtn = idw_approval.GetChild("container_destination_trench_uid", ldwc)
IF li_rtn = -1 THEN 
	MessageBox( "Error", "Not a DataWindowChild")
END IF
		
IF al_row > 0 THEN
	// Get the company ID and profit center ID of the current row
	li_company_id = idw_approval.object.company_id[al_row]
	li_profit_ctr_id = idw_approval.object.profit_ctr_id[al_row]
	IF NOT IsNull(li_company_id) AND NOT IsNull(li_profit_ctr_id) THEN
		idw_approval.SetRedraw(FALSE)
		// Remove any filter that might be on the CWT category DDDW
		ldwc.SetFilter("")
		ldwc.Filter()
		// Set the detail height for all rows in the DDDW to 60
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 60)
		// Construct a filter string that will filter the rows that we DON'T want to see in the DDDW
		ls_filter = "company_id <> " + String(li_company_id) + " OR profit_ctr_id <> " + String(li_profit_ctr_id)
		// Filter the DDDW 
		ldwc.SetFilter(ls_filter)
		ldwc.Filter()
		// Set the detail height to 0 for those rows
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 0)
		// Remove the filter, and we should see only the rows that match on the company ID and profit center ID
		ldwc.SetFilter("")
		ldwc.Filter()
		idw_approval.SetRedraw(TRUE)
	END IF
END IF


li_rtn = idw_approval.GetChild("container_destination_cell_uid", ldwc)
IF li_rtn = -1 THEN 
	MessageBox( "Error", "Not a DataWindowChild")
END IF

IF al_row > 0 THEN
	// Get the company ID and profit center ID of the current row
	li_company_id = idw_approval.object.company_id[al_row]
	li_profit_ctr_id = idw_approval.object.profit_ctr_id[al_row]
	IF NOT IsNull(li_company_id) AND NOT IsNull(li_profit_ctr_id) THEN
		idw_approval.SetRedraw(FALSE)
		// Remove any filter that might be on the CWT category DDDW
		ldwc.SetFilter("")
		ldwc.Filter()
		// Set the detail height for all rows in the DDDW to 60
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 60)
		// Construct a filter string that will filter the rows that we DON'T want to see in the DDDW
		ls_filter = "company_id <> " + String(li_company_id) + " OR profit_ctr_id <> " + String(li_profit_ctr_id)
		// Filter the DDDW 
		ldwc.SetFilter(ls_filter)
		ldwc.Filter()
		// Set the detail height to 0 for those rows
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 0)
		// Remove the filter, and we should see only the rows that match on the company ID and profit center ID
		ldwc.SetFilter("")
		ldwc.Filter()
		idw_approval.SetRedraw(TRUE)
	END IF
END IF

end subroutine

public function long wf_get_contact_id (long al_customer_id);//DevOps #13988; info_gde 02/04/20 -- Other Functions - Document Management  app termination error on null return value from popup form doc Management

LONG 		ll_count, ll_contact_id
String	ls_where, ls_class,ls_select
int i
str_pick lstr_pick
str_customer_new	lstr_contact

SELECT COUNT(*)
INTO :ll_count
FROM ContactXRef
WHERE customer_id = :al_customer_id
USING itr_share;
					
IF ll_count > 0 THEN
	ls_where = "ContactXRef.customer_id = " + String(al_customer_id) &
				+ " and ContactXRef.status = 'A'"
						
	// Setup quick select popup
	lstr_pick.s_window_title			= "Contact Select"
	lstr_pick.i_window_width			= 0
	lstr_pick.b_multipick				= FALSE
	lstr_pick.i_tab_count				= 1
	lstr_pick.i_return_column_count	= 15 // 2 - DevOps:57361
						
	lstr_pick.s_tab_title[1]			= "Contacts for Customer:  " + String(al_customer_id)
	lstr_pick.i_tabpage_type[1]		= 1
	lstr_pick.s_dataobject[1]			= "d_quick_select_contact_dragon"
	lstr_pick.s_where[1]					= ls_where
	lstr_pick.s_retrieve_by[1]			= ""
	lstr_pick.s_new_reference[1]		= "contact"
	lstr_pick.b_hide_new = ib_hide_quick_select_new
	lstr_pick.sl_profile_id                   = il_profile_id //DevOps 15186 04/15/2020
	lstr_pick.l_doc_type					= il_doc_type //DevOps 16762 info_gde 07/13/2020; PROD EQAI - Price Confirmation - Contact List Blank
	
	OpenWithParm(w_popup_quick_select, lstr_pick)
	
	//commented out DevOps 13988 fix in favor of IsValid() DevOps 14333
	if isvalid(message.powerobjectparm) then
		any   la_power_object_parm
		la_power_object_parm = Message.PowerObjectParm
		////DevOps #13988; info_gde 02/04/20 -- start
		//If Error.Number = 0 Then Return 0
		////DevOps #13988; info_gde 02/04/20 -- end

		IF  ClassName(la_power_object_parm) = "str_pick" THEN 
			lstr_pick = Message.PowerObjectParm 
			IF isvalid(lstr_pick) THEN
				ls_class = ClassName(lstr_pick)
				IF Lower(ls_class) = "str_pick" THEN
					IF UpperBound(lstr_pick.return1) = 0 THEN
						ll_contact_id = 0
					ELSE
						ll_contact_id = lstr_pick.return1[1]
						is_email = lstr_pick.return12[1] //DevOps:57361
						is_first_name = lstr_pick.return14[1] //DevOps:57361
						is_last_name = lstr_pick.return15[1] //DevOps:57361
					END IF
				ELSE
					//lb_cancel = TRUE
					ll_contact_id = -1
				END IF
			ELSE
				//lb_cancel = true
				ll_contact_id = -1
			END IF
		ELSEIF ClassName(la_power_object_parm) = "str_customer_new"   THEN 
	 		lstr_contact =  Message.PowerObjectParm 
			IF isvalid(lstr_contact) THEN
				ll_contact_id = lstr_contact.new_id
			END IF
		END IF
	else
		ll_contact_id = 0
	end if
ELSE
	// Customer has no contacts
	ll_contact_id = 0
END IF

RETURN ll_contact_id
end function

public function string wf_validate_tx_waste_codes ();integer	li_tx_waste_code_count, li_idx, li_tx_outs_count, li_tx_cesq_count, li_wcxg_count
string	ls_waste_code, ls_permit, ls_error, ls_origin, ls_haz_flag, ls_state, ls_labpack_flag, ls_generic_flag
Long		ll_waste_code_count, ll_waste_code_uid, ll_generator_id, ll_customer_id, ll_orig_customer_id
integer	li_tx_spil_count, li_tx_univ_count, li_tx_hous_count, li_tx_tsdf_count, li_tx_rrct_count

ls_error = ""
li_tx_waste_code_count = 0
li_tx_outs_count = 0
li_tx_cesq_count = 0
li_tx_spil_count = 0 
li_tx_univ_count = 0 
li_tx_hous_count = 0 
li_tx_tsdf_count = 0
li_tx_rrct_count = 0

// MPM - 4/12/2018 - GEM 49270
ll_waste_code_count = idw_waste_code_state.Rowcount()
FOR li_idx = 1 TO ll_waste_code_count
	ls_waste_code		= idw_waste_code_state.Object.waste_code[li_idx]
	ls_state 				= idw_waste_code_state.Object.state[li_idx]
	IF ls_state = 'TX' THEN
		li_tx_waste_code_count++
		IF Left(ls_waste_code, 4) = 'OUTS' THEN li_tx_outs_count++
		IF Left(ls_waste_code, 4) = 'CESQ' THEN li_tx_cesq_count++
		// MPM - 6/15/2018 - GEM 51357
		IF Left(ls_waste_code, 4) = 'SPIL' THEN li_tx_spil_count++
		IF Left(ls_waste_code, 4) = 'UNIV' THEN li_tx_univ_count++
		IF Left(ls_waste_code, 4) = 'HOUS' THEN li_tx_hous_count++
		IF Left(ls_waste_code, 4) = 'TSDF' THEN li_tx_tsdf_count++
		IF Left(ls_waste_code, 4) = 'RRCT' THEN li_tx_rrct_count++
	END IF
NEXT

IF il_curr_row > 0 THEN
	ll_generator_id = idw_header.Object.generator_id[il_curr_row]
	IF IsNull(ll_generator_id) THEN ll_generator_id = -999
	ls_labpack_flag = idw_header.Object.labpack_flag[il_curr_row]
	IF IsNull(ls_labpack_flag) THEN ls_labpack_flag = 'F'
	ls_generic_flag = idw_header.Object.generic_flag[il_curr_row]
	IF IsNull(ls_generic_flag) THEN ls_generic_flag = 'F'
	ll_customer_id = idw_header.Object.customer_id[il_curr_row]
	IF IsNull(ll_customer_id) THEN ll_customer_id = -999
	ll_orig_customer_id = idw_header.Object.orig_customer_id[il_curr_row]
	IF IsNull(ll_orig_customer_id) THEN ll_orig_customer_id = -999
END IF

IF li_tx_waste_code_count > 1 AND ls_labpack_flag <> 'T' AND ls_generic_flag <> 'T' AND ll_generator_id <> 0 AND &
	li_tx_outs_count <= 1 AND li_tx_cesq_count <= 1 THEN
	If ls_error > "" Then
		ls_error = ls_error + "~r~r"
	End If
	ls_error = ls_error + "Error:  Please check the state waste codes for this profile. More than one Texas waste code is currently assigned."
END IF

IF li_tx_outs_count > 1 THEN
	If ls_error > "" Then
		ls_error = ls_error + "~r~r"
	End If
	ls_error = ls_error + "Error:  Please check the state waste codes for this profile. More than one Texas OUTS waste code is currently assigned."
END IF

IF li_tx_cesq_count > 1 THEN
	If ls_error > "" Then
		ls_error = ls_error + "~r~r"
	End If
	ls_error = ls_error + "Error:  Please check the state waste codes for this profile. More than one Texas CESQ waste code is currently assigned."
END IF

// MPM - 6/15/2018 - GEM 51357
IF li_tx_cesq_count > 0 AND li_tx_univ_count > 0 THEN
	If ls_error > "" Then
		ls_error = ls_error + "~r~r"
	End If
	ls_error = ls_error + "Error:  This profile has conflicting Texas waste codes. This should not have both CESQ and UNIV Texas state codes. Please correct this to assign only one (CESQ or UNIV)."
END IF

/*
if a profile’s generator_id > 0 ,
	if there are any TX waste codes on the profile,
	    if there isn’t a row in WasteCodeXGenerator for the generator_id and each TX waste code,
         	prompt with error
if a profile’s generator_id = 0,
	if there are any TX waste  codes on the profile,
		if there isn’t at least one row in WasteCodeXGenerator for any of the generator_id’s in CustomerGenerator,
         	prompt with error
*/
IF ll_generator_id > 0 THEN
	IF li_tx_waste_code_count > 0 THEN

		FOR li_idx = 1 TO ll_waste_code_count
			ll_waste_code_uid = idw_waste_code_state.Object.waste_code_uid[li_idx]
			ls_waste_code		= idw_waste_code_state.Object.waste_code[li_idx]
			ls_state 				= idw_waste_code_state.Object.state[li_idx]
			// MPM - 6/15/2018 - GEM 51357 - TX waste codes beginning with CESQ, OUTS, SPIL, UNIV, HOUS, TSDF or RRCT do not require a linked generator, so skip them.
			IF ls_state <> 'TX' OR &
				(ls_state = 'TX' AND Left(ls_waste_code,4) = 'CESQ') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'OUTS') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'SPIL') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'UNIV') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'HOUS') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'TSDF') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'RRCT') &
				THEN CONTINUE
			
			SELECT COUNT(*)
			  INTO :li_wcxg_count
			  FROM WasteCodeXGenerator
			 WHERE generator_id = :ll_generator_id
				AND waste_code_uid = :ll_waste_code_uid
			USING itr_share;
			
			IF li_wcxg_count < 1 THEN
				If ls_error > "" Then
					ls_error = ls_error + "~r~r"
				End If
				ls_error = ls_error + "Error:  Please check the state waste codes for this profile. Waste code " + ls_waste_code + " needs to be linked to the generator (" + String(ll_generator_id) + ") on the Waste Code Maintenance screen before it can be assigned to this profile."
			END IF
		NEXT
	END IF
ELSEIF ll_generator_id = 0 THEN
	IF li_tx_waste_code_count > 0 THEN
		FOR li_idx = 1 TO ll_waste_code_count
			ll_waste_code_uid = idw_waste_code_state.Object.waste_code_uid[li_idx]
			ls_waste_code		= idw_waste_code_state.Object.waste_code[li_idx]
			ls_state 				= idw_waste_code_state.Object.state[li_idx]
			// MPM - 6/15/2018 - GEM 51357 - TX waste codes beginning with CESQ, OUTS, SPIL, UNIV, HOUS, TSDF or RRCT do not require a linked generator, so skip them.
			IF ls_state <> 'TX' OR &
				(ls_state = 'TX' AND Left(ls_waste_code,4) = 'CESQ') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'OUTS') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'SPIL') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'UNIV') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'HOUS') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'TSDF') OR &
				(ls_state = 'TX' AND Left(ls_waste_code, 4) = 'RRCT') &
				THEN CONTINUE
			
			SELECT COUNT(*)
			  INTO :li_wcxg_count
			  FROM WasteCodeXGenerator
			 WHERE generator_id IN (SELECT generator_id
			                                        FROM CustomerGenerator
										      WHERE customer_id = :ll_customer_id
											UNION
											SELECT generator_id
			                                        FROM CustomerGenerator
										      WHERE customer_id = :ll_orig_customer_id)
				AND waste_code_uid = :ll_waste_code_uid
			USING itr_share;
			
			IF li_wcxg_count < 1 THEN
				If ls_error > "" Then
					ls_error = ls_error + "~r~r"
				End If
				ls_error = ls_error + "Error:  Please check the state waste codes for this profile. Waste code " + ls_waste_code + " needs to be linked to at least one generator associated with this customer (" + String(ll_customer_id) + ") on the Waste Code Maintenance screen before it can be assigned to this profile."
			END IF
		NEXT
	END IF
END IF

RETURN ls_error
end function

public subroutine wf_filter_air_permit_code (long al_row);datawindowchild	ldwc
int						li_company_id, li_profit_ctr_id
string					ls_filter

idw_approval.GetChild("air_permit_status_uid", ldwc)

IF al_row > 0 THEN
	// Get the company ID and profit center ID of the current row
	li_company_id = idw_approval.object.company_id[al_row]
	li_profit_ctr_id = idw_approval.object.profit_ctr_id[al_row]
	IF NOT IsNull(li_company_id) AND NOT IsNull(li_profit_ctr_id) THEN
		idw_approval.SetRedraw(FALSE)
		// Remove any filter that might be on the CWT category DDDW
		ldwc.SetFilter("")
		ldwc.Filter()
		// Set the detail height for all rows in the DDDW to 60
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 60)
		// Construct a filter string that will filter the rows that we DON'T want to see in the DDDW
		ls_filter = "company_id <> " + String(li_company_id) + " OR profit_ctr_id <> " + String(li_profit_ctr_id)
		// Filter the DDDW 
		ldwc.SetFilter(ls_filter)
		ldwc.Filter()
		// Set the detail height to 0 for those rows
		ldwc.SetDetailHeight(1, ldwc.RowCount(), 0)
		// Remove the filter, and we should see only the rows that match on the company ID and profit center ID
		ldwc.SetFilter("")
		ldwc.Filter()
		idw_approval.SetRedraw(TRUE)
	END IF
END IF


end subroutine

public function integer wf_import_waste (string as_action, long al_row_approval);datetime	ldt_today
integer	li_idx, li_i, li_company_id, li_profit_ctr_id, li_rc, li_first_tab, li_last_tab
long		ll_row_approval, ll_rowcount, ll_row_find, ll_profile_id, ll_row_hdr
string	ls_facility, ls_facility_tabpage, ls_msg, ls_msg_error, ls_access, ls_profile_status

u_tabpage_profile_import_waste ltabpage_profile_import_waste
 
userobject		l_obj
dwobject			ldwo

// Initialize
li_rc = gi_success
ldt_today = DateTime(Today(), Now())
ll_row_hdr = idw_header.getrow( )

li_last_tab = upperbound(itab_import_waste.control)

// The purpose of this function is TO manage the price tabpages FOR the specified action
CHOOSE CASE UPPER(as_action)
	CASE "ACCEPTTEXT"
		FOR li_idx = 1 TO li_last_tab
			l_obj = itab_import_waste.control[li_idx]
			IF IsValid(l_obj) THEN
				l_obj.Dynamic uof_acceptText()
			END IF
		NEXT
		
	CASE "AUDIT"
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					li_rc = ltabpage_profile_import_waste.uof_audit(idt_save_date, idw_approval, 0, FALSE)
					IF li_rc <> gi_success THEN
						EXIT
					END IF
				END IF
			END IF
		NEXT
		
	CASE "CANCEL"
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					ltabpage_profile_import_waste.uof_cancel()
					IF li_rc <> gi_success THEN
						EXIT
					END IF
				END IF
			END IF
		NEXT
		
	CASE "CLOSEPRICETABS"
		// Remove any previously defined tabs
		FOR li_idx = li_last_tab TO 1 STEP -1
			//ltabpage_profile_price = itab_price.control[li_idx]
			l_obj = itab_import_waste.control[li_idx]
			IF IsValid(l_obj) THEN
				itab_import_waste.CloseTab(l_obj)
			END IF
		NEXT

	CASE "COPY"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Make sure it doesn't already exist
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 1 TO li_last_tab
				ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
				IF IsValid(ltabpage_profile_import_waste) THEN
					IF ltabpage_profile_import_waste.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_import_waste.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							li_rc = ltabpage_profile_import_waste.uof_copy()
							EXIT
						END IF
					END IF
				end if
			NEXT
		END IF
		
	CASE "DISCARD"
	ll_row_approval = al_row_approval
	IF ll_row_approval > 0 THEN
		li_company_id = idw_approval.Object.company_id[ll_row_approval]
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
		
		// Find the tab for this facility
		ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")

		ls_facility_tabpage = ""
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					ls_facility_tabpage = ltabpage_profile_import_waste.uof_get_facility()
					IF ls_facility = ls_facility_tabpage THEN
						// Remove the prices
						ltabpage_profile_import_waste.uof_discard(0, "A")
					
						ltabpage_profile_import_waste.visible = false
						ltabpage_profile_import_waste.enabled = false
						itab_import_waste.movetab(li_idx,0)
					END IF						
				END IF
			END IF
		NEXT
	END IF		
		
	CASE "MODIFIEDCOUNT"
		ii_waste_modifiedcunt = 0 
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				ii_waste_modifiedcunt =  ii_waste_modifiedcunt + ltabpage_profile_import_waste.uof_modifiedcount()
			END IF
		NEXT
		
	CASE "NEW"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			ll_profile_id = idw_approval.Object.profile_id[ll_row_approval]
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			ls_access = wf_profile_access(li_company_id)
			
			// ltabpage_profile_import_waste changes 
			// Make sure it doesn't already exist
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 1 TO li_last_tab
				ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
				IF IsValid(ltabpage_profile_import_waste) THEN
					IF ltabpage_profile_import_waste.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_import_waste.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							EXIT
						END IF
					END IF
				end if
			NEXT
			// find the first non visible tab

			li_first_tab = 0
			FOR li_idx = 1 TO li_last_tab
				ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
				IF IsValid(ltabpage_profile_import_waste) THEN
					IF ltabpage_profile_import_waste.visible = false THEN
						li_first_tab = li_idx
						EXIT
					END IF
				end if
			NEXT

			// Create a new tabpage for this facility
			IF ls_facility <> ls_facility_tabpage THEN
				itab_import_waste.OpenTabWithParm(ltabpage_profile_import_waste, iw_profile, li_first_tab)	
				IF IsValid(ltabpage_profile_import_waste) THEN
					ltabpage_profile_import_waste.uof_new(ls_access, li_company_id, li_profit_ctr_id)
					ltabpage_profile_import_waste.uof_refresh( ll_row_approval)
					li_last_tab++
					itabpage_profile_import_waste[li_last_tab] = ltabpage_profile_import_waste
				END IF
			END IF
		END IF
	
	CASE "READONLY_NO"
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					ltabpage_profile_import_waste.uof_readonly("no")
				END IF
			END IF
		NEXT
		
	CASE "READONLY_YES"
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(itab_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					ltabpage_profile_import_waste.uof_readonly("yes")
				END IF
			END IF
		NEXT
		
	CASE "REFRESH"
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find the tab for this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 1 TO li_last_tab
				ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
				IF IsValid(ltabpage_profile_import_waste) THEN
					IF ltabpage_profile_import_waste.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_import_waste.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							// Refresh
							ltabpage_profile_import_waste.uof_refresh( ll_row_approval)
							EXIT
						END IF
					END IF
				end if
			NEXT
		NEXT
		
		CASE "REMOVE"
		ll_row_approval = al_row_approval
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find the tab for this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 1 TO li_last_tab
				ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
				IF IsValid(ltabpage_profile_import_waste) THEN
					IF ltabpage_profile_import_waste.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_import_waste.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							// Remove the prices
							ltabpage_profile_import_waste.uof_delete(0, "A")
							
							ltabpage_profile_import_waste.visible = false
							ltabpage_profile_import_waste.enabled = false
							itab_import_waste.movetab(li_idx,0)
						END IF						
					END IF
				END IF
			NEXT
		END IF
		
		
	CASE "RESET"
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					ltabpage_profile_import_waste.uof_reset()
				END IF
			END IF
		NEXT
		
	CASE "RESETCHANGEFLAGS"
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					ltabpage_profile_import_waste.uof_reset_change_flags()
				END IF
			END IF
		NEXT
		
	CASE "RETRIEVE"
		// Remove any previously defined tabs
		FOR li_idx = li_last_tab TO 1 STEP -1
			l_obj = itab_import_waste.control[li_idx]
			IF IsValid(l_obj) THEN
				itab_import_waste.CloseTab(l_obj)
			END IF
		NEXT
		
		// Create the price tabs
		li_first_tab = 1
		li_last_tab = 1
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			ll_profile_id = idw_approval.Object.profile_id[ll_row_approval]
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			ls_access = wf_profile_access(li_company_id)
		
			// Create a tab FOR this facility
			itab_import_waste.OpenTabWithParm(ltabpage_profile_import_waste, iw_profile, 0)	
			IF IsValid(ltabpage_profile_import_waste) THEN
				ltabpage_profile_import_waste.uof_refresh( ll_row_approval)
				ltabpage_profile_import_waste.uof_retrieve(ls_access, ll_profile_id, li_company_id, li_profit_ctr_id)
				li_last_tab++
				itabpage_profile_import_waste[li_last_tab] = ltabpage_profile_import_waste
			END IF
			
			IF li_first_tab = 0 THEN li_first_tab = ll_row_approval
		NEXT
				
		// Show the first tab
		IF li_last_tab <> 0 THEN
			itab_import_waste.SelectTab(li_first_tab)
		END IF
		
	CASE "SETDATA"
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find the tab for this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 1 TO li_last_tab
				ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
				IF IsValid(ltabpage_profile_import_waste) THEN
					IF ltabpage_profile_import_waste.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_import_waste.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							ltabpage_profile_import_waste.uof_refresh( ll_row_approval)
							ltabpage_profile_import_waste.uof_setdata(idt_save_date)
							EXIT
						END IF
					END IF
				end if
			NEXT
		NEXT
		
	CASE "SHOWPRICE"
		ll_row_approval = idw_approval.GetRow()
		IF ll_row_approval > 0 THEN
			li_company_id = idw_approval.Object.company_id[ll_row_approval]
			li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			
			// Find this facility
			ls_facility = string(li_company_id,"00") + "-" + string(li_profit_ctr_id,"00")
			ls_facility_tabpage = ""
			FOR li_idx = 1 TO li_last_tab
				ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
				IF IsValid(ltabpage_profile_import_waste) THEN
					IF ltabpage_profile_import_waste.visible = true THEN
						ls_facility_tabpage = ltabpage_profile_import_waste.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							tab_1.tabpage_view.tab_2.tabpage_import.tab_import_waste.SelectTab(ltabpage_profile_import_waste)
							ltabpage_profile_import_waste.uof_refresh( ll_row_approval)
						END IF
					END IF
				end if
			NEXT
		END IF

	CASE "UPDATE"
		// update deleted tabs first deleted tabs are invisible
		FOR li_idx = li_last_tab TO 1 STEP -1
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = false THEN
					li_rc = ltabpage_profile_import_waste.uof_update()
					IF li_rc <> gi_success THEN
						EXIT
					end if
				END IF
			end if
		next
		
		li_last_tab = upperbound(itab_import_waste.control)
		
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					li_rc = ltabpage_profile_import_waste.uof_update()
					IF li_rc <> gi_success THEN
						EXIT
					END IF
				END IF
			END IF
		NEXT		

	CASE "UPDATE_CLEANUP"
		FOR li_idx = li_last_tab TO 1 STEP -1
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = false THEN
					ltabpage_profile_import_waste.uof_update_cleanup()
					itab_import_waste.closetab(ltabpage_profile_import_waste)
				END IF
			end if
		next
		
		li_last_tab = upperbound(itab_import_waste.control)
		
		FOR li_idx = 1 TO li_last_tab
			ltabpage_profile_import_waste = itab_import_waste.control[li_idx]
			IF IsValid(ltabpage_profile_import_waste) THEN
				IF ltabpage_profile_import_waste.visible = true THEN
					ltabpage_profile_import_waste.uof_update_cleanup()
				END IF
			END IF
		NEXT		
		
	CASE "VALIDATE"
		
		ls_msg = ""
		is_msg_waste_import = ""
		FOR li_idx = 1 TO li_last_tab
//			ltabpage_profile_price = itab_price.control[li_idx]
//			IF IsValid(ltabpage_profile_price) THEN
//				IF ltabpage_profile_price.visible = true THEN
//					ls_msg = ltabpage_profile_price.uof_validate()
//					is_msg_validate_price = is_msg_validate_price + ls_msg
//				END IF
//			END IF
			l_obj = itab_import_waste.control[li_idx]
			IF IsValid(l_obj) THEN
				ls_msg = l_obj.dynamic uof_validate()
				IF ls_msg <> "" OR NOT IsNull ( ls_msg) THEN 
					is_msg_waste_import = is_msg_waste_import + ls_msg
		     	END IF
			End IF
		NEXT
		
	CASE ELSE
		MessageBox(gs_app_name+": Profile Price", "Price Tab action is not valid.  Please contact I.T. Department.", Exclamation!)
END CHOOSE

RETURN li_rc

end function

public function integer wf_modifiedcount_waste_import ();dwItemStatus ldwItemStatus
boolean	lb_changed_price
long		ll_count, ll_row, ll_count_price
integer 	li_colcount, li_i
string	ls_columns_modified, ls_column_name


//// Anything modified?
//ll_count = 0
//ll_count = ll_count + idw_quoteheader.ModifiedCount()
//ll_count = ll_count + idw_approval.ModifiedCount()
//
//wf_price("MODIFIEDCOUNT", 0)
//ll_count = ll_count + ii_waste_modifiedcunt

wf_import_waste("MODIFIEDCOUNT", 0)
ll_count = ll_count + ii_waste_modifiedcunt

IF ib_changed_approval THEN
	ll_count = ll_count + 1
END IF


RETURN ll_count

end function

public function integer wf_copy_wcr_dragon (str_pass astr_pass);boolean	lb_set_primary, lb_continue, lb_select_all, lb_copy_from_template = FALSE
datetime	ldt_today,ld_signing_date,ld_effective_date, ld_expiration_date,ld_date
double	ldb_null, ldb_wcr_concentration, ld_molecular_weight, ld_density, ld_vapor_pressure,ld_rq_threshold,ld_approved_volume
decimal	ld_tab, ld_generator_tab , ll_226_concentration, ld_flow_weighted_annual_average_benzene, ld_benzene_range_from, ld_benzene_range_to,ld_null
decimal  ll_lead_210_concentration, ll_potassium_40_concentration, ll_radium_228_concentration             // 20200304 jcb #14429, radium_226 already present, adding 210_lead, pot_40 and rad_228 concentrations
String ls_wwwa_halogen_gt_1000, ls_halogen_source2, ls_halogen_source_desc2, ls_halogen_source_other2,ls_additional_inventory_flag
string  ls_item_name,ls_radionuclide_contained,ls_cited_regulatory_exemption,ls_rb_1,ls_rb_2,ls_rb_3,ls_rb_4,ls_constituents_requiring_treatment_flag,ls_approved_volume
long  ll_disposal_site_tsdf_id,ll_rad_supplement_rowcount, ll_rad_supplement_row,ll_concentration,ll_rad_supplement_rowcount_3
long	ll_idx, ll_len, ll_pos, ll_image_id,ll_waste_import_revision_id,ll_benzenesupplement_row,ll_debris_supplement_rowcount
long	ll_row, ll_profile_id, ll_null, ll_form_id_wcr,ll_rev_id_wcr, ll_row_id,ll_benzene_import_supplement_rowcount,ll_thermal_rowcount, ll_pcb_supplement_rowcount
long	ll_row_header, ll_newrow, ll_customer_id, ll_row_technical, ll_row_contact,ll_cylinder_supplement_rowcount,ll_illinois_supplement_rowcount,ll_line_id
long	ll_wcr_cust, ll_wcr_gen, ll_wcr_srec_exempt_id,ll_row_find,ll_thermalsupplement_row,ll_cylindersupplement_row, ll_pcbsupplement_row,ll_rad_supplement_row_3
String ls_profileradioactive_byproduct_sum_of_all_isotopes,ls_profileradioactive_special_nuclear_sum_of_all_isotopes, ls_profileradioactive_source_sof_calculations
long	ll_rowcount, ll_i, ll_const_id, ll_wcr_const_id,ll_btu_per_lb,ll_wastesupplement_row,ll_usedoilsupplement_row,ll_illinoissupplement_row
string ls_importing_generator_name,ls_importing_generator_address,ls_importing_generator_city,ls_importing_generator_province_territory,ls_importing_generator_mail_code
string ls_importing_country_name,ls_import_tech_contact_name,ls_tech_import_contact_phone,ls_tech_import_cont_email
string ls_foreign_exporter_name,	ls_foreign_exporter_address, ls_foreign_exporter_contact_name, 	ls_foreign_exporter_phone, 	ls_foreign_exporter_fax,ls_gen_mail_zip
string	ls_foreign_exporter_email, 	ls_epa_notice_id, 	ls_epa_consent_number, ls_approved_volume_unit,ls_importing_generator_epa_id 
string	ls_status, ls_EPA_ID, ls_generator_name, ls_uhc, ls_null, ls_odor, ls_odor_desc, ls_odor_other_desc, ls_free_liquids
string	ls_waste_common_name, ls_locked, ls_frequency, ls_frequency_other,ls_oil_bearing_from_refining_flag,ls_oil_are_fuel_flag
string	ls_wcr_waste_common_name, ls_wcr_color, ls_wcr_sr_exempt, ls_wcr_dot_shipping_name,ls_debris_certification_flag
string	ls_shipping_volume_unit_other,ls_avg_h20_gr_10,ls_thermal_rcra_excluded_hsm_flag,ls_requiring_treatment_flag
string	ls_cust_name, ls_gen_name, ls_waste_code, ls_unit, ls_wcr_unit,ls_thermal_petroleum_refining_f037_flag,ls_haz_flag
string	ls_consistency_solid, ls_consistency_dust, ls_consistency_liquid, ls_consistency_sludge,ls_short_waste_code,ls_waste_type_code
string	ls_consistency, ls_facility_instruction,ls_thermal_gen_name,ls_thermal_generator_epa_id,ls_inv_contact_email,ls_inv_phone_number
String	ls_ph_lte_2, ls_ph_gt_2_lt_5, ls_ph_gte_5_lte_10, ls_ph_gt_10_lt_12_5, ls_ph_gte_12_5, ls_pH_NA
String	ls_ignitability_lt_90, ls_ignitability_90_139, ls_ignitability_140_199, ls_ignitability_gte_200, ls_ignitability_na
String ls_uranium_thorium_flag,ls_uranium_source_material,ls_radium_226_flag,ls_radium_228_flag,ls_lead_210_flag,ls_potassium_40_flag
String ls_exempt_byproduct_material_flag,ls_special_nuclear_material_flag,ls_accelerator_flag,ls_generated_in_particle_accelerator_flag,ls_dod_non_licensed_disposal_flag
String ls_approved_for_disposal_flag,ls_approved_by_nrc_flag,ls_approved_for_alternate_disposal_flag,ls_nrc_exempted_flag,ls_released_from_radiological_control_flag
String ls_originating_generator_name,ls_originating_generator_epa_id, ls_type_of_facility, ls_tab_lt_1_megagram,ls_tab_gte_1_and_lt_10_megagram,ls_tab_gte_10_megagram

String  ls_activity,ls_total_number_in_shipment,ls_profileradioactive_material_exempted_by_usa_flag, ls_profileradioactive_material_released_by_government_flag,ls_yes_no_q8   // 20200404 jcb #14878
String ls_foreign_exporter_city,ls_foreign_exporter_province_territory,ls_foreign_exporter_mail_code,ls_foreign_exporter_country

Long ll_debrissupplement_row,ll_used_oil_supplement_rowcount
Long ll_profile_waste_managed_id, ll_wcr_id,ll_wcr_facility_company_id,ll_wcr_facility_profit_ctr_id,ll_select_row_count
Long ll_rad_supplement_row_2,ll_rad_supplement_rowcount_2,ll_rad_supplement_rowcount_1,ll_order
Long 	ll_pcb_form_id,ll_used_oil_form_id, ll_debris_form_id,ll_formcgc_form_id,ll_form_thermal_id, ll_benzene_form_id,ll_waste_import_form_id
Long  ll_ldr_form_id,ll_illinois_form_id,ll_radioactive_form_id,ll_form_sectionstatus_count,ll_profile_waste_code_uid
//Properties
String	ls_properties_none, ls_shock_sensitive_waste, ls_biohazard, ls_aluminum, ls_oily_residue, ls_asbestos_friable,ls_dot_waste_flag
String 	ls_pyrophoric_waste, ls_metal_fines,  ls_furans, ls_air_reactive, ls_react_cyanide, ls_isocyanates,ls_section_F_none_apply_flag
String	ls_explosives, ls_radioactive_waste, ls_react_sulfide, ls_water_reactive, ls_asbestos_non_friable,ls_classified_as_product_tank_drawdown
String	ls_biodegradable_sorbents, ls_temp_ctrl_org_peroxide, ls_norm, ls_tenorm
double  ld_fm25d, ld_fm305
String   ls_ddvoc, ls_voc, ls_caavoc,ls_is_process_unit_turnaround,ls_classified_as_process_wastewater_stream,ls_classified_as_landfill_leachate
String	ls_gen_process, ls_handling_issue, ls_handling_issue_desc
String	ls_rcra_haz_flag, ls_rcra_exempt_reason, ls_rcra_listed, ls_rcra_characteristic, ls_cyanide_plating
String	ls_epa_form_code, ls_epa_source_code,ls_form_approval_code
String	ls_info_basis_knowledge, ls_info_basis_analysis, ls_info_basis_msds,ls_incecticides_flag
String	ls_exceed_ldr_standards,ls_RCRA_waste_code_flag,ls_consistency_debris,ls_consistency_gas_aerosol,ls_consistency_varies, ls_waste_meets_ldr_standards
String	ls_waste_water_flag, ls_meets_alt_soil_treatment_stds,ls_radionuclide
String	ls_more_than_50_pct_debris, ls_debris_dimension_weight
String	ls_michigan_non_haz, ls_univ_recyclable_commodity, ls_used_oil, ls_wwa_halogen_gt_1000
String	ls_halogen_source, ls_halogen_source_desc, ls_halogen_source_other
String	ls_pcb_concentration_none,  ls_pcb_concentration_0_49, ls_pcb_concentration_50_499, ls_pcb_concentration_500, ls_pcb_source_concentration_gr_50
String	ls_pcb_processed_into_non_liquid, ls_pcb_processd_into_nonlqd_prior
String	ls_pcb_manufacturer, ls_pcb_article_decontaminated, ls_pcb_non_lqd_contaminated_media,ls_req_treatment_flag
String	ls_ccvocgr500, ls_ddvohapgr500, ls_neshap_flag, ls_neshap_chem_1, ls_neshap_chem_2
String	ls_neshap_subpart, ls_benzene, ls_neshap_sic,ls_disposal_site_tsdf_code
String	ls_benzene_onsite_mgmt, ls_benzene_onsite_mgmt_desc,ls_generator_generator_zip_code
String	ls_tab_gr_10,ls_generator_address_1,ls_generator_address_2,ls_generator_address_3,ls_generator_address_4,ls_generator_generator_city,ls_generator_generator_state
String ls_rcra_waste_code_1,ls_rcra_waste_code_2,ls_rcra_waste_code_3,ls_rcra_waste_code_4,ls_rcra_waste_code_5,ls_rcra_waste_code_6,ls_rcra_waste_code_7
String ls_rcra_waste_code_8,ls_rcra_waste_code_9,ls_rcra_waste_code_10,ls_rcra_waste_code_11,ls_rcra_waste_code_12
String  s_incecticides_flag,ls_pesticides_flag,ls_carcinogen_flag,ls_household_waste_flag,ls_herbicides_flag,ls_other_specify,ls_other_flag
String ls_sulfide_10_250_flag,ls_universal_waste_flag,ls_characteristic_sludge_flag,ls_virgin_unused_product_flag,ls_spent_material_flag 
String ls_cyanide_plating_on_site_flag,ls_com_product_flag,ls_by_product_flag,ls_rx_lime_flammable_gas_flag,ls_profilequoteapproval_ldr_req_flag
LONG		ll_sic_code, ll_neshap_standards_part, ll_waste_import_supplement_rowcount,ll_ldr_subcategory_id
Long 		ll_source_form_id, ll_source_revision_id, ll_template_form_id,ll_rad_supplement_row_1,ll_NAICS_code
 int 		i    ,li_ignitability_compare_temperature ,li_wcr_rev_id
DOUBLE	ldb_benzene_concentration, ldb_comp_from_pct, ldb_comp_to_pct, ldb_concentration, ldb_min_concentration, ldb_comp_typical_pct,ldb_typical_concentration
DOUBLE ldb_react_sulfide_ppm,ldb_react_cyanide_ppm,ld_composition_water_percent,ld_composition_solids_percent,ld_composition_organics_oil_tph_percent,ld_heating_value_btu_lb
String	ls_benzene_unit, ls_comp_desc
String	ls_dot_shipping_desc, ls_package_group, ls_un_na_flag, ls_erg_suffix, ls_hazmat_flag, ls_hazmat_class, ls_subsidiary_haz_mat_class, ls_rq, ls_rq_reason
LONG		ll_un_na_number, ll_erg_number, ll_attachment_cnt,ll_generator_type_id
String	ls_template_name	,ls_f037_flag, ls_f038_flag,ls_k048_flag,ls_k049_flag 
String ls_k050_flag,ls_k051_flag,ls_k052_flag,ls_k169_flag,ls_k170_flag
String ls_k171_flag,ls_k172_flag,ls_petroleum_refining_no_waste_code_flag
String ls_thermal_gen_process
String	ls_state_waste_code_flag, ls_uhc_flag,ls_benz_avg_h20_gr_10
String ls_gen_mail_addr1,ls_gen_mail_city,ls_generator_country,ls_gen_mail_state,ls_gen_mail_zip_code,ls_gen_mail_country
String	ls_generator_contact, ls_generator_contact_title, ls_generator_phone, ls_generator_fax, ls_generator_email,ls_find,ls_generator_type
String	ls_inv_contact_name, ls_inv_contact_phone, ls_inv_contact_fax,ls_signing_name,ls_signing_title,ls_signing_company
String	ls_tech_contact_name, ls_tech_contact_phone, ls_tech_contact_fax, ls_tech_cont_email, ls_tech_contact_mobile
Long	ll_waste_code_UID, ll_template_id, ll_default_seq, ll_sequence_id,ll_cylinder_quantity,ll_cylinder_type_id,ll_heaviest_gross_weight,ll_ldr_supplement_row,ll_idr_supplement_rowcount
String	ls_waste_code_origin, ls_state, ls_manifest_dot_sp_number, ls_rcra_exempt_flag, ls_composition_unit,ls_btu_per_lb
String ls_dot_shipping_desc_additional,ls_DOT_sp_permit_text,ls_dot_sp_permit_flag,ls_DOT_inhalation_haz_flag,ls_container_type_bulk
String ls_container_type_totes,ls_container_type_pallet,ls_container_type_boxes,ls_container_type_drums,ls_container_type_cylinder,ls_container_type_labpack
String ls_container_type_combination,ls_container_type_combination_desc,ls_container_type_other,ls_container_type_other_desc,ls_emergency_phone_number
String ls_odor_strength,ls_odor_type_ammonia,ls_odor_type_amines,ls_odor_type_mercaptans,ls_odor_type_sulfur,ls_odor_type_organic_acid,ls_odor_type_other,ls_liquid_phase
String ls_paint_filter_solid_flag,ls_incidental_liquid_flag,ls_ignitability_does_not_flash,ls_ignitability_flammable_solid,ls_btu_lt_gt_5000
String ls_texas_waste_material_type,ls_texas_state_waste_code,ls_pa_residual_waste_flag,ls_TCLP_or_totals,ls_exceeds_ldr,ls_reactive_other,ls_reactive_other_description
String ls_contains_pcb,ls_dioxins_or_furans,ls_thermally_unstable,ls_compressed_gas,ls_oxidizer,ls_tires,ls_organic_peroxide,ls_beryllium_present,ls_asbestos_flag,ls_asbestos_friable_flag
String ls_ammonia_flag,ls_hazardous_secondary_material,ls_hazardous_secondary_material_cert,ls_pharma_waste_subject_to_prescription,ls_waste_treated_after_generation
String ls_wastetreated_after_generation_desc,	ls_debris_separated,ls_debris_not_mixed_or_diluted,ls_ldr_subcategory,ls_origin_refinery,ls_specific_technology_requested
String ls_requested_technology,ls_thermal_process_flag,ls_other_restrictions_requested ,ls_container_bill_unit, ls_is_bill_unit_table_lookup, ls_po_required,ls_purchase_order
String  ls_CGA_number,	ls_original_label_visible_flag, ls_manufacturer,	 ls_markings_warnings_comments, ls_DOT_shippable_flag,ls_poisonous_inhalation_flag
String  ls_hazard_zone,ls_DOT_not_shippable_reason,ls_DOT_ICC_number,  ls_heaviest_gross_weight_unit, ls_external_condition,ls_corrosion_color
String  ls_cylinder_pressure,ls_pressure_relief_device, ls_protective_cover_flag, ls_workable_valve_flag, ls_threads_impaired_flag, ls_valve_condition
String  ls_phenol_gt_1000_flag, ls_signature_2, ls_generator_state_id, ls_d004_above_PQL
String ls_d005_above_PQL, ls_d006_above_PQL, ls_d007_above_PQL, ls_d008_above_PQL, ls_d009_above_PQL, ls_d010_above_PQL, ls_d011_above_PQL
String ls_d012_above_PQL, ls_d013_above_PQL, ls_d014_above_PQL, ls_d015_above_PQL, ls_d016_above_PQL, ls_d017_above_PQL, ls_d018_above_PQL
String ls_d019_above_PQL, ls_d020_above_PQL, ls_d021_above_PQL, ls_d022_above_PQL, ls_d023_above_PQL, ls_d024_above_PQL,ls_d025_above_PQL
String ls_d026_above_PQL, ls_d027_above_PQL, ls_d028_above_PQL, ls_d029_above_PQL,ls_d030_above_PQL,ls_d031_above_PQL,ls_d032_above_PQL
String ls_d033_above_PQL,ls_d034_above_PQL,ls_d035_above_PQL,ls_d036_above_PQL,ls_d037_above_PQL,ls_d038_above_PQL,ls_d039_above_PQL3
String ls_d040_above_PQL,ls_d041_above_PQL,ls_d042_above_PQL,ls_d043_above_PQL,ls_none_apply_flag,ls_signature, ls_d039_above_PQL
String ls_profileradioactive_generated_in_particle_accelerator_flag,ls_profileradioactive_approved_for_dispos_1,ls_profileradioactive_approved_by_nrc_fla_1
String ls_profileradioactive_approved_for_altern_1,ls_profileradioactive_nrc_exempted_flag_1,ls_profileradioactive_released_from_radio_1,ls_profileradioactive_dod_non_licensed_disposal_flag
String	 ls_profileradioactive_usei_wac_table_c1_flag, ls_profileradioactive_usei_wac_table_c2_flag,ls_profileradioactive_usei_wac_table_c3_flag,ls_profileradioactive_usei_wac_table_c4a_flag
String ls_profileradioactive_usei_wac_table_c4b_flag,ls_profileradioactive_usei_wac_table_c4c_flag,ls_profileradioactive_waste_type
String  ls_pcb_concentration_0_9, ls_pcb_concentration_10_49,ls_gen_mail_addr2, ls_quantity
String ls_pcb_under_TSCA, ls_processed_into_non_liquid , ls_processd_into_nonlqd_prior_pcb
String ls_pcb_article_for_TSCA_landfill , ls_wcr_sign_name, ls_wcr_sign_company, ls_wcr_sign_title
long ll_percent_of_ash,ll_specific_halogens_ppm,ll_specific_mercury_ppm,ll_specific_svm_ppm,ll_specific_lvm_ppm,ll_bitumen_asphalt_tar_ppm,ll_oxygenates_ppm
long ll_specific_organic_chlorine_from_vocs_ppm,ll_specific_sulfides_ppm,ll_non_friable_debris_gt_2_inch_ppm, ll_profile_radioactive_waste_row
string ls_non_friable_debris_gt_2_inch_flag,ls_self_heating_properties_flag,ls_bitumen_asphalt_tar_flag,ls_fuel_oxygenates_flag
string ls_centrifuge_prior_to_shipment_flag,ls_surfactants_flag, ls_foreign_exporter_sameas_generator, ls_uranium_concentration, ls_specifically_exempted_flag
string	ls_oxygenates_MTBE_flag, ls_oxygenates_ethanol_flag, ls_oxygenates_other_flag, ls_routing_facility, ls_wcr_facility_name, ls_pfas_flag 
integer li_Count

//Long ll_profile_id
DateTime ldt_wcr_sign_date 
Boolean  lb_rad_supplement_row_2
String ls_univ_treatment_std_nww_unit,ls_is_UHC_flag
Long ll_univ_treatment_std_nww
Datawindow	ldw
dwobject	ldwo
SetNull(ll_null)
 
DWItemStatus	ldwitemstatus
DataStore ds_form_unit, ds_waste_import_supplement

SetNull( ls_null )
SetNull( ll_null )
SetNull(ld_null)

ldt_today = DateTime(Today(), Now())
lb_rad_supplement_row_2=False //DevOps #15001 info_gde 04/02/2020;
ll_profile_id =astr_pass.l[4]

//If IsNull( :astr_pass.l[4] ) AND ll_template_id > 0 Then 
If IsNull( astr_pass.l[4] ) AND astr_pass.l[5] > 0 Then 
	lb_select_all = TRUE   //new profile, copy from template
	lb_copy_from_template = TRUE
ELSEIF Not Isnull ( astr_pass.l[4] ) THEN
    lb_select_all = TRUE   //existing profile, copy from form
Else
	lb_select_all = False
End If

// SK 07/17/2013 Corrected the logic used to determine the lb_copy_from_template value
//astr_pass.l[1] is the form ID and if it is a template then copy_From_template should be true
// Check for existence of template
SELECT FormWCRTemplate.template_form_id
INTO :ll_template_id
FROM FormWCRTemplate
WHERE FormWCRTemplate.template_form_id = :astr_pass.l[1]
USING itr_forms;

IF itr_forms.SQLCode = 0 AND ll_template_id > 0 THEN
	lb_copy_from_template = TRUE
END IF

// MPM - 4/3/2020 - DevOps 14911/DevOps 14875 - Corrected how DOT_shipping_name is brought over from COR.
// MPM - 6/12/2020 - DevOps 16235 - Reworked changes made under DevOps 15576.

SELECT facility_instruction, 
		FormWCR.generator_id,
		FormWCR.EPA_ID,
		FormWCR.generator_name,
		FormWCR.customer_id,
		cust_name,
		locked,
		FormWCR.customer_id, FormWCR.generator_id, waste_common_name, 
		color, surcharge_exempt, srec_exempt_id, 
		CASE WHEN Left(dot_shipping_name, 6) = 'Waste ' AND Len(dot_shipping_name) >= 7
				THEN 'Waste, ' + Substring(dot_shipping_name, 7, Len(dot_shipping_name))
				ELSE dot_shipping_name END as dot_shipping_name,
		frequency, frequency_other, volume, odor, odor_other_desc,
		consistency = (case when FormWCR.consistency_solid ='T' then 'SOLID:' else '' end )  + 
						  (case when FormWCR.consistency_dust='T' then 'DUST/POWDER:' else '' end )  + 
						  (case when FormWCR.consistency_debris='T' then 'DEBRIS:' else '' end )  + 
						  (case when FormWCR.consistency_sludge='T' then 'SLUDGE:' else '' end )  + 
						  (case when FormWCR.consistency_liquid='T' then 'LIQUID:' else '' end )  + 
						  (case when FormWCR.consistency_gas_aerosol='T' then 'GAS/AEROSOL' else '' end ) +
						  (case when FormWCR.consistency_varies='T' then 'VARIES' else '' end) ,
		free_liquids, 
		ignitability_lt_90, ignitability_90_139, ignitability_140_199, ignitability_gte_200, ignitability_na,
		ph_lte_2, ph_gt_2_lt_5, ph_gte_5_lte_10, ph_gt_10_lt_12_5, ph_gte_12_5, pH_NA,
		waste_contains_spec_hand_none,
		shock_sensitive_waste,
		biohazard,
		aluminum,
		oily_residue,
		asbestos_friable,
		pyrophoric_waste,
		metal_fines_powder_paste,
		dioxins_or_furans,
		furans,
		air_reactive,
		react_cyanide,
		isocyanates,
		explosives,
		radioactive,
		react_sulfide,
		water_reactive,
		asbestos_non_friable,
		biodegradable_sorbents,
		temp_control,
		norm,
		tenorm,
		gen_process,		
		handling_issue, handling_issue_desc,
		rcra_exempt_flag, rcra_exempt_reason, rcra_listed, rcra_characteristic, cyanide_plating,
		epa_source_code, epa_form_code,
		info_basis_knowledge, info_basis_analysis, info_basis_msds,
		exceed_ldr_standards,
		waste_meets_ldr_standards,
		waste_water_flag, meets_alt_soil_treatment_stds,
		more_than_50_pct_debris, debris_dimension_weight,
		michigan_non_haz, universal_recyclable_commodity, used_oil, wwa_halogen_gt_1000,
		wwa_halogen_source, wwa_halogen_source_desc1, wwa_other_desc_1,
		pcb_concentration_none,  pcb_concentration_0_49, pcb_concentration_50_499, pcb_concentration_500,
		pcb_source_concentration_gr_50, processed_into_non_liquid, processd_into_nonlqd_prior_pcb,
		pcb_manufacturer, pcb_article_decontaminated, pcb_non_lqd_contaminated_media,
		ccvocgr500, ddvohapgr500, subject_to_mact_neshap, neshap_chem_1, neshap_chem_2,
		neshap_standards_part, neshap_subpart, benzene, neshap_sic, FormWCR.sic_code,
		benzene_onsite_mgmt, benzene_onsite_mgmt_desc,
		tab_gr_10, avg_h20_gr_10, 
		FormWCR.tab, benzene_concentration, benzene_unit,
		dot_shipping_desc, package_group, un_na_flag, un_na_number, erg_number, erg_suffix, 
		hazmat_flag, hazmat_class, subsidiary_haz_mat_class, reportable_quantity_flag, RQ_reason,
		Coalesce(T1.name, T2.name),
		state_waste_code_flag, underlying_haz_constituents, 
		source_form_id, source_revision_id, FormWCR. template_form_id,
		generator_contact, generator_contact_title, FormWCR.generator_phone, FormWCR.generator_fax, FormWCR.generator_email,
		inv_contact_name, inv_contact_phone, inv_contact_fax,inv_contact_email,inv_contact_phone,
		tech_contact_name, tech_contact_phone, tech_contact_fax, tech_cont_email, tech_contact_mobile, manifest_dot_sp_number,G.TAB,
		rq_threshold, dot_shipping_desc_additional, DOT_sp_permit_text,
		dot_sp_permit_flag,DOT_inhalation_haz_flag,container_type_bulk,
		container_type_totes,container_type_pallet,container_type_boxes,container_type_drums,container_type_cylinder,container_type_labpack,container_type_combination,
		container_type_combination_desc,container_type_other,container_type_other_desc,FormWCR.emergency_phone_number,		
         odor_strength,odor_type_ammonia,odor_type_amines,odor_type_mercaptans,odor_type_sulfur, odor_type_organic_acid, odor_type_other, liquid_phase,
		paint_filter_solid_flag,incidental_liquid_flag,ignitability_compare_temperature,ignitability_does_not_flash,ignitability_flammable_solid,btu_lt_gt_5000,btu_per_lb,
		texas_waste_material_type,texas_state_waste_code,pa_residual_waste_flag,react_sulfide_ppm,react_cyanide_ppm,reactive_other,reactive_other_description,contains_pcb,
		thermally_unstable,compressed_gas,oxidizer,tires,organic_peroxide,beryllium_present,asbestos_flag,asbestos_friable_flag,ammonia_flag,hazardous_secondary_material,
		hazardous_secondary_material_cert,pharma_waste_subject_to_prescription,waste_treated_after_generation,waste_treated_after_generation_desc,
		debris_separated,debris_not_mixed_or_diluted,ldr_subcategory,origin_refinery,specific_technology_requested,requested_technology,thermal_process_flag,
		other_restrictions_requested,po_required,purchase_order,signing_name,signing_date,signing_title,signing_company,RCRA_waste_code_flag,copy_source,
		FormWCR.generator_address1,FormWCR.generator_address2,FormWCR.generator_address3,FormWCR.generator_address4,FormWCR.generator_city,FormWCR.generator_state,FormWCR.generator_zip,
		FormWCR.section_F_none_apply_flag,consistency_solid,consistency_dust,consistency_debris,consistency_sludge,consistency_liquid,consistency_gas_aerosol,consistency_varies,
		G.generator_country,FormWCR.gen_mail_address1,FormWCR.gen_mail_address2,FormWCR.gen_mail_city,FormWCR.gen_mail_state,FormWCR.gen_mail_zip,G.gen_mail_country,dot_waste_flag,FormWCR.generator_type_ID,FormWCR.NAICS_code, 
		ProfitCenter.profit_ctr_name + ' (' + replace(str(FormWCRAssignments.company_id, 2, 0), ' ', '0') + '-' +replace(str(FormWCRAssignments.profit_ctr_id, 2, 0), ' ', '0') +')', FormWCR.pfas_flag,
		FormWCR.approval_code
INTO	:ls_facility_instruction,
		:ll_wcr_gen,
		:ls_EPA_ID, 
		:ls_generator_name, 
		:ll_customer_id, 
		:ls_cust_name, 
		:ls_locked,
		:ll_wcr_cust, :ll_wcr_gen, :ls_wcr_waste_common_name, 
		:ls_wcr_color, :ls_wcr_sr_exempt, :ll_wcr_srec_exempt_id, :ls_wcr_dot_shipping_name,
		:ls_frequency, :ls_frequency_other, :ls_shipping_volume_unit_other,
		:ls_odor_desc, :ls_odor_other_desc,
		:ls_consistency,
		:ls_free_liquids, 
		:ls_ignitability_lt_90, :ls_ignitability_90_139, :ls_ignitability_140_199, :ls_ignitability_gte_200, :ls_ignitability_na,
		:ls_ph_lte_2, :ls_ph_gt_2_lt_5, :ls_ph_gte_5_lte_10, :ls_ph_gt_10_lt_12_5, :ls_ph_gte_12_5, :ls_pH_NA,
		:ls_properties_none,
		:ls_shock_sensitive_waste,
		:ls_biohazard,
		:ls_aluminum,
		:ls_oily_residue,
		:ls_asbestos_friable,
		:ls_pyrophoric_waste,
		:ls_metal_fines,
		:ls_dioxins_or_furans,
		:ls_furans,
		:ls_air_reactive,
		:ls_react_cyanide,
		:ls_isocyanates,
		:ls_explosives,
		:ls_radioactive_waste,
		:ls_react_sulfide,
		:ls_water_reactive,
		:ls_asbestos_non_friable,
		:ls_biodegradable_sorbents,
		:ls_temp_ctrl_org_peroxide,
		:ls_norm,
		:ls_tenorm,
		:ls_gen_process,
		:ls_handling_issue, :ls_handling_issue_desc,
		:ls_rcra_exempt_flag, :ls_rcra_exempt_reason, :ls_rcra_listed, :ls_rcra_characteristic, :ls_cyanide_plating,
		:ls_epa_source_code, :ls_epa_form_code,
		:ls_info_basis_knowledge, :ls_info_basis_analysis, :ls_info_basis_msds,
		:ls_exceed_ldr_standards,
		:ls_waste_meets_ldr_standards,
		:ls_waste_water_flag, :ls_meets_alt_soil_treatment_stds,
		:ls_more_than_50_pct_debris, :ls_debris_dimension_weight,
		:ls_michigan_non_haz, :ls_univ_recyclable_commodity, :ls_used_oil, :ls_wwa_halogen_gt_1000,
		:ls_halogen_source, :ls_halogen_source_desc, :ls_halogen_source_other,
		:ls_pcb_concentration_none,  :ls_pcb_concentration_0_49, :ls_pcb_concentration_50_499, 
		:ls_pcb_concentration_500, :ls_pcb_source_concentration_gr_50,
		:ls_pcb_processed_into_non_liquid, :ls_pcb_processd_into_nonlqd_prior,
		:ls_pcb_manufacturer, :ls_pcb_article_decontaminated, :ls_pcb_non_lqd_contaminated_media,
		:ls_ccvocgr500, :ls_ddvohapgr500, :ls_neshap_flag, :ls_neshap_chem_1, :ls_neshap_chem_2,
		:ll_neshap_standards_part, :ls_neshap_subpart, :ls_benzene, :ls_neshap_sic, :ll_sic_code,
		:ls_benzene_onsite_mgmt, :ls_benzene_onsite_mgmt_desc,
		:ls_tab_gr_10, :ls_avg_h20_gr_10, 
		:ld_tab, :ldb_benzene_concentration, :ls_benzene_unit,
		:ls_dot_shipping_desc, :ls_package_group, :ls_un_na_flag, :ll_un_na_number, :ll_erg_number, :ls_erg_suffix,
		:ls_hazmat_flag, :ls_hazmat_class, :ls_subsidiary_haz_mat_class, :ls_rq, :ls_rq_reason,
		:ls_template_name,
		:ls_state_waste_code_flag, :ls_uhc_flag,
		:ll_source_form_id, :ll_source_revision_id, :ll_template_form_id,
		:ls_generator_contact, :ls_generator_contact_title, :ls_generator_phone, :ls_generator_fax, :ls_generator_email,
		:ls_inv_contact_name, :ls_inv_contact_phone, :ls_inv_contact_fax,:ls_inv_contact_email,:ls_inv_phone_number,
		:ls_tech_contact_name, :ls_tech_contact_phone, :ls_tech_contact_fax, :ls_tech_cont_email, :ls_tech_contact_mobile,
		:ls_manifest_dot_sp_number, :ld_generator_tab,
		:ld_rq_threshold, :ls_dot_shipping_desc_additional, :ls_DOT_sp_permit_text,
		:ls_dot_sp_permit_flag,:ls_DOT_inhalation_haz_flag,:ls_container_type_bulk,
		:ls_container_type_totes,:ls_container_type_pallet,:ls_container_type_boxes,:ls_container_type_drums,:ls_container_type_cylinder,:ls_container_type_labpack,
		:ls_container_type_combination,:ls_container_type_combination_desc,:ls_container_type_other,:ls_container_type_other_desc,:ls_emergency_phone_number,
		:ls_odor_strength,:ls_odor_type_ammonia,:ls_odor_type_amines,:ls_odor_type_mercaptans,:ls_odor_type_sulfur, :ls_odor_type_organic_acid,:ls_odor_type_other,
		:ls_liquid_phase,:ls_paint_filter_solid_flag,:ls_incidental_liquid_flag,:li_ignitability_compare_temperature,:ls_ignitability_does_not_flash,:ls_ignitability_flammable_solid,
		:ls_btu_lt_gt_5000,:ls_btu_per_lb,:ls_texas_waste_material_type,:ls_texas_state_waste_code,:ls_pa_residual_waste_flag,:ldb_react_sulfide_ppm,:ldb_react_cyanide_ppm,
		:ls_reactive_other,:ls_reactive_other_description,:ls_contains_pcb,:ls_thermally_unstable,:ls_compressed_gas,:ls_oxidizer,:ls_tires,:ls_organic_peroxide,:ls_beryllium_present,
		:ls_asbestos_flag,:ls_asbestos_friable_flag,:ls_ammonia_flag,:ls_hazardous_secondary_material,:ls_hazardous_secondary_material_cert,:ls_pharma_waste_subject_to_prescription,
		:ls_waste_treated_after_generation,:ls_wastetreated_after_generation_desc,:ls_debris_separated,:ls_debris_not_mixed_or_diluted,:ls_ldr_subcategory,:ls_origin_refinery,
		:ls_specific_technology_requested,:ls_requested_technology,:ls_thermal_process_flag,:ls_other_restrictions_requested,:ls_po_required,:ls_purchase_order,
		:ls_signing_name,:ld_signing_date,:ls_signing_title,:ls_signing_company,:ls_RCRA_waste_code_flag,:is_copy_source,:ls_generator_address_1,:ls_generator_address_2,
		:ls_generator_address_3,:ls_generator_address_4,:ls_generator_generator_city,:ls_generator_generator_state,:ls_generator_generator_zip_code,:ls_section_F_none_apply_flag,
		:ls_consistency_solid,:ls_consistency_dust,:ls_consistency_debris,:ls_consistency_sludge,:ls_consistency_liquid,:ls_consistency_gas_aerosol,:ls_consistency_varies,:ls_generator_country,
		:ls_gen_mail_addr1,:ls_gen_mail_addr2,:ls_gen_mail_city,:ls_gen_mail_state,:ls_gen_mail_zip_code,:ls_gen_mail_country,:ls_dot_waste_flag,:ll_generator_type_id,:ll_NAICS_code,:ls_routing_facility, :ls_pfas_flag,:ls_form_approval_code
	FROM FormWCR
LEFT OUTER JOIN FormWCRTemplate T1 ON T1.template_form_id = FormWCR.form_id // copying a template
LEFT OUTER JOIN FormWCRTemplate T2 ON T2.template_form_id = FormWCR.template_form_id // copying a form that has a template
LEFT OUTER JOIN Generator G ON G.generator_id = FormWCR.generator_id AND G.epa_id = FormWCR.epa_id 
LEFT OUTER JOIN FormWCRAssignments ON FormWCRAssignments.form_id = FormWCR.form_id
LEFT OUTER JOIN ProfitCenter ON ProfitCenter.company_id = FormWCRAssignments.company_id AND ProfitCenter.profit_ctr_id = FormWCRAssignments.profit_ctr_id
WHERE FormWCR.form_id = :astr_pass.l[1]
AND 	FormWCR.revision_id = :astr_pass.l[2]
USING itr_forms;

ls_consistency = Trim(ls_consistency)
// MPM - 2/26/2021 - DevOps 19177 - Remove the final colon (':') from ls_consistency
IF Right(ls_consistency, 1) = ':' THEN ls_consistency = Left(ls_consistency, Len(ls_consistency) - 1)

//DevOps #15380 info_gde 04/25/2020 start
if not IsNull(ls_info_basis_knowledge) AND ls_info_basis_knowledge<>'' then
	is_info_basis_knowledge=ls_info_basis_knowledge
end if

if not IsNull(ls_info_basis_msds) AND ls_info_basis_msds<>'' then
	is_info_basis_msds=ls_info_basis_msds
end if

if not IsNull(ls_info_basis_analysis) AND ls_info_basis_analysis<>'' then
	is_info_basis_analysis=ls_info_basis_analysis
end if
//DevOps #15380 info_gde 04/25/2020 end

SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :astr_pass.l[1] 
AND 	revision_id = :astr_pass.l[2]
AND  section = 'WI'
AND isactive = 1 
USING itr_forms;

ll_form_id_wcr = astr_pass.l[1]
ll_rev_id_wcr = astr_pass.l[2]

//Waste Import Supplement
IF ll_form_sectionstatus_count > 0 THEN 
	SELECT FormWasteImport.form_id,
		FormWasteImport.revision_id,
		FormWasteImport.importing_generator_name, 
		FormWasteImport.importing_generator_address, 
		FormWasteImport.importing_generator_city, 
		FormWasteImport.importing_generator_province_territory, 
		FormWasteImport.importing_generator_mail_code, 
		FormWasteImport.importing_generator_epa_id, 
		FormWasteImport.tech_contact_name, 
		FormWasteImport.tech_contact_phone, 
		FormWasteImport.tech_cont_email, 
		FormWasteImport.foreign_exporter_name,
		FormWasteImport.foreign_exporter_address, 
		FormWasteImport.foreign_exporter_contact_name, 
		FormWasteImport.foreign_exporter_phone, 
	//	FormWasteImport.foreign_exporter_fax, 
		FormWasteImport.foreign_exporter_email, 
		FormWasteImport.epa_notice_id, 
		FormWasteImport.epa_consent_number, 
		FormWasteImport.effective_date, 
		FormWasteImport.expiration_date, 
		FormWasteImport.approved_volume, 
		FormWasteImport.approved_volume_unit,
		FormWasteImport.foreign_exporter_sameas_generator,
		FormWasteImport.foreign_exporter_city,
		FormWasteImport.foreign_exporter_province_territory,
		FormWasteImport.foreign_exporter_mail_code,
		FormWasteImport.foreign_exporter_country
	INTO
		:ll_waste_import_form_id,
		:ll_waste_import_revision_id,
		:ls_importing_generator_name, 
		:ls_importing_generator_address, 
		:ls_importing_generator_city, 
		:ls_importing_generator_province_territory, 
		:ls_importing_generator_mail_code, 
		:ls_importing_generator_epa_id, 
		:ls_import_tech_contact_name, 
		:ls_tech_import_contact_phone, 
		:ls_tech_import_cont_email, 
		:ls_foreign_exporter_name,
		:ls_foreign_exporter_address, 
		:ls_foreign_exporter_contact_name, 
		:ls_foreign_exporter_phone, 
	//	:ls_foreign_exporter_fax, 
		:ls_foreign_exporter_email, 
		:ls_epa_notice_id, 
		:ls_epa_consent_number, 
		:ld_effective_date, 
		:ld_expiration_date, 
		:ls_approved_volume, 
		:ls_approved_volume_unit,
		:ls_foreign_exporter_sameas_generator,
		:ls_foreign_exporter_city,
		:ls_foreign_exporter_province_territory,
		:ls_foreign_exporter_mail_code,
		:ls_foreign_exporter_country
	FROM  FormWasteImport 
	WHERE FormWasteImport.wcr_id = :astr_pass.l[1]
	AND 	FormWasteImport.wcr_rev_id =  :astr_pass.l[2]
	USING itr_forms;
	
	ll_form_id_wcr = astr_pass.l[1]
	ll_rev_id_wcr = astr_pass.l[2]
	
	ll_waste_import_supplement_rowcount =idw_waste_import_supplement.RowCount()
	
	IF ll_waste_import_form_id > 0 THEN 
		IF ll_waste_import_supplement_rowcount <= 0 THEN
			idw_waste_import_supplement.InsertRow(0)
		END IF
	END IF
	
	ll_wastesupplement_row = idw_waste_import_supplement.GetRow()
	
	IF ll_wastesupplement_row > 0 THEN
		idw_waste_import_supplement.object.profile_id[ll_wastesupplement_row] = ll_profile_id
		idw_waste_import_supplement.object.created_by[ll_wastesupplement_row] = gs_user_id
		idw_waste_import_supplement.object.date_created[ll_wastesupplement_row] = DateTime(Today(), Now())	
		 idw_waste_import_supplement.object.importing_generator_name[ll_wastesupplement_row] = ls_importing_generator_name 
		 idw_waste_import_supplement.object.importing_generator_address[ll_wastesupplement_row] = ls_importing_generator_address
		idw_waste_import_supplement.object.importing_generator_city[ll_wastesupplement_row] = ls_importing_generator_city 
		idw_waste_import_supplement.object.importing_generator_province_territory[ll_wastesupplement_row] = ls_importing_generator_province_territory
		idw_waste_import_supplement.object.importing_generator_mail_code[ll_wastesupplement_row] = ls_importing_generator_mail_code
		idw_waste_import_supplement.object.country_name[ll_wastesupplement_row] = ls_importing_country_name
		idw_waste_import_supplement.object.tech_contact_name[ll_wastesupplement_row] = ls_import_tech_contact_name
		idw_waste_import_supplement.object.contact_tech_contact_phone[ll_wastesupplement_row] = ls_tech_import_contact_phone
		idw_waste_import_supplement.object.contact_tech_cont_email[ll_wastesupplement_row] = ls_tech_import_cont_email
		idw_waste_import_supplement.object.profile_waste_stream_name[ll_wastesupplement_row] = ls_wcr_waste_common_name
		idw_waste_import_supplement.object.foreign_exporter_name[ll_wastesupplement_row]  = ls_foreign_exporter_name
		idw_waste_import_supplement.object.foreign_exporter_address[ll_wastesupplement_row] =  ls_foreign_exporter_address
		idw_waste_import_supplement.object.foreign_exporter_contact_name[ll_wastesupplement_row] =   ls_foreign_exporter_contact_name
		idw_waste_import_supplement.object.foreign_exporter_phone[ll_wastesupplement_row] =  ls_foreign_exporter_phone
		idw_waste_import_supplement.object.foreign_exporter_email[ll_wastesupplement_row] =  	ls_foreign_exporter_email
		idw_waste_import_supplement.object.epa_notice_id[ll_wastesupplement_row] =  ls_epa_notice_id
		idw_waste_import_supplement.object.epa_consent_number[ll_wastesupplement_row] =  ls_epa_consent_number
		idw_waste_import_supplement.object.effective_date[ll_wastesupplement_row] =  ld_effective_date
		idw_waste_import_supplement.object.expiration_date[ll_wastesupplement_row] =  ld_expiration_date
		idw_waste_import_supplement.object.approved_volume[ll_wastesupplement_row] =  ls_approved_volume
		//COR2 JXM 03/06/2019 Edit fields from Profile_"rest of name" to that name... "Profile" is not needed
		idw_waste_import_supplement.object.profile_wcr_sign_name[ll_wastesupplement_row] = ls_signing_name  
		idw_waste_import_supplement.object.profile_wcr_sign_title[ll_wastesupplement_row] = ls_signing_title 
		idw_waste_import_supplement.object.profile_wcr_sign_date[ll_wastesupplement_row] = ld_signing_date 
		idw_waste_import_supplement.object.profile_wcr_sign_company[ll_wastesupplement_row] = ls_signing_company 
		// MPM - 4/2/2020 - DevOps 15006 - Added foreign_exporter_sameas_generator 
		idw_waste_import_supplement.object.same_as_foreign_generator[ll_wastesupplement_row] = ls_foreign_exporter_sameas_generator 
		//DevOps:29698
		idw_waste_import_supplement.object.foreign_exporter_city[ll_wastesupplement_row] = ls_foreign_exporter_city 
		idw_waste_import_supplement.object.foreign_exporter_province_territory[ll_wastesupplement_row] = ls_foreign_exporter_province_territory 
		idw_waste_import_supplement.object.foreign_exporter_mail_code[ll_wastesupplement_row] = ls_foreign_exporter_mail_code 
		idw_waste_import_supplement.object.foreign_exporter_country[ll_wastesupplement_row] = ls_foreign_exporter_country 
			//RCRA waste code 	// Load the WCR Waste Codes
			DECLARE wcr_rcra_import_waste_code_cursor CURSOR FOR  
			 SELECT DISTINCT WC.display_name, FXW.waste_code_UID, row_number()OVER (order by getdate())as row_id  
				FROM FormXWasteCode FXW
				JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
				AND  WC.status = 'A'  AND WC.waste_code_origin = 'F' AND WC.haz_flag = 'T' AND WC.waste_type_code IN ('L', 'C') 
			  WHERE form_id =  :astr_pass.l[1]
				 AND revision_id = :astr_pass.l[2]
			  ORDER BY FXW.waste_code_UID 
			  USING itr_forms;
									
			OPEN wcr_rcra_import_waste_code_cursor;
			DO WHILE itr_forms.SQLCode = 0
				FETCH wcr_rcra_import_waste_code_cursor INTO :ls_waste_code, :ll_waste_code_UID ,:ll_row_id;
				  IF ll_row_id = 1 THEN 
					ls_rcra_waste_code_1 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_1[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 2 THEN 
					ls_rcra_waste_code_2 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_2[ll_wastesupplement_row] = ls_waste_code
				 ELSEIF ll_row_id = 3 THEN 
					ls_rcra_waste_code_3 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_3[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 4 THEN 
					ls_rcra_waste_code_4 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_4[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 5 THEN 
					ls_rcra_waste_code_5 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_5[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 6 THEN
					ls_rcra_waste_code_6 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_6[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 7 THEN 
					ls_rcra_waste_code_7 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_7[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 8 THEN 
					ls_rcra_waste_code_8 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_8[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 9 THEN 
					ls_rcra_waste_code_9 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_9[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 10 THEN 
					ls_rcra_waste_code_10 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_10[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 11 THEN 
					ls_rcra_waste_code_11 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_11[ll_wastesupplement_row] = ls_waste_code
				  ELSEIF ll_row_id = 12 THEN 
					ls_rcra_waste_code_12 = ls_waste_code
	//				idw_waste_import_supplement.Object.rcra_waste_code_12[ll_wastesupplement_row] = ls_waste_code
				  END IF
				LOOP
				CLOSE wcr_rcra_import_waste_code_cursor;	
			idw_waste_import_supplement.Object.rcra_waste_code_1[ll_wastesupplement_row] = String (ls_rcra_waste_code_1 + ',' + ls_rcra_waste_code_2  + ',' + ls_rcra_waste_code_3  + &
					',' + ls_rcra_waste_code_4 + ',' + ls_rcra_waste_code_5 + ',' + ls_rcra_waste_code_6 + ',' + ls_rcra_waste_code_7 + ',' + ls_rcra_waste_code_8 + ',' + ls_rcra_waste_code_9 + &
					 ',' + ls_rcra_waste_code_10 + ',' + ls_rcra_waste_code_11 + ',' + ls_rcra_waste_code_12) 
	END IF
END IF  //Waste Import Supplement end

//Benzene Waste Supplement
wf_copy_benzenesupplement (astr_pass.l[1] ,astr_pass.l[2],ll_profile_id)

// Fules Blending Supplement
wf_copy_fuels_blending (astr_pass.l[1], astr_pass.l[2], ll_profile_id) // Dipankar - 8/31/2023 - Added for #69393

//Thermal Supplement	
SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :astr_pass.l[1] 
AND revision_id = :astr_pass.l[2]
AND  section = 'TL'
AND isactive = 1 
USING itr_forms;

IF ll_form_sectionstatus_count > 0 THEN
	SELECT formthermal.form_id,
			formthermal.originating_generator_name,   
			formthermal.originating_generator_epa_id,
			formthermal.oil_bearing_from_refining_flag,
			formthermal.rcra_excluded_hsm_flag,
			formthermal.oil_constituents_are_fuel_flag,
			formthermal.petroleum_refining_f037_flag,   
			formthermal.petroleum_refining_f038_flag,
			formthermal.petroleum_refining_k048_flag,
			formthermal.petroleum_refining_k049_flag,	  
			formthermal.petroleum_refining_k050_flag,
			formthermal.petroleum_refining_k051_flag,
			formthermal.petroleum_refining_k052_flag,
			formthermal.petroleum_refining_k169_flag,
			formthermal.petroleum_refining_k170_flag,	
			formthermal.petroleum_refining_k171_flag,
			formthermal.petroleum_refining_k172_flag,
			formthermal.petroleum_refining_no_waste_code_flag,
			formthermal.gen_process,
			formthermal.composition_water_percent,
			formthermal.composition_solids_percent,
			formthermal.composition_organics_oil_tph_percent,
			formthermal.heating_value_btu_lb,
			percent_of_ash,
			 specific_halogens_ppm,
			 non_friable_debris_gt_2_inch_flag,
			 specific_mercury_ppm,
			 self_heating_properties_flag,
			 specific_svm_ppm,
			 bitumen_asphalt_tar_flag,
			 specific_lvm_ppm,
			 centrifuge_prior_to_shipment_flag,
			 specific_organic_chlorine_from_vocs_ppm,
			 fuel_oxygenates_flag,
			 specific_sulfides_ppm,
			 surfactants_flag,
			non_friable_debris_gt_2_inch_ppm,
			bitumen_asphalt_tar_ppm,
			oxygenates_ppm,		
			oxygenates_MTBE_flag,
			oxygenates_ethanol_flag,
			oxygenates_other_flag
		INTO
		 :ll_form_thermal_id, 
		 :ls_thermal_gen_name,
		 :ls_thermal_generator_epa_id,
		 :ls_oil_bearing_from_refining_flag,
		 :ls_thermal_rcra_excluded_hsm_flag,
		 :ls_oil_are_fuel_flag,
		 :ls_f037_flag,   
		 :ls_f038_flag,
		 :ls_k048_flag,
		 :ls_k049_flag,	  
		 :ls_k050_flag,
		 :ls_k051_flag,
		 :ls_k052_flag,
		 :ls_k169_flag,
		 :ls_k170_flag,	
		 :ls_k171_flag,
		 :ls_k172_flag,
		 :ls_petroleum_refining_no_waste_code_flag,
		 :ls_thermal_gen_process,
		 :ld_composition_water_percent,
		 :ld_composition_solids_percent,
		 :ld_composition_organics_oil_tph_percent,
		 :ld_heating_value_btu_lb,
		 :ll_percent_of_ash,
		 :ll_specific_halogens_ppm,
		 :ls_non_friable_debris_gt_2_inch_flag,
		 :ll_specific_mercury_ppm,
		 :ls_self_heating_properties_flag,
		 :ll_specific_svm_ppm,
		 :ls_bitumen_asphalt_tar_flag,
		 :ll_specific_lvm_ppm,
		 :ls_centrifuge_prior_to_shipment_flag,
		 :ll_specific_organic_chlorine_from_vocs_ppm,
		 :ls_fuel_oxygenates_flag,
		 :ll_specific_sulfides_ppm,
		 :ls_surfactants_flag,
		 :ll_non_friable_debris_gt_2_inch_ppm,
		 :ll_bitumen_asphalt_tar_ppm,
		 :ll_oxygenates_ppm,
		 :ls_oxygenates_MTBE_flag, 
		 :ls_oxygenates_ethanol_flag, 
		 :ls_oxygenates_other_flag
		FROM FormThermal 
		WHERE FormThermal.wcr_id = :astr_pass.l[1]
		AND 	FormThermal.wcr_rev_id =  :astr_pass.l[2]
	  USING itr_forms;
	
	ll_thermal_rowcount = idw_profile_thermal_supplement_form.RowCount()
	
		IF ll_form_thermal_id > 0 THEN 
			IF ll_thermal_rowcount <= 0 THEN
				idw_profile_thermal_supplement_form.InsertRow(0)
			END IF
		END IF
		
		ll_thermalsupplement_row = idw_profile_thermal_supplement_form.GetRow()
			IF ll_thermalsupplement_row >0 THEN	
			  idw_profile_thermal_supplement_form.object.profilethermal_profile_id[ll_thermalsupplement_row] = ll_profile_id
			  idw_profile_thermal_supplement_form.object.profilethermal_added_by[ll_thermalsupplement_row] = gs_user_id
			  idw_profile_thermal_supplement_form.object.profilethermal_date_added[ll_thermalsupplement_row] = DateTime(Today(), Now())	
			  idw_profile_thermal_supplement_form.object.generator_generator_name[ll_thermalsupplement_row] = ls_generator_name
			  idw_profile_thermal_supplement_form.object.generator_generator_epa_id[ll_thermalsupplement_row] = ls_EPA_ID
			  idw_profile_thermal_supplement_form.object.generator_generator_id[ll_thermalsupplement_row] = ll_wcr_gen			 
			  idw_profile_thermal_supplement_form.object.profilethermal_originating_generator_name[ll_thermalsupplement_row] = ls_thermal_gen_name
			  idw_profile_thermal_supplement_form.object.profilethermal_originating_generator_epa_id[ll_thermalsupplement_row] = ls_thermal_generator_epa_id
			  idw_profile_thermal_supplement_form.object.profile_waste_common_name[ll_thermalsupplement_row] = ls_wcr_waste_common_name
			  idw_profile_thermal_supplement_form.object.profile_gen_process_brief_desc[ll_thermalsupplement_row] = ls_gen_process
			  idw_profile_thermal_supplement_form.object.profilethermal_oil_bearing_from_refining_flag[ll_thermalsupplement_row] = ls_oil_bearing_from_refining_flag		  
			  idw_profile_thermal_supplement_form.object.profilethermal_rcra_excluded_hsm_flag[ll_thermalsupplement_row] = ls_thermal_rcra_excluded_hsm_flag		  
			  idw_profile_thermal_supplement_form.object.profilethermal_oil_constituents_are_fuel_flag[ll_thermalsupplement_row] = ls_oil_are_fuel_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_f037_flag[ll_thermalsupplement_row] = ls_f037_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_f038_flag[ll_thermalsupplement_row] = ls_f038_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k048_flag[ll_thermalsupplement_row] = ls_k048_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k049_flag[ll_thermalsupplement_row] = ls_k049_flag		  
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k050_flag[ll_thermalsupplement_row] = ls_k050_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k051_flag[ll_thermalsupplement_row] = ls_k051_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k052_flag[ll_thermalsupplement_row] = ls_k052_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k169_flag[ll_thermalsupplement_row] = ls_k169_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k170_flag[ll_thermalsupplement_row] = ls_k170_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k171_flag[ll_thermalsupplement_row] = ls_k171_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_k172_flag[ll_thermalsupplement_row] = ls_k172_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_petroleum_refining_no_waste_code_flag[ll_thermalsupplement_row] = ls_petroleum_refining_no_waste_code_flag
			  idw_profile_thermal_supplement_form.object.profilethermal_gen_process[ll_thermalsupplement_row] = ls_thermal_gen_process
			  idw_profile_thermal_supplement_form.object.profilethermal_composition_water_percent[ll_thermalsupplement_row] = ld_composition_water_percent
			  idw_profile_thermal_supplement_form.object.profilethermal_composition_solids_percent[ll_thermalsupplement_row] = ld_composition_solids_percent
			  idw_profile_thermal_supplement_form.object.profilethermal_composition_organics_oil_tph_percent[ll_thermalsupplement_row] = ld_composition_organics_oil_tph_percent
			//  idw_profile_thermal_supplement_form.object.physical_state[ll_thermalsupplement_row] = 
			//  idw_profile_thermal_supplement_form.object.liquid_phases[ll_thermalsupplement_row] = ls_liquid_phase
			  idw_profile_thermal_supplement_form.object.profilethermal_heating_value_btu_lb[ll_thermalsupplement_row] = ld_heating_value_btu_lb
			//COR2 JXM 03/04/2019 Add Siguture columns to Cylinder
			 idw_profile_thermal_supplement_form.object.profile_wcr_sign_name[ll_thermalsupplement_row] = ls_signing_name  
			idw_profile_thermal_supplement_form.object.profile_wcr_sign_title[ll_thermalsupplement_row] = ls_signing_title 
			idw_profile_thermal_supplement_form.object.profile_wcr_sign_date[ll_thermalsupplement_row] =  ld_signing_date 
			idw_profile_thermal_supplement_form.object.profile_wcr_sign_company[ll_thermalsupplement_row] = ls_signing_company  
			idw_profile_thermal_supplement_form.object.profilethermal_percent_of_ash[ll_thermalsupplement_row] = ll_percent_of_ash  
			idw_profile_thermal_supplement_form.object.profilethermal_specific_halogens_ppm[ll_thermalsupplement_row] = ll_specific_halogens_ppm  
			idw_profile_thermal_supplement_form.object.profilethermal_non_friable_debris_gt_2_inch_flag[ll_thermalsupplement_row] = ls_non_friable_debris_gt_2_inch_flag  
			idw_profile_thermal_supplement_form.object.profilethermal_specific_mercury_ppm[ll_thermalsupplement_row] = ll_specific_mercury_ppm  
			idw_profile_thermal_supplement_form.object.profilethermal_self_heating_properties_flag[ll_thermalsupplement_row] = ls_self_heating_properties_flag  
			idw_profile_thermal_supplement_form.object.profilethermal_specific_svm_ppm[ll_thermalsupplement_row] = ll_specific_svm_ppm  
			idw_profile_thermal_supplement_form.object.profilethermal_bitumen_asphalt_tar_flag[ll_thermalsupplement_row] = ls_bitumen_asphalt_tar_flag  
			idw_profile_thermal_supplement_form.object.profilethermal_specific_lvm_ppm[ll_thermalsupplement_row] = ll_specific_lvm_ppm  
			idw_profile_thermal_supplement_form.object.profilethermal_centrifuge_prior_to_shipment_flag[ll_thermalsupplement_row] = ls_centrifuge_prior_to_shipment_flag  
			idw_profile_thermal_supplement_form.object.profilethermal_specific_organic_chlorine_from_vocs_ppm[ll_thermalsupplement_row] = ll_specific_organic_chlorine_from_vocs_ppm  
			idw_profile_thermal_supplement_form.object.profilethermal_fuel_oxygenates_flag[ll_thermalsupplement_row] = ls_fuel_oxygenates_flag  
			idw_profile_thermal_supplement_form.object.profilethermal_specific_sulfides_ppm[ll_thermalsupplement_row] = ll_specific_sulfides_ppm  
			idw_profile_thermal_supplement_form.object.profilethermal_surfactants_flag[ll_thermalsupplement_row] = ls_surfactants_flag  
			idw_profile_thermal_supplement_form.object.profilethermal_non_friable_debris_gt_2_inch_ppm[ll_thermalsupplement_row] = ll_non_friable_debris_gt_2_inch_ppm  
				idw_profile_thermal_supplement_form.object.profilethermal_bitumen_asphalt_tar_ppm[ll_thermalsupplement_row] = ll_bitumen_asphalt_tar_ppm  
			idw_profile_thermal_supplement_form.object.profilethermal_oxygenates_ppm[ll_thermalsupplement_row] = ll_oxygenates_ppm  
			// MPM - 4/29/2020 - DevOps 15331
			idw_profile_thermal_supplement_form.object.profilethermal_oxygenates_mtbe_flag[ll_thermalsupplement_row] = ls_oxygenates_MTBE_flag
			idw_profile_thermal_supplement_form.object.profilethermal_oxygenates_ethanol_flag[ll_thermalsupplement_row] = ls_oxygenates_ethanol_flag   
			idw_profile_thermal_supplement_form.object.profilethermal_oxygenates_other_flag[ll_thermalsupplement_row] = ls_oxygenates_other_flag   			
		 END IF
END IF // Thermal Supplement	End

//Cylinder Supplement	
SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :astr_pass.l[1] 
AND revision_id = :astr_pass.l[2]
AND  section = 'CR'
AND isactive = 1 
USING itr_forms;

IF ll_form_sectionstatus_count > 0 THEN
		SELECT 
				form_id,
			cylinder_quantity,
			CGA_number,
			original_label_visible_flag, 
			manufacturer,
			markings_warnings_comments,
			DOT_shippable_flag,
			poisonous_inhalation_flag,
			hazard_zone,
			DOT_not_shippable_reason,
			DOT_ICC_number,
			cylinder_type_id,
			heaviest_gross_weight,
			heaviest_gross_weight_unit,
			external_condition,
			cylinder_pressure,
			pressure_relief_device,
			protective_cover_flag,
			workable_valve_flag,
			threads_impaired_flag,
			valve_condition,
			corrosion_color
	INTO 
		:ll_formcgc_form_id,
		  :ll_cylinder_quantity,
		 :ls_CGA_number,
		 :ls_original_label_visible_flag,
		 :ls_manufacturer,
		 :ls_markings_warnings_comments,
		 :ls_DOT_shippable_flag,
		 :ls_poisonous_inhalation_flag,
		 :ls_hazard_zone,
		 :ls_DOT_not_shippable_reason,
		 :ls_DOT_ICC_number,
		 :ll_cylinder_type_id,
		 :ll_heaviest_gross_weight,
		 :ls_heaviest_gross_weight_unit,
		 :ls_external_condition,
		 :ls_cylinder_pressure,
		 :ls_pressure_relief_device,
		 :ls_protective_cover_flag,
		 :ls_workable_valve_flag,
		 :ls_threads_impaired_flag,
		 :ls_valve_condition,
		 :ls_corrosion_color
	FROM FormCGC
		WHERE FormCGC.form_id = :astr_pass.l[1]
		AND 	FormCGC.revision_id =  :astr_pass.l[2]
	  USING itr_forms;
	 
	 ll_cylinder_supplement_rowcount = idw_profile_cylinder_supplement_dragon.Rowcount()
	 
	IF ll_formcgc_form_id > 0 THEN 
		IF ll_cylinder_supplement_rowcount <= 0 THEN
			idw_profile_cylinder_supplement_dragon.InsertRow(0)
		END IF
	END IF
	
	  ll_cylindersupplement_row = idw_profile_cylinder_supplement_dragon.GetRow()
	 IF ll_cylindersupplement_row >0 THEN	
		 idw_profile_cylinder_supplement_dragon.object.profile_id[ll_cylindersupplement_row] = idw_header.Object.profile_id[il_curr_row]  //COR2 - JXM - 02.23.2019
		 idw_profile_cylinder_supplement_dragon.object.cylinder_quantity[ll_cylindersupplement_row] = ll_cylinder_quantity 
		 idw_profile_cylinder_supplement_dragon.object.cga_number[ll_cylindersupplement_row] = ls_CGA_number 
		 idw_profile_cylinder_supplement_dragon.object.original_label_visible_flag[ll_cylindersupplement_row] = ls_original_label_visible_flag 
		 idw_profile_cylinder_supplement_dragon.object.manufacturer[ll_cylindersupplement_row] = ls_manufacturer 
		 idw_profile_cylinder_supplement_dragon.object.markings_warnings_comments[ll_cylindersupplement_row] = ls_markings_warnings_comments 
		 idw_profile_cylinder_supplement_dragon.object.dot_shippable_flag[ll_cylindersupplement_row] = ls_DOT_shippable_flag  
		idw_profile_cylinder_supplement_dragon.object.poisonous_inhalation_flag[ll_cylindersupplement_row] = ls_poisonous_inhalation_flag 
		idw_profile_cylinder_supplement_dragon.object.hazard_zone[ll_cylindersupplement_row] = ls_hazard_zone 
		idw_profile_cylinder_supplement_dragon.object.dot_not_shippable_reason[ll_cylindersupplement_row] = ls_DOT_not_shippable_reason	  
		idw_profile_cylinder_supplement_dragon.object.dot_icc_number[ll_cylindersupplement_row] = ls_DOT_ICC_number 
		idw_profile_cylinder_supplement_dragon.object.cylinder_type_id[ll_cylindersupplement_row] = ll_cylinder_type_id 
		idw_profile_cylinder_supplement_dragon.object.heaviest_gross_weight[ll_cylindersupplement_row] = ll_heaviest_gross_weight 
		idw_profile_cylinder_supplement_dragon.object.heaviest_gross_weight_unit[ll_cylindersupplement_row] = ls_heaviest_gross_weight_unit 
		idw_profile_cylinder_supplement_dragon.object.external_condition[ll_cylindersupplement_row] = ls_external_condition 
		idw_profile_cylinder_supplement_dragon.object.cylinder_pressure[ll_cylindersupplement_row] = ls_cylinder_pressure 
		idw_profile_cylinder_supplement_dragon.object.pressure_relief_device[ll_cylindersupplement_row] = ls_pressure_relief_device  
		idw_profile_cylinder_supplement_dragon.object.protective_cover_flag[ll_cylindersupplement_row] = ls_protective_cover_flag 
		idw_profile_cylinder_supplement_dragon.object.workable_valve_flag[ll_cylindersupplement_row] = ls_workable_valve_flag
		idw_profile_cylinder_supplement_dragon.object.valve_condition[ll_cylindersupplement_row] = ls_valve_condition  
		idw_profile_cylinder_supplement_dragon.object.threads_impaired_flag[ll_cylindersupplement_row] = ls_threads_impaired_flag 
		idw_profile_cylinder_supplement_dragon.object.corrosion_color[ll_cylindersupplement_row] = ls_corrosion_color   
		//COR2 JXM 03/04/2019 Add Siguture columns to Cylinder
		idw_profile_cylinder_supplement_dragon.object.wcr_sign_name[ll_cylindersupplement_row] = ls_signing_name  
		idw_profile_cylinder_supplement_dragon.object.wcr_sign_title[ll_cylindersupplement_row] = ls_signing_title 
		idw_profile_cylinder_supplement_dragon.object.wcr_sign_date[ll_cylindersupplement_row] =  ld_signing_date 
		idw_profile_cylinder_supplement_dragon.object.wcr_sign_company[ll_cylindersupplement_row] = ls_signing_company 
	 END IF

END IF //Cylinder Supplement	End

 //Debris 

SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :astr_pass.l[1] 
AND revision_id = :astr_pass.l[2]
AND  section = 'DS'
AND isactive = 1 
USING itr_forms;

IF ll_form_sectionstatus_count > 0 THEN
	SELECT 
		 form_id,
		debris_certification_flag
	INTO
		 :ll_debris_form_id,
			:ls_debris_certification_flag
	 FROM FormDebris
		WHERE FormDebris.wcr_id = :astr_pass.l[1]
		AND 	FormDebris.wcr_rev_id =  :astr_pass.l[2]
	USING itr_forms;
	  
	ll_debris_supplement_rowcount =idw_profile_debris_certification_dragon.RowCount()
	
	IF ll_debris_form_id > 0 THEN 
		IF ll_debris_supplement_rowcount <= 0 THEN
			idw_profile_debris_certification_dragon.InsertRow(0)
		END IF
	END IF
	
	 ll_debrissupplement_row = idw_profile_debris_certification_dragon.GetRow()
	 IF ll_debrissupplement_row >0 THEN	
		idw_profile_debris_certification_dragon.object.debris_certification_flag[ll_debrissupplement_row] = ls_debris_certification_flag  
		//COR2 JXM 03/06/2019 Add Singature section
		idw_profile_debris_certification_dragon.object.wcr_sign_name[ll_debrissupplement_row] = ls_signing_name  
		idw_profile_debris_certification_dragon.object.wcr_sign_title[ll_debrissupplement_row] = ls_signing_title 
		idw_profile_debris_certification_dragon.object.wcr_sign_date[ll_debrissupplement_row] = ld_signing_date 
		idw_profile_debris_certification_dragon.object.wcr_sign_company[ll_debrissupplement_row] = ls_signing_company 
	END IF 
	
	// MPM - 4/30/2020 - DevOps 15427 - Debris certification flag
	wf_set_debris_certification_flag(ls_debris_certification_flag)
	
END IF  //Debris End

//Used Oil
SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :astr_pass.l[1] 
AND revision_id = :astr_pass.l[2]
AND  section = 'UL'
AND isactive = 1 
USING itr_forms;

IF ll_form_sectionstatus_count > 0 THEN
	SELECT 
	form_id,
	wwa_halogen_gt_1000,
	wwa_halogen_source,
	wwa_halogen_source_desc1,
	wwa_other_desc_1
	INTO  
	:ll_used_oil_form_id,
	:ls_wwwa_halogen_gt_1000,
	:ls_halogen_source2,
	:ls_halogen_source_desc2,
	:ls_halogen_source_other2
	FROM FormWCR 
	WHERE form_id = :astr_pass.l[1]
	AND 	revision_id = :astr_pass.l[2]
	  USING itr_forms;
	
	ll_used_oil_supplement_rowcount = idw_profile_used_oil_supplement_dragon.RowCount()
	
	IF ll_used_oil_form_id > 0 THEN 
		IF ll_used_oil_supplement_rowcount <= 0 THEN
			idw_profile_used_oil_supplement_dragon.InsertRow(0)
		END IF
	END IF
	
	 ll_usedoilsupplement_row = idw_profile_used_oil_supplement_dragon.GetRow()
	 
	 IF ll_usedoilsupplement_row >0 THEN	
		    idw_profile_used_oil_supplement_dragon.object.profile_id[ll_usedoilsupplement_row] =  ll_profile_id
			 idw_technical.Getrow() 
			 IF idw_technical.Getrow()  > 0 THEN 
			 	 idw_technical.object.wwa_halogen_gt_1000 [ idw_technical.Getrow()] = ls_wwwa_halogen_gt_1000
				 idw_technical.object.halogen_source [ idw_technical.Getrow()] = ls_halogen_source2
				 idw_technical.object.halogen_source_desc [ idw_technical.Getrow()] = ls_halogen_source_desc2
				 idw_technical.object.halogen_source_other [ idw_technical.Getrow()] = ls_halogen_source_other2
              END IF
			idw_profile_used_oil_supplement_dragon.object.wwa_halogen_gt_1000[ll_usedoilsupplement_row] = ls_wwwa_halogen_gt_1000
			idw_profile_used_oil_supplement_dragon.object.halogen_source[ll_usedoilsupplement_row] = ls_halogen_source2
			idw_profile_used_oil_supplement_dragon.object.halogen_source_desc[ll_usedoilsupplement_row] = ls_halogen_source_desc2
			idw_profile_used_oil_supplement_dragon.object.halogen_source_other[ll_usedoilsupplement_row] = ls_halogen_source_other2
			idw_profile_used_oil_supplement_dragon.object.wcr_sign_name[ll_usedoilsupplement_row] = ls_signing_name  
			idw_profile_used_oil_supplement_dragon.object.wcr_sign_title[ll_usedoilsupplement_row] = ls_signing_title 
			idw_profile_used_oil_supplement_dragon.object.wcr_sign_date[ll_usedoilsupplement_row] =  ld_signing_date 
			idw_profile_used_oil_supplement_dragon.object.wcr_sign_company[ll_usedoilsupplement_row] = ls_signing_company 
	 END IF
END IF //Used Oil END 

////COR2 - JXM Add PCB
//PCB Supplement		

SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :astr_pass.l[1] 
AND revision_id = :astr_pass.l[2]
AND  section = 'PB'
AND isactive = 1 
USING itr_forms;

IF ll_form_sectionstatus_count > 0 THEN
 SELECT
         form_id,
		pcb_concentration_0_9, 
	    pcb_concentration_10_49,
		pcb_concentration_50_499,
         pcb_concentration_500,
		pcb_source_concentration_gr_50,
		pcb_regulated_for_disposal_under_TSCA,
		processed_into_non_liquid,
		processd_into_nonlqd_prior_pcb,
		pcb_manufacturer,
		pcb_article_for_TSCA_landfill,
		pcb_article_decontaminated
INTO 
	 :ll_pcb_form_id,
	 :ls_pcb_concentration_0_9,
	 :ls_pcb_concentration_10_49, 
	 :ls_pcb_concentration_50_499, 
	 :ls_pcb_concentration_500 ,
	 :ls_pcb_source_concentration_gr_50 ,
	 :ls_pcb_under_TSCA ,
	 :ls_processed_into_non_liquid ,
	 :ls_processd_into_nonlqd_prior_pcb ,
	 :ls_pcb_manufacturer ,
	 :ls_pcb_article_for_TSCA_landfill ,
	 :ls_pcb_article_decontaminated
 FROM  FormWCR
WHERE FORMWCR.form_id = :astr_pass.l[1]
	AND 	FORMWCR.revision_id = :astr_pass.l[2]
  USING itr_forms;

ll_pcb_supplement_rowcount = idw_profile_pcb_supplement_dragon.RowCount()

	IF ll_pcb_form_id > 0 THEN 
		IF ll_pcb_supplement_rowcount <= 0 THEN
			idw_profile_pcb_supplement_dragon.InsertRow(0)
		END IF
	END IF
	 IF isnull(ls_pcb_concentration_0_9) or ls_pcb_concentration_0_9 = '' then ls_pcb_concentration_0_9 = 'F'
	 IF isnull(ls_pcb_concentration_10_49) or ls_pcb_concentration_10_49 = '' then ls_pcb_concentration_10_49 = 'F'
	 IF isnull(ls_pcb_concentration_50_499) or ls_pcb_concentration_50_499 = '' then ls_pcb_concentration_50_499 = 'F'
	 IF isnull(ls_pcb_concentration_500) or ls_pcb_concentration_500 = '' then ls_pcb_concentration_500 = 'F'
	 
	 IF isnull(ls_processd_into_nonlqd_prior_pcb) or ls_processd_into_nonlqd_prior_pcb = '' then ls_processd_into_nonlqd_prior_pcb = 'U'
	 IF isnull(ls_pcb_under_TSCA) or ls_pcb_under_TSCA = '' then ls_pcb_under_TSCA = 'U'
	 IF isnull(ls_processed_into_non_liquid) or ls_processed_into_non_liquid = '' then ls_processed_into_non_liquid = 'U'
	 IF isnull(ls_processed_into_non_liquid) or ls_processed_into_non_liquid = '' then ls_processed_into_non_liquid = 'U'
	 IF isnull(ls_pcb_manufacturer) or ls_pcb_manufacturer = '' then ls_pcb_manufacturer = 'U'
	 IF isnull(ls_pcb_article_for_TSCA_landfill) or ls_pcb_article_for_TSCA_landfill = '' then ls_pcb_article_for_TSCA_landfill = 'U'
	IF isnull(ls_pcb_article_decontaminated) or ls_pcb_article_decontaminated = '' then ls_pcb_article_decontaminated = 'U'
	
	ll_pcbsupplement_row = idw_profile_pcb_supplement_dragon.GetRow()
	 IF idw_technical.GetRow () > 0 THEN 
	          ll_row_technical =  idw_technical.GetRow ()
		  idw_technical.object.pcb_concentration_0_9[ll_row_technical] = ls_pcb_concentration_0_9
		  idw_technical.object.pcb_concentration_10_49[ll_row_technical] = ls_pcb_concentration_10_49
		  idw_technical.object.pcb_concentration_50_499[ll_row_technical] = ls_pcb_concentration_50_499
		  idw_technical.object.pcb_concentration_500[ll_row_technical] =  ls_pcb_concentration_500 
		  idw_technical.object.pcb_source_concentration_gr_50[ll_row_technical] = ls_pcb_source_concentration_gr_50
		  idw_technical.object.pcb_regulated_for_disposal_under_TSCA [ll_row_technical] = ls_pcb_under_TSCA
		  idw_technical.object.processed_into_non_liquid [ll_row_technical] = ls_processed_into_non_liquid
		  idw_technical.object.processd_into_nonlqd_prior_pcb [ll_row_technical] = ls_processd_into_nonlqd_prior_pcb
		  idw_technical.object.pcb_manufacturer[ll_row_technical] = ls_pcb_manufacturer
		  idw_technical.object.pcb_article_for_TSCA_landfill [ll_row_technical] = ls_pcb_article_for_TSCA_landfill
		  idw_technical.object.pcb_article_decontaminated [ll_row_technical] = ls_pcb_article_decontaminated
		  //COR2 JXM 03/06/2019 COMMENTED out replaced with following code
	     idw_profile_pcb_supplement_dragon.object.wcr_sign_name[ll_pcbsupplement_row] = ls_signing_name  
		idw_profile_pcb_supplement_dragon.object.wcr_sign_title[ll_pcbsupplement_row] = ls_signing_title 
		idw_profile_pcb_supplement_dragon.object.wcr_sign_date[ll_pcbsupplement_row] = ld_signing_date 
		idw_profile_pcb_supplement_dragon.object.wcr_sign_company[ll_pcbsupplement_row] = ls_signing_company 
	  // END IF
	END IF
END IF //PCB Supplement END

wf_wcr_illinois_disposal(astr_pass.l[1] ,astr_pass.l[2],astr_pass.l[4])

wf_wcr_ldr_supplement (astr_pass.l[1] ,astr_pass.l[2],astr_pass.l[4])

//DevOps:19924
wf_wcr_generator_knowledge_supplement (astr_pass.l[1] ,astr_pass.l[2],astr_pass.l[4])
// MPM - 4/27/2020 - DevOps 15205 - Combined the setting of dw_profile_radioactive_supplement_page_1 and dw_profile_radioactive_supplement_page_3
// into one section, since both datawindows update ProfileRadioactive, and dw_profile_radioactive_supplement_page_1 shares data with dw_profile_radioactive_supplement_page_3.

// Radioactive Supplement Pages 1 and 3
SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :astr_pass.l[1] 
AND revision_id = :astr_pass.l[2]
AND  section = 'RA'
AND isactive = 1 
USING itr_forms;

IF ll_form_sectionstatus_count > 0 THEN
	SELECT 
	FormRadioactive.form_id,
	 FormRadioactive.generated_in_particle_accelerator_flag,
	 FormRadioactive.DOD_non_licensed_disposal_flag,
	 FormRadioactive.byproduct_sum_of_all_isotopes, 		//DevOps #15003 info_gde 04/04/2020;
	 FormRadioactive.special_nuclear_sum_of_all_isotopes, //DevOps #15003 info_gde 04/04/2020;
	 FormRadioactive.source_sof_calculations,					//DevOps #15003 info_gde 04/04/2020;
	 FormRadioactive.USEI_WAC_table_C1_flag,                 // 20200404 jcb #14878 get the flags and waste_type, new columns in table
	 FormRadioactive.USEI_WAC_table_C2_flag,
	 FormRadioactive.USEI_WAC_table_C3_flag, 
	 FormRadioactive.USEI_WAC_table_C4a_flag,
	 FormRadioactive.USEI_WAC_table_C4b_flag,
	 FormRadioactive.USEI_WAC_table_C4c_flag,
	 FormRadioactive.waste_type,
	 FormRadioactive.specifically_exempted_flag,
	 FormRadioactive.uranium_thorium_flag,
	 FormRadioactive.uranium_source_material,
	 FormRadioactive.radium_226_flag,
	 FormRadioactive.radium_228_flag,
	 FormRadioactive.lead_210_flag,
	 FormRadioactive.potassium_40_flag,
	 FormRadioactive.exempt_byproduct_material_flag,
	 FormRadioactive.special_nuclear_material_flag,
	 FormRadioactive.accelerator_flag,
	 FormRadioactive.approved_for_disposal_flag,
	 FormRadioactive.approved_by_nrc_flag,
	 FormRadioactive.approved_for_alternate_disposal_flag,
	 FormRadioactive.nrc_exempted_flag,
	 FormRadioactive.released_from_radiological_control_flag,
	 FormRadioactive.uranium_concentration,
	 FormRadioactive.radium_226_concentration,
	 FormRadioactive.radium_228_concentration,
	 FormRadioactive.potassium_40_concentration,
	 FormRadioactive.lead_210_concentration		 
	 INTO
	:ll_radioactive_form_id,
	:ls_generated_in_particle_accelerator_flag,
	:ls_dod_non_licensed_disposal_flag,
	:ls_profileradioactive_byproduct_sum_of_all_isotopes, 		 //DevOps #15003 info_gde 04/04/2020;
	:ls_profileradioactive_special_nuclear_sum_of_all_isotopes, //DevOps #15003 info_gde 04/04/2020;
	:ls_profileradioactive_source_sof_calculations,					 //DevOps #15003 info_gde 04/04/2020;
	:ls_profileradioactive_usei_wac_table_c1_flag,					 // 20200404 jcb #14878 get the flags and waste_type, new columns in table
	:ls_profileradioactive_usei_wac_table_c2_flag,					
	:ls_profileradioactive_usei_wac_table_c3_flag,
	:ls_profileradioactive_usei_wac_table_c4a_flag,
	:ls_profileradioactive_usei_wac_table_c4b_flag,
	:ls_profileradioactive_usei_wac_table_c4c_flag,
	:ls_profileradioactive_waste_type,
	:ls_specifically_exempted_flag,
	:ls_uranium_thorium_flag,
	:ls_uranium_source_material,
	:ls_radium_226_flag,
	:ls_radium_228_flag,
	:ls_lead_210_flag,
	:ls_potassium_40_flag,
	:ls_exempt_byproduct_material_flag,
	:ls_special_nuclear_material_flag,
	:ls_accelerator_flag,
	:ls_approved_for_disposal_flag,
	:ls_approved_by_nrc_flag,
	:ls_approved_for_alternate_disposal_flag,
	:ls_nrc_exempted_flag,
	:ls_released_from_radiological_control_flag,
	:ls_uranium_concentration,
	:ll_226_concentration,
	:ll_radium_228_concentration,
	:ll_potassium_40_concentration,
	:ll_lead_210_concentration		 	
	FROM FormRadioactive
		WHERE FormRadioactive.wcr_id = :astr_pass.l[1]
		AND 	FormRadioactive.wcr_rev_id =  :astr_pass.l[2]
	  USING itr_forms;
	  
	ll_rad_supplement_rowcount_1 = dw_profile_radioactive_supplement_page_1.RowCount()
	
	IF ll_radioactive_form_id > 0 THEN 
		IF ll_rad_supplement_rowcount_1 <= 0 THEN
			idw_profile_radioactive_supplement_page_1.InsertRow(0)
		END IF
	END IF
	
	 ll_rad_supplement_row_1 = idw_profile_radioactive_supplement_page_1.GetRow()
	 IF ll_rad_supplement_row_1 >0 THEN	
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_generated_in_particle_accelerator_flag[ll_rad_supplement_row_1] = ls_generated_in_particle_accelerator_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_dod_non_licensed_disposal_flag[ll_rad_supplement_row_1] = ls_dod_non_licensed_disposal_flag
	     idw_profile_radioactive_supplement_page_1.object.profileradioactive_byproduct_sum_of_all_isotopes[ll_rad_supplement_row_1] = ls_profileradioactive_byproduct_sum_of_all_isotopes //DevOps #15003 info_gde 04/04/2020;
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_special_nuclear_sum_of_all_isotopes[ll_rad_supplement_row_1] = ls_profileradioactive_special_nuclear_sum_of_all_isotopes //DevOps #15003 info_gde 04/04/2020;
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_source_sof_calculations[ll_rad_supplement_row_1] = ls_profileradioactive_source_sof_calculations //DevOps #15003 info_gde 04/04/2020;
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_usei_wac_table_c1_flag[ll_rad_supplement_row_1] = ls_profileradioactive_usei_wac_table_c1_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_usei_wac_table_c2_flag[ll_rad_supplement_row_1] = ls_profileradioactive_usei_wac_table_c2_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_usei_wac_table_c3_flag[ll_rad_supplement_row_1] = ls_profileradioactive_usei_wac_table_c3_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_usei_wac_table_c4a_flag[ll_rad_supplement_row_1] = ls_profileradioactive_usei_wac_table_c4a_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_usei_wac_table_c4b_flag[ll_rad_supplement_row_1] = ls_profileradioactive_usei_wac_table_c4b_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_usei_wac_table_c4c_flag[ll_rad_supplement_row_1] = ls_profileradioactive_usei_wac_table_c4c_flag
	     idw_profile_radioactive_supplement_page_1.object.profileradioactive_waste_type[ll_rad_supplement_row_1] = ls_profileradioactive_waste_type
		idw_profile_radioactive_supplement_page_1.object.specifically_exempted_flag[ll_rad_supplement_row_1] = ls_specifically_exempted_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_uranium_thorium_flag[ll_rad_supplement_row_1] = ls_uranium_thorium_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_uranium_source_material[ll_rad_supplement_row_1] = ls_uranium_source_material
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_uranium_concentration[ll_rad_supplement_row_1] = ls_uranium_concentration
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_radium_226_flag[ll_rad_supplement_row_1] = ls_radium_226_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_radium_228_flag[ll_rad_supplement_row_1] = ls_radium_228_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_lead_210_flag[ll_rad_supplement_row_1] = ls_lead_210_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_potassium_40_flag[ll_rad_supplement_row_1] = ls_potassium_40_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_exempt_byproduct_material_flag[ll_rad_supplement_row_1] = ls_exempt_byproduct_material_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_special_nuclear_material_flag[ll_rad_supplement_row_1] = ls_special_nuclear_material_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_accelerator_flag[ll_rad_supplement_row_1] = ls_accelerator_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_approved_for_disposal_flag[ll_rad_supplement_row_1] = ls_approved_for_disposal_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_radium_226_concentration[ll_rad_supplement_row_1]  = ll_226_concentration		
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_radium_228_concentration[ll_rad_supplement_row_1]  = ll_radium_228_concentration // 20200304 jcb #14249		
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_lead_210_concentration[ll_rad_supplement_row_1]  = ll_lead_210_concentration // 20200304 jcb #14249		
     	idw_profile_radioactive_supplement_page_1.object.profileradioactive_potassium_40_concentration[ll_rad_supplement_row_1]  = ll_potassium_40_concentration // 20200304 jcb #14249			
		idw_profile_radioactive_supplement_page_1.object.generator_generator_name[ll_rad_supplement_row_1] = ls_generator_name
		idw_profile_radioactive_supplement_page_1.object.generator_generator_epa_id[ll_rad_supplement_row_1] = ls_EPA_ID
		idw_profile_radioactive_supplement_page_1.object.generator_generator_address_1[ll_rad_supplement_row_1] = ls_generator_address_1
		idw_profile_radioactive_supplement_page_1.object.generator_generator_address_2[ll_rad_supplement_row_1] = ls_generator_address_2
		idw_profile_radioactive_supplement_page_1.object.generator_generator_address_3[ll_rad_supplement_row_1] = ls_generator_address_3
		idw_profile_radioactive_supplement_page_1.object.generator_generator_address_4[ll_rad_supplement_row_1] = ls_generator_address_4
		idw_profile_radioactive_supplement_page_1.object.generator_generator_city[ll_rad_supplement_row_1] = ls_generator_generator_city
		idw_profile_radioactive_supplement_page_1.object.generator_generator_state[ll_rad_supplement_row_1] = ls_generator_generator_state
		idw_profile_radioactive_supplement_page_1.object.generator_generator_zip_code[ll_rad_supplement_row_1] = ls_generator_generator_zip_code
		// MPM - 4/6/2020 - DevOps 14876
		idw_profile_radioactive_supplement_page_1.object.profile_wcr_sign_name[ll_rad_supplement_row_1] = ls_signing_name  
		idw_profile_radioactive_supplement_page_1.object.profile_wcr_sign_title[ll_rad_supplement_row_1] = ls_signing_title 
		idw_profile_radioactive_supplement_page_1.object.profile_wcr_sign_date[ll_rad_supplement_row_1] =  ld_signing_date 
		idw_profile_radioactive_supplement_page_1.object.profile_wcr_sign_company[ll_rad_supplement_row_1] = ls_signing_company  
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_approved_by_nrc_flag[ll_rad_supplement_row_1] = ls_approved_by_nrc_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_approved_for_alternate_disposal_flag[ll_rad_supplement_row_1] = ls_approved_for_alternate_disposal_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_nrc_exempted_flag[ll_rad_supplement_row_1] = ls_nrc_exempted_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_released_from_radiological_control_flag[ll_rad_supplement_row_1] = ls_released_from_radiological_control_flag    // limit on arg-nm size
		ib_page_3_changed   = TRUE    									// 20200414 jcb #14994  
		// 20200409 jcb #14994 get page 1 as well as page 3, since they both hit same row in profileradioactive
//         wf_set_rad_supplement_page_1 (ll_rad_supplement_row_1,                       &
//												  ls_generated_in_particle_accelerator_flag,  &
//												  ls_approved_for_disposal_flag,						 &
//												  ls_approved_by_nrc_flag,					 &
//												  ls_approved_for_alternate_disposal_flag,					 &
//												  ls_nrc_exempted_flag,					 &
//												  ls_released_from_radiological_control_flag,   &
//												  ls_dod_non_licensed_disposal_flag) 										  
	     
	END IF

	IF ll_radioactive_form_id > 0 THEN 
		IF idw_profile_radioactive_supplement_page_3.RowCount() <= 0 THEN
			idw_profile_radioactive_supplement_page_3.InsertRow(0)
		END IF
	END IF
	
	ll_rad_supplement_row_3 = idw_profile_radioactive_supplement_page_3.GetRow()
	IF ll_rad_supplement_row_3 >0 THEN	
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_generated_in_particle_accelerator_flag[ll_rad_supplement_row_3] = ls_generated_in_particle_accelerator_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_approved_for_dispos_1[ll_rad_supplement_row_3] = ls_approved_for_disposal_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_approved_by_nrc_fla_1[ll_rad_supplement_row_3] = ls_approved_by_nrc_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_approved_for_altern_1[ll_rad_supplement_row_3] = ls_approved_for_alternate_disposal_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_nrc_exempted_flag_1[ll_rad_supplement_row_3] = ls_nrc_exempted_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_released_from_radio_1[ll_rad_supplement_row_3] = ls_released_from_radiological_control_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_dod_non_licensed_disposal_flag[ll_rad_supplement_row_3] = ls_dod_non_licensed_disposal_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_byproduct_sum_of_all_isotopes[ll_rad_supplement_row_3] = ls_profileradioactive_byproduct_sum_of_all_isotopes
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_source_sof_calculations[ll_rad_supplement_row_3] = ls_profileradioactive_source_sof_calculations
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_special_nuclear_sum_of_all_isotopes[ll_rad_supplement_row_3] = ls_profileradioactive_special_nuclear_sum_of_all_isotopes
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_usei_wac_table_c1_flag[ll_rad_supplement_row_3] = ls_profileradioactive_usei_wac_table_c1_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_usei_wac_table_c2_flag[ll_rad_supplement_row_3] = ls_profileradioactive_usei_wac_table_c2_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_usei_wac_table_c3_flag[ll_rad_supplement_row_3] = ls_profileradioactive_usei_wac_table_c3_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_usei_wac_table_c4a_flag[ll_rad_supplement_row_3] = ls_profileradioactive_usei_wac_table_c4a_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_usei_wac_table_c4b_flag[ll_rad_supplement_row_3] = ls_profileradioactive_usei_wac_table_c4b_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_usei_wac_table_c4c_flag[ll_rad_supplement_row_3] = ls_profileradioactive_usei_wac_table_c4c_flag
		idw_profile_radioactive_supplement_page_3.object.profileradioactive_waste_type[ll_rad_supplement_row_3] = ls_profileradioactive_waste_type
	END IF

	// idw_profile_radioactive_supplement_page_1 also shares data with idw_profile_radioactive_waste, so insert row/set data in that dw, too
	IF ll_radioactive_form_id > 0 THEN 
		IF idw_profile_radioactive_waste.RowCount() <= 0 THEN
			idw_profile_radioactive_waste.InsertRow(0)
		END IF
	END IF
	
	ll_profile_radioactive_waste_row = idw_profile_radioactive_waste.GetRow()
	IF ll_profile_radioactive_waste_row >0 THEN	
		idw_profile_radioactive_waste.object.profileradioactive_waste_type[ll_profile_radioactive_waste_row] = ls_profileradioactive_waste_type
	END IF
	
//DevOps #14877 info_gde 04/03/2020 - start
// Radioactive Supplement Page 2
//	 SELECT 
//	 additional_inventory_flag,
//	 item_name,
//	 total_number_in_shipment,
//	 radionuclide_contained,
//	 activity,
//	 disposal_site_tsdf_code,
//	 cited_regulatory_exemption
//	 INTO
//	 :ls_additional_inventory_flag,
//	:ls_item_name,
//	:ll_total_number_in_shipment,
//	:ls_radionuclide_contained,
//	:ll_activity,
//	:ls_disposal_site_tsdf_code,
//	:ls_cited_regulatory_exemption
//	 FROM dbo.FormRadioactive
//	JOIN FormRadioactiveExempt ON FormRadioactive.form_id = FormRadioactiveExempt.form_id and FormRadioactive.revision_id = FormRadioactiveExempt.revision_id
//		WHERE FormRadioactive.wcr_id = :astr_pass.l[1]
//		AND 	FormRadioactive.wcr_rev_id =  :astr_pass.l[2]
//	  USING itr_forms;
	 
	 SELECT 
	 count(*)
	 INTO
	 :li_count
	 FROM dbo.FormRadioactive
	JOIN FormRadioactiveExempt ON FormRadioactive.form_id = FormRadioactiveExempt.form_id and FormRadioactive.revision_id = FormRadioactiveExempt.revision_id
		WHERE (FormRadioactive.wcr_id = :astr_pass.l[1]
		OR FormRadioactive.form_id = :astr_pass.l[1])
		AND 	FormRadioactive.wcr_rev_id =  :astr_pass.l[2]
	  USING itr_forms;
	
	//ll_rad_supplement_rowcount_2 = idw_profile_radioactive_supplement_page_2.RowCount()
	
	// ll_rad_supplement_row_2 = idw_profile_radioactive_supplement_page_2.GetRow()
	 
	 
	//DevOps #15001 info_gde 04/02/2020 - start
	IF li_count > 0 THEN 
		//IF ll_rad_supplement_rowcount_2 <= 0 THEN
			 lb_rad_supplement_row_2=True
			//idw_profile_radioactive_supplement_page_2.InsertRow(0)
		//END IF
	END IF
  //DevOps #14877 info_gde 04/03/2020 - end
	 
	  // Radioactive Supplement Page 2 SUB
	 IF lb_rad_supplement_row_2 THEN
	DECLARE wcr_radioactive2_cursor CURSOR FOR  
		SELECT  additional_inventory_flag, item_name, total_number_in_shipment,	 radionuclide_contained,	 activity,  disposal_site_tsdf_code,  cited_regulatory_exemption
	 	FROM dbo.FormRadioactive
			JOIN FormRadioactiveExempt ON FormRadioactive.form_id = FormRadioactiveExempt.form_id and FormRadioactive.revision_id = FormRadioactiveExempt.revision_id
		WHERE (FormRadioactive.wcr_id = :astr_pass.l[1]
		OR FormRadioactive.form_id = :astr_pass.l[1])
		AND 	FormRadioactive.wcr_rev_id = :astr_pass.l[2]
	  	USING itr_forms;
			
		OPEN wcr_radioactive2_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_radioactive2_cursor 
			 INTO :ls_additional_inventory_flag, :ls_item_name,:ls_total_number_in_shipment, :ls_radionuclide_contained, :ls_activity,:ls_disposal_site_tsdf_code , :ls_cited_regulatory_exemption;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_profile_radioactive_supplement_page_2.InsertRow(0)
				idw_profile_radioactive_supplement_page_2.object.additional_inventory_flag[ll_row] = ls_additional_inventory_flag
				idw_profile_radioactive_supplement_page_2.object.item_name[ll_row] = ls_item_name
				idw_profile_radioactive_supplement_page_2.object.total_number_in_shipment[ll_row ] = ls_total_number_in_shipment 
				idw_profile_radioactive_supplement_page_2.object.radionuclide_contained[ll_row ] = ls_radionuclide_contained
				idw_profile_radioactive_supplement_page_2.object.activity[ll_row] = ls_activity
				idw_profile_radioactive_supplement_page_2.object.disposal_site_tsdf_code[ll_row] = ls_disposal_site_tsdf_code
				idw_profile_radioactive_supplement_page_2.object.cited_regulatory_exemption[ll_row] = ls_cited_regulatory_exemption
			     idw_profile_radioactive_supplement_page_2.object.line_id[ll_row]=ll_row
				 //DevOps:61049 - AM - Added profile_id
				idw_profile_radioactive_supplement_page_2.object.profile_id[ll_row]=ll_profile_id
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR RadioactiveUsei" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_radioactive2_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_radioactive2_cursor;
	END IF
	
	
//	 IF ll_rad_supplement_row_2 >0 THEN	
//		idw_profile_radioactive_supplement_page_2.object.additional_inventory_flag[ll_rad_supplement_row_2] = ls_additional_inventory_flag
//		idw_profile_radioactive_supplement_page_2.object.item_name[ll_rad_supplement_row_2] = ls_item_name
//		idw_profile_radioactive_supplement_page_2.object.total_number_in_shipment[ll_rad_supplement_row_2] = ll_total_number_in_shipment
//		idw_profile_radioactive_supplement_page_2.object.radionuclide_contained[ll_rad_supplement_row_2] = ls_radionuclide_contained
//		idw_profile_radioactive_supplement_page_2.object.activity[ll_rad_supplement_row_2] = ll_activity
//		idw_profile_radioactive_supplement_page_2.object.disposal_site_tsdf_code[ll_rad_supplement_row_2] =ls_disposal_site_tsdf_code
//		idw_profile_radioactive_supplement_page_2.object.cited_regulatory_exemption[ll_rad_supplement_row_2] = ls_cited_regulatory_exemption
//	 END IF
//DevOps #15001 info_gde 04/02/2020 - end

// Radioactive Supplement Page 3 SUB
DECLARE wcr_radioactive_cursor CURSOR FOR  
		SELECT  FormRadioactiveusei.radionuclide,  FormRadioactiveusei.concentration, FormRadioactiveusei.line_id
		 FROM FormRadioactive
		JOIN FormRadioactiveusei ON FormRadioactive.form_id = FormRadioactiveusei.form_id and FormRadioactive.revision_id = FormRadioactiveusei.revision_id
				WHERE FormRadioactive.wcr_id = :astr_pass.l[1]
  				 AND 	FormRadioactive.wcr_rev_id =  :astr_pass.l[2]
		  USING itr_forms;
			
		OPEN wcr_radioactive_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_radioactive_cursor 
			 INTO :ls_radionuclide, :ll_concentration,:ll_line_id ;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_profile_radioactive_supplement_3sub.InsertRow(0)
				idw_profile_radioactive_supplement_3sub.Object.profile_id[ll_row] = ll_profile_id
				idw_profile_radioactive_supplement_3sub.Object.radionuclide[ll_row] = ls_radionuclide
				idw_profile_radioactive_supplement_3sub.Object.concentration[ll_row] = ll_concentration
				idw_profile_radioactive_supplement_3sub.Object.line_id[ll_row] = ll_line_id
				idw_profile_radioactive_supplement_3sub.Object.added_by[ll_row] = gs_user_id
				idw_profile_radioactive_supplement_3sub.Object.date_added[ll_row] = ldt_today
				idw_profile_radioactive_supplement_3sub.Object.modified_by[ll_row] = gs_user_id
				idw_profile_radioactive_supplement_3sub.Object.date_modified[ll_row] = ldt_today
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR RadioactiveUsei" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_radioactive_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_radioactive_cursor;
END IF  // Radioactive END check 

//Profile
ll_row_header = idw_header.GetRow()
If ll_row_header > 0 Then
	 // idw_header.object.constituents_requiring_treatment_flag[ll_row_header] = ls_constituents_requiring_treatment_flag  //DevOps 16467 info_gde 06/20/2020; PROD EQAI - LDR - Question 10 - Data Lost
	  if not IsNull(ls_routing_facility) AND ls_routing_facility<>'' then //DevOps 15576 info_gde 05/19/2020; EQAI-Maintenance-COR-Form Management (CR)
	  	idw_header.object.routing_facility[ll_row_header] = ls_routing_facility
	  end if
	//customer
	//If lb_select_all OR f_get_s_index( astr_pass.s, "customer_selected") > 0 Then
	IF IsNull( idw_header.Object.customer_id[ll_row_header] ) THEN
		idw_header.Object.customer_id[ll_row_header] = ll_customer_id
		ldwo = idw_header.Object.customer_id
		idw_header.Event itemchanged (ll_row_header, ldwo, String(ll_customer_id) )
	End If
	//DevOps:13249
	IF IsNull( idw_header.Object.pending_customer_name[ll_row_header] )  OR  idw_header.Object.pending_customer_name[ll_row_header]  = "" THEN
		idw_header.Object.pending_customer_name[ll_row_header] = ls_cust_name
	End If
	
	//generator
	If lb_select_all OR f_get_s_index( astr_pass.s, "generator_selected") > 0 Then
		idw_header.Object.generator_epa_id[ll_row_header] = ls_epa_id
		idw_header.Object.generator_id[ll_row_header] = ll_wcr_gen
		idw_header.Object.generator_name[ll_row_header] = ls_generator_name
		idw_header.Object.naics_code[ll_row_header] = ll_NAICS_code
		ldwo = idw_header.Object.generator_epa_id
		
		  Select country_code
		  INTO :ls_generator_country
		  FROM stateabbreviation 
		  WHERE abbr = :ls_generator_generator_state
		  Using gtr_share;
  
		idw_header.object.generator_address_1[ll_row_header] = ls_generator_address_1
		idw_header.object.generator_city[ll_row_header] = ls_generator_generator_city
		idw_header.object.generator_state[ll_row_header] = ls_generator_generator_state
		idw_header.object.generator_country[ll_row_header] = ls_generator_country
		idw_header.object.generator_zip_code[ll_row_header] = ls_generator_generator_zip_code
		
		  Select country_code
		  INTO :ls_gen_mail_country
		  FROM stateabbreviation 
		  WHERE abbr = :ls_gen_mail_state
		  Using gtr_share;
		  
		idw_header.object.gen_mail_addr1[ll_row_header] = ls_gen_mail_addr1
		idw_header.object.gen_mail_addr2[ll_row_header] = ls_gen_mail_addr2
		idw_header.object.gen_mail_city[ll_row_header] = ls_gen_mail_city
		idw_header.object.gen_mail_state[ll_row_header] = ls_gen_mail_state
		idw_header.object.gen_mail_country[ll_row_header] = ls_gen_mail_country
		idw_header.object.gen_mail_zip_code[ll_row_header] = ls_gen_mail_zip_code
		idw_header.object.generator_phone[ll_row_header] = ls_generator_phone
		
		SELECT generator_type
		INTO:ls_generator_type
		FROM GeneratorType
		WHERE generator_type_id =:ll_generator_type_id
		USING itr_forms;
		
		idw_header.object.generator_type[ll_row_header] = ls_generator_type
		//Task:10187 - CESQG Generators. AM
		//idw_header.Event itemchanged (ll_row_header, ldwo, ls_epa_id )
	End If
	
	//waste_common_name - B1
	If lb_select_all OR f_get_s_index( astr_pass.s, "waste_selected") > 0 Then
		idw_header.Object.approval_desc[ll_row_header] = ls_wcr_waste_common_name
	End If
    
	 // PO
	If lb_select_all OR f_get_s_index( astr_pass.s, "po_selected") > 0 Then
		idw_header.Object.po_required_from_form[ll_row_header] = ls_po_required
		//DevOps:16095 - Commented to fix app termination
		//DevOps #15353 info_gde 04/25/2020 start
		//If ( isNull(ls_purchase_order) OR ls_purchase_order='' ) AND (not isNull(idw_wcr_display_1.Object.purchase_order_from_form[ll_row_header]) OR idw_wcr_display_1.Object.purchase_order_from_form[ll_row_header]<>'') THEN
		    
		If NOT isNull(is_po) AND is_po<>'' Then
			 idw_header.Object.purchase_order_from_form [ll_row_header] = is_po
		ElseIf NOT isNull(ls_purchase_order) AND ls_purchase_order<>'' Then
			// MPM - 6/8/2020 - DevOps 16210
			is_po = ls_purchase_order
			 idw_header.Object.purchase_order_from_form [ll_row_header] = ls_purchase_order
		End If
		//DevOps #15353 info_gde 04/25/2020 end 
	End If
	
	//Tech
	If lb_select_all OR f_get_s_index( astr_pass.s, "tech_selected") > 0 Then
	   ll_row_contact = idw_profile_gen_contact_form.rowcount( )
		If ll_row_contact = 0 Then
			ll_row_contact = idw_profile_gen_contact_form.insertRow( 0 )
			idw_profile_gen_contact_form.object.profile_id[ll_row_contact] = idw_header.object.profile_id[ll_row_header]
			idw_profile_gen_contact_form.object.contact_type[ll_row_contact] = "Generator"
			idw_profile_gen_contact_form.object.added_by[ll_row_contact] = gs_user_id
			idw_profile_gen_contact_form.object.date_added[ll_row_contact] = DateTime(Today(), Now())
		Else
			idw_profile_gen_contact_form.object.modified_by[ll_row_contact] = gs_user_id
			idw_profile_gen_contact_form.object.date_modified[ll_row_contact] = DateTime(Today(), Now())
		End If
		idw_profile_gen_contact_form.object.contact_name[ll_row_contact] = ls_tech_contact_name
		idw_profile_gen_contact_form.object.contact_phone[ll_row_contact] = ls_tech_contact_phone
		idw_profile_gen_contact_form.object.contact_email[ll_row_contact] = ls_tech_cont_email   
     End If
	 	 ll_row_contact = idw_wcr_display_3.rowcount( )
			If ll_row_contact > 0  Then
					idw_wcr_display_3.object.contact_name[ll_row_contact] = 	ls_inv_contact_name
					idw_wcr_display_3.object.contact_phone[ll_row_contact] = ls_inv_contact_phone
					idw_wcr_display_3.object.contact_fax[ll_row_contact] = ls_inv_contact_fax
					idw_wcr_display_3.object.contact_mobile[ll_row_contact] = ls_inv_phone_number
					idw_wcr_display_3.object.contact_email[ll_row_contact] = ls_inv_contact_email
			end if 	
	 //  gen_process  B2
	If lb_select_all OR f_get_s_index( astr_pass.s, "genprocess_selected") > 0 Then
		idw_header.object.gen_process[ll_row_header] = ls_gen_process
	End If
	
	//epa_source_code and epa_form_code B3
 	If lb_select_all OR f_get_s_index( astr_pass.s, "epa_selected") > 0 Then
		idw_header.object.epa_source_code[ll_row_header] = ls_epa_source_code
		idw_header.object.epa_form_code[ll_row_header] = ls_epa_form_code
	End If
	
	//hazmat C1, hazmat C 1a
	If lb_select_all OR f_get_s_index( astr_pass.s, "dotshipping_selected") > 0 Then
		//DevOps 19144 info_gde 03/25/2021; Section C1 'Waste' Checkbox Functionality During Amendment/Renewal
		IF ls_dot_waste_flag='T' AND (ls_wcr_dot_shipping_name = '' OR Left(ls_wcr_dot_shipping_name, 7) <> 'Waste, ') THEN
     		IF ls_wcr_dot_shipping_name = '' THEN
         		ls_wcr_dot_shipping_name = 'Waste, '
     		ELSE
        	 		ls_wcr_dot_shipping_name =  'Waste, ' + ls_wcr_dot_shipping_name 
     		END IF
		ELSEIF ls_dot_waste_flag <> 'T' AND  (Left(ls_wcr_dot_shipping_name, 7) = 'Waste, ' OR Left(ls_wcr_dot_shipping_name, 6) = 'Waste ') THEN
				  ls_dot_waste_flag= 'T'
		END IF
		idw_header.Object.dot_shipping_name[ll_row_header] = ls_wcr_dot_shipping_name
		idw_header.Object.hazmat[ll_row_header] =  ls_hazmat_flag
		idw_header.Object.dot_waste_flag[ll_row_header] =  ls_dot_waste_flag	
	End If
	
	//DOT_shipping_desc_additional  C2
	If lb_select_all OR f_get_s_index( astr_pass.s, "additional_selected") > 0 Then
		idw_header.Object.dot_shipping_desc_additional[ll_row_header] = ls_DOT_shipping_desc_additional 
	End If
	
	//RQ C3
	//DevOPs:13906 - Added subsidiary_haz_mat_class
	If lb_select_all OR f_get_s_index( astr_pass.s, "rq_selected") > 0 Then
		idw_header.Object.reportable_quantity_flag[ll_row_header] = ls_rq
		idw_header.Object.RQ_reason[ll_row_header] = ls_rq_reason
		idw_header.Object.un_na_number[ll_row_header] = ll_un_na_number
		//DevOps #14700 info_gde 03/25/2020 - start
		//idw_header.Object.package_group[ll_row_header] = ls_package_group
		if ls_package_group= 'N/A' then
			ls_package_group = ls_null
		end if
		idw_header.Object.package_group[ll_row_header] = ls_package_group
		//DevOps #14700 info_gde 03/25/2020 - end
		idw_header.Object.erg_number[ll_row_header] = ll_erg_number
		idw_header.Object.hazmat_class[ll_row_header] = ls_hazmat_class
		wf_check_trailing_comma(ll_row_header, ls_subsidiary_haz_mat_class, 1)//DevOps 15321 info_gde 05/14/2020
		//idw_header.Object.subsidiary_haz_mat_class[ll_row_header] = ls_subsidiary_haz_mat_class
		idw_header.Object.profile_rq_threshold[ll_row_header] = ld_rq_threshold
		idw_header.Object.dot_shipping_desc_additional[ll_row_header] = ls_dot_shipping_desc_additional
		IF Isnull(ls_un_na_flag) OR ls_un_na_flag = "" THEN
			ls_un_na_flag = 'X'
		END IF 
		idw_header.Object.un_na_flag[ll_row_header] = ls_un_na_flag 
	End If
	
	//DOT C4
	If lb_select_all OR f_get_s_index( astr_pass.s, "dot_selected") > 0 Then
		idw_header.Object.dot_sp_permit_flag[ll_row_header] = ls_dot_sp_permit_flag
		idw_header.Object.manifest_dot_sp_number[ll_row_header] = ls_DOT_sp_permit_text
	End If
	
	//Emegency C5
	If lb_select_all OR f_get_s_index( astr_pass.s, "emergency_selected") > 0 Then
		idw_header.Object.emergency_phone_number[ll_row_header] = ls_emergency_phone_number
	end if
	
	//DOT_inhalation_haz_flag C6
	If lb_select_all OR f_get_s_index( astr_pass.s, "dotinhalation_selected") > 0 Then
		idw_header.Object.DOT_inhalation_haz_flag[ll_row_header] = ls_DOT_inhalation_haz_flag
	end if
	
	// Waste Treated After Generation
	If lb_select_all OR f_get_s_index( astr_pass.s, "wastetreated_selected") > 0 Then
		idw_header.object.waste_treated_after_generation[ll_row_header] = ls_waste_treated_after_generation 
		idw_header.object.waste_treated_after_generation_desc[ll_row_header] = ls_wastetreated_after_generation_desc
	End If
	
	//Hazardous Secondary Material
	If lb_select_all OR f_get_s_index( astr_pass.s, "hazardous_selected") > 0 Then
		idw_header.object.hazardous_secondary_material[ll_row_header] = ls_hazardous_secondary_material 
		idw_header.object.hazardous_secondary_material_cert[ll_row_header] = ls_hazardous_secondary_material_cert
	End If
		
	//LDR Subcategory  
	If lb_select_all OR f_get_s_index( astr_pass.s, "ldr_selected") > 0 Then
	   // 	idw_header.object.ldr_subcategory[ll_row_header] = ls_ldr_subcategory 
			ll_rowcount = idw_ldr_subcategory.Rowcount()
		FOR ll_idx = ll_rowcount TO 1 STEP -1
			idw_ldr_subcategory.DeleteRow(ll_idx)
			ll_rowcount --
		NEXT
		//copy ldr subcategory from wcr ldr subcategory
	     DECLARE wcr_ldr_subcategory_cursor CURSOR FOR  
		SELECT DISTINCT ldr_subcategory_id 
		  FROM FormLDRSubcategory
		 WHERE form_id = :astr_pass.l[1]
			AND revision_id = :astr_pass.l[2]
		 USING itr_forms;
			
		OPEN wcr_ldr_subcategory_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_ldr_subcategory_cursor 
			 INTO :ll_ldr_subcategory_id ;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_ldr_subcategory.InsertRow(0)
				idw_ldr_subcategory.Object.profile_id[ll_row] = ll_profile_id
				idw_ldr_subcategory.Object.ldr_subcategory_id[ll_row] = ll_ldr_subcategory_id
				idw_ldr_subcategory.Object.added_by[ll_row] = gs_user_id
				idw_ldr_subcategory.Object.date_added[ll_row] = ldt_today
				idw_ldr_subcategory.Object.modified_by[ll_row] = gs_user_id
				idw_ldr_subcategory.Object.date_modified[ll_row] = ldt_today	
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR LDR Subcategory" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_ldr_subcategory_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_ldr_subcategory_cursor;
	End If
 
    //origin_selected
	 If lb_select_all OR f_get_s_index( astr_pass.s, "origin_selected") > 0 Then
		idw_header.object.origin_refinery[ll_row_header] = ls_origin_refinery  
	End If
	
	//specific_selected
	 If lb_select_all OR f_get_s_index( astr_pass.s, "specific_selected") > 0 Then
		idw_header.object.specific_technology_requested[ll_row_header] = ls_specific_technology_requested	
	End If
	
	//facility_instruction
	 If lb_select_all OR f_get_s_index( astr_pass.s, "facility_instruction") > 0 Then
		idw_header.object.facility_instruction[ll_row_header] = ls_facility_instruction  
	End If
	
	//requested_selected
	 If lb_select_all OR f_get_s_index( astr_pass.s, "requested_technology") > 0 Then
		idw_header.object.requested_technology[ll_row_header] = ls_requested_technology
	End If
	
	//thermal_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "thermal_selected") > 0 Then
		idw_header.object.thermal_process_flag[ll_row_header] = ls_thermal_process_flag  
	End If
	
	//other_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "other_selected") > 0 Then
		idw_header.object.other_restrictions_requested[ll_row_header] = ls_other_restrictions_requested  
	End If
	
	// signing_selected
		If lb_select_all OR f_get_s_index( astr_pass.s, "signing_selected") > 0 Then
		idw_header.object.wcr_sign_name[ll_row_header] = ls_signing_name  
		idw_header.object.wcr_sign_title[ll_row_header] = ls_signing_title 
		idw_header.object.wcr_sign_date[ll_row_header] = ld_signing_date 
		idw_header.object.wcr_sign_company[ll_row_header] = ls_signing_company 
	End If

	//DevOps:11415 - Update approval_comments with formwcr.approval_code.
	//DevOps:61354 - If not renewal/amendment then add approval_comments.
	IF idw_comment.Getrow() > 0 AND is_copy_source <> 'renewal' AND is_copy_source <> 'amendment' THEN 
		 idw_comment.object.approval_comments [ idw_comment.Getrow()] = 'Customer Requested Approval Code: ' + ls_form_approval_code
	END IF
		
	// container_type C7
	If lb_select_all OR f_get_s_index( astr_pass.s, "containertype_selected") > 0 Then 
		idw_header.Object.container_type_bulk[ll_row_header] = ls_container_type_bulk
		idw_header.Object.container_type_totes[ll_row_header] = ls_container_type_totes
		idw_header.Object.container_type_pallet[ll_row_header] = ls_container_type_pallet
		idw_header.Object.container_type_boxes[ll_row_header] = ls_container_type_boxes
		idw_header.Object.container_type_drums[ll_row_header] = ls_container_type_drums
		idw_header.Object.container_type_cylinder[ll_row_header] = ls_container_type_cylinder
		idw_header.Object.container_type_labpack[ll_row_header] = ls_container_type_labpack
		idw_header.Object.container_type_combination[ll_row_header] = ls_container_type_combination
		idw_header.Object.container_type_combination_desc[ll_row_header] = ls_container_type_combination_desc
		idw_header.Object.container_type_other[ll_row_header] = ls_container_type_other
		idw_header.Object.container_type_other_desc[ll_row_header] = ls_container_type_other_desc	
		//DevOPs:14134
		ll_rowcount = idw_container_size.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_container_size.DeleteRow(ll_row)
		NEXT
		
		DECLARE wcr_containersize_cursor CURSOR FOR  
		SELECT DISTINCT bill_unit_code,isnull(is_bill_unit_table_lookup,'F')
		  FROM FormXWCRContainerSize
		 WHERE form_id = :astr_pass.l[1]
			AND revision_id = :astr_pass.l[2]
		 USING itr_forms;
			
		OPEN wcr_containersize_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_containersize_cursor 
			 INTO :ls_container_bill_unit, :ls_is_bill_unit_table_lookup ;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_container_size.InsertRow(0)
				idw_container_size.Object.profile_id[ll_row] = ll_profile_id
				idw_container_size.Object.bill_unit_code[ll_row] = ls_container_bill_unit
				idw_container_size.Object.is_bill_unit_table_lookup[ll_row] = ls_is_bill_unit_table_lookup
				idw_container_size.Object.added_by[ll_row] = gs_user_id
				idw_container_size.Object.date_added[ll_row] = ldt_today
				idw_container_size.Object.modified_by[ll_row] = gs_user_id
				idw_container_size.Object.date_modified[ll_row] = ldt_today
				ib_changed_comp = TRUE	
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR ContainerSize" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_containersize_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_containersize_cursor;
	end if
	
	// volume and Frequency C8 
	//Delete existing shipping unit
	If lb_select_all OR f_get_s_index( astr_pass.s, "volume_selected") > 0 Then
		//idw_header.Object.shipping_volume_unit_other[ll_row_header] = ls_shipping_volume_unit_other
	    idw_header.object.shipping_frequency[ll_row_header] 		= ls_frequency
		idw_header.object.shipping_frequency_other[ll_row_header] = ls_frequency_other
		//Task:10321 - C8 Frequency Section
		//Task:10570 - reapproval_allowed
		IF ls_frequency = '1' THEN 
		   idw_header.object.one_time_only[ll_row_header] 		= 'T'
		  idw_header.object.reapproval_allowed[ll_row_header] = 'F'
		ELSE
		   idw_header.object.one_time_only[ll_row_header] 		= 'F'
		   idw_header.object.reapproval_allowed[ll_row_header] = 'T'
		END IF	
		
//		ll_rowcount = idw_shipping_unit.Rowcount()
//		FOR ll_idx = ll_rowcount TO 1 STEP -1
//			idw_shipping_unit.DeleteRow(ll_idx)
//			ll_rowcount --
//		NEXT
		//copy shipping units from wcr unit
//		ds_form_unit = CREATE DATASTORE
//		ds_form_unit.dataobject = 'd_form_units'
//		ds_form_unit.SetTransObject(itr_forms)
//		ll_rowcount = ds_form_unit.Retrieve(astr_pass.l[1], astr_pass.l[2])
//		FOR ll_idx = 1 TO ll_rowcount
//			ll_newrow = idw_shipping_unit.InsertRow(0)
//			idw_shipping_unit.object.quantity[ll_newrow]			= ds_form_unit.object.quantity[ll_idx]
//			idw_shipping_unit.object.bill_unit_code[ll_newrow]	= ds_form_unit.object.bill_unit_code[ll_idx]
//		NEXT
//		DESTROY ds_form_unit
//		If ll_rowcount = 0 Then
//			ll_newrow = idw_shipping_unit.InsertRow(0)
//		End If

		// MPM - 6/20/2020 - DevOps 16428
		ll_rowcount = idw_ship_volume.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_ship_volume.DeleteRow(ll_row)
		NEXT
		
		DECLARE wcr_shipping_unit_cursor CURSOR FOR  
		SELECT DISTINCT
			FormXUnit.quantity
		,	FormXUnit.bill_unit_code
		FROM FormXUnit
		WHERE FormXUnit.form_id = :astr_pass.l[1]
			AND FormXUnit.revision_id =  :astr_pass.l[2]
			AND FormXUnit.form_type = 'WCR'
		 USING itr_forms;
 
		OPEN wcr_shipping_unit_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_shipping_unit_cursor 
			 INTO :ls_quantity, :ls_container_bill_unit ;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_ship_volume.InsertRow(0)
				idw_ship_volume.Object.quantity[ll_row] = ls_quantity
				idw_ship_volume.Object.bill_unit_code[ll_row] = ls_container_bill_unit
				ib_changed_comp = TRUE	
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Shipping Unit" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_shipping_unit_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_shipping_unit_cursor;
	
	End If
	
	//Waste Composition	D1
	If lb_select_all OR f_get_s_index( astr_pass.s, "comp_selected") > 0 Then
		ll_rowcount = idw_composition.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_composition.DeleteRow(ll_row)
		NEXT
		DECLARE wcr_composition_cursor CURSOR FOR  
		SELECT DISTINCT comp_description, comp_from_pct, comp_to_pct, unit, sequence_id,comp_typical_pct 
		  FROM FormXWCRComposition
		 WHERE form_id = :astr_pass.l[1]
			AND revision_id = :astr_pass.l[2]
		 ORDER BY sequence_id 
		 USING itr_forms;
			
		OPEN wcr_composition_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_composition_cursor 
			 INTO :ls_comp_desc, :ldb_comp_from_pct, :ldb_comp_to_pct, :ls_composition_unit, :ll_sequence_id, :ldb_comp_typical_pct ;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_composition.InsertRow(0)
				//idw_composition.Object.profile_id[ll_row] = ll_profile_id
				idw_composition.Object.comp_description[ll_row] = ls_comp_desc
				idw_composition.Object.comp_from_pct[ll_row] = ldb_comp_from_pct
				idw_composition.Object.comp_to_pct[ll_row] = ldb_comp_to_pct
				idw_composition.Object.unit[ll_row] = ls_composition_unit
				idw_composition.Object.sequence_id[ll_row] = ll_sequence_id
				idw_composition.Object.comp_typical_pct[ll_row] = ldb_comp_typical_pct  
				ib_changed_comp = TRUE	
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Compositions" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_composition_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_composition_cursor;
	End If

    //Texas and PA selected
	 If lb_select_all OR f_get_s_index( astr_pass.s, "texas_selected") > 0 Then
		idw_header.object.texas_waste_material_type[ll_row_header] = ls_texas_waste_material_type
		//idw_header.object.texas_state_waste_code[ll_row_header]	= ls_texas_state_waste_code
		idw_header.object.pa_residual_waste_flag[ll_row_header]		= ls_pa_residual_waste_flag
		
	//Texas  Waste Codes 
		ll_rowcount = idw_waste_code_state.RowCount()
			 FOR ll_row = ll_rowcount TO 1 STEP -1
				ll_waste_code_uid =  idw_waste_code_state.Object.waste_code_uid[ll_row]
				ls_state =  idw_waste_code_state.Object.state[ll_row]
				SELECT Count(FXW.waste_code_UID)
				INTO:ll_select_row_count
				FROM FormXWasteCode FXW
				JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
				  AND  WC.status =  'A'  and WC.waste_code_origin = 'S' AND WC.state IN ( 'PA' , 'TX' )
				WHERE form_id = :astr_pass.l[1]
				AND revision_id = :astr_pass.l[2] 
				AND FXW.waste_code_uid = :ll_waste_code_uid
				USING itr_forms;
					 // Delete existing profile waste codes if not in formxwastecode 
				IF ll_select_row_count = 0 AND ( ls_state = 'PA' OR ls_state =  'TX' ) THEN
					 idw_waste_code_state.DeleteRow(ll_row)
					ib_changed_waste_code = TRUE
				END IF
			NEXT

		// Load the WCR Waste Codes
		DECLARE wcr_waste_code_cursor CURSOR FOR  
		 SELECT DISTINCT WC.display_name, FXW.waste_code_UID, WC.waste_code_origin, WC.sequence_id, WC.state, WC.waste_code, WC.status
			FROM FormXWasteCode FXW
			JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
			AND  WC.status =  'A'  and WC.waste_code_origin = 'S' AND WC.state IN ( 'PA' , 'TX' )
		  WHERE form_id = :astr_pass.l[1]
			 AND revision_id = :astr_pass.l[2]
		  ORDER BY FXW.waste_code_UID 
		  USING itr_forms;
						
		OPEN wcr_waste_code_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_waste_code_cursor INTO :ls_waste_code, :ll_waste_code_UID, :ls_waste_code_origin, :ll_default_seq, :ls_state, :ls_short_waste_code, :ls_status;
			IF itr_forms.SQLCode = 0 THEN
				CHOOSE CASE Upper(ls_waste_code_origin)
					CASE 'F'
						/* AlonB 12298 09/19/2019    */
						ldw = idw_waste_code_fed
						/* AlonB 12298 09/19/2019    */
					CASE 'S'
						ldw = idw_waste_code_state
					CASE 'E'
						// Form should never have an EQ code!! regardless we will add the assign code here
						//ldw = idw_waste_code_eq								
					CASE ELSE
				END CHOOSE
				 ls_find = "waste_code_uid = " + string (ll_waste_code_UID)
				 ll_row_find = idw_waste_code_state.Find (ls_find,1, idw_waste_code_state.RowCount()+1)
				// DevOps:21697 - If state is TX then set texas_primary_flag as a T
				 IF ll_row_find > 0 THEN 
					 FOR i = 1 to ll_row_find
						ls_state = ldw.Object.state[i] 
				         IF ls_state = 'TX' THEN 
							ldw.object.texas_primary_flag[i] = 'T'
						END IF
					NEXT
				END IF
				 IF ll_row_find = 0 THEN 								
					ll_row = ldw.InsertRow(0)
					//ldw.Object.profile_id[ll_row] = ll_profile_id
					ldw.Object.primary_flag[ll_row] = "F"
					//ldw.Object.sequence_id[ll_row] = ll_null
					ldw.Object.waste_code[ll_row] = ls_waste_code
					ldw.Object.waste_code_UID[ll_row] = ll_waste_code_UID
					ldw.Object.default_sequence_id[ll_row] = ll_default_seq
					ldw.Object.state[ll_row] = ls_state
					ldw.Object.status[ll_row] = ls_status
					ldw.Object.profilewastecode_waste_code[ll_row] = ls_short_waste_code
					//DevOps:13045
					IF ls_state = 'TX' THEN 
						// idw_header.object.texas_state_waste_code[ll_row_header]	= ls_waste_code
						is_tx_state_waste_codes = ls_waste_code
						//DevOps:21536 - Set texas_primary_flag as a T when COR populates TX waste code.
						 ldw.object.texas_primary_flag[ll_row] = 'T'
						  IF ls_state_waste_code_flag = 'T' THEN 
							ll_row_technical =  idw_technical.GetRow()
								idw_technical.object.state_waste_code_flag[ll_row_technical]	= 'F'
						  ELSE
								   // idw_technical.object.state_waste_code_flag[ll_row_technical]	= 'T'
						 END IF
					END IF
					IF  ls_state = 'PA' THEN 
				       	is_pa_state_waste_codes += ls_waste_code
				    END IF
					CHOOSE CASE Upper(ls_waste_code_origin)
						CASE 'F'
							ldw.Object.sequence_flag[ll_row] = 'F'
							IF ll_row <= ii_top6 THEN
								ldw.object.include[ll_row] = 1
								ldw.object.sequence_id[ll_row] = ll_row
							ELSE
								ldw.object.include[ll_row] = 0
							END IF
						CASE 'S'
							ldw.Object.sequence_flag[ll_row] = 'A'
						CASE 'E'
	//						ldw.Object.sequence_flag[ll_row] = 'O'
	//						IF ll_row <= ii_top6 THEN
	//							ldw.object.include[ll_row] = 1
	//						ELSE
	//							ldw.object.include[ll_row] = 0
	//						END IF
							CASE ELSE
						END CHOOSE
							ib_changed_waste_code = TRUE
				    END IF
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
					"~nPress OK to Continue.", StopSign!)
					CLOSE wcr_waste_code_cursor;
					RETURN -1
				END IF
			LOOP
					CLOSE wcr_waste_code_cursor;
					
				IF ib_changed_waste_code THEN
					idw_waste_code_fed.Sort()
					idw_waste_code_state.Sort()
					idw_waste_code_eq.Sort()
					idw_waste_code_state.GroupCalc()
					
					wf_top6_renumber()
					wf_set_waste_code_sequence(idw_waste_code_state)
					wf_set_waste_code_sequence(idw_waste_code_eq)
					POST wf_set_primary_waste_code()
					
					// rb 12/05/2012 The instance vars that WCR reference need to be updated
					Post wf_populate_wastecodes_wcr ('all')
					// set the answers for parent questions rcra listed, rcra characteristic, state haz and state nonhaz 
					Post wf_wcr_set_waste_code_answers ()
				END IF
						
				IF ll_row = 1 THEN
					// There was only one waste code on the WCR, set it as primary
					idw_header.Object.waste_code[ll_row_header] = ls_waste_code
					idw_header.Object.waste_code_uid[ll_row_header] = ll_waste_code_UID
					this.wf_sync_waste_code( ll_waste_code_UID, ls_waste_code, FALSE)
				END IF
	end if

	//RCRA waste code 
	If lb_select_all OR f_get_s_index( astr_pass.s, "rcra_selected") > 0 Then
	   IF ls_RCRA_waste_code_flag = 'T' THEN 
			idw_header.object.rcra_waste_code_flag[ll_row_header]	= 'F'
	    ELSE
		    idw_header.object.rcra_waste_code_flag[ll_row_header]	= 'T'
	   	END IF
		
		IF ISNull (ls_rcra_exempt_flag) THEN  ls_rcra_exempt_flag =  'U'
		
		idw_header.object.rcra_exempt_flag[ll_row_header] 		= ls_rcra_exempt_flag
		idw_header.object.rcra_exempt_reason[ll_row_header]	= ls_rcra_exempt_reason
		idw_header.object.rcra_listed[ll_row_header]				= ls_rcra_listed
		idw_header.object.rcra_characteristic[ll_row_header] 	= ls_rcra_characteristic
			//10253 - E3 RCRA Waste Codes - In COR F means true so changed <> 'F' to = 'F'
		IF Not IsNull (ls_RCRA_waste_code_flag ) THEN  
				//RCRA  Waste Codes 
				// Delete existing profile  waste codes if not in formxwastecode 
				ll_rowcount = idw_waste_code_fed.RowCount()
				 FOR ll_row = ll_rowcount TO 1 STEP -1
					ll_waste_code_uid =  idw_waste_code_fed.Object.waste_code_uid[ll_row]
					ls_waste_type_code =  idw_waste_code_fed.Object.waste_type_code[ll_row]
					SELECT waste_code_origin
					INTO :ls_waste_code_origin 
					FROM wastecode 
					where waste_code_uid = :ll_waste_code_uid
						USING itr_forms;
					ls_haz_flag = idw_waste_code_fed.Object.haz_flag[ll_row]
					
					SELECT Count(FXW.waste_code_UID)
					INTO:ll_select_row_count
					FROM FormXWasteCode FXW
					JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
					  AND  WC.status = 'A'  AND WC.waste_code_origin = 'F' AND WC.haz_flag = 'T' AND WC.waste_type_code IN ('L', 'C') 
					WHERE form_id = :astr_pass.l[1]
					AND revision_id = :astr_pass.l[2] 
					AND FXW.waste_code_uid = :ll_waste_code_uid
					USING itr_forms;
						 
					IF ll_select_row_count = 0 AND (ls_waste_type_code = 'L' OR ls_waste_type_code = 'C')  AND ls_waste_code_origin = 'F' AND ls_haz_flag = 'T'  THEN
					    idw_waste_code_fed.DeleteRow(ll_row)
						ib_changed_waste_code = TRUE
					END IF
				NEXT
				
				// Load the WCR Waste Codes
				DECLARE wcr_rcra_waste_code_cursor CURSOR FOR  
				 SELECT DISTINCT WC.display_name, FXW.waste_code_UID, WC.waste_code_origin, WC.sequence_id, WC.state, WC.waste_code, WC.status
					FROM FormXWasteCode FXW
					JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
					AND  WC.status = 'A'  AND WC.waste_code_origin = 'F' AND WC.haz_flag = 'T' AND WC.waste_type_code IN ('L', 'C') 
				  WHERE form_id = :astr_pass.l[1]
					 AND revision_id = :astr_pass.l[2]
				  ORDER BY FXW.waste_code_UID 
				  USING itr_forms;
						
				OPEN wcr_rcra_waste_code_cursor;
				DO WHILE itr_forms.SQLCode = 0
					FETCH wcr_rcra_waste_code_cursor INTO :ls_waste_code, :ll_waste_code_UID, :ls_waste_code_origin, :ll_default_seq, :ls_state, :ls_short_waste_code, :ls_status;
					IF itr_forms.SQLCode = 0 THEN
						CHOOSE CASE Upper(ls_waste_code_origin)
							CASE 'F'
								ldw = idw_waste_code_fed
							CASE 'S'
								//ldw = idw_waste_code_state
							CASE 'E'
								// Form should never have an EQ code!! regardless we will add the assign code here
								//ldw = idw_waste_code_eq								
							CASE ELSE
						END CHOOSE
						  ls_find = "waste_code_uid = " + string (ll_waste_code_UID)
						  ll_row_find = idw_waste_code_fed.Find (ls_find,1, idw_waste_code_fed.RowCount()+1)
							 IF ll_row_find = 0 THEN 								
									ll_row = ldw.InsertRow(0)
									//ldw.Object.profile_id[ll_row] = ll_profile_id
									ldw.Object.primary_flag[ll_row] = "F"
									//ldw.Object.sequence_id[ll_row] = ll_null
									ldw.Object.waste_code[ll_row] = ls_waste_code
									ldw.Object.waste_code_UID[ll_row] = ll_waste_code_UID
									ldw.Object.default_sequence_id[ll_row] = ll_default_seq
									ldw.Object.state[ll_row] = ls_state
									ldw.Object.status[ll_row] = ls_status
									ldw.Object.profilewastecode_waste_code[ll_row] = ls_short_waste_code
									CHOOSE CASE Upper(ls_waste_code_origin)
										CASE 'F'
											ldw.Object.sequence_flag[ll_row] = 'F'
											IF ll_row <= ii_top6 THEN
												ldw.object.include[ll_row] = 1
												ldw.object.sequence_id[ll_row] = ll_row
											ELSE
												ldw.object.include[ll_row] = 0
											END IF
										CASE 'S'
										CASE 'E'
										CASE ELSE
									END CHOOSE
									ib_changed_waste_code = TRUE
								END IF
						ELSEIF itr_forms.SQLCode = -1 THEN
							MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
								"~nPress OK to Continue.", StopSign!)
							CLOSE wcr_rcra_waste_code_cursor;
							RETURN -1
						END IF
					LOOP
					CLOSE wcr_rcra_waste_code_cursor;
					
					IF ib_changed_waste_code THEN
						idw_waste_code_fed.Sort()
						idw_waste_code_state.Sort()
						idw_waste_code_eq.Sort()
						idw_waste_code_state.GroupCalc()
						
						wf_top6_renumber()
						wf_set_waste_code_sequence(idw_waste_code_state)
						wf_set_waste_code_sequence(idw_waste_code_eq)
						POST wf_set_primary_waste_code()
						
						// rb 12/05/2012 The instance vars that WCR reference need to be updated
						Post wf_populate_wastecodes_wcr ('all')
						// set the answers for parent questions rcra listed, rcra characteristic, state haz and state nonhaz 
						Post wf_wcr_set_waste_code_answers ()
					END IF
						
					IF ll_row = 1 THEN
						// There was only one waste code on the WCR, set it as primary
						idw_header.Object.waste_code[ll_row_header] = ls_waste_code
						idw_header.Object.waste_code_uid[ll_row_header] = ll_waste_code_UID
						this.wf_sync_waste_code( ll_waste_code_UID, ls_waste_code, FALSE)
					END IF
		END IF
	End If
	
	//tempalte form id, revision id and template name
	idw_header.object.template_form_id[ll_row_header] = ll_template_form_id
	IF ll_template_form_id = astr_pass.l[1] THEN 
		idw_header.object.template_revision_id[ll_row_header] = astr_pass.l[2]
	ELSE
		idw_header.object.template_revision_id[ll_row_header] = 1
	END IF
	idw_header.object.template_name[ll_row_header] = ls_template_name
	
	// source_form_id, source_revision_id
	IF  IsNUll (ll_source_form_id ) THEN  
		idw_header.object.source_form_id[ll_row_header] 		=  astr_pass.l[1]
		idw_header.object.source_revision_id[ll_row_header] 	= astr_pass.l[2]
	ELSE
		idw_header.object.source_form_id[ll_row_header] 		= ll_source_form_id
		idw_header.object.source_revision_id[ll_row_header] 	= ll_source_revision_id
	END IF
End If //Header row end

ll_row_technical = idw_technical.GetRow()
If ll_row_technical > 0 Then
	
	//Color
	If lb_select_all OR f_get_s_index( astr_pass.s, "color_selected") > 0 Then
		idw_technical.Object.color[ll_row_technical] = ls_wcr_color
		idw_technical.Object.liquid_phase[ll_row_technical] = ls_liquid_phase 
	End If
	 

    // Odor
	If lb_select_all OR f_get_s_index( astr_pass.s, "odor_selected") > 0 Then
		idw_technical.Object.odor_strength[ll_row_technical]  = ls_odor_strength
		idw_technical.Object.odor_type_ammonia[ll_row_technical]  = ls_odor_type_ammonia
		idw_technical.Object.odor_type_amines[ll_row_technical]  = ls_odor_type_amines
		idw_technical.Object.odor_type_mercaptans[ll_row_technical]  = ls_odor_type_mercaptans
		idw_technical.Object.odor_type_sulfur[ll_row_technical]  = ls_odor_type_sulfur
		idw_technical.Object.odor_type_organic_acid[ll_row_technical]  = ls_odor_type_organic_acid
		idw_technical.Object.odor_type_other[ll_row_technical]  = ls_odor_type_other
		idw_technical.Object.odor_other_desc[ll_row_technical] = ls_odor_other_desc
	End If
	
	//facility_name
	If lb_select_all OR f_get_s_index( astr_pass.s, "wcrfacility_selected") > 0 Then 
		ll_rowcount = idw_wcr_facility.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_wcr_facility.DeleteRow(ll_row)
		NEXT
		
		// MPM - 6/15/2020 - DevOps 16348
		DECLARE wcr_facilityname_cursor CURSOR FOR  
		SELECT FormXUSEFacility.company_id, FormXUSEFacility.profit_ctr_id,
		 (SELECT Top 1 upc.name as profit_ctr_name
			FROM ProfitCenter pc
			JOIN USE_Profitcenter upc 
				ON pc.company_id = upc.company_id 
				AND pc.profit_ctr_id = upc.profit_ctr_id
			WHERE status = 'A' 
			AND waste_receipt_flag = 'T' 
			AND upc.company_id = FormXUSEFacility.company_id 
			AND upc.profit_ctr_id=FormXUSEFacility.profit_ctr_id) AS wcr_facility_name
		 FROM FormXUSEFacility  
		WHERE FormXUSEFacility.form_id = :astr_pass.l[1]
			AND FormXUSEFacility.revision_id = :astr_pass.l[2]
			 USING itr_forms;
			                            
		OPEN wcr_facilityname_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_facilityname_cursor 
			 INTO :ll_wcr_facility_company_id, :ll_wcr_facility_profit_ctr_id, :ls_wcr_facility_name;
			IF itr_forms.SQLCode = 0 THEN
				ll_row = idw_wcr_facility.InsertRow(0)
				//idw_wcr_facility.Object.profile_id[ll_row] = ll_profile_id
				idw_wcr_facility.Object.company_id[ll_row] = ll_wcr_facility_company_id
				idw_wcr_facility.Object.profit_ctr_id[ll_row] = ll_wcr_facility_profit_ctr_id
				idw_wcr_facility.Object.wcr_facility_name[ll_row] = ls_wcr_facility_name
				idw_wcr_facility.Object.date_added[ll_row] = ldt_today
				idw_wcr_facility.Object.added_by[ll_row] = gs_user_id
				idw_wcr_facility.Object.modified_by[ll_row] = gs_user_id
				idw_wcr_facility.Object.date_modified[ll_row] = ldt_today	
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Facility Name" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_facilityname_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_facilityname_cursor;
	end if	
	
	   //origin_selected
	 If lb_select_all OR f_get_s_index( astr_pass.s, "origin_selected") > 0 Then
		idw_technical.object.contains_benzene_flag[ll_row_technical] = ls_origin_refinery  
	End If
	
	//Consistency	
	If lb_select_all OR f_get_s_index( astr_pass.s, "consistency_selected") > 0 Then
		 idw_technical.Object.consistency_solid[ll_row_technical] = ls_consistency_solid
		 idw_technical.Object.consistency_dust[ll_row_technical] = ls_consistency_dust
		 idw_technical.Object.consistency_debris[ll_row_technical] = ls_consistency_debris
		 idw_technical.Object.consistency_sludge[ll_row_technical] = ls_consistency_sludge
		 idw_technical.Object.consistency_liquid[ll_row_technical] =   ls_consistency_liquid
		 idw_technical.Object.consistency_gas_aerosol[ll_row_technical] = ls_consistency_gas_aerosol
		 idw_technical.Object.consistency_varies[ll_row_technical] = ls_consistency_varies
//		ll_len = Len( ls_consistency )
//		ll_i = 0
//		ll_pos = 0
//		lb_continue = TRUE
//		DO WHILE lb_continue
//			ll_pos = Pos( ls_consistency, ':', ll_pos + 1 )
//			If ll_pos > 0 Then
//				ll_i ++
//				If ll_i = 2 OR ll_pos = ll_len Then 
//					lb_continue = FALSE
//				End If
//			Else
//				lb_continue = FALSE
//			End If
//		LOOP
//		If ll_pos > 0 Then ls_consistency = Left ( ls_consistency, ll_pos - 1 )
		// MPM - 2/27/2020 - DevOps 13606 - Uncommented the following line
		idw_technical.Object.consistency[ll_row_technical] = ls_consistency
	End If
	
	// paint
	If lb_select_all OR f_get_s_index( astr_pass.s, "paint_selected") > 0 Then
		idw_technical.object.paint_filter_solid_flag[ll_row_technical]  = ls_paint_filter_solid_flag
		idw_technical.object.incidental_liquid_flag[ll_row_technical]  = ls_incidental_liquid_flag
	end if 

	//PH
	If lb_select_all OR f_get_s_index( astr_pass.s, "ph_selected") > 0 Then
		idw_technical.object.ph_lte_2[ll_row_technical] 			= ls_ph_lte_2
		idw_technical.object.ph_gt_2_lt_5[ll_row_technical] 		= ls_ph_gt_2_lt_5
		idw_technical.object.ph_gte_5_lte_10[ll_row_technical] 	= ls_ph_gte_5_lte_10
		idw_technical.object.ph_gt_10_lt_12_5[ll_row_technical] = ls_ph_gt_10_lt_12_5
		idw_technical.object.ph_gte_12_5[ll_row_technical] 		= ls_ph_gte_12_5
			idw_technical.object.pH_NA[ll_row_technical] 				= ls_pH_NA
		// SK also set the pH from & pH TO values
		POST wf_set_ph_from_to()
	End If

	// Ignitability (Flashpoint)
	If lb_select_all OR f_get_s_index( astr_pass.s, "ignitability_selected") > 0 Then
		idw_technical.object.ignitability_compare_temperature[ll_row_technical]	= li_ignitability_compare_temperature		
		idw_technical.object.ignitability_lt_90[ll_row_technical]	= ls_ignitability_lt_90
		idw_technical.object.ignitability_90_139[ll_row_technical]	= ls_ignitability_90_139
		idw_technical.object.ignitability_140_199[ll_row_technical]	= ls_ignitability_140_199
		idw_technical.object.ignitability_gte_200[ll_row_technical]	= ls_ignitability_gte_200
		idw_technical.object.ignitability_does_not_flash[ll_row_technical]	= ls_ignitability_does_not_flash
		idw_technical.object.ignitability_flammable_solid[ll_row_technical]	= ls_ignitability_flammable_solid
		
		IF IsNumber( ls_btu_per_lb ) then 
			ll_btu_per_lb = Long ( ls_btu_per_lb )
			idw_technical.object.btu_per_lb[ll_row_technical]	= ll_btu_per_lb
		END IF

		idw_technical.object.btu_lt_gt_5000 [ll_row_technical]	= ls_btu_lt_gt_5000 
		idw_technical.object.ignitability_na[ll_row_technical]		= ls_ignitability_na
		// also set the ignitability
		POST wf_set_ignitability()
	End If
	
	// handling issue
	If lb_select_all OR f_get_s_index( astr_pass.s, "handling_selected") > 0 Then
		idw_technical.object.handling_issue[ll_row_technical] = ls_handling_issue
		idw_technical.object.handling_issue_desc[ll_row_technical] = ls_handling_issue_desc
	End If
	
	//Cyanide
	If lb_select_all OR f_get_s_index( astr_pass.s, "cyanide_selected") > 0 Then
		idw_technical.object.cyanide_plating[ll_row_technical] 	= ls_cyanide_plating
	End If
	
	//F - NONE Apply 
   If lb_select_all OR f_get_s_index( astr_pass.s, "none_selected") > 0 Then
	  idw_technical.object.section_F_none_apply_flag[ll_row_technical] = ls_section_F_none_apply_flag
	   idw_technical.object.waste_contains_spec_hand_none[ll_row_technical] = ls_section_F_none_apply_flag	
   end if
	
	//explosives_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "explosives_selected") > 0 Then
	   idw_technical.object.explosives[ll_row_technical] = ls_explosives
	End If
	
	//react_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "react_selected") > 0 Then
		If ldb_react_sulfide_ppm = 0 then ldb_react_sulfide_ppm = ld_null
	   idw_technical.object.react_sulfide[ll_row_technical] = ls_react_sulfide
	   idw_technical.object.react_sulfide_ppm[ll_row_technical] = ldb_react_sulfide_ppm
	End If
	
	//shock_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "shock_selected") > 0 Then
	  idw_technical.object.shock_sensitive_waste[ll_row_technical] = ls_shock_sensitive_waste
	End If
	
	//reactcyanide_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "reactcyanide_selected") > 0 Then
		If ldb_react_cyanide_ppm = 0 then ldb_react_cyanide_ppm = ld_null
	   idw_technical.object.react_cyanide[ll_row_technical] = ls_react_cyanide
	   idw_technical.object.react_cyanide_ppm[ll_row_technical] = ldb_react_cyanide_ppm
 	End If
				
	//radioactive_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "radioactive_selected") > 0 Then
	  	idw_technical.object.radioactive_waste[ll_row_technical] = ls_radioactive_waste
	End If
	
	//reactive_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "reactive_selected") > 0 Then
	  idw_technical.object.reactive_other[ll_row_technical] = ls_reactive_other 
	   idw_technical.object.reactive_other_description[ll_row_technical] = ls_reactive_other_description  
	End If 
	
	//biohazard_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "biohazard_selected") > 0 Then
	   idw_technical.object.biohazard[ll_row_technical] = ls_biohazard
	End If
	
	//contains_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "contains_selected") > 0 Then
	   idw_technical.object.contains_pcb[ll_row_technical] = ls_contains_pcb 
	End If
	
	//dioxins_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "dioxins_selected") > 0 Then
	   idw_technical.object.dioxins_or_furans[ll_row_technical] = ls_dioxins_or_furans 
	End If	

	//Metal
	If lb_select_all OR f_get_s_index( astr_pass.s, "metal_selected") > 0 Then
	   idw_technical.object.metal_fines[ll_row_technical] = ls_metal_fines
	End If	
	
	//pyrophoric_waste
	If lb_select_all OR f_get_s_index( astr_pass.s, "pyrophoric_selected") > 0 Then
	  idw_technical.object.pyrophoric_waste[ll_row_technical] = ls_pyrophoric_waste
	End If	
	
	//Temp
	If lb_select_all OR f_get_s_index( astr_pass.s, "temp_selected") > 0 Then
	  idw_technical.object.temp_ctrl_org_peroxide[ll_row_technical] = ls_temp_ctrl_org_peroxide
	End If	
	
	//Thermally
	If lb_select_all OR f_get_s_index( astr_pass.s, "thermally_selected") > 0 Then
	  idw_technical.object.thermally_unstable[ll_row_technical] = ls_thermally_unstable 
	End If	
	
	//Biodegradable Sorbents
	If lb_select_all OR f_get_s_index( astr_pass.s, "biodegradable_selected") > 0 Then
	   idw_technical.object.biodegradable_sorbents[ll_row_technical] = ls_biodegradable_sorbents
	End If	
 
 	//Compressed Gas 
	If lb_select_all OR f_get_s_index( astr_pass.s, "compressed_selected") > 0 Then
	   idw_technical.object.compressed_gas[ll_row_technical] = ls_compressed_gas 
	End If	

	// Used Oil
	If lb_select_all OR f_get_s_index( astr_pass.s, "used_selected") > 0 Then
		idw_technical.object.used_oil[ll_row_technical] = ls_used_oil
	End If
	
	//Oxidizer
	If lb_select_all OR f_get_s_index( astr_pass.s, "oxidizer_selected") > 0 Then
		idw_technical.object.oxidizer[ll_row_technical] = ls_oxidizer 
	End If
	
	//Tires
	If lb_select_all OR f_get_s_index( astr_pass.s, "tires_selected") > 0 Then
		idw_technical.object.tires[ll_row_technical] = ls_tires
	End If
	
	//Organic
	If lb_select_all OR f_get_s_index( astr_pass.s, "organic_selected") > 0 Then
		idw_technical.object.organic_peroxide[ll_row_technical] = ls_organic_peroxide  
	End If
	
	//Beryllium Present
	If lb_select_all OR f_get_s_index( astr_pass.s, "organic_selected") > 0 Then
		idw_technical.object.beryllium_present[ll_row_technical] = ls_beryllium_present   
	End If
	
	//Asbestos
	If lb_select_all OR f_get_s_index( astr_pass.s, "asbestos_selected") > 0 Then
		idw_technical.object.asbestos_flag[ll_row_technical] = ls_asbestos_flag   
		IF ls_asbestos_flag = 'T' THEN 
		    idw_technical.object.asbestos_friable_flag[ll_row_technical] = ls_asbestos_friable_flag
		ELSE
			 idw_technical.object.asbestos_friable_flag[ll_row_technical] = 'U'
		END IF
	End If

	//Ammonia Flag
	If lb_select_all OR f_get_s_index( astr_pass.s, "ammonia_selected") > 0 Then
		idw_technical.object.ammonia_flag[ll_row_technical] = ls_ammonia_flag   
	End If

	//pharma_selected
	If lb_select_all OR f_get_s_index( astr_pass.s, "pharma_selected") > 0 Then
		idw_header.object.pharmaceutical_flag[ll_row_header] = ls_pharma_waste_subject_to_prescription    
	End If
	
	//ccvocgr500
	If lb_select_all OR f_get_s_index( astr_pass.s, "ccvocgr500_selected") > 0 Then
		idw_technical.object.ccvocgr500[ll_row_technical] = ls_ccvocgr500
	End If
	
	//PFAS_flag
	If lb_select_all OR f_get_s_index( astr_pass.s, " pfas_selected ") > 0 Then
		idw_composition_other.Object.pfas_flag[idw_composition_other.GetRow()] = ls_pfas_flag
	end if	//DevOps 42864 info_gde 09/01/2022; Add new PFAS question to EQAI forms and profiles
	
	// Meet alt soil treat stds and More than 50 pct debris
	// Waste Water Flag	
	If lb_select_all OR f_get_s_index( astr_pass.s, "wastewater_selected") > 0 Then
		idw_header.object.waste_water_flag[ll_row_header] = ls_waste_water_flag
		idw_technical.object.meets_alt_soil_treatment_stds[ll_row_technical] = ls_meets_alt_soil_treatment_stds
		idw_technical.object.more_than_50_pct_debris[ll_row_technical] = ls_more_than_50_pct_debris
		idw_header.object.debris_separated[ll_row_header] = ls_debris_separated
		idw_header.object.debris_not_mixed_or_diluted[ll_row_header] = ls_debris_not_mixed_or_diluted
		// MPM - 2/26/2020 - DevOps 13959 - Need to set Profile.exceed_ldr_standards to 'U' instead of 'F' if that value 
		// comes over from COR2 as null or empty string
		// MPM - 3/26/2020 - DevOps 14241/14841 - We're no longer setting "exceed_ldr_standards" from the Waste Profile Form; 
		// instead, we're setting new column "waste_meets_ldr_standards"
		IF Isnull (ls_waste_meets_ldr_standards) OR ls_waste_meets_ldr_standards = "" THEN
			ls_waste_meets_ldr_standards = 'U'
		END IF
		idw_header.object.waste_meets_ldr_standards[ll_row_header] = ls_waste_meets_ldr_standards
		IF ls_meets_alt_soil_treatment_stds = 'U' THEN ls_meets_alt_soil_treatment_stds = ''
		IF ls_more_than_50_pct_debris = 'U' THEN ls_more_than_50_pct_debris = ''
		
	End If
	// OE 4/4/20 Devops 15029 Add New Profile (Profile Tab) - Section G.
	//15029 Chek isnull and ""
	IF ( ( ls_waste_water_flag = '' OR  IsNull(ls_waste_water_flag) ) AND &
	    ( ls_meets_alt_soil_treatment_stds = '' OR ls_meets_alt_soil_treatment_stds = 'F' OR IsNull(ls_meets_alt_soil_treatment_stds ) ) AND &
	    ( ls_more_than_50_pct_debris = '' OR ls_more_than_50_pct_debris = 'F' OR IsNull(ls_more_than_50_pct_debris) ) AND &
	    ( ls_waste_meets_ldr_standards = '' OR ls_waste_meets_ldr_standards = 'F' OR ls_waste_meets_ldr_standards = 'U' ) ) THEN 
         idw_header.object.section_G3_none_of_the_above_flag[ll_row_header] = 'T'
	ELSE
			idw_header.object.section_G3_none_of_the_above_flag[ll_row_header] = 'F'
	END IF
	
	//Neshap
	If lb_select_all OR f_get_s_index( astr_pass.s, "neshap_selected") > 0 Then
		idw_technical.object.subject_to_mact_neshap[ll_row_technical]	= ls_neshap_flag
	//	if ll_neshap_standards_part=0 then ll_neshap_standards_part=ll_null //DevOps 15558 info_gde 05/07/2020
		idw_technical.object.neshap_standards_part[ll_row_technical]	= ll_neshap_standards_part
		idw_technical.object.neshap_subpart[ll_row_technical]			= ls_neshap_subpart
	End If
	
	//Constituents
	If lb_select_all OR f_get_s_index( astr_pass.s, "const_selected") > 0 Then
		ll_rowcount = idw_const.RowCount()
		FOR ll_row = ll_rowcount TO 1 STEP -1
			idw_const.DeleteRow(ll_row)
		NEXT
		DECLARE wcr_const_cursor CURSOR FOR  
			SELECT DISTINCT  t._order ,t.const_id, t.max_concentration,t.min_concentration, t.unit, t.uhc,t.typical_concentration,t.tclp_or_totals,t.requiring_treatment_flag,t.exceeds_ldr
		  FROM FormXConstituent t
		 WHERE form_id = :astr_pass.l[1]
			AND revision_id = :astr_pass.l[2]
		 ORDER BY  _order  
		 USING itr_forms;
			
		OPEN wcr_const_cursor;
		DO WHILE itr_forms.SQLCode = 0
			FETCH wcr_const_cursor 
			 INTO :ll_order, :ll_const_id, :ldb_concentration, :ldb_min_concentration,:ls_unit, :ls_uhc,:ldb_typical_concentration,:ls_TCLP_or_totals,:ls_req_treatment_flag,:ls_exceeds_ldr;
			IF itr_forms.SQLCode = 0 THEN
				// SK 08/28/2012 Fixed below was inserting row into idw_composition & referencing the wrong var ll_row
				//ll_row = idw_composition.InsertRow(0)
				
				 Select caavoc,fm25d,fm305,ddvoc,voc, molecular_weight, density, vapor_pressure,univ_treatment_std_nww,univ_treatment_std_nww_unit,UHC_flag //Devops#42842,51123 Added By Venu (univ_treatment_std_nww,univ_treatment_std_nww_unit,UHC_flag)
				 Into  :ls_caavoc,:ld_fm25d, :ld_fm305, :ls_ddvoc, :ls_voc, :ld_molecular_weight, :ld_density, :ld_vapor_pressure,:ll_univ_treatment_std_nww,:ls_univ_treatment_std_nww_unit,:ls_is_UHC_flag 
				 From  Constituents
				 Where const_id = :ll_const_id
				 Using gtr_share;
				 
			IF ll_const_id > 0 THEN 
				ll_newrow = idw_const.InsertRow(0)
				idw_const.Object.const_id[ll_newrow] = ll_const_id
				idw_const.Object.form_order[ll_newrow] = ll_order
				idw_const.Object.concentration[ll_newrow] = ldb_concentration
				idw_const.Object.min_concentration[ll_newrow] = ldb_min_concentration
				idw_const.Object.unit[ll_newrow] = ls_unit
				idw_const.Object.uhc[ll_newrow] = ls_uhc
				idw_const.Object.cor_lock_flag[ll_newrow] = 'T' // DevOps:38343 - AM
				idw_const.Object.typical_concentration[ll_newrow] = ldb_typical_concentration
				idw_const.Object.tclp_flag[ll_newrow]  = ls_TCLP_or_totals
				idw_const.Object.exceeds_ldr[ll_newrow] =  ls_exceeds_ldr
				idw_const.Object.caavoc[ll_newrow] = ls_caavoc
				idw_const.Object.fm25d[ll_newrow] = ld_fm25d
				idw_const.Object.fm305[ll_newrow] = ld_fm305
				idw_const.Object.ddvoc[ll_newrow] = ls_ddvoc
				idw_const.Object.voc[ll_newrow] = ls_voc
				idw_const.Object.molecular_weight [ll_newrow] = ld_molecular_weight
		  		idw_const.Object.density [ll_newrow] =  ld_density
				idw_const.Object.vapor_pressure[ll_newrow] = ld_vapor_pressure										 
				idw_const.Object.added_by[ll_newrow] = gs_user_id
				idw_const.Object.date_added[ll_newrow] = ldt_today
				idw_const.Object.modified_by[ll_newrow] = gs_user_id
				idw_const.Object.date_modified[ll_newrow] = ldt_today
				//DevOps:16514
				idw_const.Object.requiring_treatment_flag[ll_newrow] = ls_req_treatment_flag
				//Added By Venu for Devops#42842,51123 --Start
				idw_const.Object.univ_treatment_std_nww	[ll_newrow] = ll_univ_treatment_std_nww				
				idw_const.Object.univ_treatment_std_nww_unit[ll_newrow] = ls_univ_treatment_std_nww_unit				
				idw_const.Object.const_is_uhc[ll_newrow] = ls_is_UHC_flag								
				//Added By Venu for Devops#42842,51123 --End
				ib_changed_const = TRUE
				//DevOps 19063 info_gde 02/03/2021; New issue after we added the validation on the constituents in EQAI
				idw_const.TriggerEvent("ue_sync_uhc")
			END IF
			ELSEIF itr_forms.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Constituents" + &
						"~nPress OK to Continue.", StopSign!)
				CLOSE wcr_const_cursor;
				RETURN -1
			END IF
		LOOP
		CLOSE wcr_const_cursor;
	End If
	
	//State Waste Codes 
	If lb_select_all OR f_get_s_index( astr_pass.s, "state_selected") > 0 Then
		 IF ls_state_waste_code_flag = 'T' THEN 
			idw_technical.object.state_waste_code_flag[ll_row_technical]	= 'F'
		 ELSE
			idw_technical.object.state_waste_code_flag[ll_row_technical]	= 'T'
		 END IF

		IF Not IsNull (ls_state_waste_code_flag )  THEN
				// Delete existing profile waste codes if not in formxwastecode 
				 ll_rowcount = idw_waste_code_state.RowCount()
				 FOR ll_row = ll_rowcount TO 1 STEP -1
					ll_waste_code_uid =  idw_waste_code_state.Object.waste_code_uid[ll_row]
					ls_state =  idw_waste_code_state.Object.state[ll_row]
					SELECT Count(FXW.waste_code_UID)
					INTO:ll_select_row_count
					FROM FormXWasteCode FXW
					JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
					AND WC.waste_code_origin = 'S' AND WC.state NOT IN ( 'PA' , 'TX' )
					WHERE form_id = :astr_pass.l[1]
					AND revision_id = :astr_pass.l[2] 
					AND FXW.waste_code_uid = :ll_waste_code_uid
					USING itr_forms;
						 
					IF ll_select_row_count > 0  THEN
						  idw_waste_code_state.DeleteRow(ll_row)
						  ib_changed_waste_code = TRUE
					END IF
				NEXT

				// Load the WCR Waste Codes
				DECLARE wcr_state_waste_code_cursor CURSOR FOR  
				 SELECT DISTINCT WC.display_name, FXW.waste_code_UID, WC.waste_code_origin, WC.sequence_id, WC.state, WC.waste_code, WC.status
					FROM FormXWasteCode FXW
					JOIN WasteCode WC ON WC.waste_code_uid = FXW.waste_code_uid
					AND WC.waste_code_origin = 'S' AND WC.state NOT IN ( 'PA' , 'TX' )
				  WHERE form_id = :astr_pass.l[1]
					 AND revision_id = :astr_pass.l[2]
				  ORDER BY FXW.waste_code_UID 
				  USING itr_forms;
		
				OPEN wcr_state_waste_code_cursor;
				DO WHILE itr_forms.SQLCode = 0
					FETCH wcr_state_waste_code_cursor INTO :ls_waste_code, :ll_waste_code_UID, :ls_waste_code_origin, :ll_default_seq, :ls_state, :ls_short_waste_code, :ls_status;
					IF itr_forms.SQLCode = 0 THEN
						CHOOSE CASE Upper(ls_waste_code_origin)
							CASE 'F'
								//ldw = idw_waste_code_fed
							CASE 'S'
								ldw = idw_waste_code_state
							CASE 'E'
								// Form should never have an EQ code!! regardless we will add the assign code here
								//ldw = idw_waste_code_eq
							CASE ELSE
						END CHOOSE
						  ls_find = "waste_code_uid = " + string (ll_waste_code_UID)
						  ll_row_find = idw_waste_code_state.Find (ls_find,1, idw_waste_code_state.RowCount()+1)
							 IF ll_row_find = 0 THEN 
								ll_row = ldw.InsertRow(0)
								//ldw.Object.profile_id[ll_row] = ll_profile_id
								ldw.Object.primary_flag[ll_row] = "F"
								//ldw.object.state_waste_code_flag[ll_row] = ls_state_waste_code_flag
								//ldw.Object.sequence_id[ll_row] = ll_null
								ldw.Object.waste_code[ll_row] = ls_waste_code
								ldw.Object.waste_code_UID[ll_row] = ll_waste_code_UID
								ldw.Object.default_sequence_id[ll_row] = ll_default_seq
								ldw.Object.state[ll_row] = ls_state
								ldw.Object.status[ll_row] = ls_status
								ldw.Object.profilewastecode_waste_code[ll_row] = ls_short_waste_code
			 
								CHOOSE CASE Upper(ls_waste_code_origin)
									CASE 'F'
									CASE 'S'
										ldw.Object.sequence_flag[ll_row] = 'A'
									CASE 'E'
									CASE ELSE
								END CHOOSE
								ib_changed_waste_code = TRUE
							END IF
					 ELSEIF itr_forms.SQLCode = -1 THEN
						MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
							"~nPress OK to Continue.", StopSign!)
						CLOSE wcr_state_waste_code_cursor;
						RETURN -1
					END IF
				LOOP
				CLOSE wcr_state_waste_code_cursor;
				
				IF ib_changed_waste_code THEN
					idw_waste_code_fed.Sort()
					idw_waste_code_state.Sort()
					idw_waste_code_eq.Sort()
					idw_waste_code_state.GroupCalc()
					
					wf_top6_renumber()
					wf_set_waste_code_sequence(idw_waste_code_state)
					wf_set_waste_code_sequence(idw_waste_code_eq)
					POST wf_set_primary_waste_code()
					
					// rb 12/05/2012 The instance vars that WCR reference need to be updated
					Post wf_populate_wastecodes_wcr ('all')
					// set the answers for parent questions rcra listed, rcra characteristic, state haz and state nonhaz 
					Post wf_wcr_set_waste_code_answers ()
				END IF
					
				IF ll_row = 1 THEN
					// There was only one waste code on the WCR, set it as primary
					idw_header.Object.waste_code[ll_row_header] = ls_waste_code
					idw_header.Object.waste_code_uid[ll_row_header] = ll_waste_code_UID
					this.wf_sync_waste_code( ll_waste_code_UID, ls_waste_code, FALSE)
				END IF
		end if
	End If
	
	// Info Basis
	If lb_select_all OR f_get_s_index( astr_pass.s, "info_selected") > 0 Then
		idw_technical.object.info_basis_knowledge[ll_row_technical] = ls_info_basis_knowledge
		idw_technical.object.info_basis_analysis[ll_row_technical] = ls_info_basis_analysis
		idw_technical.object.info_basis_msds[ll_row_technical] = ls_info_basis_msds
	End If
	
End If

//Task:10096 - AM
// DevOps:16902
IF ll_row_header > 0 THEN 
	idw_header.object.form_id_wcr[ll_row_header] = ll_form_id_wcr
	idw_header.object.source_revision_id[ll_row_header] = ll_rev_id_wcr
	// mark this as primary wcr if there is none yet..
	IF NOT(lb_copy_from_template) AND IsNull(idw_header.object.form_id_wcr[ll_row_header]) THEN
		idw_header.object.form_id_wcr[ll_row_header] = ll_form_id_wcr
	END IF

	// Make sure the WCR we just copied from gets linked to Profile
	IF NOT(lb_copy_from_template) THEN 
		IF NOT ISValid(ids_form_wcr) THEN
			ids_form_wcr = CREATE Datastore
			ids_form_wcr.dataobject = 'd_wcr_master'
			ids_form_wcr.SetTransObject(itr_share)
		END IF
		ll_row = ids_form_wcr.retrieve(ll_form_id_wcr, ll_rev_id_wcr)
		IF ll_row > 0 THEN 
			ids_form_wcr.object.profile_id[ll_row] = idw_header.object.profile_id[ll_row_header]
			ids_form_wcr.object.date_last_profile_sync[ll_row] = DateTime(Today(), Now())
			//DevOps:18528
			IF idw_form.getrow() > 0 THEN 
				ld_date = DateTime(Today(), Now())
		          idw_form.object.date_last_profile_sync[idw_form.getrow()] = DateTime(Today(), Now())
	         END IF
		END IF
		// also make sure the scan record for this WCR gets updated with the profile ID
		
		 //DevOPs:16717
// DevOps 17111 - Cursor is not needed to set the profile ids to the SCAN table.fhc	
//		DECLARE wcr_scan_cursor CURSOR FOR  
//		
//		SELECT image_id
//		FROM SCAN
//		WHERE form_id = :ll_form_id_wcr
//		AND revision_id = :ll_rev_id_wcr
//		AND form_type = 'WCR'
//		USING itr_image;
//	
//		OPEN wcr_scan_cursor;
//				DO WHILE itr_image.SQLCode = 0
//					FETCH wcr_scan_cursor INTO :ll_image_id;
//				IF ll_image_id > 0 THEN 
					IF NOT ISValid(ids_scan_wcr) THEN
//						ids_scan_wcr = CREATE Datastore
						ids_scan_wcr = CREATE u_datastore	//DevOps 17111 Capture DBError msgs. fhc.
						ids_scan_wcr.dataobject = 'd_scan_profile'		// Use simpler DW for SCAN table. fhc.
						ids_scan_wcr.SetTransObject(itr_image)
					END IF
					ll_row = ids_scan_wcr.retrieve(ll_form_id_wcr, ll_rev_id_wcr) // DevOps 17111 new DW with 2 argument
					IF ll_row > 0 THEN 
						// DevOps 17111 Set Profile IDs to all rows in DW
						ids_scan_wcr.object.profile_id.Primary = idw_header.object.profile_id[ll_row_header]
					END IF
//				END IF
//		LOOP
//		CLOSE wcr_scan_cursor;	
	END IF
END IF

// If the Form we just used, had its own attachment, then set the docs pending flag for this profile
// as these attachments will be pulled over once this Profile is SAVED!
SELECT Count(1) 
INTO :ll_attachment_cnt
FROM SCAN
WHERE form_id = :ll_form_id_wcr
AND revision_id = :ll_rev_id_wcr
AND form_type = 'ATTACH'
USING itr_image;

 ib_copy_from_ldr_wcr = TRUE

	IF ll_attachment_cnt > 0 THEN
		idw_header.object.document_update_status[ll_row_header] = 'P'
	END IF

IF idw_detail.GetRow () > 0 THEN 
    idw_detail.object.form_ids [idw_detail.GetRow()] = string ( ll_form_id_wcr )
END IF

wf_set_rcra_haz_flag()
wf_wcr_profile_map_load_wcr_sect()
tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.setrow(1)
tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.Event rowfocuschanged (1)
// MPM - COR2 - Changed the 1 to 2 in the function call below, because that corresponds to what is now the first section on the Profile tab
wf_set_wcr_sect_display(2)

Return 1

end function

public function integer wf_copy_wcr_dragon (str_wcr_params ast_params);// When user wants to copy WCR to create new WCR, open compare between the selected WCR & Profile
// User can then 1st choose to replace the data on Profile, and then can hit on new WCR through Doc mgmt on this Profile
// Do not auto-create a new WCR from selected WCR
int 		li_rc = gi_success, li_revision_id, li_form_version_id
long		ll_form_id, ll_profile_id, ll_row
str_pass	lstr

ll_row = idw_header.getrow()
IF ll_row > 0 THEN
	ll_profile_id = idw_header.Object.profile_id[ll_row]
	ll_form_id 				= ast_params.al_form_id
	li_revision_id 		= ast_params.ai_revision_id

	//NOTE : SK 041112 Compare popup does not care what version the WCR is, it just shows the data and gives option
	// 		to replace on Profile for now, but in future, the version might matter,in which case the str 'ast_params'
	//			below will need the correct version id for this form. will cause changes on w_popup_wcr_select, where we select
	// 		the wcr to compare/copy.
	
	//li_form_version_id = ast_params.form_version_id
	SetNull(li_form_version_id)
	
	lstr.l[1] = ll_form_id
	lstr.l[2] = li_revision_id
	lstr.l[3] = li_form_version_id
	lstr.l[4] = ll_profile_id
	lstr.s[1] = is_access
	
	OpenWithParm(w_popup_wcr_profile_compare_dragon, lstr)
END IF


//boolean	lb_set_primary
//datetime	ldt_today
//double	ldb_null, ldb_wcr_concentration
//long		ll_wcr_id, ll_revision_id, ll_row, ll_profile_id, ll_null
//long		ll_row_header, ll_newrow, ll_customer_id, ll_row_technical
//long		ll_wcr_cust, ll_wcr_gen, ll_wcr_srec_exempt_id
//long		ll_rowcount, ll_i, ll_const_id, ll_wcr_const_id, ll_row_waste, ll_row_const
//string	ls_status, ls_EPA_ID, ls_generator_name, ls_wcr_uhc, ls_null, ls_odor, ls_free_liquids
//string	ls_waste_common_name, ls_customer_name, ls_locked, ls_ignitability, ls_frequency
//string	ls_wcr_waste_common_name, ls_wcr_color, ls_wcr_sr_exempt, ls_wcr_dot_shipping_name
//string	ls_cust_name, ls_gen_name, ls_waste_code, ls_wcr_waste_code, ls_unit, ls_wcr_unit
//string	ls_consistency_solid, ls_consistency_dust, ls_consistency_liquid, ls_consistency_sludge
//string	ls_consistency
//DWItemStatus	ldwitemstatus
//
//SetNull(ll_null)
//SetNull(ls_null)
//ldt_today = DateTime(Today(), Now())
//
//IF IsValid(ast_params) THEN
//	ast_params.as_function 					= "copy"
//	ast_params.as_assign_target 			= "profile"
//	ast_params.ab_can_change_customer 	= TRUE
//	ib_wcr = TRUE
//	ib_changed_wcr = TRUE
//	iuo_wcr_form.ib_save = FALSE
//	// Open the WCR
//	iuo_wcr_form.wf_init_window(ast_params.as_assign_target, iw_profile)
//	iuo_wcr_form.wf_open(ast_params)
//	// 01052012 SK WCR User Edit Object has its own tabpage!
//	// iuo_wcr_form.SetPosition(ToTop!)
//	
//	ll_wcr_id 		= ast_params.al_form_id
//	ll_revision_id = ast_params.ai_revision_id
//	ll_profile_id 	= ast_params.al_profile_id
//	
//	ll_row_header = idw_header.GetRow()
//	
//	SELECT revision_id, status
//		INTO :ll_revision_id, :ls_status
//		FROM FormHeaderDistinct
//		WHERE type = 'WCR'
//		AND form_id = :ll_wcr_id
//	USING itr_forms;
//	
//	SELECT generator_id,
//			EPA_ID,
//			generator_name,
//			waste_common_name,
//			customer_id,
//			cust_name,
//			locked
//		INTO :ll_wcr_gen,
//			:ls_EPA_ID, 
//			:ls_generator_name, 
//			:ls_waste_common_name, 
//			:ll_customer_id, 
//			:ls_customer_name, 
//			:ls_locked
//		FROM FormWCR
//		WHERE form_id = :ll_wcr_id
//		AND revision_id = :ll_revision_id
//	USING itr_forms;
//			
//	IF ib_new_record THEN
//		// User wants to replace profile data with WCR data
//		SELECT customer_id, generator_id, waste_common_name, 
//				color, surcharge_exempt, srec_exempt_id, dot_shipping_name,
//				frequency, odor, free_liquids, ignitability,
//				consistency_solid, consistency_dust, consistency_liquid, consistency_sludge
//			INTO :ll_wcr_cust, :ll_wcr_gen, :ls_wcr_waste_common_name, 
//				:ls_wcr_color, :ls_wcr_sr_exempt, :ll_wcr_srec_exempt_id, :ls_wcr_dot_shipping_name,
//				:ls_frequency, :ls_odor, :ls_free_liquids, :ls_ignitability,
//				:ls_consistency_solid, :ls_consistency_dust, :ls_consistency_liquid, :ls_consistency_sludge
//			FROM FormWCR
//			WHERE form_id = :ll_wcr_id
//			AND revision_id = :ll_revision_id
//		USING itr_forms;
//		
//		IF itr_forms.SQLCode = 0 THEN
//			SELECT cust_name
//				INTO :ls_cust_name
//				FROM Customer
//				WHERE customer_id = :ll_wcr_cust
//			USING itr_share;
//			
//			IF itr_share.SQLCode = 0 THEN
//				idw_header.Object.customer_id[ll_row_header] = ll_wcr_cust
//				idw_header.Object.customer_name[ll_row_header] = ls_cust_name
//			ELSE
//				MessageBox(gs_app_name + ":  Replace Data Error", "Customer from WCR invalid!  It will not replace Profile Data.", Exclamation!)
//			END IF
//			
//			SELECT generator_name, EPA_ID
//				INTO :ls_gen_name, :ls_epa_id
//				FROM Generator
//				WHERE generator_id = :ll_wcr_gen
//			USING itr_share;
//			
//			IF itr_share.SQLCode = 0 THEN
//				idw_header.Object.generator_id[ll_row_header] = ll_wcr_gen
//				idw_header.Object.generator_name[ll_row_header] = ls_gen_name
//				idw_header.Object.generator_epa_id[ll_row_header] = ls_epa_id
//			ELSE
//				MessageBox(gs_app_name + ":  Replace Data Error", "Generator from WCR invalid!  It will not replace Profile Data.", Exclamation!)
//			END IF
//			
//			// Profile info
//			idw_header.Object.approval_desc[ll_row_header] = ls_wcr_waste_common_name
//			idw_header.Object.dot_shipping_name[ll_row_header] = ls_wcr_dot_shipping_name
//			IF ls_frequency = "1" THEN
//				idw_header.Object.one_time_only[ll_row_header] = "T"
//				idw_header.Object.reapproval_allowed[ll_row_header] = "F"
//			END IF
//			// Lab info
//			ll_row_technical = idw_technical.GetRow()
//			IF ll_row_technical > 0 THEN
//				idw_technical.Object.color[ll_row_technical] = ls_wcr_color
//				idw_technical.Object.ignitability[ll_row_technical] = ls_ignitability
//				IF NOT IsNull(ls_odor) AND ls_odor > "" THEN
//					idw_technical.Object.odor[ll_row_technical] = "T"
//					idw_technical.Object.odor_desc[ll_row_technical] = ls_odor
//				END IF
//				IF ls_free_liquids = "T" THEN
//					idw_technical.Object.free_liquid[ll_row_technical] = ls_free_liquids
//				END IF
//				
//				ls_consistency = ""
//				IF ls_consistency_solid = "T" THEN
//					ls_consistency = "SOLID"
//				END IF
//				IF ls_consistency_dust = "T" THEN
//					IF ls_consistency = "" THEN
//						ls_consistency = "DUST"
//					ELSE
//						ls_consistency += ":DUST"
//					END IF
//				END IF
//				IF ls_consistency_liquid = "T" THEN
//					IF ls_consistency = "" THEN
//						ls_consistency = "LIQUID"
//					ELSE
//						IF Pos(ls_consistency, ":") = 0 THEN
//							ls_consistency += ":LIQUID"
//						END IF
//					END IF
//				END IF
//				IF ls_consistency_sludge = "T" THEN
//					IF ls_consistency = "" THEN
//						ls_consistency = "SLUDGE"
//					ELSE
//						IF Pos(ls_consistency, ":") = 0 THEN
//							ls_consistency += ":SLUDGE"
//						END IF
//					END IF
//				END IF
//				IF ls_consistency > "" THEN
//					idw_technical.Object.consistency[ll_row_technical] = ls_consistency
//				END IF
//			END IF
//			
//			// Delete Secondaries
//			ll_rowcount = idw_waste.RowCount()
//			FOR ll_row = ll_rowcount TO 1 STEP -1
//				IF idw_waste.Object.primary_flag[ll_row] = "F" THEN
//					ldwItemStatus = idw_waste.GetItemStatus(ll_row, 0, Primary!)
//					IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) THEN
//						idw_waste.RowsDiscard(ll_row, ll_row, Primary!)
//					ELSE
//						wf_audit(idw_waste, ll_profile_id, ll_row, TRUE)
//						idw_waste.DeleteRow(ll_row)
//					END IF
//					ib_changed_waste_code = TRUE
//				END IF
//			NEXT
//	
//			// Delete primary
//			ll_rowcount = idw_waste.RowCount()
//			FOR ll_row = ll_rowcount TO 1 STEP -1
//				IF idw_waste.Object.primary_flag[ll_row] = "T" THEN
//					SetNull(ls_waste_code)
//					idw_header.Object.waste_code[ll_row_header] = ls_waste_code
//					ib_changed_profile = TRUE
//				
//					ldwItemStatus = idw_waste.GetItemStatus(ll_row, 0, Primary!)
//					if ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
//						idw_waste.RowsDiscard(ll_row, ll_row, Primary!)
//					ELSE
//						wf_audit(idw_waste, ll_profile_id, ll_row, TRUE)
//						idw_waste.DeleteRow(ll_row)
//					END IF
//					ib_changed_waste_code = TRUE
//					EXIT
//				END IF
//			NEXT
//	
//			// Delete Constituents
//			SetNull(ldb_null)
//			ll_rowcount = idw_const.RowCount()
//			FOR ll_i = ll_rowcount TO 1 STEP -1
//				ls_unit = idw_const.Object.unit[ll_i]
//				ll_const_id = idw_const.Object.const_id[ll_i]
//		
//				wf_audit(idw_const, ll_profile_id, ll_i, TRUE)
//				idw_const.DeleteRow(ll_i)
//			NEXT
//			ib_changed_const = TRUE	
//	
//			// Load the WCR Waste Codes
//			DECLARE wcr_waste_code_cursor CURSOR FOR  
//				SELECT DISTINCT waste_code
//				FROM FormXWasteCode
//				WHERE form_id = :ll_wcr_id
//				AND revision_id = :ll_revision_id
//				ORDER BY waste_code 
//			USING itr_forms;
//			
//			OPEN wcr_waste_code_cursor;
//	
//			DO WHILE itr_forms.SQLCode = 0
//				FETCH wcr_waste_code_cursor INTO :ls_wcr_waste_code;
//				IF itr_forms.SQLCode = 0 THEN
//					ll_row_waste = idw_waste.InsertRow(0)
//					idw_waste.Object.profile_id[ll_row_waste] = ll_profile_id
//					idw_waste.Object.primary_flag[ll_row_waste] = "F"
//					idw_waste.Object.sequence_id[ll_row_waste] = ll_null
//					idw_waste.Object.waste_code[ll_row_waste] = ls_wcr_waste_code
//					ib_changed_waste_code = TRUE
//					
//				ELSEIF itr_forms.SQLCode = -1 THEN
//					MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
//						"~nPress OK to Continue.", StopSign!)
//					CLOSE wcr_waste_code_cursor;
//	
//					RETURN -1
//				END IF
//			LOOP
//			CLOSE wcr_waste_code_cursor;
//			
//			IF ll_row_waste = 1 THEN
//				// There was only one waste code on the WCR, set it as primary
//				idw_waste.Object.primary_flag[ll_row_waste] = "T"
//				idw_waste.Object.sequence_id[ll_row_waste] = 1
//				idw_header.Object.waste_code[ll_row_header] = ls_wcr_waste_code
//			END IF
//					
//			// Load the WCR Constituents
//			DECLARE wcr_const_cursor CURSOR FOR  
//				SELECT DISTINCT FormXConstituent.const_id, FormXConstituent.concentration, FormXConstituent.unit, FormXConstituent.UHC
//				FROM FormXConstituent, Constituents
//				WHERE FormXConstituent.const_id = Constituents.const_id
//				AND form_id = :ll_wcr_id
//				AND revision_id = :ll_revision_id
//				ORDER BY FormXConstituent.const_id 
//			USING itr_forms;
//			
//			OPEN wcr_const_cursor;
//	
//			DO WHILE itr_forms.SQLCode = 0
//				FETCH wcr_const_cursor INTO :ll_wcr_const_id, :ldb_wcr_concentration, :ls_wcr_unit, :ls_wcr_UHC;
//				IF itr_forms.SQLCode = 0 THEN				
//					ll_row_const = idw_const.InsertRow(0)
//					
//					IF Lower(ls_wcr_unit) = "percent" THEN ls_wcr_unit = "%"
//					
//					idw_const.Object.profile_id[ll_row_const] = ll_profile_id
//					idw_const.Object.const_id[ll_row_const] = ll_wcr_const_id
//					idw_const.Object.concentration[ll_row_const] = ldb_wcr_concentration
//					idw_const.Object.unit[ll_row_const] = ls_wcr_unit
//					idw_const.Object.UHC[ll_row_const] = ls_wcr_UHC
//					ib_changed_const = TRUE
//					
//				ELSEIF itr_forms.SQLCode = -1 THEN
//					MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Constituents" + &
//						"~nPress OK to Continue.", StopSign!)
//					CLOSE wcr_const_cursor;
//	
//					RETURN -1
//				END IF
//			LOOP
//			CLOSE wcr_const_cursor;
//		END IF
//	END IF	// IF ib_new_record
//	ib_added_wcr = TRUE
//	// 01052012 SK WCR User Edit Object has its own tabpage!
//	tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_wcr
//END IF	// IF IsValid(ast_params)
//
RETURN li_rc
end function

public subroutine wf_wcr_profile_map_create_2 (long al_i);//COR2 - AGC added wf_wcr_profile_map_create_2() due to "script too large" error adding to wf_wcr_profile_map_create()
//DevOps - #15003 info_gde 04/04/2020; EQAI (Radioactive Supplement) Page 3 Issues

long ll_i

ll_i = al_i

//COR2 - AGC LDR Form
//Task 9649 AGC 04/05/2019
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "approval_code"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_approval

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
istr_wcr_profile_map[ll_i].profile_column	= "generator_epa_id"

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "ldr_notification_frequency"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_water_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "more_than_50_pct_debris"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_managed_id"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_waste_managed_id_1"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_waste_managed_id_2"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_waste_managed_id_3"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_waste_managed_id_4"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_waste_managed_id_5"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_waste_managed_id_6"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "rb_1"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "rb_2"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "rb_3"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "rb_4"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "constituents_requiring_treatment_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_ldr_form_dragon


ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "generator_epa_id"

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "ldr_notification_frequency"
//istr_wcr_profile_map[ll_i].dw_profile		=  idw_technical
//istr_wcr_profile_map[ll_i].dw_profile		= idw_approval COR JXM 04/10/2019

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_water_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "more_than_50_pct_debris"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_managed_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_1"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_2"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_3"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_4"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_5"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_6"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_7"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "waste_code_8"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_waste_code_fed

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ldr_subcategory_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_ldr_subcategory

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "constituents_requiring_treatment_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_ldr_form_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "ldr_notification_frequency"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical


//COR2 - JXM PCB Supplement
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_0_9"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_10_49"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_0_49"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_50_499"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_concentration_500"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_source_concentration_gr_50"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_regulated_for_disposal_under_TSCA"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "processed_into_non_liquid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "processd_into_nonlqd_prior_pcb"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_manufacturer"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_article_for_TSCA_landfill"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pcb_article_decontaminated"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
//istr_wcr_profile_map[ll_i].profile_column	= "benzene_unit"

ll_i++ //COR2 JXM 03/21/2019 Fix Mapping issue (Note this is 2nd time I've added this code)
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 03/21/2019 Fix Mapping issue  (Note this is 2nd time I've added this code)
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 03/21/2019 Fix Mapping issue  (Note this is 2nd time I've added this code)
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 03/21/2019 Fix Mapping issue  (Note this is 2nd time I've added this code)
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pcb_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header


//Debris
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "debris_certification_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 03/06/2019 Fix Mapping issue
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 03/06/2019 Fix Mapping issue
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 03/06/2019 Fix Mapping issue
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ //COR2 JXM 03/06/2019 Fix Mapping issue
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// Used Oil Supplement
ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wwa_halogen_gt_1000"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical


ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++ //COR2 JXM 02/28/2019 Add Used Oil Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplememt_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "form_id_wcr"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header


////COR2 - AGC Debris Certification Form
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "debris_certification_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_debris_certification_dragon"
//istr_wcr_profile_map[ll_i].wcr_column		= "form_id_wcr"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//COR2 - AGC Used Oil Supplement
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wwa_halogen_gt_1000"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "halogen_source_other"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_used_oil_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "form_id_wcr"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header


// Illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "none_apply_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "incecticides_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pesticides_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "herbicides_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "household_waste_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "carcinogen_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "other_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "other_specify"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "sulfide_10_250_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //I certify checkbox (non-column)
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "signature"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen


ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "universal_waste_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "characteristic_sludge_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "virgin_unused_product_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "spent_material_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "cyanide_plating_on_site_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "substitute_commercial_product_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "by_product_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "rx_lime_flammable_gas_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pollution_control_waste_IL_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "industrial_process_waste_IL_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 GDE 03/31/2020 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_certification_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "phenol_gt_1000_flag" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "signature_2" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_state_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d004_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d005_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d006_above_PQL" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d007_above_PQL" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d008_above_PQL" 
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d009_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d010_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d011_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d012_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d013_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d014_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d015_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d016_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d017_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d018_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d019_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d020_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d021_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d022_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d023_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d024_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d025_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d026_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d027_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d028_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d029_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d030_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d031_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d032_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d033_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d034_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d035_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d036_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d037_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d038_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d039_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d040_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d041_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d042_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //COR2 JXM 02/24/2019 Add Illinois Mapping/Update
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "d043_above_PQL"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen 

ll_i++ //devops:15429
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_illinois_disposal_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "certify_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_illinois_disposal_supplemen  

//COR2-AM - Benzene Waste Supplement
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "same_as_above"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

//DevOps:15313
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "none_of_the_three"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "originating_generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "originating_generator_epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "type_of_facility"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "tab_lt_1_megagram"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "tab_gte_1_and_lt_10_megagram"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "tab_gte_10_megagram"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++ //COR2 JXM 03/01/2019 Add Validation to Benzene Waste by adding new column not tied to tbl.col
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "group_radiobuttons"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "flow_weighted_annual_average_benzene"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "is_process_unit_turnaround"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_range_from"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_range_to"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "classified_as_process_wastewater_stream"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "classified_as_landfill_leachate"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "classified_as_product_tank_drawdown"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

// MPM - 4/28/2020 - DevOps 15426 - Corrected the mapping below
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "waste_common_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "approval_desc"

// MPM - 4/28/2020 - DevOps 15426 - Corrected the mapping below
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "gen_process_brief_desc"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "gen_process"

// MPM - 4/28/2020 - DevOps 15426 - Corrected the mapping below
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// MPM - 4/28/2020 - DevOps 15426 - Corrected the mapping below
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// MPM - 4/28/2020 - DevOps 15426 - Corrected the mapping below
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_status_tab"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "usecology_transfer_40cfr"
istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

// MPM - 2/12/2020 - DevOps 14167 - Added mapping for profilelab_benzene_onsite_mgmt
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
//istr_wcr_profile_map[ll_i].wcr_column		= "benzene_onsite_mgmt"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "benzene_onsite_mgmt"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

// MPM - 4/28/2020 - DevOps 15426 - Corrected the mapping for weighted_average_water_content
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
//istr_wcr_profile_map[ll_i].wcr_column		= "weighted_average_water_content"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_benzene_waste_ops_supplemen

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_benzene_waste_ops_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "weighted_average_water_content"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical
istr_wcr_profile_map[ll_i].profile_column	= "avg_h20_gr_10"

//COR2-AM - Thermal Supplement 
// MPM - 4/29/2020 - DevOps 15331 - Corrections to thermal supplement
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "same_as_above"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_company"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_name"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_title"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_date"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_originating_generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_originating_generator_epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_oil_bearing_from_refining_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form
  
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_rcra_excluded_hsm_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_oil_constituents_are_fuel_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form
  
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_f037_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_f038_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k048_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k049_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k050_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k051_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k052_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k169_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k170_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k171_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_k172_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_petroleum_refining_no_waste_code_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_gen_process"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_composition_water_percent"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_composition_solids_percent"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_composition_organics_oil_tph_percent"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_heating_value_btu_lb"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_percent_of_ash"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_specific_halogens_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_specific_mercury_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_specific_svm_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_specific_lvm_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_specific_organic_chlorine_from_vocs_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_specific_sulfides_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_non_friable_debris_gt_2_inch_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_non_friable_debris_gt_2_inch_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_self_heating_properties_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_bitumen_asphalt_tar_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_bitumen_asphalt_tar_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_centrifuge_prior_to_shipment_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_fuel_oxygenates_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_specific_sulfides_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_oxygenates_mtbe_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_oxygenates_ethanol_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_oxygenates_other_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_oxygenates_ppm"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_surfactants_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_thermal_supplement_form

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profilethermal_profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "profile_id"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_waste_common_name"
istr_wcr_profile_map[ll_i].dw_profile		    = idw_header
istr_wcr_profile_map[ll_i].profile_column	= "approval_desc"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_gen_process_brief_desc"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "gen_process"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_name"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "generator_name"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_id"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "generator_id"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_epa_id"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header
istr_wcr_profile_map[ll_i].profile_column	= "generator_epa_id"

//COR2 JXM 04/18/2019 Issue 9999 Add Consistency Physical & Liquid 
//columns to mapping
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_solid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_dust"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_debris"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_sludge"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_liquid"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_gas_aerosol"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "consistency_varies"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_thermal_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		=  "liquid_phase"
istr_wcr_profile_map[ll_i].dw_profile		= idw_technical

//Radioactive supplement page 1
// MPM - DevOps 15205
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_name"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_epa_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_epa_id"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_address_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_address_1"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_address_2"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_address_2"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_address_3"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_address_3"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_address_4"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_address_4"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_city"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_city"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_state"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_state"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_generator_zip_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "generator_zip_code"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "profile_id"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_name"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_company"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_title"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header
istr_wcr_profile_map[ll_i].profile_column		= "wcr_sign_date"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_uranium_thorium_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_uranium_source_material"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++  //COR2 JXM 05/07/2019 9870
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_uranium_concentration"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_radium_226_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++  //COR2 JXM 05/07/2019 9870
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_radium_226_concentration"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_radium_228_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++ //COR2 JXM 05/07/2019 9870
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_radium_228_concentration"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_lead_210_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++ //COR2 JXM 05/07/2019 9870
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_lead_210_concentration"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_potassium_40_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++//COR2 JXM 05/07/2019 9870
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_potassium_40_concentration"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_exempt_byproduct_material_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
	
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_special_nuclear_material_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_accelerator_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
istr_wcr_profile_map[ll_i].wcr_column		= "specifically_exempted_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1


//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_approved_for_disposal_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_approved_by_nrc_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_approved_for_alternate_disposal_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_nrc_exempted_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_released_from_radiological_control_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_dod_non_licensed_disposal_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c1_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c2_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c3_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c4a_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c4b_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c4c_flag"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//
//ll_i++
//istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
//istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_1"
//istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_waste_type"
//istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

//Radioactive supplement page 3
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_generated_in_particle_accelerator_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_approved_for_dispos_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
istr_wcr_profile_map[ll_i].profile_column		= "profileradioactive_approved_for_disposal_flag"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_approved_by_nrc_fla_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
istr_wcr_profile_map[ll_i].profile_column		= "profileradioactive_approved_by_nrc_flag"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_nrc_exempted_flag_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
istr_wcr_profile_map[ll_i].profile_column		= "profileradioactive_nrc_exempted_flag"

ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_approved_for_altern_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
istr_wcr_profile_map[ll_i].profile_column		= "profileradioactive_approved_for_alternate_disposal_flag"

ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_released_from_radio_1"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
istr_wcr_profile_map[ll_i].profile_column		= "profileradioactive_released_from_radiological_control_flag"

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_dod_non_licensed_disposal_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_byproduct_sum_of_all_isotopes"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_source_sof_calculations"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

 //DevOps - #15003 info_gde 04/04/2020 start
ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 //found
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_special_nuclear_sum_of_all_isotopes"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1
//DevOps - #15003 info_gde 04/04/2020 end


ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1 
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c1_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1


ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c2_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c3_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c4a_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++//COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c4b_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_usei_wac_table_c4c_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

ll_i++ //COR2 JXM 04/03/2019  - Add column for mapping
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_radioactive_supplement_page_3"
istr_wcr_profile_map[ll_i].wcr_column		= "profileradioactive_waste_type"
istr_wcr_profile_map[ll_i].dw_profile		= idw_profile_radioactive_supplement_page_1

//DevOps:17845 - Pharmaceutical Supplement 
ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pharmaceutical_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pharmaceutical_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "pharmaceutical_flag"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pharmaceutical_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pharmaceutical_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pharmaceutical_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_pharmaceutical_supplement_dragon"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

//DevOps:19924 -Generator knowledgel Supplement 
ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "locked"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "specific_gravity"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "ppe_code"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_reg_metals"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_reg_vo"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_reg_svo"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_reg_herb_pest"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_reg_cyanide_sulfide"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "rcra_reg_ph"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "material_cause_flash"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "material_meet_alc_exempt"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "analytical_comments"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "print_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_gen_knowledge_supplement

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "generator_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "state_id"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr			= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_gen_knowledge_supplement_form"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile		= idw_header

wf_wcr_profile_map_create_3(ll_i) // Prakash - 10/18/2023 - Added for DevOps #73666 
end subroutine

public subroutine wf_set_ldr_form ();//COR2 - AGC
//AGC 04/15/2019
// JCB  9/23/2019 bug 12484 If incoming LDR #10 is Null, check if Tab_E dw_wcr_display_2 has rows. If so, set flag to T
// JCB 10/10/2019 bug 12484 Change to reset NULL indicator backed out, OK to leave window with #10 neither T nor F, 
//                                         and leave data as is
// JCB 10/10/2019 noticed Alon added code for UHFs, I put the screen Redraw as last thing in script to avoid Flashing the window
// JCB 10/11/2019 bug 12424, did a DIFF to 9/14 version, saw a couple line that were in that code, not part of newer 12484.
//                                          am uncommenting those lines
//DevOps 14280 info_gde 03/13/2020; Add New Profile (Profile Tab) - Section G. (LDR)
//DevOps #15323 info_gde 04/24/2020; Add New Profile (Profile Tab) - Section G. (LDR)

long ll_display_row, ll_waste_managed_id, ll_profile_id, ll_ldr_subcategory_id, ll_header_row, ll_ix, ll_ldr_subcategory_rowcount
long ll_wcrdisp2_rowcount   ,ll_count                     // 20190923 jcb bug 12484 add
string ls_epa_waste_codes, ls_dataobject, ls_ldr_subcategory_desc, ls_ldr_subcategory_ids, ls_constituents_requiring_treatment_flag, ls_requires_treatment_flag
string ls_waste_meets_ldr_standards,ls_uhc, ls_frequency, ls_waste_rb_null
SetNull(ls_waste_rb_null)

ls_dataobject = idw_wcr_display_1.dataobject
if ls_dataobject <> 'd_profile_ldr_form_dragon' then return

ll_display_row = idw_wcr_display_1.getrow()

if ll_display_row < 1 then return

ll_header_row = idw_header.getrow()

ll_profile_id = idw_wcr_display_1.getitemnumber(ll_display_row, 'profile_id')
// DevOps 14241/14841 - 3/26/2020 - MPM - Replace "Profile.exceed_LDR_standards" on Section G with "Profile.waste_meets_ldr_standards"
ls_waste_meets_ldr_standards =  idw_header.getitemstring(ll_header_row, 'waste_meets_ldr_standards')
ls_constituents_requiring_treatment_flag = idw_header.getitemstring(ll_header_row,'constituents_requiring_treatment_flag')
//ls_constituents_requiring_treatment_flag = idw_wcr_display_1.getitemstring(ll_display_row, 'constituents_requiring_treatment_flag')
ls_uhc = idw_wcr_display_1.getitemstring(ll_display_row, 'uhcs')
//choose case idw_wcr_display_1.getitemstring(ll_display_row,'more_than_50_pct_debris')
//	case 'T'
//		idw_wcr_display_1.setitem(ll_display_row,'waste_rb','T')
//	case else

		choose case idw_wcr_display_1.getitemstring(ll_display_row,'waste_water_flag')
			case 'W'
				idw_wcr_display_1.setitem(ll_display_row,'waste_rb','W')
			case 'N'
				idw_wcr_display_1.setitem(ll_display_row,'waste_rb','N')
			case 'U'
				idw_wcr_display_1.setitem(ll_display_row,'waste_rb',ls_waste_rb_null) //DevOps 21403 info_gde 11/24/2021; LDR Supplement Tab - Questions Not Updating Correctly
			case else
//				idw_wcr_display_1.setitem(ll_display_row,'waste_rb','U')
		end choose

//end choose
//DevOPs:13589 

choose case is_ldr_value //DevOps 23447 info_gde 07/20/2021; Profile Tracking - LDR Supplemental Form Q6 Bug
	case 'F'
		idw_wcr_display_1.setitem(ll_display_row,'ldr_notification_frequency','F')
	case 'T'
		idw_wcr_display_1.setitem(ll_display_row,'ldr_notification_frequency','T')
	case 'C'
 		idw_wcr_display_1.setitem(ll_display_row,'ldr_notification_frequency','C')
	case else
		idw_wcr_display_1.setitem(ll_display_row,'ldr_notification_frequency',idw_profile_ldr_form_dragon.getitemstring(ll_display_row,'ldr_notification_frequency'))
end choose

ll_waste_managed_id = idw_wcr_display_1.Object.waste_managed_id[ll_display_row]
IF IsNull (ll_waste_managed_id ) THEN 
    ll_waste_managed_id = idw_wcr_display_1.Object.profile_waste_managed_id_1[ll_display_row]
END IF
		
//DevOps 14280 info_gde 03/13/2020 - start
IF ll_waste_managed_id=0 THEN ll_waste_managed_id=il_profile_waste_managed_id
//DevOps 14280 info_gde 03/13/2020 - end

idw_wcr_display_1.setredraw(false)
		
idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',0)
idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_2',0)
idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_3',0)
idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',0)
idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_5',0)
idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_6',0)
idw_wcr_display_1.setitem(ll_display_row,'rb_1','U')
idw_wcr_display_1.setitem(ll_display_row,'rb_2','U')
//DevOps:18543
//idw_wcr_display_1.setitem(ll_display_row,'rb_3','U')
//idw_wcr_display_1.setitem(ll_display_row,'rb_4','U')

choose case ll_waste_managed_id
	case 1
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
	case 2
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_2',2)
	case 3
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_5',3)
	case 4
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',4)
		
	case 6
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_3',6)
	case 10
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
		idw_wcr_display_1.setitem(ll_display_row,'rb_1','T')
		idw_wcr_display_1.setitem(ll_display_row,'rb_2','T')
	case 11
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',4)
		idw_wcr_display_1.setitem(ll_display_row,'rb_3','T')
		idw_wcr_display_1.setitem(ll_display_row,'rb_4','T') 
	case 12
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
		idw_wcr_display_1.setitem(ll_display_row,'rb_1','T')
		idw_wcr_display_1.setitem(ll_display_row,'rb_2','F')
	case 13
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',4)
		idw_wcr_display_1.setitem(ll_display_row,'rb_3','T')
		idw_wcr_display_1.setitem(ll_display_row,'rb_4','F')
	case 14
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
		idw_wcr_display_1.setitem(ll_display_row,'rb_1','F')
		idw_wcr_display_1.setitem(ll_display_row,'rb_2','T')
	case 15
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',4)
		idw_wcr_display_1.setitem(ll_display_row,'rb_3','F')
		idw_wcr_display_1.setitem(ll_display_row,'rb_4','T')
	case 16
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
		idw_wcr_display_1.setitem(ll_display_row,'rb_1','F')
		idw_wcr_display_1.setitem(ll_display_row,'rb_2','F')
	case 17
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',4)
		//DevOps:18543
		//DevOps:29649 - Uncommented rb_3 and rb_4 code. this is causing an issue when 17 selected for does not
		idw_wcr_display_1.setitem(ll_display_row,'rb_3','F')
		idw_wcr_display_1.setitem(ll_display_row,'rb_4','F')
		idw_wcr_display_1.setitem(ll_display_row,'rb_1','U')
		idw_wcr_display_1.setitem(ll_display_row,'rb_2','U')
	case 18
		idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_6',18)
	case else
				
end choose

//DevOps:12530
// DevOps 14241/14841 - 3/26/2020 - MPM - Replace "Profile.exceed_LDR_standards" on Section G with "Profile.waste_meets_ldr_standards"
IF ls_waste_meets_ldr_standards = 'T' THEN 
	idw_wcr_display_1.object.profile_waste_managed_id_1.protect = 1
	idw_wcr_display_1.object.profile_waste_managed_id_2.protect = 1
	idw_wcr_display_1.object.profile_waste_managed_id_3.protect = 1
END IF

// AGC 04/24/2019
//SELECT dbo.fn_profile_waste_code_list(profile_id, 'P'), dbo.fn_profile_ldr_subcategory(profile_id)
//	INTO :ls_epa_waste_codes, :ls_ldr_subcategory_ids
//	FROM Profile
//	WHERE profile_id = :ll_profile_id
//USING gtr_share;

//ll_ldr_subcategory_id = idw_wcr_display_1.getitemnumber(ll_display_row,'ldr_subcategory_id')
//if isnull(ll_ldr_subcategory_id) or ll_ldr_subcategory_id = 0 then
//	idw_wcr_display_1.setitem(ll_display_row,'yes_no_2','N')
//else
//	idw_wcr_display_1.setitem(ll_display_row,'yes_no_2','Y')
//end if

// make sure the waste codes are synced up
wf_populate_wastecodes_wcr('all')

//DevOps #15323 info_gde 04/24/2020 start
if is_rcra_waste_codes='' or isNull(is_rcra_waste_codes) then
else
	ls_epa_waste_codes = is_rcra_waste_codes
end if
//DevOps #15323 info_gde 04/24/2020 end

// make sure ldr subcategories are synced up
ll_ldr_subcategory_rowcount = idw_ldr_subcategory.rowcount()
for ll_ix = 1 to ll_ldr_subcategory_rowcount
	ls_ldr_subcategory_desc = idw_ldr_subcategory.Describe("evaluate('lookupdisplay(ldr_subcategory_id)'," + String(ll_ix) + ")")
	if ls_ldr_subcategory_ids = '' then
		ls_ldr_subcategory_ids = ls_ldr_subcategory_desc
	else
		ls_ldr_subcategory_ids = ls_ldr_subcategory_ids + ', ' + ls_ldr_subcategory_desc
	end if;
next

//DevOps #15323 info_gde 04/24/2020 start
If ls_epa_waste_codes='' OR isNull(ls_epa_waste_codes) then
else
	idw_wcr_display_1.setitem(ll_display_row,'epa_waste_codes',ls_epa_waste_codes)
end if
//DevOps #15323 info_gde 04/24/2020 end
idw_wcr_display_1.setitem(ll_display_row,'ldr_subcategory_ids',ls_ldr_subcategory_ids)

if isnull(ls_ldr_subcategory_ids) OR trim(ls_ldr_subcategory_ids) = '' OR UPPER (ls_ldr_subcategory_ids) = 'NONE' then
	IF ib_new_record = TRUE AND ib_copy_from_ldr_wcr = FALSE   THEN 
	     idw_wcr_display_1.setitem(ll_display_row,'yes_no_2','S')
	 ELSE
	     idw_wcr_display_1.setitem(ll_display_row,'yes_no_2','N')
	END IF
else
	idw_wcr_display_1.setitem(ll_display_row,'yes_no_2','Y')
end if

//// 20190923 JCB bug 12484
//ll_wcrdisp2_rowcount = idw_wcr_display_2.rowcount()

if ll_header_row > 0 then
//	
//    // 2019/09/23 jcb bug 12484, fix is disallow null flag cuz it causes constituents to not pass data back to Tab E
//    // 20191010 jcb bug 12484 bring GetItemString in front of NULL test 	 
//	
//	IF ll_wcrdisp2_rowcount > 0 THEN
//		IF IsNUll(ls_constituents_requiring_treatment_flag) then
//			ls_constituents_requiring_treatment_flag = 'T'
//		END IF
//		ls_constituents_requiring_treatment_flag = 'T'                   // 20191010 jcb #12424 ADD set to T if any rows (in case it was incorrectly F)
//	ELSE
//		ls_constituents_requiring_treatment_flag = 'F'                   // 20190924 jcb bug 12424 if no rows, set flag to NO
//	END IF
//
//	// 20191010 jcb bug 12484 move in front of NULL check    ls_constituents_requiring_treatment_flag = idw_header.getitemstring(ll_header_row,'constituents_requiring_treatment_flag')

	idw_wcr_display_1.setitem(ll_display_row,'constituents_requiring_treatment_flag',ls_constituents_requiring_treatment_flag)
end if
		
// 20191010 jcb #12484 Moved to end of func: these should be last thing this function does, else causes display to flicker
//idw_wcr_display_1.setredraw(true)
//dw_wcr_display_2.setredraw(true)               // 20190923 jcb bug12484 ADD

//AlonB 09/27/2019  	issue #12424   
  
		long ll_rows
		integer li_rc 
		string ls_value 
		long ll_row, ll_rowcount
		
		li_rc = idw_const.SetFilter(" uhc = 'T'")
				li_rc = idw_const.Filter()
				ll_rows =  idw_const.RowCount()	
				li_rc = idw_wcr_display_2.Retrieve (ll_profile_id)  //DevOps #61003 || 5/10/2023  - Added by Uday for Addition of constituents into section E6 and verify that users are able to add them into LDR question 10. 
				li_rc = idw_const.SetFilter("")
				li_rc = idw_const.Filter()
			//DevOps 12647
			IF ls_constituents_requiring_treatment_flag = 'T' THEN 
				li_rc = idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
				li_rc = idw_wcr_display_2.Filter()
				ib_LDR_setFilter = true
			ELSE
				idw_wcr_display_2.SetFilter(" requiring_treatment_flag <> 'T' AND  requiring_treatment_flag <> 'F' " )
				idw_wcr_display_2.Filter()
			END IF
			
		//AlonB Issue  #12424 10/18/2019		
		if ll_rows = 0 then 
			// IF ls_uhc = 'T' THEN 
			     idw_wcr_display_1.setitem(ll_display_row,'yes_no_1','Y')
			else 
				IF ib_new_record = TRUE AND ib_copy_from_ldr_wcr = FALSE THEN 
				    idw_wcr_display_1.setitem(ll_display_row,'yes_no_1','S')
			     ELSE
			     	idw_wcr_display_1.setitem(ll_display_row,'yes_no_1','N')
				END IF
			//END IF
		//	idw_wcr_display_1.AcceptText()
			// DevOps 12647 commented out filter since filter is set in wf_set_wcr_sect_display
//			li_rc = idw_wcr_display_2.SetFilter(" uhc = 'T'")
//					li_rc = idw_wcr_display_2.Filter()
//					idw_wcr_display_2.SetRedraw(true)
//			
//				ib_LDR_setFilter =TRUE
		end if 	
	       
		//AlonB Issue  #12424 10/18/2019
		
		
		if ll_rows> 0   then
			
//			if idw_wcr_display_1.Rowcount()  = 0 then 
//				ll_display_row =  idw_wcr_display_1.insertRow(0)
//			else
//				ll_display_row =  idw_wcr_display_1.getRow()
//			end if 
//			
//						
		//	ls_constituents_requiring_treatment_flag = 'T'
		// AlonB Oct7 19-  #12424  Zachery Wright comment 9: question 10 is not linked to the UHC flag it is linked 
		//	idw_wcr_display_1.setitem(ll_display_row,'constituents_requiring_treatment_flag',ls_constituents_requiring_treatment_flag)
			
		//IF ls_uhc = 'T' THEN 
			idw_wcr_display_1.setitem(ll_display_row,'yes_no_1','Y')
		ELSE
				IF ib_new_record = TRUE AND ib_copy_from_ldr_wcr = FALSE THEN 
				    idw_wcr_display_1.setitem(ll_display_row,'yes_no_1','S')
			     ELSE
			     	idw_wcr_display_1.setitem(ll_display_row,'yes_no_1','N')
				END IF
		//END IF
		//	idw_wcr_display_1.AcceptText()			
		
			ls_value = idw_wcr_display_1.GetItemString(ll_display_row, 'constituents_requiring_treatment_flag')
					// DevOps 12647 commented out filter since filter is set in wf_set_wcr_sect_display
//					li_rc = idw_wcr_display_2.SetFilter(" uhc = 'T'")
//					li_rc = idw_wcr_display_2.Filter()
//					idw_wcr_display_2.SetRedraw(true)
//					ib_LDR_setFilter =TRUE
	//			li_rc = idw_const.SetFilter("")
	//			li_rc = idw_const.Filter()
		end if 
		//DevOps:12530 - AM
		IF ls_constituents_requiring_treatment_flag = 'T' THEN 
			// DevOps 12647 commented out filter since filter is set in wf_set_wcr_sect_display
//			li_rc = idw_wcr_display_2.SetFilter("")
//			li_rc = idw_wcr_display_2.Filter()
//			idw_wcr_display_2.SetRedraw(true)
//                      IF idw_wcr_display_2.Rowcount() >0 THEN 
//						li_rc = idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
//						li_rc = idw_wcr_display_2.Filter()
//						ib_LDR_setFilter =TRUE
//					END IF
					idw_wcr_display_2.SetRedraw(false)
					idw_wcr_display_2.SetFilter('')
					idw_wcr_display_2.Filter()
					ll_rowcount = idw_wcr_display_2.rowcount()
//					for ll_row = 1 to ll_rowcount
//						if isnull(idw_wcr_display_2.getitemstring(ll_row,'requiring_treatment_flag')) then
//							idw_wcr_display_2.setitem(ll_row,'requiring_treatment_flag','T')
//						end if
//					next
					idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
					idw_wcr_display_2.Filter()
					idw_wcr_display_2.SetRedraw(true)
				
		END IF
		
//AlonB 09/27/2019  	issue #12484  

// 20191010 jcb #12484 MOVED to last thing this function does to avoid display flicker
idw_wcr_display_1.setredraw(true)
idw_wcr_display_2.setredraw(true)               // 20190923 jcb bug12484 ADD

 idw_wcr_display_1.setitemstatus(1,0,Primary!,NotModified!)
 
 idw_wcr_display_1.SetColumn("epa_waste_codes")
 


end subroutine

public function string wf_validate_benzene_waste_ops_form ();/* 

// COR2 - JAG

Function/Event: wf_validate_benzene_waste_ops_form function
Author        : Jorge Gonzalez
Created       : 1/2019
Purpose       : 

 Note(s). 
 
 Input Parameters:None

 Output Parameters:
             warning message

 ---------------------- Revision History ------------------------------------------------
 Version  Modified by   Date        Description of change
-------    -----------     ----------   ---------------------------------------------------------
   00         jag           1/2019      5513             
   01         agc     04/24/2019    10330
*/

// Variable Declaration Section

decimal{2} ldec_benzene_range_from
decimal{2} ldec_benzene_range_to
string ls_msg


// Main Routine Starts

//if (idw_wcr_display_1.DataObject <> 'd_profile_benzene_waste_ops_supplement') then
//	return gi_success
//end if

if (idw_benzene_waste_ops_supplemen.ModifiedCount() = 0) then
	return ls_msg
end if

 ldec_benzene_range_from = idw_benzene_waste_ops_supplemen.GetItemDecimal(1, 'benzene_range_from')
 ldec_benzene_range_to = idw_benzene_waste_ops_supplemen.GetItemDecimal(1, 'benzene_range_to')

if not isnull(ldec_benzene_range_from) and isnull(ldec_benzene_range_to) then
//	  messageBox('Warning' , 'Must enter a value in both benzene range fields.' , exclamation!) 
	ls_msg = 'Benzene Supplement must enter a value in both Benzene Range fields.'
      return ls_msg
end if

if isnull(ldec_benzene_range_from) and not isnull(ldec_benzene_range_to) then
//	  messageBox('Warning' , 'Must enter a value in both benzene range fields.' , exclamation!) 
	ls_msg = 'Benzene Supplement must enter a value in both Benzene Range fields.'
      return ls_msg
end if

if not isnull(ldec_benzene_range_from) and not isnull(ldec_benzene_range_to) then
	
	if (ldec_benzene_range_from > ldec_benzene_range_to ) then
//	  messageBox('Warning' , 'Benzene range from value must be less than the benzene range To value.' , exclamation!) 
	ls_msg = 'Benzene Supplement Benzene Range From value must be less than the Benzene Range To value.'
      return ls_msg
	end if
	
end if

return ls_msg

end function

public function string wf_validate_profile_thermal (string as_profile_status, long al_profile_id);//COR2 JXM 05/01/2019 9616 Thermal Validation
//20200427 #15366 make same-as-above save correctly
Long ll_thermal_row, ll_header_row, ll_NonFriableDebrisPercent
String ls_ThermalProcessFlag, ls_GeneratorName, ls_OriginatingGeneratorName, ls_NonFriableDebrisMaterial
String ls_same_as_above, ls_EPAID, ls_OriginatingEPAID, ls_OilBearingFlag, ls_RcraExcludedFlag, ls_OilConstituentsFuelFlag
String ls_NoListWasteCodesFlag, ls_GenProcess, ls_f037, ls_f038, ls_k048, ls_k049, ls_k050, ls_k051, ls_k052, ls_k169, ls_k170, ls_k171, ls_k172
Long ll_water, ll_solid, ll_organics, ll_PercentOfAsh, ll_rtn
String ls_SelfHeatingFlag, ls_bitumenAsphaltTarFlag, ls_CentrifugePriorShipmentFlag, ls_FuelOxygenatesFlag
String ls_MTBE, ls_Ethanol, ls_Other, ls_SurfactantsFlag
Decimal{2} ld_water, ld_solid, ld_organics, ld_totPrimaryComponents, ld_HeatingValue, ld_bitumenAsphaltTarPercent, ld_OxygenatesPPM
integer li_rc				// 20200427 jcb #15366 add	


// DevOps 16485 - Only perform validation if user entered changes - FHC 7/15/2020
IF idw_profile_thermal_supplement_form.ModifiedCount() < 1 THEN
	setNull(is_msg_validate_shipping)
	Return is_msg_validate_shipping
END IF

//COR2 JXM 04/30/2019: Task 9616 Thermal Supplement Validations
//Before (Question H.3 has value)
//Question H.3 changed by user and ProfileThermal has record - warn user
If (as_profile_status <> 'P') then return ''
If as_profile_status = 'P' and ( not IsNull(al_profile_id) and al_profile_id > 0 ) then
			
	if IsValid(idw_header) then ll_header_row = idw_header.GetRow()
	if IsValid(idw_profile_thermal_supplement_form) then ll_thermal_row = idw_profile_thermal_supplement_form.GetRow()
	
	if ( ll_thermal_row > 0 and ll_header_row > 0 ) then
		//Get data
		ls_ThermalProcessFlag = trim(idw_header.Object.thermal_process_flag[ll_header_row]) 
		//Extra Checks before proceeding
		//From Section H Question #3, Is selected
		//DevOps:13657
		//if ( ls_ThermalProcessFlag = 'T' ) then 
			//Messagebox(gs_app_name + ":  Validation Error", "You must select Thermal processing as ~"Yes~" in order to process Thermal Supplement changes. Return to Section H, Question #3.",Exclamation!)
			//changed is_msg_validate_shipping to is_msg_validate_wcr per oswin
		//	is_msg_validate_wcr =  is_msg_validate_wcr  + "~n Thermal supplement exist for this profile, Please select Thermal processing to ~"Yes~" on Section H, Question #3. " //10687 COR2 JXM 05.09.2019
			//return gi_failure
		//end if
		
		//If User selected Thermal Process Flag Checkbox and Thermal Record already exist... Display message to user 
		// below code commented as per Oswin
//		dwItemStatus ldw_Status
//		ldw_status = idw_header.GetItemStatus(ll_header_row,"thermal_process_flag",Primary!)
//		select count(*) into :ll_rtn from ProfileThermal where profile_id = :al_profile_id using itr_share;
//		if ( ldw_status = DataModified! and ll_rtn > 0 ) then 
//			is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal record already exist, go to Details to delete this record."
//		end if
//		
		ls_GeneratorName = trim(idw_profile_thermal_supplement_form.Object.generator_generator_name[ll_thermal_row])
		ls_OriginatingGeneratorName = trim(idw_profile_thermal_supplement_form.Object.profilethermal_originating_generator_name[ll_thermal_row])
		ls_EPAID= trim(idw_profile_thermal_supplement_form.Object.generator_generator_epa_id[ll_thermal_row])
		ls_OriginatingEPAID = trim(idw_profile_thermal_supplement_form.Object.profilethermal_originating_generator_epa_id[ll_thermal_row])
		ls_same_as_above =  trim(idw_profile_thermal_supplement_form.Object.same_as_above[ll_thermal_row])
		ls_OilBearingFlag = trim(idw_profile_thermal_supplement_form.Object.profilethermal_oil_bearing_from_refining_flag[ll_thermal_row])
		ls_RcraExcludedFlag = trim(idw_profile_thermal_supplement_form.Object.profilethermal_rcra_excluded_hsm_flag[ll_thermal_row])
		ls_OilConstituentsFuelFlag = trim(idw_profile_thermal_supplement_form.Object.profilethermal_oil_constituents_are_fuel_flag[ll_thermal_row])
		ls_NoListWasteCodesFlag = trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_no_waste_code_flag[ll_thermal_row])
		ls_f037 = trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_f037_flag[ll_thermal_row])
		ls_f038 = trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_f038_flag[ll_thermal_row])
		ls_k048= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k048_flag[ll_thermal_row])
		ls_k049= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k049_flag[ll_thermal_row])
		ls_k050= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k050_flag[ll_thermal_row])
		ls_k051= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k051_flag[ll_thermal_row])
		ls_k052= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k052_flag[ll_thermal_row])
		ls_k169= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k169_flag[ll_thermal_row])
		ls_k170= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k170_flag[ll_thermal_row])
		ls_k171= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k171_flag[ll_thermal_row])
		ls_k172= trim(idw_profile_thermal_supplement_form.Object.profilethermal_petroleum_refining_k172_flag[ll_thermal_row])
		ls_GenProcess = trim(idw_profile_thermal_supplement_form.Object.profilethermal_gen_process[ll_thermal_row])
		ld_water = idw_profile_thermal_supplement_form.Object.profilethermal_composition_water_percent[ll_thermal_row]
		ld_solid = idw_profile_thermal_supplement_form.Object.profilethermal_composition_solids_percent[ll_thermal_row]
		ld_organics = idw_profile_thermal_supplement_form.Object.profilethermal_composition_organics_oil_tph_percent[ll_thermal_row]
		ld_HeatingValue = idw_profile_thermal_supplement_form.Object.profilethermal_heating_value_btu_lb[ll_thermal_row]
		ll_PercentOfAsh = idw_profile_thermal_supplement_form.Object.profilethermal_percent_of_ash[ll_thermal_row]
		ls_NonFriableDebrisMaterial = trim(idw_profile_thermal_supplement_form.Object.profilethermal_non_friable_debris_gt_2_inch_flag[ll_thermal_row])
		ll_NonFriableDebrisPercent = idw_profile_thermal_supplement_form.Object.profilethermal_non_friable_debris_gt_2_inch_ppm[ll_thermal_row]
		 ls_SelfHeatingFlag = idw_profile_thermal_supplement_form.Object.profilethermal_self_heating_properties_flag[ll_thermal_row]
		 ls_bitumenAsphaltTarFlag = trim(idw_profile_thermal_supplement_form.Object.profilethermal_bitumen_asphalt_tar_flag[ll_thermal_row])
		ld_bitumenAsphaltTarPercent  = idw_profile_thermal_supplement_form.Object.profilethermal_bitumen_asphalt_tar_ppm[ll_thermal_row]
		ls_CentrifugePriorShipmentFlag = trim(idw_profile_thermal_supplement_form.Object.profilethermal_centrifuge_prior_to_shipment_flag[ll_thermal_row])
		ls_FuelOxygenatesFlag = trim(idw_profile_thermal_supplement_form.Object.profilethermal_fuel_oxygenates_flag[ll_thermal_row])
		ld_OxygenatesPPM = idw_profile_thermal_supplement_form.Object.profilethermal_oxygenates_ppm[ll_thermal_row]
		ls_MTBE = trim(idw_profile_thermal_supplement_form.Object.profilethermal_oxygenates_mtbe_flag[ll_thermal_row])
		ls_Ethanol =  trim(idw_profile_thermal_supplement_form.Object.profilethermal_oxygenates_ethanol_flag[ll_thermal_row])
		ls_Other = trim(idw_profile_thermal_supplement_form.Object. profilethermal_oxygenates_other_flag[ll_thermal_row])
		ls_SurfactantsFlag = trim(idw_profile_thermal_supplement_form.Object. profilethermal_surfactants_flag[ll_thermal_row])
		
		//if not ( IsNull(ls_ThermalProcessFlag) or ls_ThermalProcessFlag <> "" or len(ls_ThermalProcessFlag) < 1 ) then //Question H.3 has value - From H) Certification If yes process Thermal Supplement Validation
	//	if ( ls_ThermalProcessFlag ='T' and not ( IsNull(ls_ThermalProcessFlag) or ls_ThermalProcessFlag='' or len(ls_ThermalProcessFlag) < 1) ) then
			//Originating Generator Name and Originating EPA ID	
			// 20200427 jcb #15366 repl if ( ( ls_same_as_above = 'N' or IsNull(ls_same_as_above) or ls_same_as_above='') and (  ( ls_GeneratorName <> ls_OriginatingGeneratorName ) or ( ls_EPAID <> ls_OriginatingEPAID) ) ) then			                                               
			//if ( ( ls_same_as_above = 'N' or IsNull(ls_same_as_above) or ls_same_as_above='') and (  ( ls_GeneratorName = ls_OriginatingGeneratorName ) and ( ls_EPAID = ls_OriginatingEPAID) ) ) then			                                               
			//	is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - The Originating Generator & EPA ID # must be provided if the Originating Generator differs from the Generator that will be listed on the profile/manifest.  If the Generator information does not differ  please check ~"Same as above~" box." 
			//end if
		    // 20200427 jcb #15366 spec from Zach, and cloned from benzene supplement
			if ( ( ls_same_as_above = 'N' AND (IsNull(ls_OriginatingGeneratorName) or ls_OriginatingGeneratorName='') OR (IsNull(ls_OriginatingEPAID) or ls_OriginatingEPAID='' )) ) THEN
				Messagebox (gs_app_name+": Warning Message","The Originating Generator & EPA ID # must be provided if the Originating Generator differs from the Generator that will be listed on the profile/manifest.  ~r~rIf the Generator information does not differ  please check ~"Same as above~" box.",Information!)
				idw_profile_thermal_supplement_form.Object.profilethermal_originating_generator_name.Protect = 0
				idw_profile_thermal_supplement_form.Object.profilethermal_originating_generator_epa_id.Protect = 0
// #15366 repl				idw_profile_thermal_supplement_form.Object.SetItem(ll_thermal_row,'profile_thermal_originating_generator_name','')
// #15366 repl				idw_profile_thermal_supplement_form.Object.SetItem(ll_thermal_row,'profile_thermal_originating_generator_epa_id','')
// #15366 repl     			idw_profile_thermal_supplement_form.Object.SetColumn('originating_generator_name')
				li_rc = idw_profile_thermal_supplement_form.SetItem(ll_thermal_row,'profilethermal_originating_generator_name','')
				idw_profile_thermal_supplement_form.SetItem(ll_thermal_row,'profilethermal_originating_generator_epa_id','')
      			idw_profile_thermal_supplement_form.SetColumn('profilethermal_originating_generator_name')					
					
				//RETURN 0
		   end if
		   if (  ls_same_as_above = 'Y' ) then //checked
//20200427 jcb #15366 repl		idw_profile_thermal_supplement_form.SetItem(ll_thermal_row, 'originating_generator_name',idw_profile_thermal_supplement_form.Object.generator_name[ll_thermal_row] )
//20200427 jcb #15366 repl		idw_profile_thermal_supplement_form.SetItem(ll_thermal_row, 'originating_generator_epa_id',idw_profile_thermal_supplement_form.Object.generator_epa_id[ll_thermal_row] )
//20200427 jcb #15366 repl		idw_profile_thermal_supplement_form.Object.Modify('originating_generator_name.Protect=1')
//20200427 jcb #15366 repl		idw_profile_thermal_supplement_form.Object.Modify('originating_generator_epa_id.Protect=1')

//20200427 jcb #15366 repl					idw_profile_thermal_supplement_form.SetItem(ll_thermal_row, 'profilethermal_originating_generator_name',idw_profile_thermal_supplement_form.Object.generator_name[ll_thermal_row] )
//20200427 jcb #15366 repl	 				idw_profile_thermal_supplement_form.SetItem(ll_thermal_row, 'profilethermal_originating_generator_epa_id',idw_profile_thermal_supplement_form.Object.generator_epa_id[ll_thermal_row] )

				idw_profile_thermal_supplement_form.SetItem(ll_thermal_row, 'profilethermal_originating_generator_name',idw_profile_thermal_supplement_form.Object.generator_generator_name[ll_thermal_row] )
 				idw_profile_thermal_supplement_form.SetItem(ll_thermal_row, 'profilethermal_originating_generator_epa_id',idw_profile_thermal_supplement_form.Object.generator_generator_epa_id[ll_thermal_row] )
            		//20200427 jcb #15366 repl 	idw_profile_thermal_supplement_form.Object.Modify('profilethermal_originating_generator_name.Protect=1')
				//20200427 jcb #15366 repl	    idw_profile_thermal_supplement_form.Object.Modify('profilethermal_originating_generator_epa_id.Protect=1')
				idw_profile_thermal_supplement_form.Object.profilethermal_originating_generator_name.Protect = 1
				idw_profile_thermal_supplement_form.Object.profilethermal_originating_generator_epa_id.Protect = 1				
				
				//Return 0
	 	//end if			

			// Oil Bearing checkbox
			if ( IsNull(ls_OilBearingFlag) or ls_OilBearingFlag='' or len(ls_OilBearingFlag) < 1 ) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Oil Bearing from Petroleum is required."
			//RCRA Excluded Hazardous checkbox
			if ( IsNull(ls_RcraExcludedFlag) or ls_RcraExcludedFlag='' or len(ls_RcraExcludedFlag) < 1 ) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - RCRA Excluded Hazardous Secondary Material (HSM) is required."
			//Oil Constituents Fuel checkbox
			if ( IsNull(ls_OilConstituentsFuelFlag) or ls_OilConstituentsFuelFlag='' or len(ls_OilConstituentsFuelFlag) < 1 ) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Oil Contituents Fuel is required."
			//Petroleum refining Listed Waste Code
			if ls_NoListWasteCodesFlag = 'T' and ( ls_f037 = 'T' or ls_f038 = 'T' or ls_k048 = 'T' or ls_k049 = 'T' or ls_k050 = 'T' or ls_k051 = 'T' or ls_k052 = 'T' or ls_k169 = 'T' or ls_k170 = 'T' or ls_k171 = 'T' or ls_k172 = 'T' ) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - You have selected at least one Listed Code in conjunction with a selection of ~"No Listed Waste Codes Apply~".  Please distinguish between the applicability of Listed Codes verses No Listed Waste Codes Apply."				 
			//If No petroleum, ... describe
			if ls_NoListWasteCodesFlag = 'T' and ( IsNull(ls_GenProcess) or ls_GenProcess = '' ) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - You have indicated that ~"No Listed Waste Codes Apply~" in the previous question.  Please provide a detailed description of the process generating the waste/material." 
			//Water, Solid, Organics (ea. 0-100)  
			if not (ld_water >= 0.00 and ld_water < 101.00) then  is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Primary Components Water value of 0 - 100 is required."
			if not (ld_solid >= 0.00 and  ld_solid < 101.00) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Primary Components Solid value of 0 - 100 is required."
			if not (ld_organics >= 0.00 and ld_organics < 101.00) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Primary Components Organics value of 0 - 100 is required."
			//Water+Solid+Organics total not exceed 100
			ld_totPrimaryComponents = ld_water + ld_solid + ld_organics
			if not (ld_totPrimaryComponents >= 0.00 and ld_totPrimaryComponents < 101.00) then  is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Total value of the three (Water, Solids and Organics) should equal and not exceed 100%."
			//Heating Value Btu/Lb
			if (IsNull(ld_HeatingValue) or ld_HeatingValue = 0.00) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Heating Vale Btu/Lb. is required."
			//% of ASH
			if (IsNull(ll_PercentOfAsh) or ll_PercentOfAsh = 0) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - % of ASH is required."
			//Non-Friable Debris Material
			if ( IsNull(ls_NonFriableDebrisMaterial) or ls_NonFriableDebrisMaterial='' or len(ls_NonFriableDebrisMaterial) = 0 ) then
				is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Non-Friable Debris Material is required." 
			elseif (  ls_NonFriableDebrisMaterial = 'T' and ( ll_NonFriableDebrisPercent = 0 or IsNull(ll_NonFriableDebrisPercent) ) ) then
				is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - You have indicated that the material contains Non-Friable Debris Material > 2-inches in size. A volume percentage is required." 
			end if
			//Catalyst
			if (IsNull(ls_SelfHeatingFlag) or ls_SelfHeatingFlag='' or len(ls_SelfHeatingFlag) < 1) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Catalyst is required."
			//bitumen/Asphalt/Tar
			if (IsNull(ls_bitumenAsphaltTarFlag) or ls_bitumenAsphaltTarFlag = '' or len(ls_bitumenAsphaltTarFlag) < 1) then
				is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - bitumen/Asphalt/Tar is required."
			elseif ( ls_bitumenAsphaltTarFlag = 'T' and (ld_bitumenAsphaltTarPercent=0.00 or IsNull(ld_bitumenAsphaltTarPercent) ) ) then
				is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - You have indicated that the material contains bitumen, asphalt or tar >15 (wt.). A volume percentage is required."
			end if
			//Centrifuge Prior to shipment
			if ( IsNull(ls_CentrifugePriorShipmentFlag) or ls_CentrifugePriorShipmentFlag = '' or len(ls_CentrifugePriorShipmentFlag) < 1 ) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Centrifuge prior to shipment is required."
			//Fuel Oxygenates
			if ( IsNull(ls_FuelOxygenatesFlag) or ls_FuelOxygenatesFlag = '' or len(ls_FuelOxygenatesFlag) < 1 ) then
				is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Fuel Oxygenates is required."
			elseif  ls_FuelOxygenatesFlag = 'T' AND ( (ls_MTBE<>'T' or ls_Ethanol<>'T' or ls_Other<>'T') or (ld_OxygenatesPPM < 1.00 or IsNull(ld_OxygenatesPPM) ) )  then
				is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - You have indicated that the material contains fuel oxygenates. A selection of either MTBE, Ethanol or Other is required and a ppm value must be provided."
			end if 
			//Surfactants
			if ( IsNull(ls_SurfactantsFlag) or ls_SurfactantsFlag='' or len(ls_SurfactantsFlag) < 1 ) then is_msg_validate_shipping = is_msg_validate_shipping + "~nThermal Supplement - Surfactants is required."
		end if
	end if
end if

return is_msg_validate_shipping



//Comment out JORGE code COR2 JXM 05/03/2019 replace with above
///* 
//
//// COR2 - JAG
//
//Function/Event: wf_validate_profile_thermal function
//Author        :  Jorge A. Gonzalez
//Created       :  1/2019
//Purpose       : 
//
// Note(s). 
// 
// Input Parameters:None
//
// Output Parameters:None
//
// ---------------------- Revision History ------------------------------------------------
// Version  Modified by   Date        Description of change
//-------    -----------     ----------   ---------------------------------------------------------
//   00         jag           1/11/19     55611             
//   01         agc     04/24/2019    10330
//*/
//
//// Variable Declaration Section
//
//decimal{2} ldec_composition_water_percent
//decimal{2} ldec_composition_solids_percent
//decimal{2} ldec_composition_organics_oil_tph_percent
//decimal{2} ldec_total
//string ls_msg
//
//// Main Routine Starts
//
////if (idw_wcr_display_1.DataObject <> 'd_profile_thermal_supplement_form') then
////	return ls_msg
////end if
//
//if (idw_profile_thermal_supplement_form.ModifiedCount() = 0) then
//	return ls_msg
//end if
//
//
//ldec_composition_water_percent = idw_profile_thermal_supplement_form.GetItemDecimal(1, 'profilethermal_composition_water_percent')
//
//if isnull(ldec_composition_water_percent) then
//	ldec_composition_water_percent = 0.00
//end if
//
//if (ldec_composition_water_percent < 0.00) or (ldec_composition_water_percent > 100.00) then
//	if ls_msg = '' then
//		ls_msg = 'Profile Thermal Supplement Composition Water Percent has to be >= 0 and <= 100'
//	else
//		ls_msg = ls_msg + '~r~nProfile Thermal Supplement Composition Water Percent has to be >= 0 and <= 100'
//	end if
////	  messageBox('Warning' , 'composition water percent has to be >= 0 and <= 100' , exclamation!) 
////      return ls_msg
//end if
//
//ldec_composition_solids_percent = idw_profile_thermal_supplement_form.GetItemDecimal(1, 'profilethermal_composition_solids_percent')
//
//if isnull(ldec_composition_solids_percent) then
//	ldec_composition_solids_percent = 0.00
//end if
//
//if (ldec_composition_solids_percent < 0.00) or (ldec_composition_solids_percent > 100.00) then
//	if ls_msg = '' then
//		ls_msg = 'Profile Thermal Supplement Composition Solids Percent has to be >= 0 and <= 100'
//	else
//		ls_msg = ls_msg + '~r~nProfile Thermal Supplement Composition Solids Percent has to be >= 0 and <= 100'
//	end if
////	  messageBox('Warning' , 'composition solids percent has to be >= 0 and <= 100' , exclamation!) 
////      return ls_msg
//end if
//
//ldec_composition_organics_oil_tph_percent = idw_profile_thermal_supplement_form.GetItemDecimal(1, 'profilethermal_composition_organics_oil_tph_percent')
//
//if isnull(ldec_composition_organics_oil_tph_percent) then
//	ldec_composition_organics_oil_tph_percent = 0.00
//end if
//
//if (ldec_composition_organics_oil_tph_percent < 0.00) or (ldec_composition_organics_oil_tph_percent > 100.00) then
//	if ls_msg = '' then
//		ls_msg = 'Profile Thermal Supplement Composition Organics Oil TPH Percentage has to be >= 0 and <= 100'
//	else
//		ls_msg = ls_msg + '~r~nProfile Thermal Supplement Composition Organics Oil TPH Percentage has to be >= 0 and <= 100'
//	end if
////	  messageBox('Warning' , 'composition organics oil tph percentage has to be >= 0 and <= 100' , exclamation!) 
////      return ls_msg
//end if
//
//ldec_total = ldec_composition_water_percent + ldec_composition_solids_percent + ldec_composition_organics_oil_tph_percent
//
//if (ldec_total < 0 or ldec_total > 100.00) then
//	if ls_msg = '' then
//		ls_msg = 'Profile Thermal Supplement Composition Water + Composition Solids + Composition Organics Oil TPH Percentage has to be >= 0 and <= 100'
//	else
//		ls_msg = ls_msg + '~r~nProfile Thermal Supplement Composition Water + Composition Solids + Composition Organics Oil TPH Percentage has to be >= 0 and <= 100'
//	end if
////	  messageBox('Warning' , 'The composition water + composition solids + composition organics oil tph percentage has to be >= 0 and <= 100' , exclamation!) 
////      return ls_msg
//end if
//
//return ls_msg
end function

public function string wf_validate_profile_rad1 (string as_profile_status, long al_profile_id);//9870 Radioactive Waste Supplement Validation
String ls_UraniumThoriumFlag, ls_UraniumSourceMaterial, ls_Radium226Flag, ls_Radium228Flag, ls_Lead210Flag, ls_Potassium40Flag, ls_UraniumConcentration
Long ll_rad1_row, ll_find_row, ll_Radium226Concentraction, ll_Radium228Concentraction, ll_Lead210Concentraction, ll_Potassium40Concentraction
Long ll_composition_row

If as_profile_status <> 'P' then return ''

// Task 9870 Radioactive Waste Supplement Validation
If as_profile_status = 'P' and ( not IsNull(al_profile_id) and al_profile_id > 0 ) then
	
	if IsValid(idw_composition_other) then
		ll_composition_row = idw_composition_other.GetRow() 
		//DevOps:13656
//		if (ll_composition_row > 0) then
//			if (idw_composition_other.object.radioactive_waste[ll_composition_row] <> 'T') then &
//				is_msg_validate_wcr = is_msg_validate_wcr + "~RAD 1 Supplement - You must select Radioactive as ~"Yes~" to process RAD Supplement changes. Please return to Section F, Question #5."
//		end if
	end if
	
	if isValid(idw_profile_radioactive_supplement_page_1) then ll_rad1_row = idw_profile_radioactive_supplement_page_1.GetRow()
	
	if ( ll_rad1_row > 0 ) then
		//Get RAD Page 1 Data
		ls_UraniumThoriumFlag = trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_thorium_flag[ll_rad1_row])
		// MPM - 4/4/2020 - DevOps 14876 - uranium_concentration was changed from numeric to varchar(100)
		ls_UraniumConcentration = idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_concentration[ll_rad1_row]
		ls_UraniumSourceMaterial = trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_source_material[ll_rad1_row])
		ls_Radium226Flag = trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_226_flag[ll_rad1_row])
		ll_Radium226Concentraction =  idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_226_concentration[ll_rad1_row]
		ls_Radium228Flag = trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_228_flag[ll_rad1_row])
		ll_Radium228Concentraction = idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_228_concentration[ll_rad1_row]
		ls_Lead210Flag = trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_lead_210_flag[ll_rad1_row])
		ll_Lead210Concentraction = idw_profile_radioactive_supplement_page_1.Object.profileradioactive_lead_210_concentration[ll_rad1_row]
		ls_Potassium40Flag = trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_potassium_40_flag[ll_rad1_row])
		ll_Potassium40Concentraction  = idw_profile_radioactive_supplement_page_1.Object.profileradioactive_potassium_40_concentration[ll_rad1_row]
		
		//Source Material or atural, Depleted, or Refined Uranium selected
		If ( ls_UraniumThoriumFlag = 'T' and (IsNull(ls_UraniumConcentration)) &
		     OR ( ( ls_UraniumSourceMaterial ='N' or ls_UraniumSourceMaterial='D' or ls_UraniumSourceMaterial='R') and (IsNull(ls_UraniumConcentration)) ) ) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 1 Supplement - You have indicated that the material contains Source Material.  Please provide the Uranium and/or Thorium concentrations in (pCi/g)." 

		//Radium-226
		if IsValid(idw_wcr_display_2) and idw_wcr_display_2.DataObject = 'd_profile_const_form_dragon' then
// DevOps 10392
//			ll_find_row = idw_wcr_display_2.Find("const_id_2 like ~'%(Ra-226)%~' and const_id=2622", 1, idw_wcr_display_2.rowcount())
			ll_find_row = idw_wcr_display_2.Find("const_id=2622", 1, idw_wcr_display_2.rowcount())
			if ( ll_find_row = 0 ) and ls_Radium226Flag = 'T' and (IsNull(ll_Radium226Concentraction) ) then
				is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 1 Supplement - You have checked Radium-226 (Ra-226).  A concentration in pCi/g) is required." 
			end if
		end if
		//Radium-228
		if IsValid(idw_wcr_display_2) and idw_wcr_display_2.DataObject = 'd_profile_const_form_dragon' then
// DevOps 10392
//			ll_find_row = idw_wcr_display_2.Find("const_id_2 like ~'%(Ra-228)%~' and const_id=2631", 1, idw_wcr_display_2.rowcount())
			ll_find_row = idw_wcr_display_2.Find("const_id=2631", 1, idw_wcr_display_2.rowcount())
			if ( ll_find_row = 0 ) and ls_Radium228Flag = 'T' and ( IsNull(ll_Radium228Concentraction) ) then
				is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 1 Supplement - You have checked Radium-228 (Ra-228).  A concentration in pCi/g) is required." 
			end if
		end if
		//Lead-210
		if IsValid(idw_wcr_display_2) and idw_wcr_display_2.DataObject = 'd_profile_const_form_dragon' then
// DevOps 10392
//			ll_find_row = idw_wcr_display_2.Find("const_id_2 like ~'%(Pb-210)%~' and const_id=2623", 1, idw_wcr_display_2.rowcount())
			ll_find_row = idw_wcr_display_2.Find("const_id=2623", 1, idw_wcr_display_2.rowcount())
			if ( ll_find_row = 0 ) and ls_Lead210Flag = 'T' and ( IsNull(ll_Lead210Concentraction) ) then
				is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 1 Supplement - You have checked Lead-210 (Pb-210).  A concentration in pCi/g) is required." 
			end if
		end if
		//Potassium-40
		if IsValid(idw_wcr_display_2) and idw_wcr_display_2.DataObject = 'd_profile_const_form_dragon' then
// DevOps 10392
//			ll_find_row = idw_wcr_display_2.Find("const_id_2 like ~'%K-40%~' and const_id=2632", 1, idw_wcr_display_2.rowcount())
			ll_find_row = idw_wcr_display_2.Find("const_id=2632", 1, idw_wcr_display_2.rowcount())
			if ( ll_find_row = 0 ) and ls_Potassium40Flag = 'T' and ( IsNull(ll_Potassium40Concentraction) ) then
				is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 1 Supplement - You have checked Potassium-40 (K-40) .  A concentration in pCi/g) is required." 
			end if
		end if
	end if
end if

//wf_validate_profile_rad2( as_profile_status,al_profile_id )

//return is_msg_validate_wcr
return wf_validate_profile_rad2( as_profile_status,al_profile_id )
end function

public function string wf_validate_profile_rad2 (string as_profile_status, long al_profile_id);//9870 Radioactive Waste Supplement Validation page 2
Long ll_rad2_row, ll_rad1_row
String ls_AdditionalInventory_Flag, ls_ExemptByproductMaterialFlag

If as_profile_status <> 'A' then return ''

If as_profile_status = 'A' and ( not IsNull(al_profile_id) and al_profile_id > 0 ) then
	if isValid(idw_profile_radioactive_supplement_page_2) then ll_rad2_row = idw_profile_radioactive_supplement_page_2.GetRow()
	if isValid(idw_profile_radioactive_supplement_page_1) then ll_rad1_row = idw_profile_radioactive_supplement_page_1.GetRow()
	if (ll_rad2_row > 0 and ll_rad1_row > 0)  then
		//Get data
		ls_AdditionalInventory_Flag = trim(idw_profile_radioactive_supplement_page_2.Object.additional_inventory_flag[1])
		ls_ExemptByproductMaterialFlag = trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_exempt_byproduct_material_flag[ll_rad1_row])
		
		if ( ls_AdditionalInventory_Flag = 'T' ) then
				is_msg_validate_shipping = is_msg_validate_shipping + "~nRAD 2 Supplement - You have indicated that inventory information is attached in lieu of listing the inventory below.  Please ensure that the inventory sheet is attached for review." 
			end if
		end if
		
		if ( ll_rad2_row > 0 and ls_ExemptByproductMaterialFlag <> 'T' ) then
		    is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 2 Supplement - You must select Exempt Byproduct Material from the RAD Supplement page 1. Please return to RAD Supplement (1)." //10687 COR2 JXM 05.09.2019 - not changed
		end if
end if

//wf_validate_profile_rad3( as_profile_status, al_profile_id )
//return is_msg_validate_shipping

return wf_validate_profile_rad3( as_profile_status, al_profile_id )
end function

public function string wf_validate_profile_rad3 (string as_profile_status, long al_profile_id);//9870 Radioactive Waste Supplement Validation page 3
Long ll_rad1_row, ll_rad2_row, ll_rad3_row, ll_appr_row, ll_company_id
String ls_GeneratedParticleAccelerator_Flag, ls_ApprovedForDispos, ls_ApprovedNRC_Flag, ls_ApprovedForAltern, ls_NRCExemptedFlag, ls_ReleasedFromRadio, ls_DODnonLicensedDisposalFlag
String ls_WasteType, ls_USETblc1, ls_USETblc2, ls_USETblc3, ls_USETblc4a, ls_USETblc4b, ls_USETblc4c

If as_profile_status <> 'A' then return ''

If as_profile_status = 'A' and ( not IsNull(al_profile_id) and al_profile_id > 0 ) then
	if isValid(idw_profile_radioactive_supplement_page_3) then ll_rad3_row = idw_profile_radioactive_supplement_page_3.GetRow()
	if isValid(idw_profile_radioactive_supplement_page_2) then ll_rad2_row = idw_profile_radioactive_supplement_page_2.GetRow()
	if isValid(idw_profile_radioactive_supplement_page_1) then ll_rad1_row = idw_profile_radioactive_supplement_page_1.GetRow()
	
	if (ll_rad3_row > 0 and ll_rad2_row > 0 and ll_rad1_row > 0)  then
		//Get data
		ls_GeneratedParticleAccelerator_Flag = trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_generated_in_particle_accelerator_flag[ll_rad3_row])
		ls_ApprovedForDispos = trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_approved_for_dispos_1[ll_rad3_row])
		ls_ApprovedNRC_Flag = trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_approved_by_nrc_fla_1[ll_rad3_row])
		ls_ApprovedForAltern =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_approved_for_altern_1[ll_rad3_row])
		ls_NRCExemptedFlag = trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_nrc_exempted_flag_1[ll_rad3_row])
		ls_ReleasedFromRadio =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_released_from_radio_1[ll_rad3_row])
		ls_DODnonLicensedDisposalFlag = trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_dod_non_licensed_disposal_flag[ll_rad3_row])
		ls_USETblc1 =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_usei_wac_table_c1_flag[ll_rad3_row])
		ls_USETblc2 =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_usei_wac_table_c2_flag[ll_rad3_row])
		ls_USETblc3 =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_usei_wac_table_c3_flag[ll_rad3_row])
		ls_USETblc4a =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_usei_wac_table_c4a_flag[ll_rad3_row])
		ls_USETblc4b =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_usei_wac_table_c4b_flag[ll_rad3_row])
		ls_USETblc4c =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_usei_wac_table_c4c_flag[ll_rad3_row])
		ls_WasteType =  trim(idw_profile_radioactive_supplement_page_3.Object.profileradioactive_waste_type[ll_rad3_row])
		
		//A.1
		if (IsNull(ls_GeneratedParticleAccelerator_Flag) or ls_GeneratedParticleAccelerator_Flag='' or len(ls_GeneratedParticleAccelerator_Flag)<1) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - Generated Particle Accelerator is required." 

		//B.1
		if ( IsNull(ls_ApprovedForDispos) or ls_ApprovedForDispos='' or len(ls_ApprovedForDispos)<1) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - Approved For Disposal is required." 

		//B.2
		if ( IsNull(ls_ApprovedNRC_Flag) or ls_ApprovedNRC_Flag='' or len(ls_ApprovedNRC_Flag)<1) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - Approved NRC is required." 

		//B.3
		if ( IsNull(ls_ApprovedForAltern) or ls_ApprovedForAltern='' or len(ls_ApprovedForAltern)<1) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - Approved Alternative disposal is required." 

		//B.4
		if (IsNull(ls_NRCExemptedFlag) or ls_NRCExemptedFlag='' or len(ls_NRCExemptedFlag)<1) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - NCR Excempted is required." 

		//B.5
		if (IsNull(ls_ReleasedFromRadio) or ls_ReleasedFromRadio='' or len(ls_ReleasedFromRadio)<1) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - Released From Radiological Control is required."  //10687 COR2 JXM 05.09.2019

		//B.6
		if ( IsNull(ls_DODnonLicensedDisposalFlag) or ls_DODnonLicensedDisposalFlag='' or len(ls_DODnonLicensedDisposalFlag)<1) then &
			is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - DOD Non-Licensed Disposal is required." //10687 COR2 JXM 05.09.2019
		
		//USEcology Use Only...
		if isValid(idw_approval) then
			ll_appr_row = idw_approval.GetRow()
			if ( ll_appr_row ) > 0 then
				ll_company_id = idw_approval.Object.company_id[ll_appr_row]
			end if
			//Process further for USEcology Company ID #44
			if ll_company_id = 44 then
				if ( Not (ls_USETblc1='T' or ls_USETblc2='T' or ls_USETblc3='T' or ls_USETblc4a='T' or ls_USETblc4b='T' or ls_USETblc4c='T' ) or &
				   Not (ls_WasteType = 'F' or ls_WasteType = 'N' or ls_WasteType = 'E' ) ) then &
					is_msg_validate_wcr = is_msg_validate_wcr + "~nRAD 3 Supplement - Under Section ~"For US Ecology Idaho use only:~" requires selecting one or more ~"USEI WAC Tables~" AND one ~"Waste Type~."
			end if
		end if
	
	end if
end if

return is_msg_validate_shipping
end function

public function string wf_get_form_copy_source ();//AGC 05/07/2019
string ls_form_copy_source
string	ls_where, ls_class
str_pick lstr_pick

// Setup quick select popup
lstr_pick.s_window_title			= "Form Copy Source Select"
lstr_pick.i_window_width			= 1500
lstr_pick.b_multipick				= FALSE
lstr_pick.i_tab_count				= 1
lstr_pick.i_return_column_count	= 1
						
lstr_pick.s_tab_title[1]			= "Form Copy Source"
lstr_pick.i_tabpage_type[1]		= 1
lstr_pick.s_dataobject[1]			= "d_quick_select_formcopysource"
lstr_pick.s_where[1]					= ls_where
lstr_pick.s_retrieve_by[1]			= ""
lstr_pick.s_new_reference[1]		= ""

OpenWithParm(w_popup_quick_select, lstr_pick)
						
lstr_pick = Message.PowerObjectParm
IF isvalid(lstr_pick) THEN
	ls_class = ClassName(lstr_pick)
	IF Lower(ls_class) = "str_pick" THEN
		IF UpperBound(lstr_pick.return1) > 0 THEN
			ls_form_copy_source = lstr_pick.return1[1]
		END IF
	END IF
END IF

return ls_form_copy_source
end function

public function integer wf_get_ssrs_report (string as_form_name, long al_profile_id);// ************************************************************************
//  Change History
//
//    Date		 By   Description
// -----------	----  --------------------------------------------------------------------------------------------------
// 20191113 jcb  #12448 Add a button to get PDF for whichever tabpage "form" user is looking at,
//                                 call f_get_ssrs_report with form and profile-id as arguments, 
//                                 that function in turn will display webpage with matching PDF 
// 20200121 gde  #13658 Add New Profile (Profile Tab) - Add New Profile (Profile Tab); Modified empty string
//								Additional Properties; Regulatory
// 20200403 agc #14994 trim as_form_name and added rad (1), rad (2) and rad (3) to case statement
// 20200519 jcb  #15382 add form_type APPR_IMPORT for IMPORT (instead of empty string)
// ************************************************************************


long   ll_rc
string ls_form_type, ls_form_name

//DevOps 14994
ls_form_name = trim(as_form_name)

CHOOSE CASE ls_form_name
	   			
    CASE 'Generator/Customer' 		     
		ls_form_type = 'APPR_PROFILE'	    	
    CASE 'Waste/Material Stream' 	     
	//	ls_form_type = 'APPR_WASTE' 	// DevOps 16694 - FHC 7/8/2020
		ls_form_type = 'APPR_PROFILE'	// DevOps 16694 - FHC 7/8/2020
    CASE 'Shipping/Packaging' 		     
		ls_form_type = 'APPR_PROFILE'  	
    CASE 'Physical Properties' 		     
		ls_form_type = 'APPR_PROFILE'
    CASE 'Characterization/Chemical Composition'      
		ls_form_type = 'APPR_COMPOSITION'    	
    CASE 'Additional Properties' 	     
		ls_form_type = 'APPR_PROFILE'    	
    CASE 'Regulatory'         		     
		ls_form_type = 'APPR_PROFILE'
    CASE 'Certification' 			     
		ls_form_type = 'APPR_PROFILE'
    CASE 'Benzene Supplement' 		     
		ls_form_type = 'APPR_BENZENE'
    CASE 'Cylinder Supplement' 		     
		ls_form_type = 'APPR_CYLINDER'
    CASE 'Debris Certification' 	     
		ls_form_type = 'APPR_DEBRIS'	
    CASE 'Illinois Supplement' 		     
		ls_form_type = 'APPR_ILLINOIS'
    CASE 'Import Supplement' 		     
		// 20200519 jcb #15382 repl ls_form_type = ''
		ls_form_type = 'APPR_WASTE'            // 20200519 jcb #15382 		
   // CASE 'LDR Forms' 		DevOps 19038 info_gde 02/18/2021; Profile - Supplemental Form Label Change
	CASE 'LDR Form' 	
		ls_form_type = 'APPR_LDR'
    CASE 'PCB Supplement' 		        
		ls_form_type = 'APPR_PCB'   	
    CASE 'RAD Supplement', 'RAD Supplement (1)', 'RAD Supplement (2)', 'RAD Supplement (3)' //DevOps 14994
		ls_form_type = 'APPR_RAD' 	
    CASE 'Thermal Supplement' 		 
		ls_form_type = 'APPR_THERMAL'    	
    CASE 'Used Oil Supplement' 		  
		ls_form_type = 'APPR_OIL'
	CASE 'Pharmaceutical Supplement' 		  //DevOps:17845
		ls_form_type = 'APPR_PHARMA'
	CASE 'Generator Knowledge Supplement (Winnie)' 		  //DevOps:19924
		ls_form_type = 'APPR_GEN_KNOWLEDGE'
	 // Dipankar - 8/31/2023 - Added for DevOps 69393
	CASE 'Greensboro Facility Supplement' // Dipankar - 11/8/2023 - Modified for #73503/ #73666		 
		ls_form_type = 'APPR_FUELS_BLENDING'
    CASE ELSE
END CHOOSE


IF ls_form_type <> '' THEN
	ll_rc = f_get_ssrs_report(ls_form_type,'',0,0,0,0,al_profile_id)
ELSE 
	messagebox('No form/supplement PDF for...', as_form_name)
END IF


return ll_rc

end function

public function boolean wf_opened_from_wcr ();IF ib_opened_from_wcr THEN
	RETURN TRUE
ELSE
	RETURN FALSE
END IF
end function

public subroutine wf_wcr_section_g3_modify (ref datawindow adw, string as_column_name, long al_row, string as_data);string					ls_waste_water_flag, ls_meets_alt_soil_treatment_stds, ls_more_than_50_pct_debris, ls_debris_separated, ls_debris_not_mixed_or_diluted
string					ls_waste_meets_ldr_standards, ls_g3_none_of_the_above, ls_null

// MPM - 3/26/2020 - DevOps 14241/14841 - The answer to "Does the waste meet LDR treatment standards?" is now being saved to Profile.waste_meets_ldr_standards
// instead of Profile.exceed_ldr_standards, so I modified this function to reflect that.
// MPM - 4/3/2020 - DevOps 15029 - Logic for new Profile.section_G3_none_of_the_above_flag column.

ls_waste_water_flag =  adw.Object.waste_water_flag[al_row] 
ls_meets_alt_soil_treatment_stds = adw.Object.meets_alt_soil_treatment_stds[al_row] 
ls_more_than_50_pct_debris = adw.Object.more_than_50_pct_debris[al_row] 
ls_debris_separated = adw.Object.debris_separated[al_row] 
ls_debris_not_mixed_or_diluted = adw.Object.debris_not_mixed_or_diluted[al_row]
ls_waste_meets_ldr_standards = adw.Object.waste_meets_ldr_standards[al_row] 
ls_g3_none_of_the_above = adw.Object.section_G3_none_of_the_above_flag[al_row] 

CHOOSE CASE Lower(as_column_name)
	CASE  'section_g3_none_of_the_above_flag'
		// If G3 - None of the above was checked, then we need to reset all other G3 answers
		IF as_data = 'T' THEN
			IF ls_waste_water_flag = 'W' OR ls_waste_water_flag = 'N' THEN
				adw.Object.waste_water_flag[al_row] = 'U'
				wf_wcr_profile_map_sync (adw, "waste_water_flag", al_row, 'U')
			END IF
			IF ls_meets_alt_soil_treatment_stds = 'T' THEN
				adw.Object.meets_alt_soil_treatment_stds[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "meets_alt_soil_treatment_stds", al_row, 'F')
			END IF
			IF ls_more_than_50_pct_debris = 'T' THEN
				adw.Object.more_than_50_pct_debris[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "more_than_50_pct_debris", al_row, 'F')
			END IF
			IF ls_debris_separated = 'T' THEN
				adw.Object.debris_separated[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "debris_separated", al_row, 'F')
			END IF
			IF ls_debris_not_mixed_or_diluted = 'T' THEN
				adw.Object.debris_not_mixed_or_diluted[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "debris_not_mixed_or_diluted", al_row, 'F')
			END IF
			// MPM - 3/17/2020 - DevOps 14422			
			IF ls_waste_meets_ldr_standards = 'T' THEN 
				adw.Object.waste_meets_ldr_standards[al_row] =  'F'
				wf_wcr_profile_map_sync (adw, "waste_meets_ldr_standards", al_row,  'F')
			END IF
		END IF
	CASE 'waste_water_flag'
		IF (as_data = 'W' OR as_data = 'N') AND ls_g3_none_of_the_above = 'T' THEN
			adw.Object.section_G3_none_of_the_above_flag[al_row] = 'F'
			wf_wcr_profile_map_sync (adw, "section_G3_none_of_the_above_flag", al_row,  'F')
		END IF
	CASE 'meets_alt_soil_treatment_stds'
		IF as_data = 'T' THEN
			IF ls_more_than_50_pct_debris = 'T' THEN
				// The 'meets_alt_soil_treatment_stds' and 'more_than_50_pct_debris' checkboxes can't be checked at the same 
				// time, so if one is checked, uncheck the other one
				adw.Object.more_than_50_pct_debris[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "more_than_50_pct_debris", al_row, 'F')
				// Uncheck the "I certify..." checkboxes, too, if necessary
				IF ls_debris_separated = 'T' THEN
					adw.Object.debris_separated[al_row] = 'F'
					wf_wcr_profile_map_sync (adw, "debris_separated", al_row, 'F')
				END IF
				IF ls_debris_not_mixed_or_diluted = 'T' THEN
					adw.Object.debris_not_mixed_or_diluted[al_row] = 'F'
					wf_wcr_profile_map_sync (adw, "debris_not_mixed_or_diluted", al_row, 'F')
				END IF
			END IF
			IF ls_g3_none_of_the_above = 'T' THEN
				adw.Object.section_G3_none_of_the_above_flag[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "section_G3_none_of_the_above_flag", al_row,  'F')
			END IF
		END IF
	CASE 'more_than_50_pct_debris'
		IF as_data = 'T' THEN
			IF ls_meets_alt_soil_treatment_stds = 'T' THEN
				// The 'meets_alt_soil_treatment_stds' and 'more_than_50_pct_debris' checkboxes can't be checked at the same 
				// time, so if one is checked, uncheck the other one
				adw.Object.meets_alt_soil_treatment_stds[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "meets_alt_soil_treatment_stds", al_row, 'F')
			END IF
			IF ls_g3_none_of_the_above = 'T' THEN
				adw.Object.section_G3_none_of_the_above_flag[al_row] = 'F'
				wf_wcr_profile_map_sync (adw, "section_G3_none_of_the_above_flag", al_row,  'F')
			END IF
		END IF
	CASE 'debris_separated', 'debris_not_mixed_or_diluted'
		IF as_data = 'T' AND ls_g3_none_of_the_above = 'T' THEN
			adw.Object.section_G3_none_of_the_above_flag[al_row] = 'F'
			wf_wcr_profile_map_sync (adw, "section_G3_none_of_the_above_flag", al_row,  'F')
		END IF
	CASE 'waste_meets_ldr_standards'
		// MPM - 3/17/2020 - DevOps 14422		
		IF as_data = 'T' AND ls_g3_none_of_the_above = 'T' THEN
			adw.Object.section_G3_none_of_the_above_flag[al_row] = 'F'
			wf_wcr_profile_map_sync (adw, "section_G3_none_of_the_above_flag", al_row,  'F')
		END IF
END CHOOSE

end subroutine

public subroutine wf_wcr_illinois_disposal (long ar_form_id, long ar_rev_id, long ar_profile_id);//DevOps #14028 info_gde 03/27/2020; EQAI - Maintenance - COR  - Form Management - New Profile - Accept
long ll_form_sectionstatus_count,ll_illinois_form_id,ll_illinois_supplement_rowcount,ll_illinoissupplement_row,ll_profile_id
string ls_none_apply_flag,ls_incecticides_flag,ls_pesticides_flag,ls_herbicides_flag,ls_household_waste_flag,ls_carcinogen_flag,ls_signing_company,ls_signing_title,ls_signing_name
string ls_other_flag,ls_other_specify,ls_sulfide_10_250_flag,ls_signature,ls_universal_waste_flag,ls_characteristic_sludge_flag,ls_virgin_unused_product_flag
string ls_spent_material_flag,ls_cyanide_plating_on_site_flag,ls_com_product_flag,ls_by_product_flag,ls_rx_lime_flammable_gas_flag,ls_phenol_gt_1000_flag
string ls_generator_certification_flag,ls_industrial_process_waste_IL_flag,ls_pollution_control_waste_IL_flag,ls_signature_2,ls_generator_state_id,ls_d004_above_PQL,ls_d005_above_PQL,ls_d006_above_PQL,ls_d007_above_PQL,ls_d008_above_PQL,ls_d009_above_PQL
string ls_d010_above_PQL,ls_d011_above_PQL,ls_d012_above_PQL,ls_d013_above_PQL,ls_d014_above_PQL,ls_d015_above_PQL,ls_d016_above_PQL
string ls_d017_above_PQL,ls_d018_above_PQL,ls_d019_above_PQL,ls_d020_above_PQL,ls_d021_above_PQL,ls_d022_above_PQL,ls_d023_above_PQL
string ls_d024_above_PQL,ls_d025_above_PQL,ls_d026_above_PQL,ls_d027_above_PQL,ls_d028_above_PQL,ls_d029_above_PQL,ls_d030_above_PQL,ls_d031_above_PQL
string ls_d032_above_PQL,ls_d033_above_PQL,ls_d034_above_PQL,ls_d035_above_PQL,ls_d036_above_PQL,ls_d037_above_PQL,ls_d038_above_PQL,ls_d039_above_PQL
string ls_d040_above_PQL,ls_d041_above_PQL,ls_d042_above_PQL,ls_d043_above_PQL
datetime ld_signing_date
string  ls_certify_flag //devops:15429

ll_profile_id = ar_profile_id

SELECT signing_name,signing_date,signing_title,signing_company
INTO :ls_signing_name,:ld_signing_date,:ls_signing_title,:ls_signing_company
	FROM FormWCR
LEFT OUTER JOIN FormWCRTemplate T1 ON T1.template_form_id = FormWCR.form_id
LEFT OUTER JOIN FormWCRTemplate T2 ON T2.template_form_id = FormWCR.template_form_id 
LEFT OUTER JOIN Generator G ON G.generator_id = FormWCR.generator_id AND G.epa_id = FormWCR.epa_id 
WHERE form_id = :ar_form_id
AND 	revision_id = :ar_rev_id
USING itr_forms;

 // Illinois Disposal 
 SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :ar_form_id
AND revision_id = :ar_rev_id
AND  section = 'ID'
AND isactive = 1 
USING itr_forms;

IF ll_form_sectionstatus_count > 0 THEN
 SELECT	form_id,
 			none_apply_flag,
			incecticides_flag, 
			pesticides_flag, 
			herbicides_flag, 
			household_waste_flag, 
			carcinogen_flag, 
			other_flag, 
			other_specify, 
			sulfide_10_250_flag, 
			'   ' as signature,
			universal_waste_flag, 
			characteristic_sludge_flag, 
			virgin_unused_product_flag, 
			spent_material_flag, 
			cyanide_plating_on_site_flag, 
			substitute_commercial_product_flag, 
			by_product_flag, 
			rx_lime_flammable_gas_flag, 
			phenol_gt_1000_flag,
            '   ' as signature_2,
			generator_state_id,
			d004_above_PQL,
			d005_above_PQL,
			d006_above_PQL,
			d007_above_PQL,
			d008_above_PQL,
			d009_above_PQL,
			d010_above_PQL,
			d011_above_PQL,
			d012_above_PQL,
			d013_above_PQL,
			d014_above_PQL,
			d015_above_PQL,
			d016_above_PQL,
			d017_above_PQL,
			d018_above_PQL,
			d019_above_PQL,
			d020_above_PQL,
			d021_above_PQL,
			d022_above_PQL,
			d023_above_PQL,
			d024_above_PQL,
			d025_above_PQL,
			d026_above_PQL,
			d027_above_PQL,
			d028_above_PQL,
			d029_above_PQL,
			d030_above_PQL,
			d031_above_PQL,
			d032_above_PQL,
			d033_above_PQL,
			d034_above_PQL,
			d035_above_PQL,
			d036_above_PQL,
			d037_above_PQL,
			d038_above_PQL,
			d039_above_PQL,
			d040_above_PQL,
			d041_above_PQL,
			d042_above_PQL,
			d043_above_PQL,
			pollution_control_waste_IL_flag,
			industrial_process_waste_IL_flag,
			generator_certification_flag,
			certify_flag
INTO
	:ll_illinois_form_id,
	 :ls_none_apply_flag,
     :ls_incecticides_flag,
	:ls_pesticides_flag,
	:ls_herbicides_flag,
	:ls_household_waste_flag,
	:ls_carcinogen_flag,
	:ls_other_flag,
	:ls_other_specify,
    :ls_sulfide_10_250_flag,
	  :ls_signature,
      :ls_universal_waste_flag,
	  :ls_characteristic_sludge_flag,
	  :ls_virgin_unused_product_flag,
	  :ls_spent_material_flag ,
	  :ls_cyanide_plating_on_site_flag,
	  :ls_com_product_flag,
	  :ls_by_product_flag,
	  :ls_rx_lime_flammable_gas_flag,
			:ls_phenol_gt_1000_flag,
            :ls_signature_2,
			:ls_generator_state_id,
			:ls_d004_above_PQL,
			:ls_d005_above_PQL,
			:ls_d006_above_PQL,
			:ls_d007_above_PQL,
			:ls_d008_above_PQL,
			:ls_d009_above_PQL,
			:ls_d010_above_PQL,
			:ls_d011_above_PQL,
			:ls_d012_above_PQL,
			:ls_d013_above_PQL,
			:ls_d014_above_PQL,
			:ls_d015_above_PQL,
			:ls_d016_above_PQL,
			:ls_d017_above_PQL,
		:ls_d018_above_PQL,
			:ls_d019_above_PQL,
			:ls_d020_above_PQL,
			:ls_d021_above_PQL,
			:ls_d022_above_PQL,
			:ls_d023_above_PQL,
			:ls_d024_above_PQL,
			:ls_d025_above_PQL,
			:ls_d026_above_PQL,
			:ls_d027_above_PQL,
			:ls_d028_above_PQL,
			:ls_d029_above_PQL,
			:ls_d030_above_PQL,
			:ls_d031_above_PQL,
			:ls_d032_above_PQL,
			:ls_d033_above_PQL,
			:ls_d034_above_PQL,
			:ls_d035_above_PQL,
			:ls_d036_above_PQL,
			:ls_d037_above_PQL,
			:ls_d038_above_PQL,
			:ls_d039_above_PQL,
			:ls_d040_above_PQL,
			:ls_d041_above_PQL,
			:ls_d042_above_PQL,
			:ls_d043_above_PQL,
			:ls_pollution_control_waste_IL_flag,
			:ls_industrial_process_waste_IL_flag,
			:ls_generator_certification_flag,
			:ls_certify_flag
FROM FormIllinoisDisposal 
	WHERE FormIllinoisDisposal.wcr_id = :ar_form_id
   AND 	FormIllinoisDisposal.wcr_rev_id = :ar_rev_id
  USING itr_forms;
   
ll_illinois_supplement_rowcount =idw_profile_illinois_disposal_supplemen.RowCount()

IF ll_illinois_form_id > 0 THEN 
	IF ll_illinois_supplement_rowcount <= 0 THEN
		idw_profile_illinois_disposal_supplemen.InsertRow(0)
	END IF
END IF

 ll_illinoissupplement_row = idw_profile_illinois_disposal_supplemen.GetRow()
 IF ll_illinoissupplement_row >0 THEN	 
     idw_profile_illinois_disposal_supplemen.object.profile_id[ll_illinoissupplement_row] = ll_profile_id
     idw_profile_illinois_disposal_supplemen.object.none_apply_flag[ll_illinoissupplement_row] = ls_none_apply_flag
     idw_profile_illinois_disposal_supplemen.object.incecticides_flag[ll_illinoissupplement_row] = ls_incecticides_flag 
      idw_profile_illinois_disposal_supplemen.object.pesticides_flag[ll_illinoissupplement_row] = ls_pesticides_flag  
	 idw_profile_illinois_disposal_supplemen.object.carcinogen_flag[ll_illinoissupplement_row] = ls_carcinogen_flag  
	 idw_profile_illinois_disposal_supplemen.object.household_waste_flag[ll_illinoissupplement_row] = ls_household_waste_flag  
	 idw_profile_illinois_disposal_supplemen.object.herbicides_flag[ll_illinoissupplement_row] = ls_herbicides_flag  
	 idw_profile_illinois_disposal_supplemen.object.other_specify[ll_illinoissupplement_row] = ls_other_specify  
	 idw_profile_illinois_disposal_supplemen.object.other_flag[ll_illinoissupplement_row] = ls_other_flag  
	 idw_profile_illinois_disposal_supplemen.object.sulfide_10_250_flag[ll_illinoissupplement_row] = ls_sulfide_10_250_flag  
	//  idw_profile_illinois_disposal_supplemen.object.signature_2[ll_illinoissupplement_row] = ls_signature 
	 idw_profile_illinois_disposal_supplemen.object.universal_waste_flag[ll_illinoissupplement_row] = ls_universal_waste_flag  
	 idw_profile_illinois_disposal_supplemen.object.characteristic_sludge_flag[ll_illinoissupplement_row] = ls_characteristic_sludge_flag  
	 idw_profile_illinois_disposal_supplemen.object.virgin_unused_product_flag[ll_illinoissupplement_row] = ls_virgin_unused_product_flag  
	 idw_profile_illinois_disposal_supplemen.object.spent_material_flag[ll_illinoissupplement_row] = ls_spent_material_flag  
	 idw_profile_illinois_disposal_supplemen.object.cyanide_plating_on_site_flag[ll_illinoissupplement_row] = ls_cyanide_plating_on_site_flag  
	 idw_profile_illinois_disposal_supplemen.object.substitute_commercial_product_flag[ll_illinoissupplement_row] = ls_com_product_flag
	 idw_profile_illinois_disposal_supplemen.object.by_product_flag[ll_illinoissupplement_row] = ls_by_product_flag
	 idw_profile_illinois_disposal_supplemen.object.rx_lime_flammable_gas_flag[ll_illinoissupplement_row] = ls_rx_lime_flammable_gas_flag
	 idw_profile_illinois_disposal_supplemen.object.phenol_gt_1000_flag[ll_illinoissupplement_row] = ls_phenol_gt_1000_flag
     //idw_profile_illinois_disposal_supplemen.object.signature_2[ll_illinoissupplement_row] =  ls_signature_2
	idw_profile_illinois_disposal_supplemen.object.generator_state_id[ll_illinoissupplement_row] = ls_generator_state_id
	idw_profile_illinois_disposal_supplemen.object.d004_above_PQL[ll_illinoissupplement_row] = ls_d004_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d005_above_PQL[ll_illinoissupplement_row] = ls_d005_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d006_above_PQL[ll_illinoissupplement_row] = ls_d006_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d007_above_PQL[ll_illinoissupplement_row] = ls_d007_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d008_above_PQL[ll_illinoissupplement_row] = ls_d008_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d009_above_PQL[ll_illinoissupplement_row] = ls_d009_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d010_above_PQL[ll_illinoissupplement_row] = ls_d010_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d011_above_PQL[ll_illinoissupplement_row] = ls_d011_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d012_above_PQL[ll_illinoissupplement_row] = ls_d012_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d013_above_PQL[ll_illinoissupplement_row] = ls_d013_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d014_above_PQL[ll_illinoissupplement_row] = ls_d014_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d015_above_PQL[ll_illinoissupplement_row] = ls_d015_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d016_above_PQL[ll_illinoissupplement_row] = ls_d016_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d017_above_PQL[ll_illinoissupplement_row] = ls_d017_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d018_above_PQL[ll_illinoissupplement_row] = ls_d018_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d019_above_PQL[ll_illinoissupplement_row] = ls_d019_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d020_above_PQL[ll_illinoissupplement_row] = ls_d020_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d021_above_PQL[ll_illinoissupplement_row] = ls_d021_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d022_above_PQL[ll_illinoissupplement_row] = ls_d022_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d023_above_PQL[ll_illinoissupplement_row] = ls_d023_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d024_above_PQL[ll_illinoissupplement_row] = ls_d024_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d025_above_PQL[ll_illinoissupplement_row] = ls_d025_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d026_above_PQL[ll_illinoissupplement_row] = ls_d026_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d027_above_PQL[ll_illinoissupplement_row] = ls_d027_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d028_above_PQL[ll_illinoissupplement_row] = ls_d028_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d029_above_PQL[ll_illinoissupplement_row] = ls_d029_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d030_above_PQL[ll_illinoissupplement_row] = ls_d030_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d031_above_PQL[ll_illinoissupplement_row] = ls_d031_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d032_above_PQL[ll_illinoissupplement_row] = ls_d032_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d033_above_PQL[ll_illinoissupplement_row] = ls_d033_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d034_above_PQL[ll_illinoissupplement_row] = ls_d034_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d035_above_PQL[ll_illinoissupplement_row] = ls_d035_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d036_above_PQL[ll_illinoissupplement_row] = ls_d036_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d037_above_PQL[ll_illinoissupplement_row] = ls_d037_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d038_above_PQL[ll_illinoissupplement_row] = ls_d038_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d039_above_PQL[ll_illinoissupplement_row] = ls_d039_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d040_above_PQL[ll_illinoissupplement_row] = ls_d040_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d041_above_PQL[ll_illinoissupplement_row] = ls_d041_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d042_above_PQL[ll_illinoissupplement_row] = ls_d042_above_PQL
	idw_profile_illinois_disposal_supplemen.object.d043_above_PQL[ll_illinoissupplement_row] = ls_d043_above_PQL
	idw_profile_illinois_disposal_supplemen.object.wcr_sign_name[ll_illinoissupplement_row] = ls_signing_name  
	idw_profile_illinois_disposal_supplemen.object.wcr_sign_title[ll_illinoissupplement_row] = ls_signing_title 
	idw_profile_illinois_disposal_supplemen.object.wcr_sign_date[ll_illinoissupplement_row] = ld_signing_date 
	idw_profile_illinois_disposal_supplemen.object.wcr_sign_company[ll_illinoissupplement_row] = ls_signing_company 
	idw_profile_illinois_disposal_supplemen.object.certify_flag[ll_illinoissupplement_row] = ls_certify_flag
//DevOps #14028 info_gde 03/27/2020 - start
    idw_profile_illinois_disposal_supplemen.object.pollution_control_waste_il_flag[ll_illinoissupplement_row] = ls_pollution_control_waste_IL_flag
    idw_profile_illinois_disposal_supplemen.object.industrial_process_waste_il_flag[ll_illinoissupplement_row] = ls_industrial_process_waste_IL_flag
    idw_profile_illinois_disposal_supplemen.object.generator_certification_flag[ll_illinoissupplement_row] = ls_generator_certification_flag
//DevOps #14028 info_gde 03/27/2020 - end
END IF 
END IF 
end subroutine

public subroutine wf_item_changed_profile_thermal (string as_data, integer ai_row, datawindow as_data_object);long ll_hdr_row

ll_hdr_row = idw_header.GetRow()
//COR2 JXM 04/01/2019 Blank out Originating Generator Name and EPA ID when 'Same As Above' checkbox is unchecked
if (as_data = 'Y') then
	as_data_object.SetItem(ai_row, 'profilethermal_originating_generator_name',idw_header.Object.generator_name[ll_hdr_row] )
	as_data_object.SetItem(ai_row, 'profilethermal_originating_generator_epa_id',idw_header.Object.generator_epa_id[ll_hdr_row] )
else
	as_data_object.SetItem(ai_row, 'profilethermal_originating_generator_name','' )
	as_data_object.SetItem(ai_row, 'profilethermal_originating_generator_epa_id','')
end if
end subroutine

public subroutine wf_profile_waste_import_supplement (string as_data, long al_row, datawindow adw);String ls_SetNull
SetNull(ls_SetNull)
		
	if ( as_data = 'T' ) then 
		adw.SetItem(al_row, 'foreign_exporter_name', adw.getitemstring(al_row, 'importing_generator_name', primary!, false ) )
		adw.SetItem(al_row, 'foreign_exporter_address', adw.getitemstring(al_row, 'importing_generator_address', primary!, false) )
		//COR2 JXM 04/01/2019 Add Foreign Exporter "Technical Contact" Information to Section
		adw.SetItem(al_row, 'foreign_exporter_contact_name', adw.getitemstring(al_row, 'tech_contact_name', primary!, false) )
		adw.SetItem(al_row, 'foreign_exporter_phone', adw.getitemstring(al_row, 'contact_tech_contact_phone', primary!, false) )
		adw.SetItem(al_row, 'foreign_exporter_email', adw.getitemstring(al_row, 'contact_tech_cont_email', primary!, false) )
		//DevOps:29698
		adw.SetItem(al_row, 'foreign_exporter_city', adw.getitemstring(al_row, 'importing_generator_city', primary!, false) )
		adw.SetItem(al_row, 'foreign_exporter_province_territory', adw.getitemstring(al_row, 'importing_generator_province_territory', primary!, false) )
		adw.SetItem(al_row, 'foreign_exporter_mail_code', adw.getitemstring(al_row, 'importing_generator_mail_code', primary!, false) )
		adw.SetItem(al_row, 'foreign_exporter_country', adw.getitemstring(al_row, 'country_name', primary!, false) )
	else //COR2 JXM 04/01/2019 Set fields (Foreign Exporter "Technical Contact" ) to null if unchecked
		adw.SetItem(al_row, 'foreign_exporter_name', ls_SetNull )
		adw.SetItem(al_row, 'foreign_exporter_address', ls_SetNull )
		adw.SetItem(al_row, 'foreign_exporter_contact_name', ls_SetNull )
		adw.SetItem(al_row, 'foreign_exporter_phone', ls_SetNull )
		adw.SetItem(al_row, 'foreign_exporter_email', ls_SetNull )
		//DevOps:29698
		adw.SetItem(al_row, 'foreign_exporter_city', ls_SetNull )
		adw.SetItem(al_row, 'foreign_exporter_province_territory', ls_SetNull )
		adw.SetItem(al_row, 'foreign_exporter_mail_code', ls_SetNull )
		adw.SetItem(al_row, 'foreign_exporter_country', ls_SetNull )
	end if
end subroutine

public subroutine wf_item_changed_profile_illinois_disposa (long al_row, datawindow adw);adw.SetItem( al_row, 'incecticides_flag','F' ) 
adw.SetItem( al_row, 'pesticides_flag', 'F' )
adw.SetItem( al_row, 'herbicides_flag', 'F' )
adw.SetItem( al_row, 'household_waste_flag', 'F' )
adw.SetItem( al_row, 'carcinogen_flag', 'F' ) 
adw.SetItem( al_row, 'other_flag', 'F' ) 
adw.SetItem( al_row, 'other_specify', '' )
end subroutine

public subroutine wf_waste_contains_spec_hand_none (datawindow adw, long al_row);decimal	ld_null
string		ls_null

// MPM - 4/10/2020 - DevOps 15016 - Changes to Composition tab checkboxes
SetNull(ld_null)
SetNull(ls_null)

adw.SetItem(al_row,"biohazard","F")
adw.SetItem(al_row,"ammonia_flag","F")
adw.SetItem(al_row,"asbestos_flag","F")
adw.SetItem(al_row,"asbestos_friable_flag","U")
adw.SetItem(al_row,"shock_sensitive_waste","F")
adw.SetItem(al_row,"metal_fines","F")
adw.SetItem(al_row,"pyrophoric_waste","F")
adw.SetItem(al_row,"temp_ctrl_org_peroxide","F")
adw.SetItem(al_row,"react_cyanide","F")
adw.SetItem(al_row,"react_cyanide_ppm",ld_null)
adw.SetItem(al_row,"radioactive_waste","F")
adw.SetItem(al_row,"oxidizer","F")
adw.SetItem(al_row,"used_oil","F")
adw.SetItem(al_row,"dioxins_or_furans","F")
adw.SetItem(al_row,"react_sulfide","F")
adw.SetItem(al_row,"react_sulfide_ppm",ld_null)
adw.SetItem(al_row,"thermally_unstable","F")
adw.SetItem(al_row,"explosives","F")
adw.SetItem(al_row,"contains_pcb","F")
adw.SetItem(al_row,"organic_peroxide","F")
adw.SetItem(al_row,"reactive_other","F")
adw.SetItem(al_row,"reactive_other_description",ls_null)
adw.SetItem(al_row,"compressed_gas","F")
adw.SetItem(al_row,"tires","F")
adw.SetItem(al_row,"beryllium_present","F")
adw.SetItem(al_row,"biodegradable_sorbents","F")
adw.SetItem(al_row,"pfas_flag","F") //DevOps 42864

//	              adw.SetItem(al_row,"free_liquid","F")
//				wf_wcr_profile_map_sync (adw, "free_liquid", al_row, "F")
//				adw.SetItem(al_row,"metal_fines","F")
//				wf_wcr_profile_map_sync (adw, "metal_fines", al_row, "F")
//				adw.SetItem(al_row,"water_reactive","F")
//				wf_wcr_profile_map_sync (adw, "water_reactive", al_row, "F")
//				adw.SetItem(al_row,"biohazard","F")
//				wf_wcr_profile_map_sync (adw, "biohazard", al_row, "F")
//				adw.SetItem(al_row,"shock_sensitive_waste","F")
//				wf_wcr_profile_map_sync (adw, "shock_sensitive_waste", al_row, "F")
//				adw.SetItem(al_row,"oily_residue","F")
//				wf_wcr_profile_map_sync (adw, "oily_residue", al_row, "F")
//				adw.SetItem(al_row,"dioxins","F")
//				wf_wcr_profile_map_sync (adw, "dioxins", al_row, "F")
//				adw.SetItem(al_row,"furans","F")
//				wf_wcr_profile_map_sync (adw, "furans", al_row, "F")
//				adw.SetItem(al_row,"aluminum","F")
//				wf_wcr_profile_map_sync (adw, "aluminum", al_row, "F")
//				adw.SetItem(al_row,"asbestos_non_friable","F")
//				wf_wcr_profile_map_sync (adw, "asbestos_non_friable", al_row, "F")
//				adw.SetItem(al_row,"asbestos_flag","F")
//				adw.SetItem(al_row,"asbestos_friable","U")
//				wf_wcr_profile_map_sync (adw, "asbestos_friable", al_row, "F")
//				adw.SetItem(al_row,"radioactive_waste","F")
//				wf_wcr_profile_map_sync (adw, "radioactive_waste", al_row, "F")
//				adw.SetItem(al_row,"air_reactive", "F")
//				wf_wcr_profile_map_sync (adw, "air_reactive", al_row, "F")
//				adw.SetItem(al_row,"isocyanates", "F")
//				wf_wcr_profile_map_sync (adw, "isocyanates", al_row, "F")
//				adw.SetItem(al_row,"biodegradable_sorbents","F")
//				wf_wcr_profile_map_sync (adw, "biodegradable_sorbents", al_row, "F")
//				adw.SetItem(al_row,"pyrophoric_waste","F")
//				wf_wcr_profile_map_sync (adw, "pyrophoric_waste", al_row, "F")
//				adw.SetItem(al_row,"react_sulfide","F")
//				wf_wcr_profile_map_sync (adw, "react_sulfide", al_row, "F")
//				adw.SetItem(al_row,"reactcyanide","F")
//				wf_wcr_profile_map_sync (adw, "reactcyanide", al_row, "F")
//				adw.SetItem(al_row,"explosives","F")
//				wf_wcr_profile_map_sync (adw, "explosives", al_row, "F")
//				adw.SetItem(al_row,"temp_ctrl_org_peroxide","F")
//				wf_wcr_profile_map_sync (adw, "temp_ctrl_org_peroxide", al_row, "F")
//				adw.SetItem(al_row,"norm","F")
//				wf_wcr_profile_map_sync (adw, "norm", al_row, "F")
//				adw.SetItem(al_row,"tenorm","F")
//				wf_wcr_profile_map_sync (adw, "tenorm", al_row, "F")				
//				adw.SetItem(al_row,"section_f_none_apply_flag","T")
//				wf_wcr_profile_map_sync (adw, "section_f_none_apply_flag", al_row, "T")
//				wf_wcr_profile_map_sync (adw, "waste_contains_spec_hand_none", al_row, "T")
end subroutine

public subroutine wf_modify_gen_addr ();//DevOps #14709 info_gde 03/23/2020; Add New Profile - Section A. (Add New Generator)

String  ls_current_pg
String ls_null
Any la_string 
int li_rc
SetNull(ls_null)

ls_current_pg=itab.control[itab.SelectedTab].Text
if  lower(ls_current_pg)='profile' then
	idw_header.SetRedraw(FALSE)
	tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.Post Event rowfocuschanged (tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.GetRow())
	pb_pdf.visible = TRUE									// 20191114 jcb #12448   SHOW get pdf picture-button 
	
	string ls_chk_addr1, ls_chk_add2
	ls_chk_addr1 = left( idw_header.Object.gen_mail_addr1[1], 1)
	ls_chk_add2	  = left( idw_header.Object.gen_mail_addr2[1], 1)
	If idw_wcr_display_1.dataobject="d_profile_generator_form_dragon" then
	    la_string=LEFT ( idw_header.Object.gen_mail_addr1[1], 1 )
		if isNull(la_string) then      Return 
		If IsNumber(la_string) AND Match(idw_header.Object.gen_mail_addr1[1],"[A-Za-z]")  then 
		   idw_header.Object.gen_mail_addr2[1] = ls_null	
		elseif Len(trim(la_string))=0 then
		   idw_header.Object.gen_mail_addr1[1] = ls_null	
		elseif Not isNumber(la_string) then
		   idw_header.Object.gen_mail_addr1[1] = ls_null	
		else
		   idw_header.Object.gen_mail_addr2[1] =  idw_header.Object.gen_mail_addr2[1] 
		   idw_header.Object.gen_mail_addr1[1] = idw_header.Object.gen_mail_addr1[1] 	
		 end if
		end if
		idw_header.SetRedraw(TRUE)
		end if
	
end subroutine

public function integer wf_set_rad_supplements_2 (string as_object, long row, string data);//********************************************************************
// Name:  	wf_set_rad_supplements_2
// Purpose:	Continue data/attribute settings for radioactiove_supplement_page_1
//               to extend the itemchanged event, which got max script size exceeded
// Change History
//   date		by	         Description
// ----------	----         --------------------------------------------------------------------------
// 20200331	jcb 		#14993  Original script
// 20200401 jcb 		#14995 correct column names
// 20200403 jcb		#14995 do NOT update Source_material_flag when 
//                                                      radio buttons for Uranium/Thorium are clicked
// 20200403 jcb         #14996 for d_profile_radioactive_supplement_page_1 Checkbox area reduced to sizze of text area
//
//********************************************************************

decimal 	ldc_null								// 20200331 jcb #14993/995 add
long		ll_rc
string	 	ls_flag, ls_null

setnull(ldc_null)                     				// 20200331 jcb #14993/995 add
SetNull(ls_null)

// 20200331 This case brought over from itemchanged cuz it was too big during retrofit

  CHOOSE CASE as_object
		case  is_profileradioactive_uranium_thorium_flag    //'profileradioactive_uranium_thorium_flag'
			ls_flag   = Trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_thorium_flag[row])    
			IF	ls_flag = 'F' THEN    
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, 'profileradioactive_uranium_concentration',ls_null)
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_concentration.protect = 1
			END IF
              IF	ls_flag = 'T' THEN    
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, 'profileradioactive_uranium_concentration',ls_null)
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_concentration.protect = 0
			END IF			
		case 'profileradioactive_uranium_source_material'	
			ls_flag   = Trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_source_material[row])
              IF	ls_flag = 'U' THEN                          
				// 20200403 jcb #14995 don't coordinate chkbox and buttons ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, 'profileradioactive_uranium_thorium_flag','F')	  // if none above turn off flag				
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, 'profileradioactive_uranium_concentration',ls_null)
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, 'profileradioactive_uranium_source_material','U')  // else it flips to D some strange reason
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_concentration.protect = 1
			END IF
			IF ls_flag  = 'D' or ls_flag = 'R' or ls_flag = 'N' then     // any of 3 types UR/Thorium     Then turn on flag, unprotect
				// 20200403 jcb #14995 dlet ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, 'profileradioactive_uranium_thorium_flag','T')						
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_uranium_concentration.protect = 0
			END IF

		case  is_profileradioactive_radium_226_flag
	    		ls_flag   = Trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_226_flag[row])
			IF ls_flag = 'F' then
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row,is_profileradioactive_radium_226_concentration,ldc_null)
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_226_concentration.protect = 1
			ELSE
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_226_concentration.protect = 0
			END IF
		case is_profileradioactive_radium_228_flag
	    		ls_flag   = Trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_228_flag[row])
			IF ls_flag = 'F' then
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, is_profileradioactive_radium_228_concentration,ldc_null)
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_228_concentration.protect = 1
			ELSE
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_radium_228_concentration.protect = 0
			END IF
		case is_profileradioactive_lead_210_flag	
			ls_flag   = Trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_lead_210_flag[row])
			IF ls_flag = 'F' then
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, is_profileradioactive_lead_210_concentration,ldc_null)
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_lead_210_concentration.protect = 1
			ELSE
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_lead_210_concentration.protect = 0
			END IF
		case is_profileradioactive_potassium_40_flag
	    	ls_flag   = Trim(idw_profile_radioactive_supplement_page_1.Object.profileradioactive_potassium_40_flag[row])
			IF ls_flag = 'F' then
				ll_rc = idw_profile_radioactive_supplement_page_1.SetItem( row, is_profileradioactive_potassium_40_concentration,ldc_null)
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_potassium_40_concentration.protect = 1
			ELSE
				idw_profile_radioactive_supplement_page_1.Object.profileradioactive_potassium_40_concentration.protect = 0
			END IF	
	END CHOOSE
		// 20200331 jcb #14993  END
//end if	
return 0
//  li_rc = wf_set_rad_supplements_2 (dwo.Name, row, data )


end function

public function integer wf_set_rad_supplements_3 (string as_object, long row, string data);//********************************************************************
// Name:  	wf_set_rad_supplements_3
// Purpose:	Continue data/attribute settings for radioactiove_supplement_page_3
//               to extend the itemchanged event, which got max script size exceeded
// Change History
//   date		by	         Description
// ----------	----         --------------------------------------------------------------------------
//04/04/20  info_gde; EQAI (Radioactive Supplement) Page 3 Issues
//20200414 jcb 		#14994 fix potential page-3 not saving problem
//********************************************************************



  CHOOSE CASE as_object
		case  'profileradioactive_byproduct_sum_of_all_isotopes'
			idw_profile_radioactive_supplement_page_3.SetItem(row,as_object, data)
			ib_page_3_changed   = TRUE    					// 20200414 jcb #14994 
		case  'profileradioactive_special_nuclear_sum_of_all_isotopes'
			idw_profile_radioactive_supplement_page_3.SetItem(row,as_object, data)
			ib_page_3_changed   = TRUE    					// 20200414 jcb #14994 
		case  'profileradioactive_source_sof_calculations'
			idw_profile_radioactive_supplement_page_3.SetItem(row,as_object, data)
			ib_page_3_changed   = TRUE    					// 20200414 jcb #14994 			
	END CHOOSE


return 0










































RETURN 0
end function

public subroutine wf_set_dot_shipping_name (string as_checked, long al_row, ref datawindow adw_datawindow);string ls_shipping_name

// MPM - 7/1/2020 - DevOps 16640
IF al_row < 1 THEN RETURN

ls_shipping_name = adw_datawindow.object.dot_shipping_name[al_row]

// MPM - 7/9/2020 - DevOps 16735
IF IsNull(ls_shipping_name) THEN ls_shipping_name = ''
		
// MPM - 8/20/2020 - DevOps 17200
if as_checked = 'T' then
	// MPM - 4/6/2020 - DevOps 14844 - If the DOT shipping name doesn't begin with "Waste", then prepend "Waste, " to it
	// MPM - 1/13/2022 - DevOps 21647
	if NOT (Upper(Left(ls_shipping_name, 7)) = "WASTE, " OR Upper(Left(ls_shipping_name, 6)) = "WASTE ") then
		ls_shipping_name =  "Waste, " + ls_shipping_name 
		adw_datawindow.Object.dot_shipping_name[al_row] = ls_shipping_name 
	end if
else //as_checked = 'F' then
	// MPM - 4/6/2020 - DevOps 14844 - If the DOT shipping name begins with "Waste", "Waste " or "Waste, ", then remove "Waste, " or "Waste " or "Waste" from the beginning of it
	if Upper(Left(ls_shipping_name, 7)) = "WASTE, " then
		ls_shipping_name = Mid(ls_shipping_name, 8)
		adw_datawindow.object.dot_shipping_name[al_row] = ls_shipping_name
	elseif Upper(Left(ls_shipping_name, 6)) = "WASTE " then
		ls_shipping_name = Mid(ls_shipping_name, 7)
		adw_datawindow.object.dot_shipping_name[al_row] = ls_shipping_name
	elseif Upper(Left(ls_shipping_name, 5)) = "WASTE" then
		ls_shipping_name = Mid(ls_shipping_name, 6)
		adw_datawindow.object.dot_shipping_name[al_row] = ls_shipping_name
	end if
end if
end subroutine

public subroutine wf_3sub_supplement_data (long al_profile_id);//DevOps #15074 info_gde 04/06/2020; EQAI Data Window Error

integer li_rc, li_line_id, li_line_id2
long ll_profile_id, ll_concentration,ll_concentration2
string ls_radionuclide,ls_radionuclide2

li_rc=idw_profile_radioactive_supplement_3sub.RowCount()

IF li_rc=1 THEN
	
	ll_profile_id      =  idw_profile_radioactive_supplement_3sub.Object.profile_id[li_rc]
	li_line_id2 = idw_profile_radioactive_supplement_3sub.Object.line_id[li_rc]
  	ll_concentration2 =	idw_profile_radioactive_supplement_3sub.Object.concentration[li_rc]
	ls_radionuclide2 =     idw_profile_radioactive_supplement_3sub.Object.radionuclide[li_rc]
	
	select i.profile_id,
         i.line_id,
         i.radionuclide,
         i.concentration
	into:ll_profile_id,:li_line_id,:ls_radionuclide,:ll_concentration
from plt_ai.dbo.profileradioactiveusei i
where i.profile_id = :al_profile_id 
USING itr_share;

IF itr_share.SQLCode < 0 THEN // error
	//MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLErrText, Exclamation!)
	Return
ELSEIF itr_share.SQLCode = 100 THEN //row not found
	//MessageBox(gs_app_name + ":  Save Error", " Radioactive  profile ID " + String(al_profile_id) + " is not found", Exclamation!)
	Return
END IF

if   isNull(ls_radionuclide) then ls_radionuclide='NA' 
if   isNull(ls_radionuclide2) then ls_radionuclide2='NA'
if   isNull(ll_concentration) then ll_concentration=0
if   isNull(ll_concentration2) then ll_concentration2=0

If ll_profile_id=al_profile_id AND li_line_id=li_line_id2 AND  trim(ls_radionuclide)= trim(ls_radionuclide2) AND ll_concentration= ll_concentration2 then
		int li
		li=idw_profile_radioactive_supplement_3sub.SetItemStatus(li_rc,0,Primary!, NotModified!)
Else
		li=idw_profile_radioactive_supplement_3sub.SetItemStatus(li_rc,0,Primary!, DataModified!)
 
End If
	 	
END IF 
end subroutine

public function long wf_set_rad_supplement_page_1 (long al_row, string as_generated_in_particle_accelerator_fl, string as_approved_for_disposal_flag, string as_approved_by_nrc_flag, string as_approved_for_alternate_disposal_flag, string as_nrc_exempted_flag, string as_released_from_radiological_control_fl, string as_dod_non_licensed_disposal_flag);//********************************************************************
// Name:  	wf_set_rad_supplements_1
// Purpose:	Continue data settings for radioactiove_supplement_page_1
//               to extend wf_copy_wcr_dragon, which got max script size exceeded
// Change History
//   date		by	         Description
// ----------	----         --------------------------------------------------------------------------
// 20200409	jcb 		#14994  Original script
//
//********************************************************************

long	ll_rad_supplement_row_1, ll_rc
string	ls_status

		ll_rad_supplement_row_1 = al_row
		dwitemstatus l_dwstatus
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_generated_in_particle_accelerator_flag[ll_rad_supplement_row_1] = as_generated_in_particle_accelerator_fl  // limit on arg-nm size
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_approved_for_disposal_flag[ll_rad_supplement_row_1] = as_approved_for_disposal_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_approved_by_nrc_flag[ll_rad_supplement_row_1] = as_approved_by_nrc_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_approved_for_alternate_disposal_flag[ll_rad_supplement_row_1] = as_approved_for_alternate_disposal_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_nrc_exempted_flag[ll_rad_supplement_row_1] = as_nrc_exempted_flag
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_released_from_radiological_control_flag[ll_rad_supplement_row_1] = as_released_from_radiological_control_fl    // limit on arg-nm size
		idw_profile_radioactive_supplement_page_1.object.profileradioactive_dod_non_licensed_disposal_flag[ll_rad_supplement_row_1] = as_dod_non_licensed_disposal_flag

		// MPM - 4/19/2020 - DevOps 15205 - No idea why the following is below - commenting it out:
//		ll_rc = idw_profile_radioactive_supplement_page_1.SetItemStatus(ll_rad_supplement_row_1,'profileradioactive_generated_in_particle_accelerator_flag',Primary!, DataModified!)
//		l_dwstatus  = idw_profile_radioactive_supplement_page_1.GetItemStatus(ll_rad_supplement_row_1,'profileradioactive_generated_in_particle_accelerator_flag', Primary!)
//		ib_page_1_changed = TRUE                        // 20200413 jcb #14994 add

return 0
end function

public function long wf_validate_tenorm_fee (ref string as_warning_or_error, ref string as_message);string							ls_return = '', ls_msg, ls_profile_status
int								li_idx, li_last_tab
u_tabpage_profile_price	ltabpage_profile_price
boolean						lb_has_tnrm_waste_code = FALSE, lb_has_reportable_nuclides
long							ll_row_technical, ll_row_header

/*
	DevOps 11835/10590
	
	1. Check for TENORM fee missing:  Check to see if the TENORM fee should apply but is not added to the profile as a bundled, unbundled or exempt charge.  
	This fee should be applied either using the ‘ALL’ disposal price lines option or each individual bill unit should have an associated ‘FEETENORM’ charge. 

               If the profile has an approval into company 2 or 3 that is active
                                AND one or more of the following are True: 
                                                If ProfileLab.NORM flag = ‘T’ 
                                                If ProfileLab.TENORM flag = ‘T’ 
                                                If ProfileLab.Radioactive flag (from dragon - ProfileLab.radioactive_waste) 
                                                Reportable Nuclides? (from constituents where reportable_nuclide = 'T')  
                                AND the TENORM fee is not applied to each bill unit, then:
                                
								If profile status = 'A' and waste_code_uid = 3752 (TNRM waste code) exists on the profile, 
									display ERROR message “This profile appears to be radioactive and approved into company 2 and/or 3, but does not have the radioactive fee product code assigned as either exempt or charged.  Please review.”  
								else
									display WARNING message “This profile appears to be radioactive and approved into company 2 and/or 3, but does not have the radioactive fee product code assigned as either exempt or charged.  Please review.”  

       2. Check for TENORM fee, but the profile does not appear to be radioactive: 
                
                If the profile has an approval into company 2 or 3 that is active
                                AND ALL of the following are False: 
                                                If ProfileLab.NORM flag = ‘T’ 
                                                If ProfileLab.TENORM flag = ‘T’ 
                                                If ProfileLab.Radioactive flag (from dragon - ProfileLab.radioactive_waste) 
                                                Reportable Nuclides? (from constituents where reportable_nuclide = 'T')  
                                AND the TENORM fee was applied to any bill unit, then:
                                
								If profile status = 'A' and waste_code_uid = 3752 (TNRM waste code) exists on the profile, 
									display ERROR message “This profile has the TENORM fee applied but does not appear to be radioactive.  Please review.”   
								else
									display WARNING message “This profile has the TENORM fee applied but does not appear to be radioactive.  Please review.” 

*/

li_last_tab = upperbound(itab_price.control)

FOR li_idx = 2 TO li_last_tab
	ltabpage_profile_price = itab_price.control[li_idx]
	IF IsValid(ltabpage_profile_price) THEN
		IF ltabpage_profile_price.visible AND (ltabpage_profile_price.ii_company_id = 2 OR ltabpage_profile_price.ii_company_id = 3) THEN
			IF idw_approval.Find("company_id in (2, 3) and status = 'A'", 1, idw_approval.RowCount() + 1) = 0 THEN CONTINUE
			ll_row_technical = idw_technical.GetRow()
			IF ll_row_technical > 0 THEN
				lb_has_reportable_nuclides = FALSE
				IF idw_const.Find("reportable_nuclide='T'", 1, idw_const.RowCount() + 1) > 0 THEN lb_has_reportable_nuclides = TRUE
				IF idw_technical.object.norm[ll_row_technical] = 'T' OR idw_technical.object.tenorm[ll_row_technical] = 'T' OR &
					idw_technical.object.radioactive_waste[ll_row_technical] = 'T' OR lb_has_reportable_nuclides THEN
					ls_msg = ltabpage_profile_price.uof_validate_tenorm_fee(TRUE)
					IF ls_msg <> '' THEN
						IF Pos(ls_return, ls_msg) > 0 THEN
							// This validation message is already in the return string, so no need to add it again; go on to the next price tab
							CONTINUE
						ELSE
							IF ls_return <> '' THEN
								ls_return += '~r~n' + ls_msg
							ELSE
								ls_return = ls_msg
							END IF
						END IF
					END IF
				ELSEIF NOT(idw_technical.object.norm[ll_row_technical] = 'T' OR idw_technical.object.tenorm[ll_row_technical] = 'T' OR &
					idw_technical.object.radioactive_waste[ll_row_technical] = 'T' OR lb_has_reportable_nuclides) THEN
					ls_msg = ltabpage_profile_price.uof_validate_tenorm_fee(FALSE)
					IF ls_msg <> '' THEN
						IF Pos(ls_return, ls_msg) > 0 THEN
							// This validation message is already in the return string, so no need to add it again; go on to the next price tab
							CONTINUE
						ELSE
							IF ls_return <> '' THEN
								ls_return += '~r~n' + ls_msg
							ELSE
								ls_return = ls_msg
							END IF
						END IF
					END IF
				END IF
			END IF
		END IF
	END IF
NEXT

IF ls_return <> "" THEN
	as_message = ls_return	
	ll_row_header = idw_header.GetRow()
	IF ll_row_header > 0 THEN 
		ls_profile_status = idw_header.Object.curr_status_code[ll_row_header]
		IF idw_waste_code_eq.Find('waste_code_uid=3752 AND include=1', 1, idw_waste_code_eq.RowCount() + 1) > 0 THEN lb_has_tnrm_waste_code = TRUE
		IF ls_profile_status = 'A' AND lb_has_tnrm_waste_code THEN 
			as_warning_or_error = 'Error'
		ELSE
			as_warning_or_error = 'Warning'
		END IF
	END IF
END IF

RETURN gi_success
end function

public subroutine wf_copy_benzenesupplement (long ar_form_id, long ar_rev_id, long ar_profile_id);long ll_form_sectionstatus_count,ll_benzene_form_id
string ls_originating_generator_name,ls_originating_generator_epa_id,ls_type_of_facility,ls_tab_lt_1_megagram,ls_tab_gte_1_and_lt_10_megagram
string ls_tab_gte_10_megagram,ls_is_process_unit_turnaround,ls_classified_as_process_wastewater_stream,ls_classified_as_landfill_leachate
string ls_classified_as_product_tank_drawdown,ls_benz_avg_h20_gr_10,ls_benzene_onsite_mgmt
long ll_benzene_import_supplement_rowcount,ll_benzenesupplement_row,ll_wcr_gen
string ls_wcr_waste_common_name,ls_gen_process,ls_generator_name,ls_EPA_ID,ls_signing_name,ls_signing_title,ls_signing_company
datetime ld_signing_date
decimal	ld_flow_weighted_annual_average_benzene, ld_benzene_range_from, ld_benzene_range_to

//Benzene Waste Supplement
SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :ar_form_id
AND revision_id = :ar_rev_id
AND  section = 'BZ'
AND isactive = 1 
USING itr_forms;

// MPM - 4/30/2020 - DevOps 15426
SELECT waste_common_name,gen_process,FormWCR.generator_name,FormWCR.generator_id,FormWCR.EPA_ID,signing_name,signing_date,signing_title,signing_company
INTO :ls_wcr_waste_common_name,:ls_gen_process,:ls_generator_name,:ll_wcr_gen,:ls_EPA_ID,:ls_signing_name,:ld_signing_date,:ls_signing_title,:ls_signing_company
FROM FormWCR
LEFT OUTER JOIN FormWCRTemplate T1 ON T1.template_form_id = FormWCR.form_id // copying a template
LEFT OUTER JOIN FormWCRTemplate T2 ON T2.template_form_id = FormWCR.template_form_id // copying a form that has a template
LEFT OUTER JOIN Generator G ON G.generator_id = FormWCR.generator_id AND G.epa_id = FormWCR.epa_id 
WHERE form_id = :ar_form_id
AND 	revision_id = :ar_rev_id
USING itr_forms;


IF ll_form_sectionstatus_count > 0 THEN 
	// MPM - 4/24/2020 - DevOps 15311 - Changed benzene flow-weighted annual average, range from and to values from long to decimal, to match the table
	SELECT formbenzene.form_id,
		formbenzene.originating_generator_name,   
		formbenzene.originating_generator_epa_id,   
		formbenzene.type_of_facility,   
		formbenzene.tab_lt_1_megagram,   
		formbenzene.tab_gte_1_and_lt_10_megagram,   
		formbenzene.tab_gte_10_megagram,   
		formbenzene.flow_weighted_annual_average_benzene,   
		formbenzene.is_process_unit_turnaround,   
		formbenzene.benzene_range_from,   
		formbenzene.benzene_range_to,   
		formbenzene.classified_as_process_wastewater_stream,   
		formbenzene.classified_as_landfill_leachate,   
		formbenzene.classified_as_product_tank_drawdown,
		formbenzene.avg_h20_gr_10,
		formbenzene.benzene_onsite_mgmt
	INTO
	 :ll_benzene_form_id,
	 :ls_originating_generator_name,
	 :ls_originating_generator_epa_id,
	 :ls_type_of_facility,
	 :ls_tab_lt_1_megagram,
	 :ls_tab_gte_1_and_lt_10_megagram,
	 :ls_tab_gte_10_megagram,
	 :ld_flow_weighted_annual_average_benzene,
	 :ls_is_process_unit_turnaround,
	 :ld_benzene_range_from,
	 :ld_benzene_range_to,
	 :ls_classified_as_process_wastewater_stream,
	 :ls_classified_as_landfill_leachate,
	 :ls_classified_as_product_tank_drawdown,
	 :ls_benz_avg_h20_gr_10,
	 :ls_benzene_onsite_mgmt
	FROM FormBenzene
	WHERE FormBenzene.wcr_id = :ar_form_id
   AND 	FormBenzene.wcr_rev_id =  :ar_rev_id
USING itr_forms;

ll_benzene_import_supplement_rowcount = idw_benzene_waste_ops_supplemen.RowCount() 

	IF ll_benzene_form_id > 0 THEN 
		IF ll_benzene_import_supplement_rowcount <= 0 THEN
			idw_benzene_waste_ops_supplemen.InsertRow(0)
		END IF
	END IF

	ll_benzenesupplement_row = idw_benzene_waste_ops_supplemen.GetRow()
		IF ll_benzenesupplement_row >0 THEN	
		  idw_benzene_waste_ops_supplemen.object.profile_id[ll_benzenesupplement_row] = ar_profile_id
		  idw_benzene_waste_ops_supplemen.object.added_by[ll_benzenesupplement_row] = gs_user_id
		  idw_benzene_waste_ops_supplemen.object.date_added[ll_benzenesupplement_row] = DateTime(Today(), Now())	
		  idw_benzene_waste_ops_supplemen.object.originating_generator_name[ll_benzenesupplement_row] = ls_originating_generator_name
		  idw_benzene_waste_ops_supplemen.object.originating_generator_epa_id[ll_benzenesupplement_row] = ls_originating_generator_epa_id
		  idw_benzene_waste_ops_supplemen.object.type_of_facility[ll_benzenesupplement_row] = ls_type_of_facility
		  idw_benzene_waste_ops_supplemen.object.tab_lt_1_megagram[ll_benzenesupplement_row] = ls_tab_lt_1_megagram
		  idw_benzene_waste_ops_supplemen.object.tab_gte_1_and_lt_10_megagram[ll_benzenesupplement_row] = ls_tab_gte_1_and_lt_10_megagram
		  idw_benzene_waste_ops_supplemen.object.tab_gte_10_megagram[ll_benzenesupplement_row] = ls_tab_gte_10_megagram
		  idw_benzene_waste_ops_supplemen.object.flow_weighted_annual_average_benzene[ll_benzenesupplement_row] = ld_flow_weighted_annual_average_benzene
		  idw_benzene_waste_ops_supplemen.object.is_process_unit_turnaround[ll_benzenesupplement_row] = ls_is_process_unit_turnaround
		  idw_benzene_waste_ops_supplemen.object.benzene_range_from[ll_benzenesupplement_row] = ld_benzene_range_from	
		  idw_benzene_waste_ops_supplemen.object.benzene_range_to[ll_benzenesupplement_row] = ld_benzene_range_to
		  idw_benzene_waste_ops_supplemen.object.classified_as_process_wastewater_stream[ll_benzenesupplement_row] = ls_classified_as_process_wastewater_stream
		  idw_benzene_waste_ops_supplemen.object.classified_as_landfill_leachate[ll_benzenesupplement_row] = ls_classified_as_landfill_leachate
		  idw_benzene_waste_ops_supplemen.object.weighted_average_water_content[ll_benzenesupplement_row] = ls_benz_avg_h20_gr_10
		  idw_benzene_waste_ops_supplemen.object.classified_as_product_tank_drawdown[ll_benzenesupplement_row] = ls_classified_as_product_tank_drawdown
		  idw_benzene_waste_ops_supplemen.object.waste_common_name[ll_benzenesupplement_row] = ls_wcr_waste_common_name
		  idw_benzene_waste_ops_supplemen.object.gen_process_brief_desc[ll_benzenesupplement_row] = ls_gen_process
		 // idw_benzene_waste_ops_supplemen.object.benzene_status_tab[ll_benzenesupplement_row] = string ( ld_generator_tab )
		  idw_benzene_waste_ops_supplemen.object.generator_name[ll_benzenesupplement_row] = ls_generator_name
		  idw_benzene_waste_ops_supplemen.object.generator_epa_id[ll_benzenesupplement_row] = ls_EPA_ID
		  idw_benzene_waste_ops_supplemen.object.generator_id[ll_benzenesupplement_row] = ll_wcr_gen
 		  idw_benzene_waste_ops_supplemen.object.wcr_sign_name[ll_benzenesupplement_row] = ls_signing_name  
		  idw_benzene_waste_ops_supplemen.object.wcr_sign_title[ll_benzenesupplement_row] = ls_signing_title 
		  idw_benzene_waste_ops_supplemen.object.wcr_sign_date[ll_benzenesupplement_row] = ld_signing_date 
		  idw_benzene_waste_ops_supplemen.object.wcr_sign_company[ll_benzenesupplement_row] = ls_signing_company 
			idw_benzene_waste_ops_supplemen.object.benzene_onsite_mgmt[ll_benzenesupplement_row] = ls_benzene_onsite_mgmt
		  
		  	IF ls_classified_as_process_wastewater_stream = 'F' AND  ls_classified_as_landfill_leachate = 'F' AND ls_classified_as_product_tank_drawdown = 'F' THEN 
				idw_benzene_waste_ops_supplemen.object.none_of_the_three[ll_benzenesupplement_row] = 'T'
			END IF
			 idw_technical.Getrow() 
			 IF idw_technical.Getrow()  > 0 THEN 
			    	idw_technical.object.benzene_onsite_mgmt[idw_technical.Getrow()] = ls_benzene_onsite_mgmt
			    	idw_technical.object.avg_h20_gr_10[idw_technical.Getrow()] = ls_benz_avg_h20_gr_10
			END IF
			
			IF ls_tab_lt_1_megagram = 'T' THEN 
				idw_benzene_waste_ops_supplemen.object.group_radiobuttons[ll_benzenesupplement_row] = '1'
			ELSEIF	ls_tab_gte_1_and_lt_10_megagram = 'T' THEN 
		         idw_benzene_waste_ops_supplemen.object.group_radiobuttons[ll_benzenesupplement_row] = '2'
			ELSEIF ls_tab_gte_10_megagram = 'T'  THEN
				 idw_benzene_waste_ops_supplemen.object.group_radiobuttons[ll_benzenesupplement_row] = '3'
			END IF
					
	   END IF
END IF 

end subroutine

public function integer wf_specific_tech_requested (string as_object, long al_row, string as_data);//********************************************************************
// Name:  	wf_specific_tech_requested
// Purpose:	Continue data/attribute settings for d_profile_generator_certification_dragon_h
//               to extend the itemchanged event, which got max script size exceeded
// Change History
//   date		by	         Description
// ----------	--------    --------------------------------------------------------------------------
//20200429 jcb          15424 original code
//20200430 jcb 		add syncing
//********************************************************************
int    li_rc
long ll_rc
string ls_data

  CHOOSE CASE as_object

	case  'specific_technology_requested'
		IF as_data = 'T' then
			idw_wcr_display_1.object.requested_technology.protect = 0			
			idw_wcr_display_1.object.requested_technology.background.color    = 16777215  			// white
			idw_wcr_display_2.visible = TRUE
			ls_data = idw_wcr_display_1.getitemstring(al_row,'requested_technology')
			wf_wcr_profile_map_sync (idw_wcr_display_1, "specific_technology_requested", al_row, "T")	
			wf_wcr_profile_map_sync (idw_wcr_display_1, "requested_technology", al_row, ls_data)				
		END IF

		IF as_data = 'F' OR as_data = 'N' or as_data = 'U' THEN
			idw_wcr_display_1.object.requested_technology.protect = 1
			idw_wcr_display_1.setitem(al_row, 'requested_technology','')         						// blank out 
			idw_wcr_display_1.object.requested_technology.background.color    = 536870912    // jcb #15424 use backgroud color, not 12632256     // grey  lighter is 14737632
 			wf_wcr_profile_map_sync (idw_wcr_display_1, "requested_technology", al_row, "")
     		wf_wcr_profile_map_sync (idw_wcr_display_1, "specific_technology_requested", al_row, "F")	
			idw_wcr_display_2.visible = FALSE			
		END IF
	case else
end choose			 
//

return 0
end function

public subroutine wf_set_thermal_supplement_same_as_above ();long ll_row
string ls_liquid_phase,ls_consistency_solid,ls_consistency_dust,ls_consistency_sludge,ls_consistency_liquid,ls_consistency_varies,ls_consistency_debris,ls_consistency_gas_aerosol

IF idw_wcr_display_1.Dataobject = 'd_profile_thermal_supplement_form' THEN
	ll_row = idw_wcr_display_1.GetRow()
	IF ll_row > 0 THEN
		IF idw_wcr_display_1.Object.profilethermal_originating_generator_name[ll_row] =  idw_wcr_display_1.Object.generator_generator_name[ll_row] AND &
			idw_wcr_display_1.Object.profilethermal_originating_generator_epa_id[ll_row] =  idw_wcr_display_1.Object.generator_generator_epa_id[ll_row] THEN
			idw_wcr_display_1.Object.same_as_above[ll_row] = 'Y'
			idw_wcr_display_1.SetColumn('same_as_above')
		ELSE
			idw_wcr_display_1.Object.same_as_above[ll_row] = 'N'
		END IF
			IF idw_technical.GetRow() > 0 THEN 
				ls_liquid_phase = idw_technical.Object.liquid_phase[idw_technical.getrow()]
				ls_consistency_solid = idw_technical.Object.consistency_solid[idw_technical.getrow()]
				ls_consistency_dust = idw_technical.Object.consistency_dust[idw_technical.getrow()]
				ls_consistency_debris = idw_technical.Object.consistency_debris[idw_technical.getrow()]
				ls_consistency_sludge = idw_technical.Object.consistency_sludge[idw_technical.getrow()]
				ls_consistency_liquid = idw_technical.Object.consistency_liquid[idw_technical.getrow()]
				ls_consistency_gas_aerosol = idw_technical.Object.consistency_gas_aerosol[idw_technical.getrow()]
				ls_consistency_varies= idw_technical.Object.consistency_varies[idw_technical.getrow()]
				
				idw_wcr_display_1.object.liquid_phase[ll_row] =  ls_liquid_phase
				idw_wcr_display_1.object.consistency_solid[ll_row] =  ls_consistency_solid
				idw_wcr_display_1.object.consistency_dust[ll_row] =  ls_consistency_dust
				idw_wcr_display_1.object.consistency_debris[ll_row] =  ls_consistency_debris
				idw_wcr_display_1.object.consistency_sludge[ll_row] =  ls_consistency_sludge
				idw_wcr_display_1.object.consistency_liquid[ll_row] =  ls_consistency_liquid
				idw_wcr_display_1.object.consistency_gas_aerosol[ll_row] =  ls_consistency_gas_aerosol
				idw_wcr_display_1.object.consistency_varies[ll_row] =  ls_consistency_varies
			END IF
	END IF
END IF

idw_wcr_display_1.SetItemStatus (1,0,Primary!,Notmodified!)
end subroutine

public subroutine wf_set_debris_certification_flag (string as_debris_certification_flag);long ll_row_header

ll_row_header = idw_header.GetRow()

IF  ll_row_header > 0 THEN 
	  idw_header.object.debris_certification_flag[ll_row_header] = as_debris_certification_flag
END IF	
end subroutine

public subroutine wf_set_benzene_supplemen_same_as_above ();long ll_row
string ls_liquid_phase,ls_consistency_solid,ls_consistency_dust,ls_consistency_sludge,ls_consistency_liquid,ls_consistency_varies,ls_consistency_debris,ls_consistency_gas_aerosol

//		IF idw_wcr_display_1.GetItemString(1, 'classified_as_process_wastewater_stream') = 'F' AND &
//			 idw_wcr_display_1.GetItemString(1, 'classified_as_landfill_leachate') = 'F' AND &
//			 idw_wcr_display_1.GetItemString(1, 'classified_as_product_tank_drawdown') = 'F'  THEN 
//			idw_wcr_display_1.SetItem(1, 'none_of_the_three','T')						
//		END IF

IF idw_wcr_display_1.Dataobject = 'd_profile_benzene_waste_ops_supplement' THEN
	ll_row = idw_wcr_display_1.GetRow()
	IF ll_row > 0 THEN
		IF idw_wcr_display_1.Object.originating_generator_name[ll_row] =  idw_wcr_display_1.Object.generator_name[ll_row] AND &
			idw_wcr_display_1.Object.originating_generator_epa_id[ll_row] =  idw_wcr_display_1.Object.generator_epa_id[ll_row] THEN
			idw_wcr_display_1.Object.same_as_above[ll_row] = 'Y'
			idw_wcr_display_1.SetColumn('same_as_above')
		ELSE
			idw_wcr_display_1.Object.same_as_above[ll_row] = 'N'
		END IF
	END IF
END IF
end subroutine

public subroutine wf_clear_proper_shipping_name_fields (ref datawindow adw, long al_row);string		ls_null
decimal	ld_null
long		ll_null

SetNull(ls_null)
SetNull(ld_null)
SetNull(ll_null)

adw.Object.dot_shipping_name[al_row] = 'Material Not Regulated By D.O.T.'
wf_wcr_profile_map_sync (adw, 'dot_shipping_name', al_row, 'Material Not Regulated By D.O.T.')
adw.Object.dot_shipping_desc_additional[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'dot_shipping_desc_additional', al_row, ls_null)
adw.Object.reportable_quantity_flag[al_row] = 'U'
wf_wcr_profile_map_sync (adw, 'reportable_quantity_flag', al_row, 'U')
adw.Object.rq_reason[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'rq_reason', al_row, ls_null)
adw.Object.profile_rq_threshold[al_row] = ld_null
wf_wcr_profile_map_sync (adw, 'profile_rq_threshold', al_row, ls_null)
adw.Object.dot_waste_flag[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'dot_waste_flag', al_row, ls_null)
adw.Object.package_group[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'package_group', al_row, ls_null)
adw.Object.erg_number[al_row] = ll_null
wf_wcr_profile_map_sync (adw, 'erg_number', al_row, ls_null)
adw.Object.erg_suffix[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'erg_suffix', al_row, ls_null)
adw.Object.hazmat_class[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'hazmat_class', al_row, ls_null)
adw.Object.subsidiary_haz_mat_class[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'subsidiary_haz_mat_class', al_row, ls_null)
// MPM - 6/30/2020 - DevOps 16630
adw.Object.un_na_flag[al_row] = 'X'
wf_wcr_profile_map_sync (adw, 'un_na_flag', al_row, 'X')
adw.Object.un_na_number[al_row] = ll_null
wf_wcr_profile_map_sync (adw, 'un_na_number', al_row, ls_null)
adw.Object.dot_sp_permit_flag[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'dot_sp_permit_flag', al_row, ls_null)
adw.Object.manifest_dot_sp_number[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'manifest_dot_sp_number', al_row, ls_null)
adw.Object.dot_sp_permit_text[al_row] = ls_null
wf_wcr_profile_map_sync (adw, 'dot_sp_permit_text', al_row, ls_null)

end subroutine

public function integer wf_format_rows ();//DevOps 15348 info_gde 05/07/2020; Add New Profile (Profile Tab) - Section E. (Formatting)
Integer i_len1,i_len2,i_len3,i
long ll_rows
dec ld_data1, ld_data2, ld_data3, ld_null
//string ls_data1,ls_data2,ls_data3
setnull(ld_null)

choose case ii_sort_order
	case 6

	ll_rows=idw_wcr_display_2.rowcount()

	For i = 1 To ll_rows
		 ld_data1=dec(idw_wcr_display_2.object.typical_concentration.primary[i])
		 i_len1 = Len(string(ld_data1))
		ld_data2=dec(idw_wcr_display_2.object.min_concentration.primary[i])
		i_len2 = Len(string(ld_data2))
		ld_data3=dec(idw_wcr_display_2.object.concentration.primary[i])
		i_len3 = Len(string(ld_data3))
		
		DO UNTIL  i_len1 = 8 OR i_len1 < 2 OR Right (string(ld_data1), 1) <> '0' OR Right (string(ld_data1), 2) = '.0'
			if isNull(i_len1) then exit
    			   i_len1 --
    			   ld_data1 = dec(Left (string(ld_data1), i_len1)) 
		LOOP
	
		DO UNTIL i_len2 = 8 OR  i_len2 < 2 OR Right (string(ld_data2), 1) <> '0' OR Right (string(ld_data2), 2) = '.0'
			if isNull(i_len2) then exit
    		 	   i_len2 --
    			   ld_data2 = dec(Left (string(ld_data2), i_len2))
		LOOP
	
		DO UNTIL i_len3 = 8 OR i_len3 < 2 OR Right (string(ld_data3), 1) <> '0' OR Right (string(ld_data3), 2) = '.0'
			if isNull(i_len3) then exit
    			   i_len3 --
    			   ld_data3 = dec(Left (string(ld_data3), i_len3))
		LOOP
	    
		 
	    if not isNull(i_len1) then 
			if ld_data1=0.0 then
				idw_wcr_display_2.object.typical_concentration.primary[i]=ld_null
			else
				idw_wcr_display_2.object.typical_concentration.primary[i]=ld_data1
			end if
		end if
		
		if not isNull(i_len2) then 
			//if ld_data2=0.0 then
			//   idw_wcr_display_2.object.min_concentration.primary[i]=ld_null
			//else
			   idw_wcr_display_2.object.min_concentration.primary[i]=ld_data2
			//end if
		end if
		
		if not isNull(i_len3) then 
			if ld_data3=0.0 then
				idw_wcr_display_2.object.concentration.primary[i]=ld_null
			else
				idw_wcr_display_2.object.concentration.primary[i]=ld_data3
			end if
		end if
	next
		case 5
						
			ll_rows=idw_wcr_display_2.rowcount()

			For i = 1 To ll_rows
		 		ld_data1=dec(idw_wcr_display_2.object.comp_typical_pct.primary[i])
		 		i_len1 = Len(string(ld_data1))
				ld_data2=dec(idw_wcr_display_2.object.comp_from_pct.primary[i])
				i_len2 = Len(string(ld_data2))
				ld_data3=dec(idw_wcr_display_2.object.comp_to_pct.primary[i])
				i_len3 = Len(string(ld_data3))
		
			DO UNTIL i_len1 = 8 OR i_len1 < 2 OR Right (string(ld_data1), 1) <> '0' OR Right (string(ld_data1), 2) = '.0' 
				if isNull(i_len1) then exit
    				  i_len1 --
    				  ld_data1 = dec(Left (string(ld_data1), i_len1))
			LOOP
	
			DO UNTIL i_len2 = 8 OR  i_len2 < 2 OR Right (string(ld_data2), 1) <> '0' OR Right (string(ld_data2), 2) = '.0' 
				if isNull(i_len2) then exit
    				   i_len2 --
    				   ld_data2 = dec(Left (string(ld_data2), i_len2))
			LOOP
	
			DO UNTIL i_len3 = 8 OR i_len3 < 2 OR Right (string(ld_data3), 1) <> '0'  OR Right (string(ld_data3), 2) = '.0' 
				if isNull(i_len3) then exit
    				   i_len3 --
    				   ld_data3 = dec(Left (string(ld_data3), i_len3))
			LOOP
	     
//	    		if not isNull(i_len1) then
//				if ld_data1=0.0 OR ld_data1=0 then
//				     idw_wcr_display_2.object.comp_typical_pct.primary[i]=ld_null
//					idw_composition.object.comp_typical_pct.primary[i]=ld_null
//				else
//					idw_wcr_display_2.object.comp_typical_pct.primary[i]=ld_data1
//					idw_composition.object.comp_typical_pct.primary[i]=ld_data1
//				end if
//			end if
//			
//			if not isNull(i_len2) then
//				if ld_data2=0.0 OR ld_data2=0 then
//			 		idw_wcr_display_2.object.comp_from_pct.primary[i]=ld_null
//			 		idw_composition.object.comp_from_pct.primary[i]=ld_null
//				else
//					idw_wcr_display_2.object.comp_from_pct.primary[i]=ld_data2
//			 		idw_composition.object.comp_from_pct.primary[i]=ld_data2
//				end if
//			end if
//			
//			if not isNull(i_len3) then
//				if ld_data3=0.0 OR ld_data3=0 then
//					idw_wcr_display_2.object.comp_to_pct.primary[i]=ld_null
//			 		idw_composition.object.comp_to_pct.primary[i]=ld_null
//				else
//			 		idw_wcr_display_2.object.comp_to_pct.primary[i]=ld_data3
//			 		idw_composition.object.comp_to_pct.primary[i]=ld_data3
//				end if
//			end if
		next
		 idw_wcr_display_1.AcceptText()
		 idw_wcr_display_2.AcceptText()
		 idw_composition.AcceptText()
		 idw_const.AcceptText()
end choose


Return 0
end function

public subroutine wf_check_trailing_comma (long al_row, string as_column_value, integer ai_case);
//DevOps 15321 info_gde 05/14/2020; EQAI - New Profile - Section C (comma issue)

choose case ai_case
	case 1
		if Right(as_column_value,1)=',' then 
			as_column_value= Left(as_column_value,Len(as_column_value) -1) 
			idw_header.Object.subsidiary_haz_mat_class[al_row] = as_column_value
		else
		    idw_header.Object.subsidiary_haz_mat_class[al_row] = as_column_value
		end if
end choose


end subroutine

public subroutine wf_wcr_ldr_supplement (long ar_form_id, long ar_revision_id, long ar_profile_id);Long ll_form_sectionstatus_count,ll_profile_id, ll_ldr_form_id,ll_profile_waste_managed_id,ll_idr_supplement_rowcount
Long ll_ldr_supplement_row,ll_row_technical,ll_row_header,ll_formldrsubcat_count
String ls_profilequoteapproval_ldr_req_flag,ls_rb_1,ls_rb_2,ls_rb_3,ls_rb_4,ls_constituents_requiring_treatment_flag,ls_waste_water_flag
String ls_signing_name,ls_signing_title,ls_signing_company,ls_yes_no_q8,ls_yes_no_q9
Datetime ld_signing_date

ll_profile_id = ar_profile_id

SELECT signing_name,signing_date,signing_title,signing_company
INTO :ls_signing_name,:ld_signing_date,:ls_signing_title,:ls_signing_company
	FROM FormWCR
LEFT OUTER JOIN FormWCRTemplate T1 ON T1.template_form_id = FormWCR.form_id
LEFT OUTER JOIN FormWCRTemplate T2 ON T2.template_form_id = FormWCR.template_form_id 
LEFT OUTER JOIN Generator G ON G.generator_id = FormWCR.generator_id AND G.epa_id = FormWCR.epa_id 
WHERE form_id = :ar_form_id
AND 	revision_id = :ar_revision_id
USING itr_forms;

 //LDR Supplement
 SELECT Count(*) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :ar_form_id
AND revision_id = :ar_revision_id
AND  section = 'LR'
AND isactive = 1 
USING itr_forms;

SELECT Count(*) 
INTO :ll_formldrsubcat_count
FROM FormLDRSubcategory
WHERE form_id = :ar_form_id
AND revision_id = :ar_revision_id
USING itr_forms;
		 
IF ll_form_sectionstatus_count > 0 THEN
	 SELECT 
	  FORMLDR.form_id,
	  FORMLDR.waste_managed_id,
	  FORMLDR.ldr_notification_frequency
	 INTO
	 :ll_ldr_form_id,
	 :ll_profile_waste_managed_id,
	 :ls_profilequoteapproval_ldr_req_flag
	FROM FORMLDR 
		WHERE FORMLDR.wcr_id =  :ar_form_id
		AND 	FORMLDR.wcr_rev_id =  :ar_revision_id
	  USING itr_forms;
	  
	ll_idr_supplement_rowcount = idw_profile_ldr_form_dragon.RowCount()
	
	IF ll_ldr_form_id > 0 THEN 
		IF ll_idr_supplement_rowcount <= 0 THEN
			idw_profile_ldr_form_dragon.InsertRow(0)
		END IF
	END IF
	
	IF ll_profile_waste_managed_id =  10  OR ll_profile_waste_managed_id = 12   THEN 
		ls_rb_1 = 'T'
	ELSEIF  ll_profile_waste_managed_id =  14  OR ll_profile_waste_managed_id = 16 OR ll_profile_waste_managed_id = 17 THEN 
		ls_rb_1 = 'F'
	ELSE 
		ls_rb_1 = 'U'
	END IF
	
	IF ll_profile_waste_managed_id =  10  OR ll_profile_waste_managed_id = 14 THEN 
		ls_rb_2 = 'T'
	ELSEIF  ll_profile_waste_managed_id =  12  OR ll_profile_waste_managed_id = 16 OR ll_profile_waste_managed_id = 17 THEN 
		ls_rb_2 = 'F'
	ELSE 
		ls_rb_2 = 'U'
	END IF
	
	IF ll_profile_waste_managed_id =  11  OR ll_profile_waste_managed_id = 13 THEN 
		ls_rb_3 = 'T'
	ELSEIF  ll_profile_waste_managed_id =  15  OR ll_profile_waste_managed_id = 17 THEN 
		ls_rb_3 = 'F'
	ELSE 
		ls_rb_3 = 'U'
	END IF
	
	IF ll_profile_waste_managed_id =  11  OR ll_profile_waste_managed_id = 15 THEN 
		ls_rb_4 = 'T'
	ELSEIF  ll_profile_waste_managed_id =  13  OR ll_profile_waste_managed_id = 17 THEN 
		ls_rb_4 = 'F'
	ELSE 
		ls_rb_4 = 'U'
	END IF
	
	 ll_ldr_supplement_row = idw_profile_ldr_form_dragon.GetRow()
	 IF ll_ldr_supplement_row >0 THEN	
		
		ll_row_technical = idw_technical.GetRow ()
		 IF  ll_row_technical > 0 THEN 
			  idw_technical.object.ldr_notification_frequency[ll_row_technical] = ls_profilequoteapproval_ldr_req_flag
		END IF	
		
		 SELECT constituents_requiring_treatment_flag
		  INTO :ls_constituents_requiring_treatment_flag
		  FROM FormLDRDetail 
		  WHERE form_id = :ar_form_id
           AND revision_id = :ar_revision_id
           USING itr_forms;
			  
			//DevOPs:13792
		ll_row_header = idw_header.GetRow ()
		 IF  ll_row_header > 0 THEN 
			  idw_header.object.waste_managed_id[ll_row_header] = ll_profile_waste_managed_id
			  idw_header.object.constituents_requiring_treatment_flag[ll_row_header] = ls_constituents_requiring_treatment_flag
		END IF	
		
  			 
		idw_profile_ldr_form_dragon.object.constituents_requiring_treatment_flag[ll_ldr_supplement_row] = ls_constituents_requiring_treatment_flag
		idw_profile_ldr_form_dragon.object.waste_water_flag[ll_ldr_supplement_row] = ls_waste_water_flag
		idw_profile_ldr_form_dragon.object.waste_managed_id[ll_ldr_supplement_row] =ll_profile_waste_managed_id 
		idw_profile_ldr_form_dragon.object.ldr_notification_frequency[ll_ldr_supplement_row] = ls_profilequoteapproval_ldr_req_flag
		idw_profile_ldr_form_dragon.object.profile_waste_managed_id_1[ll_ldr_supplement_row] = ll_profile_waste_managed_id
		idw_profile_ldr_form_dragon.object.rb_1[ll_ldr_supplement_row] = ls_rb_1
		idw_profile_ldr_form_dragon.object.rb_2[ll_ldr_supplement_row] = ls_rb_2
		idw_profile_ldr_form_dragon.object.profile_waste_managed_id_2[ll_ldr_supplement_row] =ll_profile_waste_managed_id
		idw_profile_ldr_form_dragon.object.profile_waste_managed_id_3[ll_ldr_supplement_row] = ll_profile_waste_managed_id
		idw_profile_ldr_form_dragon.object.profile_waste_managed_id_4[ll_ldr_supplement_row] = ll_profile_waste_managed_id
		idw_profile_ldr_form_dragon.object.rb_3[ll_ldr_supplement_row] = ls_rb_3
		idw_profile_ldr_form_dragon.object.rb_4[ll_ldr_supplement_row] = ls_rb_4
		idw_profile_ldr_form_dragon.object.profile_waste_managed_id_5[ll_ldr_supplement_row] = ll_profile_waste_managed_id
		idw_profile_ldr_form_dragon.object.profile_waste_managed_id_6[ll_ldr_supplement_row] = ll_profile_waste_managed_id
		idw_profile_ldr_form_dragon.object.wcr_sign_name[ll_ldr_supplement_row] = ls_signing_name  
		idw_profile_ldr_form_dragon.object.wcr_sign_title[ll_ldr_supplement_row] = ls_signing_title 
		idw_profile_ldr_form_dragon.object.wcr_sign_date[ll_ldr_supplement_row] = ld_signing_date 
		idw_profile_ldr_form_dragon.object.wcr_sign_company[ll_ldr_supplement_row] = ls_signing_company
		IF ls_constituents_requiring_treatment_flag = 'T'  THEN 
			ls_yes_no_q8 = 'T'
		ELSE
			ls_yes_no_q8 = 'F'
		END IF
		IF ll_formldrsubcat_count > 0 THEN 
				ls_yes_no_q9 = 'T'
			ELSE
				ls_yes_no_q9 = 'F'
		END IF 
		idw_profile_ldr_form_dragon.object.yes_no_1[ll_ldr_supplement_row] = ls_yes_no_q8
		idw_profile_ldr_form_dragon.object.yes_no_2[ll_ldr_supplement_row] = ls_yes_no_q9

		il_profile_waste_managed_id= ll_profile_waste_managed_id

		
	 END IF
END IF  //LDR End

end subroutine

public subroutine wf_set_other_billunit (datawindow adw_datawindow);long ll_profile_id, ll_count,ll_dummy_row
string ls_billunit_code,ls_bill_unit_code

ll_profile_id = this.wf_get_profile_id( )
		  
		SELECT  count(distinct p.bill_unit_code) 
		 INTO :ll_count
		FROM    ProfileShippingUnit p
		WHERE p.bill_unit_code in ('GAL', 'LBS', 'TONS')
		AND quantity is not null AND quantity > 0
		and profile_id = :ll_profile_id
		using itr_share;
		
		IF ll_count > 1 THEN
			      ll_dummy_row  = 1
				DECLARE bill_unit_code_cursor CURSOR FOR  
				    SELECT  Distinct p.bill_unit_code
					FROM    ProfileShippingUnit p
					WHERE p.bill_unit_code in ('GAL', 'LBS', 'TONS')
					AND quantity is not null AND quantity > 0
					and profile_id = :ll_profile_id
					GROUP BY p.bill_unit_code
					using itr_share;
		
				OPEN bill_unit_code_cursor;
				DO WHILE itr_share.SQLCode = 0
					FETCH bill_unit_code_cursor INTO :ls_billunit_code;
					IF itr_share.SQLCode = 0 THEN
						IF ll_dummy_row = 1 THEN 
						      ls_bill_unit_code =  ls_billunit_code
						ELSE
							   ls_bill_unit_code +=  ', ' + ls_billunit_code
						END IF
					 ELSEIF itr_share.SQLCode = -1 THEN
						MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading Bill Unit Code" + &
							"~nPress OK to Continue.", StopSign!)
						CLOSE bill_unit_code_cursor;
					END IF
					ll_dummy_row++
				LOOP
				CLOSE bill_unit_code_cursor;
				
			IF  adw_datawindow.Dataobject = "d_profile_ship_pkg_info_form_dragon_2" THEN
				idw_wcr_display_1.object.container_type_other[idw_wcr_display_1.Getrow()] = 'T'
				idw_wcr_display_1.object.container_type_other_desc[idw_wcr_display_1.Getrow()] = ls_bill_unit_code
				idw_wcr_display_1.setitemstatus(idw_wcr_display_1.Getrow(),0,Primary!,NotModified!)
			END IF
			//DevOps:20070 - commented below code. This is causing shipping tab save problem. Since we are setting up above dw, 
			   ///automatically shipping will set up the values. so no need to set up to shipping.
//			IF adw_datawindow.Dataobject  = "d_profile_shipping_dragon" THEN
//				idw_shipping.object.container_type_other[idw_shipping.Getrow()] = 'T'
//				idw_shipping.object.container_type_other_desc[idw_shipping.Getrow()] = ls_bill_unit_code
//				idw_shipping.setitemstatus(idw_shipping.Getrow(),0,Primary!,NotModified!)
//			END IF
		END IF
end subroutine

public function integer wf_validate_form_multiple_users (long al_form_id);/* 
// COR2 - 
Function/Event: wf_validate_form_multiple_users
Author        : 	(FHC) Francy Hernandez Crowley
Created       : 	06/24/2020
Purpose       :	To Prevent multiple users from updating a form. In order to udpate a form the 
					display_status_uid has to be 5 (Submitted) only

 Note(s). 
 
 Input Parameters: form_id

 Output Parameters: ReturnCode -1 you cannot SAVE, 1 you can continue and save

 ---------------------- Revision History ------------------------------------------------
Version  Modified by   	   Date    Description of change
-------    -------------  -------- ---------------------------------------------------------
   01                                
*/

Integer		li_display_status_uid, li_ReturnCode

li_ReturnCode = 1

	SELECT display_status_uid
	INTO :li_display_status_uid
	FROM formWCR
	WHERE 
	form_id = :al_form_id and revision_id = (SELECT max(revision_id) FROM formwcr WHERE form_id = :al_form_id)
	USING itr_share;
	
	IF itr_share.SQLCODE = -1 THEN 
		Messagebox('SQL Error', 'Error retrieving Form Display Status! ' + itr_share.SQLErrText)
	ELSE
		IF li_display_status_uid = 5  THEN
			li_ReturnCode = 1 	// It is ok to save
		ELSE
			li_ReturnCode = -1
		END IF
	END IF

Return li_ReturnCode
end function

public subroutine wf_upd_copy_source ();//DevOps 16864 info_gde 07/22/2020; Docs Pending - Drop-down Option
string ls_sql, ls_string, ls_blank, ls_tracking_type
integer li_count
long ll_profile_id
ls_blank=''

//		li_count=idw_header.rowcount()
		li_count = idw_header.getrow()
		
		If li_count > 0 then
		   ll_profile_id=idw_header.object.profile_id[li_count]
			ls_tracking_type = idw_header.object.tracking_type[li_count]
		   ls_string =	idw_header.object.doc_status_reason[li_count]
            if isNull(ls_string) then ls_string=''
				
		   choose case lower(ls_string)
			case 'rejection in process'
					 ls_sql = "UPDATE dbo.FormWCR SET display_status_uid = "+string(7) +" , copy_source = 'csnew'  WHERE display_status_uid in (1,2,5,7,8) AND dbo.FormWCR.profile_id IN ( " + String(ll_profile_id) + ")"
					EXECUTE IMMEDIATE :ls_sql USING itr_share;
					IF itr_share.SQLCode = 0 THEN
					COMMIT USING itr_share;
					
					idw_detail.object.b_reject_form.visible=true  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.form_ids.visible=true   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.compute_10.visible=true   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					ELSE
					ROLLBACK USING itr_share;
					MessageBox(gs_app_name + ":  Error - wf_upd_copy_source", "Cannot update Copy Source.  Contact the I.T. Department.", Exclamation!)
					END IF
					 
			case 'amendment in process'
				    ls_string='amendment'
				    ls_sql = "UPDATE dbo.FormWCR SET copy_source = '"+string(ls_string)+"'"  +" WHERE display_status_uid in (1,2,5,7,8) AND dbo.FormWCR.profile_id IN ( " + String(ll_profile_id) + ")"
					EXECUTE IMMEDIATE :ls_sql USING itr_share;
					IF itr_share.SQLCode = 0 THEN
					COMMIT USING itr_share;
					
					idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					ELSE
					ROLLBACK USING itr_share;
					MessageBox(gs_app_name + ":  Error - wf_upd_copy_source", "Cannot update Copy Source.  Contact the I.T. Department.", Exclamation!)
					END IF
				
			case 'renewal in process'
				   ls_string='renewal'
				   ls_sql = "UPDATE dbo.FormWCR SET copy_source = '"+string(ls_string)+"'"  +" WHERE display_status_uid in (1,2,5,7,8) AND dbo.FormWCR.profile_id IN ( " + String(ll_profile_id) + ")"
					EXECUTE IMMEDIATE :ls_sql USING itr_share;
					IF itr_share.SQLCode = 0 THEN
					COMMIT USING itr_share;
					
					idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					ELSE
					ROLLBACK USING itr_share;
					MessageBox(gs_app_name + ":  Error - wf_upd_copy_source", "Cannot update Copy Source.  Contact the I.T. Department.", Exclamation!)
					END IF
					
			 case 'profile sync required', '' 
//				if upper(trim(ls_tracking_type)) = 'NEW' then //DevOps 17126
					ls_sql = "UPDATE dbo.FormWCR SET copy_source = '"+string('csnew')+"'"  +" , display_status_uid=1 WHERE display_status_uid in (1,2,5,7,8) AND dbo.FormWCR.profile_id IN ( " + String(ll_profile_id) + ")"
//				else
//				   ls_sql = "UPDATE dbo.FormWCR SET copy_source = '"+string('copy')+"'"  +" , display_status_uid=8 WHERE display_status_uid in (1,2,5,7,8) AND dbo.FormWCR.profile_id IN ( " + String(ll_profile_id) + ")"
//				end if
					EXECUTE IMMEDIATE :ls_sql USING itr_share;
					IF itr_share.SQLCode = 0 THEN
					COMMIT USING itr_share;
					
					idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
					ELSE
					ROLLBACK USING itr_share;
					MessageBox(gs_app_name + ":  Error - wf_upd_copy_source", "Cannot update Copy Source.  Contact the I.T. Department.", Exclamation!)
					END IF
			end choose
			end if
end subroutine

public subroutine wf_docs_pending_msg ();long ll_profile_id,ll_form_id, ll_time
string ls_doc_status_reason,ls_docs,ls_copy_source
int li_HEADER,li_display_status_uid
//wait_seconds(01) //17661 - commented this line, this is causing the problem on w_wcr screen

//Added this line for TFS issue per oswin. 
//DevOps 17341 info_gde; 09/30/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
//DevOps 17126 copied code from tab_1.selectionchanged to dw_header.rowfocuschanged because it should fire for all rows selected, not just the first row
	SetNull(ls_doc_status_reason)
	//DevOps 16592 info_gde 07/06/2020; PROD EQAI - Docs Pending - Wrong Validation Message Prompted 
		IF ib_posted_docs_pending THEN
		If idw_header.getrow()>0 Then  
			li_HEADER=idw_header.getrow()
			ls_docs=idw_header.object.document_update_status.primary[li_HEADER]
			ll_profile_id=idw_header.object.profile_id.primary[li_HEADER]
			ll_form_id=idw_header.object.form_id_wcr.primary[li_HEADER]
			If ls_docs='P' Then  
				SELECT TOP 1 copy_source,display_status_uid
				INTO :ls_copy_source,:li_display_status_uid 
				FROM dbo.FormWCR
				WHERE profile_id  = :ll_profile_id
				AND display_status_uid in (1,2,5,7,8) 
				Order By date_created desc
				USING itr_share;
				
				SELECT TOP 1 doc_status_reason 
				INTO :ls_doc_status_reason 
				FROM dbo.Profile
				WHERE profile_id  = :ll_profile_id  //see DevOps 17341 info_gde; 10/01/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
				//AND lower(doc_status_reason) not in ('amendment in process','renewal in process','rejection in process', 'profile sync required') 
				Order By date_added desc
				USING itr_share;
				
				IF NOT isNull(ll_form_id) AND ll_form_id >0 THEN  
				//Dev 17338 info_gde 09/24/2020;Profile Tracking - Missing 'Reject Form' Button
				idw_detail.SetRedraw(false)
				//wait_seconds(01)//DevOps 17341 info_gde 10/13/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
  				choose case  lower(ls_copy_source)
					case 'amendment'
						//IF copy_source = 'amendment'  then show MESSAGE for B
						MessageBox("Docs Pending - Amendment in Process.","A Form has been generated and sent to the customer for completion."+'~n~r'+"Edits should not be made to the profile until the Form has been processed.")
					case 'renewal'
						//IF copy_source = 'amendment'  then show MESSAGE for A
						MessageBox("Docs Pending - Renewal in Process.","A Form has been generated and sent to the customer for completion.  Edits should not be made to the profile until the Form has been processed.")				
					case else 
						If li_display_status_uid=7 Then  
						// then show MESSAGE for C
							MessageBox("Docs Pending - Rejection in Process.","This profile has been rejected and sent to the customer for review.  Edits should not be made to the profile until the customer has resubmitted from COR.")			
						ElseIf not IsNull(ls_doc_status_reason) AND ls_doc_status_reason<>'' Then
							MessageBox("Docs Pending - " +ls_doc_status_reason, "This profile has documents pending.  This profile should not be approved until the customer has provided the requested documents.")  
						End If  
				end choose
			ELSEIF not IsNull(ls_doc_status_reason) AND ls_doc_status_reason<>'' Then
							MessageBox("Docs Pending - " +ls_doc_status_reason, "This profile has documents pending.  This profile should not be approved until the customer has provided the requested documents.")  
			END IF  
			   
				  idw_detail.SetRedraw(true)
				
				 // Dev 17338 info_gde 09/24/2020;Profile Tracking - Missing 'Reject Form' Button
		End If   
		End If  
			//DevOps 16592 info_gde 07/06/2020; PROD EQAI - Docs Pending - Wrong Validation Message Prompted 
			//ib_docs_pending=FALSE
			//ib_posted_docs_pending=FALSE
		END IF
		
end subroutine

public subroutine wait_seconds (integer pas_parameter);//DevOps 17341 info_gde; 09/30/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
time lt_now, a

 a = Time(RelativeTime(Now(),pas_parameter))
Do
  lt_now=Now() 
  yield()
Loop Until lt_now >= a


end subroutine

public function integer wf_composition_empty_rows_check ();//DevOps 17369 info_gde 11/23/2020; Section D1 - Validation Warning Message Updates
long ll_rowcount, ll_row
string ls_desc

idw_composition.AcceptText()
	ll_rowcount = idw_composition.Rowcount()
	string ls_comp_from_pct, ls_comp_to_pct,ls_comp_typical_pct
		FOR ll_row = ll_rowcount TO 1 Step -1 
			ls_desc = idw_composition.object.comp_description[ll_row]
			ls_comp_typical_pct = string(idw_composition.object.comp_typical_pct[ll_row])
			ls_comp_from_pct = string(idw_composition.object.comp_from_pct[ll_row])
			ls_comp_to_pct = string(idw_composition.object.comp_to_pct[ll_row])
			// Dont Let user to save if they enter only spaces.
			IF	trim (ls_desc) = "" THEN
				SetNull (ls_desc)
			END IF 
			IF  NOT IsNull(ls_desc) AND ls_desc <> '' THEN
				idw_composition.object.sequence_id[ll_row] = ll_row
			 ib_changed_comp = TRUE
			ELSE
				If (isNull(ls_comp_typical_pct) OR ls_comp_typical_pct="" OR  ls_comp_typical_pct='0') AND (isNull(ls_comp_from_pct) or ls_comp_from_pct="" OR  ls_comp_from_pct='0') AND (isNull(ls_comp_to_pct) or ls_comp_to_pct="" ) then
				    RETURN -1
					
				end if
			END IF
		NEXT
end function

public function integer wf_constituent_validate ();// Validation Warning Message Updates;DevOps 18322 info_gde 12/17/2020; EQAI-Compare Profile is not pulling over constituents correctly
long ll_rowcount, ll_row, ll_const_id, ll_const_id_rnt,ll_row_child
integer li_row, li_r
string ls_rtn_val,ls_rtn_val2
datawindowchild ldwc

idw_const.AcceptText()
ll_rowcount = idw_const.Rowcount()
FOR ll_row = ll_rowcount TO 1 Step -1 
	   ll_const_id=idw_const.object.const_id[ll_row]
			
	   Select Count(*)
	   Into :ll_const_id_rnt
	   From constituents
	   Where const_id=:ll_const_id
	   Using itr_share;
			
	   IF ll_const_id_rnt > 0 AND not isNull(ll_const_id_rnt) THEN 
				CONTINUE
		ELSE
					
				 MessageBox(gs_app_name + ":  Warning!", "Please contact the IT department to review the constituents on this profile.  There are constituents on the profile that do not exist in the master Constituent table.  This needs to be reviewed prior to allowing the Profile to be approved and used.")	
				
				Return 0
	   END IF
NEXT
		
		
		
		
		
end function

public subroutine wf_update_cor_consts ();//DevOps 18322 info_gde 12/31/2020; EQAI-Compare Profile is not pulling over constituents correctly
long ll_profile_id, ll_const_id, ll_row 
string ls_tri, ls_dhs, ls_air , ls_string, ls_current_color
int i

ll_profile_id=wf_get_profile_id()
ll_row=idw_const.rowcount()
if (ll_profile_id>0 and not isNull(ll_profile_id)) AND (ll_row>0 and not isNull(ll_row)) then
for i=1 to ll_row
	ll_const_id= idw_const.object.const_id[i]
	if ll_const_id<=0 or  isNull(ll_const_id) then CONTINUE
	SELECT Constituents.TRI,	Constituents.dhs,	Constituents.air_permit_restricted
		INTO :ls_tri,:ls_dhs,:ls_air
    FROM ProfileConstituent
	JOIN Constituents ON Constituents.const_id = ProfileConstituent.const_id
   WHERE ProfileConstituent.profile_id =:ll_profile_id	
	AND profileConstituent.const_id=:ll_const_id
	USING itr_share;
	
	idw_const.object.TRI[i] = ls_tri
	idw_const.object.constituents_dhs[i] = ls_dhs
	idw_const.object.air_permit_restricted[i] = ls_air
	ls_string = idw_const.Describe &
      ("Evaluate('LookupDisplay(const_id_2)', " + String(i) + ")")

	if 	isNumber(ls_string) then   
		// change the current colkumn background colour to red (255) but only for the current row
		wf_const_id_err(i, 'typical_concentration')
	else
		idw_const.SetItemStatus(i,0,primary!,NotModified!)
	end if
	
next
 	if 1 > 0 and 1 <= idw_const.rowcount() then
  		idw_const.setrow(1)
		idw_const.SelectRow(0, false)
		idw_const.SelectRow(1, true)
		idw_const.ScrolltoRow(1)
		idw_const.SetColumn('typical_concentration')
  	end if
end if

 
end subroutine

public function integer wf_const_id_err (long arg_currow, string arg_col);//DevOps 18322 info_gde 01/11/2021; EQAI-Compare Profile is not pulling over constituents correctly

String ls_column
Long ll_currow, ll_const_val
integer li_row
ll_currow=arg_currow
ls_column= arg_col
 

if ll_currow > 0 and ll_currow <= idw_const.rowcount() then
  	 idw_const.setrow(ll_currow)
	 idw_const.SelectRow(0, false)
	 idw_const.SelectRow(ll_currow, true)
	 idw_const.ScrolltoRow(ll_currow)
	 idw_const.SetColumn(ls_column)
else
	Return -1
end if

ll_const_val=idw_const.object.const_id_1[ll_currow]
 
idw_const.SetItemStatus(ll_currow,0,Primary!,NotModified!)
idw_const.SetItemStatus(ll_currow,'form_order',Primary!,NotModified!)
idw_const.SetItemStatus(ll_currow,'const_id_1',Primary!,NotModified!)

li_row=upperbound(gl_invalid_const_id)

If ll_const_val>0 and NOT isNull(ll_const_val) then
	  li_row= li_row + 1
	gl_invalid_const_id[li_row] = ll_const_val
end if

Return 1
end function

public function integer wf_const_id_fix ();// Validation Warning Message Updates;DevOps 18322 info_gde 12/17/2020; EQAI-Compare Profile is not pulling over constituents correctly
long ll_rowcount, ll_row, ll_const_id, ll_const_id_rnt,ll_row_child
integer li_row, li_r
string ls_rtn_val,ls_rtn_val2, ls_modify
boolean lb_fix=FALSE
datawindowchild ldwc


ll_rowcount = idw_const.Rowcount()
FOR ll_row = ll_rowcount TO 1 Step -1 
	   ll_const_id=idw_const.object.const_id[ll_row]
			
	   Select Count(*)
	   Into :ll_const_id_rnt
	   From constituents
	   Where const_id=:ll_const_id
	   Using itr_share;
			
	   IF ll_const_id_rnt > 0 AND not isNull(ll_const_id_rnt) THEN 
				CONTINUE
		ELSE		
		  		lb_fix=true
	   END IF
NEXT

idw_const.AcceptText()

IF lb_fix THEN   MessageBox(gs_app_name + ":  Warning!", "Please contact the IT department to review the constituents on this profile.  There are constituents on the profile that do not exist in the master Constituent table.  This needs to be reviewed prior to allowing the Profile to be approved and used.")	
				

RETURN 1
end function

public subroutine wf_wcr_generator_knowledge_supplement (long ar_form_id, long ar_rev_id, long ar_profile_id);Long ll_form_sectionstatus_count,ll_gen_know_supplement_rowcount,ll_profile_id,ll_gen_know_supplement_row,ll_row
String ls_signing_name,ls_signing_title,ls_signing_company,ls_locked,ls_ppe_code,ls_rcra_reg_metals,ls_rcra_reg_vo,ls_rcra_reg_svo,ls_added_by,ls_modified_by
String ls_rcra_reg_herb_pest,ls_material_cause_flash,ls_material_meet_alc_exempt,ls_analytical_comments,ls_rcra_reg_cyanide_sulfide,ls_rcra_reg_ph
String ls_generator_name,ls_state_id,ls_print_name
Decimal ld_specific_gravity
Datetime ld_signing_date, ld_date_added,ld_date_modified

ll_profile_id = ar_profile_id

SELECT signing_name,signing_date,signing_title,signing_company,G.generator_name,G.state_id
INTO :ls_signing_name,:ld_signing_date,:ls_signing_title,:ls_signing_company,:ls_generator_name,:ls_state_id
	FROM FormWCR
LEFT OUTER JOIN FormWCRTemplate T1 ON T1.template_form_id = FormWCR.form_id
LEFT OUTER JOIN FormWCRTemplate T2 ON T2.template_form_id = FormWCR.template_form_id 
LEFT OUTER JOIN Generator G ON G.generator_id = FormWCR.generator_id AND G.epa_id = FormWCR.epa_id 
WHERE form_id = :ar_form_id
AND 	revision_id = :ar_rev_id
USING itr_forms;

IF itr_forms.SQLCode < 0 then
	MessageBox ("SQL Error", itr_forms.SQLErrText, exclamation!)
END IF

 //Generator Knowledge Supplement
SELECT Count(1) 
INTO :ll_form_sectionstatus_count
FROM formsectionstatus
WHERE form_id = :ar_form_id
AND revision_id = :ar_rev_id
AND  section = 'GK'
AND isactive = 1 
USING itr_forms;

IF itr_forms.SQLCode < 0 then
	MessageBox ("SQL Error", itr_forms.SQLErrText, exclamation!)
END IF
		 
IF ll_form_sectionstatus_count > 0 THEN
	 SELECT 
	    profile_id,
		locked,
		specific_gravity,
		ppe_code, 
		rcra_reg_metals,
		rcra_reg_vo,
		rcra_reg_svo,
		rcra_reg_herb_pest,
		rcra_reg_cyanide_sulfide,
		rcra_reg_ph,
		material_cause_flash,
		material_meet_alc_exempt,
		analytical_comments,
		print_name, 	
		created_by,
		date_created,
		modified_by,
		date_modified
	 INTO
	 :ar_profile_id,
	 :ls_locked,
	 :ld_specific_gravity,
	 :ls_ppe_code, 
	 :ls_rcra_reg_metals,
	 :ls_rcra_reg_vo,
	 :ls_rcra_reg_svo,
	 :ls_rcra_reg_herb_pest,
	 :ls_rcra_reg_cyanide_sulfide,
	 :ls_rcra_reg_ph,
	 :ls_material_cause_flash,
	 :ls_material_meet_alc_exempt,
	 :ls_analytical_comments,
	 :ls_print_name, 	
	 :ls_added_by,
	 :ld_date_added,
	 :ls_modified_by,
	 :ld_date_modified		
	FROM FormGeneratorKnowledge 
		WHERE FormGeneratorKnowledge.form_id =  :ar_form_id
		AND 	FormGeneratorKnowledge.revision_id =  :ar_rev_id
	  USING itr_forms;
	
	IF itr_forms.SQLCode < 0 then
	    MessageBox ("SQL Error", itr_forms.SQLErrText, exclamation!)
    END IF

	IF idw_header.getrow () > 0 THEN
		idw_header.Object.state_id[ idw_header.getrow () ] = ls_state_id
	END IF
	
	ll_gen_know_supplement_rowcount = idw_gen_knowledge_supplement.RowCount()
	
		IF ll_gen_know_supplement_rowcount <= 0 THEN
			ll_row = idw_gen_knowledge_supplement.InsertRow(0)
		END IF
	
	 ll_gen_know_supplement_row = idw_gen_knowledge_supplement.GetRow()
	 IF ll_gen_know_supplement_row >0 THEN			
	  	idw_gen_knowledge_supplement.object.profile_id[ll_gen_know_supplement_row] = ll_profile_id
		idw_gen_knowledge_supplement.object.locked[ll_gen_know_supplement_row] = ls_locked
		idw_gen_knowledge_supplement.object.state_id[ll_gen_know_supplement_row] = ls_state_id
		idw_gen_knowledge_supplement.object.specific_gravity[ll_gen_know_supplement_row] = ld_specific_gravity
		idw_gen_knowledge_supplement.object.ppe_code[ll_gen_know_supplement_row] = ls_ppe_code
		idw_gen_knowledge_supplement.object.rcra_reg_metals[ll_gen_know_supplement_row] = ls_rcra_reg_metals
		idw_gen_knowledge_supplement.object.rcra_reg_vo[ll_gen_know_supplement_row] = ls_rcra_reg_vo
		idw_gen_knowledge_supplement.object.rcra_reg_svo[ll_gen_know_supplement_row] = ls_rcra_reg_svo  
		idw_gen_knowledge_supplement.object.rcra_reg_herb_pest[ll_gen_know_supplement_row] = ls_rcra_reg_herb_pest 
		idw_gen_knowledge_supplement.object.rcra_reg_cyanide_sulfide[ll_gen_know_supplement_row] = ls_rcra_reg_cyanide_sulfide 
		idw_gen_knowledge_supplement.object.rcra_reg_ph[ll_gen_know_supplement_row] = ls_rcra_reg_ph	
		idw_gen_knowledge_supplement.object.material_cause_flash[ll_gen_know_supplement_row] = ls_material_cause_flash
		idw_gen_knowledge_supplement.object.material_meet_alc_exempt[ll_gen_know_supplement_row] = ls_material_meet_alc_exempt
		idw_gen_knowledge_supplement.object.analytical_comments[ll_gen_know_supplement_row] = ls_analytical_comments
	    idw_gen_knowledge_supplement.object.print_name[ll_gen_know_supplement_row] = ls_print_name	
	    idw_gen_knowledge_supplement.object.added_by[ll_gen_know_supplement_row] = ls_added_by	
		idw_gen_knowledge_supplement.object.date_added[ll_gen_know_supplement_row] = ld_date_added	
		idw_gen_knowledge_supplement.object.modified_by[ll_gen_know_supplement_row] = ls_modified_by	
	    idw_gen_knowledge_supplement.object.date_modified[ll_gen_know_supplement_row] = ld_date_modified			
		idw_gen_knowledge_supplement.object.wcr_sign_name[ll_gen_know_supplement_row] = ls_signing_name  
		idw_gen_knowledge_supplement.object.wcr_sign_title[ll_gen_know_supplement_row] = ls_signing_title 
		idw_gen_knowledge_supplement.object.wcr_sign_date[ll_gen_know_supplement_row] = ld_signing_date 
		idw_gen_knowledge_supplement.object.wcr_sign_company[ll_gen_know_supplement_row] = ls_signing_company		
	 END IF
END IF 



end subroutine

public function string wf_validate_generator_knowledge (string as_profile_status, long al_profile_id);Long ll_gen_know_supplement_rowcount,ll_specific_gravity,ll_gen_know_supplement_row,ll_header_row,ll_winnie_company,ll_rowcount
String ls_ppe_code,ls_rcra_reg_metals,ls_rcra_reg_vo,ls_rcra_reg_svo, ls_specific_technology_requested,ls_print_name,ls_winnie_facility
String ls_rcra_reg_herb_pest,ls_material_cause_flash,ls_material_meet_alc_exempt,ls_analytical_comments,ls_rcra_reg_cyanide_sulfide,ls_rcra_reg_ph	
String ls_msg_validate = ''
Int i

			
If as_profile_status = 'A' and ( not IsNull(al_profile_id) and al_profile_id > 0 ) then
	
	if IsValid(idw_header) then ll_header_row = idw_header.GetRow()
	if IsValid(idw_gen_knowledge_supplement) then ll_gen_know_supplement_row = idw_gen_knowledge_supplement.GetRow()
	
	ls_specific_technology_requested = idw_header.object.specific_technology_requested [ll_header_row]
	
	ll_rowcount = idw_wcr_facility.Rowcount ()
	FOR i = 1 to ll_rowcount
		ll_winnie_company = idw_wcr_facility.Object.company_id[i]
		IF ll_winnie_company = 55 THEN
			 ls_winnie_facility = 'US Ecology Winnie' 
		ELSE
			ls_winnie_facility = ""
		END IF
	NEXT

	if ( ll_gen_know_supplement_row > 0 and ll_header_row > 0 ) then				
		ll_specific_gravity = idw_gen_knowledge_supplement.object.specific_gravity[ll_gen_know_supplement_row] 
		ls_ppe_code = idw_gen_knowledge_supplement.object.ppe_code[ll_gen_know_supplement_row] 
		ls_rcra_reg_metals = idw_gen_knowledge_supplement.object.rcra_reg_metals[ll_gen_know_supplement_row] 
		ls_rcra_reg_vo = idw_gen_knowledge_supplement.object.rcra_reg_vo[ll_gen_know_supplement_row] 
		ls_rcra_reg_svo = idw_gen_knowledge_supplement.object.rcra_reg_svo[ll_gen_know_supplement_row]   
		ls_rcra_reg_herb_pest = idw_gen_knowledge_supplement.object.rcra_reg_herb_pest[ll_gen_know_supplement_row]  
		ls_rcra_reg_cyanide_sulfide = idw_gen_knowledge_supplement.object.rcra_reg_cyanide_sulfide[ll_gen_know_supplement_row]  
		ls_rcra_reg_ph = idw_gen_knowledge_supplement.object.rcra_reg_ph[ll_gen_know_supplement_row] 	
		ls_material_cause_flash = idw_gen_knowledge_supplement.object.material_cause_flash[ll_gen_know_supplement_row] 
		ls_material_meet_alc_exempt = idw_gen_knowledge_supplement.object.material_meet_alc_exempt[ll_gen_know_supplement_row] 
	end if
	
	IF ls_specific_technology_requested  = 'T' AND ls_winnie_facility = 'US Ecology Winnie' THEN 
		
		IF ( IsNull(ll_specific_gravity) OR ll_specific_gravity = 0 ) THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - Specific Gravity is required." 
			ELSE
				ls_msg_validate = ls_msg_validate + "~nGenerator Knowledge - Specific Gravity is required." 
			END IF			
		END IF
		
		IF ( IsNull(ls_ppe_code) OR  ls_ppe_code = '' OR len(ls_ppe_code) < 1 ) THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - PPE Code."
			ELSE
				ls_msg_validate = ls_msg_validate +  "~nGenerator Knowledge - PPE Code." 
			END IF			
		END IF
		
		IF ( ls_rcra_reg_metals = '' OR IsNull(ls_rcra_reg_metals) OR len(ls_rcra_reg_metals) < 1 ) THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - RCRA REG Metals."
			ELSE
				ls_msg_validate = ls_msg_validate +  "~nGenerator Knowledge - RCRA REG Metals." 
			END IF			
		END IF
		
		IF  ( ls_rcra_reg_vo = '' OR IsNull(ls_rcra_reg_vo) OR len(ls_rcra_reg_vo) < 1 )  THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - RCRA Reg VO." 
			ELSE
				ls_msg_validate = ls_msg_validate + "~nGenerator Knowledge - RCRA Reg VO." 
			END IF			
		END IF
		
		IF ( ls_rcra_reg_svo = '' OR IsNull(ls_rcra_reg_svo) OR len(ls_rcra_reg_svo) < 1 )  THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - RCRA Reg SVO." 
			ELSE
				ls_msg_validate = ls_msg_validate +"~nGenerator Knowledge - RCRA Reg SVO." 
			END IF			
		END IF
		
		IF ( ls_rcra_reg_herb_pest = '' OR IsNull(ls_rcra_reg_herb_pest) OR len(ls_rcra_reg_herb_pest) < 1 ) THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - RCRA Reg Herb Pest."
			ELSE
				ls_msg_validate = ls_msg_validate + "~nGenerator Knowledge - RCRA Reg Herb Pest." 
			END IF			
		END IF
		
		IF ( ls_rcra_reg_cyanide_sulfide = '' OR IsNull(ls_rcra_reg_cyanide_sulfide) OR len(ls_rcra_reg_cyanide_sulfide) < 1 ) THEN
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - RCRA Reg Cyanide Sulfide."
			ELSE
				ls_msg_validate = ls_msg_validate +  "~nGenerator Knowledge - RCRA Reg Cyanide Sulfide." 
			END IF			
		END IF
		
		IF ( ls_rcra_reg_ph = '' OR IsNull(ls_rcra_reg_ph) OR len(ls_rcra_reg_ph) < 1 ) THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - RCRA Reg PH." 
			ELSE
				ls_msg_validate = ls_msg_validate +   "~nGenerator Knowledge - RCRA Reg PH." 
			END IF			
		END IF
		
		IF ( ls_material_cause_flash = '' OR IsNull(ls_material_cause_flash) OR len(ls_material_cause_flash) < 1 ) THEN
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - Material Cause Flash."
			ELSE
				ls_msg_validate = ls_msg_validate +  "~nGenerator Knowledge - Material Cause Flash." 
			END IF			
		END IF
		
		IF ( ls_material_meet_alc_exempt = '' OR IsNull(ls_material_meet_alc_exempt) OR len(ls_material_meet_alc_exempt) < 1 ) THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Generator Knowledge - Material Meet ALC Exempt."
			ELSE
				ls_msg_validate = ls_msg_validate +  "~nGenerator Knowledge - Material Meet ALC Exempt." 
			END IF			
		END IF

   END IF
END IF

RETURN ls_msg_validate


end function

public function integer wf_get_first_last_tabcol (datawindow adw_source);/////////////////////////////////////////////////////
//  function    : wf_getlasttabcol
//  arguments   : datawindow adw_source
//  returns     : integer
//  description : Locates last column on dw that user
//                can edit.  
//                 
/////////////////////////////////////////////////////////
string ls_column_name,ls_protect, ls_eval, ls_visible, ls_eval_vis
long ll_row
integer li_colcount, li_i, li_tab, li_tmpcol1st, li_tab1st,li_tmptab1st, li_visible,li_protected
integer li_tmptab, li_tmpcol
li_tmptab1st= 999
li_colcount = integer(adw_source.Object.DataWindow.Column.Count)

//is_first_column

FOR li_i = 1 to li_colcount
  
    	ls_column_name = &
         	adw_source.Describe("#"+String(li_i)+".name")
	ls_visible = adw_source.Describe (ls_column_name + ".visible")
	ls_protect = adw_source.Describe(+ls_column_name+".Protect")
		
	IF ls_visible = "?" THEN CONTINUE
	
	IF NOT IsNumber(ls_visible) THEN  
	   // Get the expression following the tab (~t)   
      ls_visible = Right(ls_visible, &      
         Len(ls_visible) - Pos(ls_visible, "~t"))   
	 ll_row = adw_source.GetRow()
      
      // Build string for Describe visible. Include a leading   
      // quote to match the trailing quote that remains
         ls_eval_vis = "Evaluate(~"" + ls_visible + ", " &      
         + String(ll_row) + ")"   
			
      	ls_visible = adw_source.Describe(ls_eval_vis)
	 	li_visible = integer(ls_visible)	
	ELSE
		li_visible = integer(ls_visible)
	END IF		
	
	IF ls_protect = "?" THEN ls_protect = "1"
		
	IF NOT IsNumber(ls_protect) THEN  
      // Get the expression following the tab (~t)   
      ls_protect = Right(ls_protect, &      
         Len(ls_protect) - Pos(ls_protect, "~t"))   
	 ll_row = adw_source.GetRow()
      
      // Build string for Describe protect. Include a leading   
      // quote to match the trailing quote that remains
         ls_eval = "Evaluate(~"" + ls_protect + ", " &      
         + String(ll_row) + ")"   

      	ls_protect = adw_source.Describe(ls_eval)
		li_protected = integer(ls_protect)	
		ELSE
		li_protected = integer(ls_protect)
	END IF	
		
		
   IF li_visible = 0  OR (li_visible = 1 and li_protected = 1) THEN CONTINUE
	
   li_tab = &
        Integer(adw_source.Describe("#"+String(li_i)+".tabsequence"))
   if li_tab > li_tmptab then   // search for the highest tab number
      li_tmptab = li_tab         // track the tab id
      li_tmpcol = li_i          // track the column id
   end if
	
    li_tab1st = &
        Integer(adw_source.Describe("#"+String(li_i)+".tabsequence"))
   if li_tab1st <= li_tmptab1st AND li_tab1st <> 0 then   // search for the lowest tab number
      li_tmptab1st = li_tab1st         // track the tab id
      li_tmpcol1st = li_i          // track the column id
    end if
	
NEXT

is_first_column=adw_source.Describe("#"+String(li_tmpcol1st)+".name")

IF adw_source.GetColumn ( )=li_tmpcol THEN
	RETURN li_tmpcol
ELSE
	RETURN 0
END IF
end function

public function integer wf_adj_list_tab_size ();
/*	wf_Adj_List_Tab_Size

	This function will adjust Profile Tracking List screen's List tab to expand to 100% of the viewable Frame window.
	
	Arguments:
		
	Returns:
		0 = success (no errors) 
		
	DevOps 27525 info_gde 10/05/2022; Profile - Expand List and List with Prices tabs screen size

DatawindowObject 'd_profile_list_dragon contains a Nested Report.  In order to make dynamic modifications:
  1)  DataWindow.Processing is modified from 0 to 5 which allows Modify to make contact with the primary datawindow
  2)  Changing print.orientation from Default to 1 (landscape) to increase the width or the datawindow
  3) Changin Print.Paper.Size property from Default to 17 to further increase the Width of the datawindow.  The largest Width is (A0) ; I couldn't find an integer for it.
An integer indicating the size of the paper used for the output:
  0 – Default paper size for the printer
  15 – Quarto 215 x 275 mm
  16 – 10x14 in
  17 – 11x17 in                      <================================
  24 – C size sheet
  25 – D size sheet
*/

int li_frame = 42
string ls_rc

//ls_rc=tab_1.tabpage_4.dw_list.Modify("DataWindow.Print.Preview.Rulers = 'Yes'")

tab_1.width = this.width - li_frame
tab_1.height = this.height - li_frame

////////////////////////////LIST TAB ////////////////////////////////////////////////
ls_rc=idw_list.Modify("DataWindow.Processing = 5")
ls_rc=idw_list.Modify("DataWindow.print.orientation = 1")
ls_rc=idw_list.Modify("DataWindow.Print.Paper.Size=17")

tab_1.tabpage_4.width = this.width - li_frame
tab_1.tabpage_4.height = this.height - li_frame

tab_1.tabpage_4.dw_list.width = this.width -  (li_frame + 120)   
//tab_1.tabpage_4.dw_list.height = this.height - li_frame  //Comment by Uday for DevOps #58389 on 02/10/2023
tab_1.tabpage_4.dw_list.height = this.height - (li_frame + 250) //DevOps #58389 || 02/10/23  - Added by Uday to Adjust scroll bar visibility within the List tab in Profile Tracking screen

ls_rc=idw_list.Modify("DataWindow.Processing = 0")
////////////////////////////LIST TAB ////////////////////////////////////////////////

////////////////////////////LIST WITH PRICES TAB ////////////////////////////////////////////////
ls_rc=idw_list_prices.Modify("DataWindow.Processing = 5")
ls_rc=idw_list_prices.Modify("DataWindow.print.orientation = 1")
ls_rc=idw_list_prices.Modify("DataWindow.Print.Paper.Size=17")

tab_1.tabpage_3.width = this.width - li_frame
tab_1.tabpage_3.height = this.height - li_frame

tab_1.tabpage_3.dw_list_prices.width = this.width -  (li_frame + 120)   
tab_1.tabpage_3.dw_list_prices.height = this.height - li_frame 
ls_rc=idw_list_prices.Modify("DataWindow.Processing = 0")
////////////////////////////LIST WITH PRICES TAB ////////////////////////////////////////////////

Return 0
end function

public function string wf_validate_inb_outb_fed_haz_mi_codes ();long				ll_ob_tsdf_approval_id, ll_row_approval, ll_ob_eq_profile_id, ll_company_id, ll_row, ll_row_find, ll_null, li_colcount, li_i
Long                ll_waste_code_uid,ll_OB_EQ_company_id,ll_profile_id,ll_rowcount,ll_generator_id
string				ls_waste_code, ls_find, ls_fed_waste_code_error, ls_null, ls_msg_waste_code, ls_column_name, ls_columns_modified, ls_haz_flag, ls_state,ls_OB_approval
string				ls_state_waste_code_error, ls_approval_id,ls_outbound_state,ls_inbound_state,ls_in_state,ls_out_state,ls_outbound_location,ls_generator_state,ls_either_state_or_fed
datastore		lds_tsdf_approval_waste_code, lds_profile_waste_code
string               ls_approval_code
int 				i, li_profit_ctr_id
boolean			lb_row_was_modified, lb_any_row_was_modified = FALSE
dwItemStatus	ldwItemStatus

SetNull(ll_null)
SetNull(ls_null)
ls_msg_waste_code = ''

lds_tsdf_approval_waste_code = create datastore
lds_tsdf_approval_waste_code.DataObject = "d_tsdf_approval_waste_code"
lds_tsdf_approval_waste_code.SetTransObject(itr_share)

lds_profile_waste_code = create datastore
lds_profile_waste_code.DataObject = "d_profile_waste_code"
lds_profile_waste_code.SetTransObject(itr_share)

// AM - 03/08/23 - DevOps:61192 - For each approval, validate that the all of the profile's Federal Codes & Haz MI Codes should exists in Outbound approval location.

FOR ll_row_approval = 1 TO idw_approval.Rowcount()
	
	// Skip inactive approvals
	IF idw_approval.Object.status[ll_row_approval] = 'I' THEN CONTINUE
	
	ls_fed_waste_code_error = ''
	ls_state_waste_code_error = ''
	
	ll_company_id = idw_approval.Object.company_id[ll_row_approval]
	ll_OB_TSDF_approval_id = idw_approval.Object.OB_TSDF_approval_id[ll_row_approval] 
	ls_inbound_state =  idw_approval.Object.tsdf_state[ll_row_approval] 
	ls_outbound_location=  idw_approval.Object.location[ll_row_approval]
    ls_OB_approval = idw_approval.Object.OB_approval[ll_row_approval]
	li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval] 
	ls_approval_code = idw_approval.Object.approval_code[ll_row_approval] 
	
	IF ll_OB_TSDF_approval_id > 0 THEN
		// Outbound approval is a TSDF approval

		// Validate fed waste codes
		lds_tsdf_approval_waste_code.Retrieve(ll_OB_TSDF_approval_id, ll_company_id)
		FOR ll_row = 1 TO idw_waste_code_fed.RowCount()
			ll_waste_code_uid = idw_waste_code_fed.Object.waste_code_uid[ll_row]
			ls_waste_code = idw_waste_code_fed.Object.waste_code[ll_row]
			IF lds_tsdf_approval_waste_code.RowCount() > 0 THEN
				ls_find = "waste_code_uid = "+ String(ll_waste_code_uid) 
				ll_row_find = lds_tsdf_approval_waste_code.Find(ls_find, 1, lds_tsdf_approval_waste_code.RowCount() + 1 )
				IF ll_row_find <= 0 THEN
					IF ls_fed_waste_code_error = "" THEN
						ls_fed_waste_code_error = "Waste code(s) " + ls_waste_code
					ELSE
						ls_fed_waste_code_error = ls_fed_waste_code_error + ", " + ls_waste_code
					END IF
				END IF
			END IF
		NEXT

		//Added validation for hazardous MI state waste codes
		FOR ll_row = 1 TO idw_waste_code_state.RowCount()
			// Skip non-haz waste codes
			IF idw_waste_code_state.Object.haz_flag[ll_row] <> 'T' THEN CONTINUE
			ll_waste_code_uid = idw_waste_code_state.Object.waste_code_uid[ll_row]
			ls_waste_code = idw_waste_code_state.Object.waste_code[ll_row]
			ls_in_state = idw_waste_code_state.object.state[ll_row]
			
			IF lds_tsdf_approval_waste_code.RowCount() > 0 AND ls_in_state = 'MI'  THEN
					ls_find = "waste_code_uid = "+ String(ll_waste_code_uid) 
					ll_row_find = lds_tsdf_approval_waste_code.Find(ls_find, 1, lds_tsdf_approval_waste_code.RowCount() + 1 )
					IF ll_row_find <= 0 THEN
						IF ls_state_waste_code_error = "" THEN
							ls_state_waste_code_error = "State waste code(s) " + ls_waste_code
						ELSE
							ls_state_waste_code_error = ls_state_waste_code_error + ", " + ls_waste_code
						END IF
					END IF
			END IF
	     NEXT
    END IF

	IF ls_fed_waste_code_error <> ""  OR ls_state_waste_code_error <> "" THEN
	
		ls_either_state_or_fed = "Approval code " + ls_approval_code + " (" + string(ll_company_id) + '-' + string(li_profit_ctr_id) +  ")" + " contains a waste code that is not valid for the assigned outbound approval. Please review and make any necessary changes." 
		IF ls_msg_waste_code = "" THEN
			ls_msg_waste_code = ls_either_state_or_fed
		ELSE
			ls_msg_waste_code += '~r~r' + ls_either_state_or_fed
		END IF
	END IF
	
NEXT

DESTROY lds_tsdf_approval_waste_code
DESTROY lds_profile_waste_code

IF ls_msg_waste_code <> "" THEN
	MessageBox(gs_app_name + ":  Validation Warning(s)", ls_msg_waste_code + "~r~rAny other pending profile changes will be saved to the database if there are no validation errors.", Exclamation!)
END IF
	
RETURN ls_msg_waste_code
end function

public subroutine wf_set_caution_text ();// Dipankar - 7/3/2023 - New method added for #66431
string ls_hand_instruct, ls_problematic_customer_flag, ls_problematic_generator_flag
long	ll_customer_id, ll_header_row, ll_comment_row, ll_generator_id
string	ls_caution_text_customer = 'CAUTION – Problematic Customer, use extra caution when managing.'
string	ls_caution_text_generator = 'CAUTION - Problematic Generator, use extra caution when managing.'

ll_header_row = idw_header.GetRow()
IF ll_header_row <= 0 THEN RETURN

ll_customer_id 		= idw_header.Object.customer_id	[ll_header_row]
// DevOps 68965 - Note to developers: it's OK to return from this function at this point if there is no customer ID set on the profile, 
// before checking if there is a generator ID set on the profile, because you need both set on the profile to be able to save the profile.
IF IsNull(ll_customer_id) OR ll_customer_id = 0 THEN RETURN

// MPM - 7/18/2023 - DevOps 68965 - Added logic for problematic generator.
ll_generator_id 		= idw_header.Object.generator_id[ll_header_row]
// The generator ID could be 0 (meaning "VARIOUS"), so return only if the generator ID is null
IF IsNull(ll_generator_id) THEN RETURN

SELECT IsNull(problematic_customer_flag, 'F') 
INTO :ls_problematic_customer_flag
FROM Customer
WHERE customer_id = :ll_customer_id
USING itr_share; 

IF itr_share.SQLCode = -1 THEN
	MessageBox(gs_app_name + " - SQL Error", " Error encountered fetching Problematic Customer Flag - " + itr_share.SQLErrText)
	RETURN
ELSEIF itr_share.SQLCode = 100 THEN
	RETURN
END IF

SELECT IsNull(problematic_generator_flag, 'F') 
INTO :ls_problematic_generator_flag
FROM Generator
WHERE generator_id = :ll_generator_id
USING itr_share; 

IF itr_share.SQLCode = -1 THEN
	MessageBox(gs_app_name + " - SQL Error", " Error encountered fetching Problematic Generator Flag - " + itr_share.SQLErrText)
	RETURN
ELSEIF itr_share.SQLCode = 100 THEN
	RETURN
END IF

ls_hand_instruct = Trim(idw_comment.Object.hand_instruct[ll_header_row])
IF IsNull(ls_hand_instruct) THEN ls_hand_instruct = ""

IF ls_problematic_customer_flag = "T" AND ls_problematic_generator_flag = 'T' THEN
	IF ls_hand_instruct > "" THEN
		IF Pos(ls_hand_instruct, ls_caution_text_customer) = 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = ls_caution_text_customer + ' ' + ls_hand_instruct
			ls_hand_instruct = Trim(idw_comment.Object.hand_instruct[ll_header_row])
		END IF
		IF Pos(ls_hand_instruct, ls_caution_text_generator) = 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = ls_caution_text_generator + ' ' + ls_hand_instruct
		END IF
	ELSE
		idw_comment.Object.hand_instruct [ll_header_row] = ls_caution_text_customer + ' ' + ls_caution_text_generator
	END IF
ELSEIF ls_problematic_customer_flag = "T" AND ls_problematic_generator_flag = 'F' THEN
	IF ls_hand_instruct > "" THEN
		IF Pos(ls_hand_instruct, ls_caution_text_customer) = 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = ls_caution_text_customer + ' ' + ls_hand_instruct
			ls_hand_instruct = Trim(idw_comment.Object.hand_instruct[ll_header_row])
		END IF
		IF Pos(ls_hand_instruct, ls_caution_text_generator) > 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = Replace(ls_hand_instruct, Pos(ls_hand_instruct, ls_caution_text_generator), Len(ls_caution_text_generator), "")
		END IF
	ELSE
		idw_comment.Object.hand_instruct [ll_header_row] = ls_caution_text_customer 
	END IF
ELSEIF ls_problematic_customer_flag = "F" AND ls_problematic_generator_flag = 'T' THEN
	IF ls_hand_instruct > "" THEN
		IF Pos(ls_hand_instruct, ls_caution_text_generator) = 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = ls_caution_text_generator + ' ' + ls_hand_instruct
			ls_hand_instruct = Trim(idw_comment.Object.hand_instruct[ll_header_row])
		END IF
		IF Pos(ls_hand_instruct, ls_caution_text_customer) > 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = Replace(ls_hand_instruct, Pos(ls_hand_instruct, ls_caution_text_customer), Len(ls_caution_text_customer), "")
		END IF
	ELSE
		idw_comment.Object.hand_instruct [ll_header_row] = ls_caution_text_generator 
	END IF
ELSE // ls_problematic_customer_flag = "F" AND ls_problematic_generator_flag = 'F'
	IF ls_hand_instruct > "" THEN
		IF Pos(ls_hand_instruct, ls_caution_text_customer) > 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = Replace(ls_hand_instruct, Pos(ls_hand_instruct, ls_caution_text_customer), Len(ls_caution_text_customer), "")
			ls_hand_instruct = Trim(idw_comment.Object.hand_instruct[ll_header_row])
		END IF
		IF Pos(ls_hand_instruct, ls_caution_text_generator) > 0 THEN
			idw_comment.Object.hand_instruct [ll_header_row] = Replace(ls_hand_instruct, Pos(ls_hand_instruct, ls_caution_text_generator), Len(ls_caution_text_generator), "")
		END IF
	END IF
END IF
end subroutine

public function string wf_validate_caution_text ();// Dipankar - 7/3/2023 - New method added for #66431
// MPM - 7/25/2023 - DevOps 68965 - Added logic for problematic generator
string ls_hand_instruct, ls_problematic_customer_flag, ls_caution_text_customer = 'CAUTION – Problematic Customer, use extra caution when managing.', ls_msg = ''
string	ls_problematic_generator_flag, ls_caution_text_generator = 'CAUTION - Problematic Generator, use extra caution when managing.'
long	ll_customer_id, ll_header_row, ll_generator_id

ll_header_row = idw_header.GetRow()

ll_customer_id = idw_header.Object.customer_id	[ll_header_row]

SELECT IsNull(problematic_customer_flag, 'F') 
INTO :ls_problematic_customer_flag
FROM Customer
WHERE customer_id = :ll_customer_id
USING itr_share; 

IF itr_share.SQLCode = -1 THEN
	ls_msg = " Error encountered fetching Problematic Customer Flag - " + itr_share.SQLErrText
	RETURN ls_msg
END IF

ll_generator_id = idw_header.Object.generator_id	[ll_header_row]

SELECT IsNull(problematic_generator_flag, 'F') 
INTO :ls_problematic_generator_flag
FROM Generator
WHERE generator_id = :ll_generator_id
USING itr_share; 

IF itr_share.SQLCode = -1 THEN
	ls_msg = " Error encountered fetching Problematic Generator Flag - " + itr_share.SQLErrText
	RETURN ls_msg
END IF

ls_hand_instruct = Trim(idw_comment.Object.hand_instruct[ll_header_row])
IF IsNull(ls_hand_instruct) THEN ls_hand_instruct = ""

IF ls_problematic_customer_flag = "T" AND POS(ls_hand_instruct, ls_caution_text_customer) = 0 THEN
	ls_msg = 'Caution Text "' + ls_caution_text_customer + '" was not found in Special Handling Instructions. Please ensure the exact text is present.'
END IF

IF ls_problematic_generator_flag = "T" AND POS(ls_hand_instruct, ls_caution_text_generator) = 0 THEN
	IF ls_msg > '' THEN ls_msg += '~r~n'
	ls_msg += 'Caution Text "' + ls_caution_text_generator + '" was not found in Special Handling Instructions. Please ensure the exact text is present.'
END IF

RETURN ls_msg
end function

public subroutine wf_copy_fuels_blending (long ar_form_id, long ar_rev_id, long ar_profile_id);// Dipankar - 8/31/2023 - Added for #69393
Int				li_viscosity_value
Long 			ll_count, ll_rowcount, ll_row, ll_form_id, ll_revision_id
String 		ls_signing_name, ls_signing_title, ls_signing_company, ls_total_solids_low, ls_total_solids_high, ls_total_solids_description
DateTime 	ld_signing_date
Decimal		ldec_f_low, ldec_f_high, ldec_cl_low, ldec_cl_high, ldec_br_low, ldec_br_high, ldec_i_low,ldec_i_high
String         ls_total_solids_flag, ls_organic_halogens_flag, ls_fluorine_low_flag, ls_fluorine_high_flag, ls_chlorine_low_flag, ls_chlorine_high_flag, ls_bromine_low_flag, ls_bromine_high_flag, ls_iodine_low_flag, ls_iodine_high_flag


// Fuels Blending Supplement
SELECT 	Count(*) 
INTO 		:ll_count
FROM 	FormSectionStatus
WHERE 	form_id = :ar_form_id
AND 		revision_id = :ar_rev_id
AND  		section = 'FB'
AND 		isactive = 1 USING itr_forms;

SELECT 	signing_name, signing_date, signing_title, signing_company
INTO 		:ls_signing_name, :ld_signing_date, :ls_signing_title, :ls_signing_company
FROM 	FormWCR
WHERE 	form_id 		= :ar_form_id
AND 		revision_id 	= :ar_rev_id USING itr_forms;

IF ll_count > 0 THEN 
	SELECT  form_id,
				revision_id,
				viscosity_value,
				total_solids_low,
				total_solids_high,
				total_solids_description,
				fluorine_low,
				fluorine_high,
				chlorine_low,
				chlorine_high,
				bromine_low,
				bromine_high,
				iodine_low,
				iodine_high,
				// Prakash - 10/25/2023 - Begin - Added for DevOps #73666 
				total_solids_flag,
				organic_halogens_flag,
				fluorine_low_flag,
				fluorine_high_flag,
				chlorine_low_flag,
				chlorine_high_flag,
				bromine_low_flag,
				bromine_high_flag,
				iodine_low_flag,
				iodine_high_flag
				// Prakash - 10/25/2023 - End - Added for DevOps #73666 
	INTO		:ll_form_id,
				:ll_revision_id,
				:li_viscosity_value,
				:ls_total_solids_low,
				:ls_total_solids_high,
				:ls_total_solids_description,
				:ldec_f_low,
				:ldec_f_high,
				:ldec_cl_low,
				:ldec_cl_high,
				:ldec_br_low,
				:ldec_br_high,
				:ldec_i_low,
				:ldec_i_high,
				// Prakash - 10/25/2023 - Begin - Added for DevOps #73666 
				:ls_total_solids_flag,
				:ls_organic_halogens_flag,
				:ls_fluorine_low_flag,
				:ls_fluorine_high_flag,
				:ls_chlorine_low_flag,
				:ls_chlorine_high_flag,
				:ls_bromine_low_flag,
				:ls_bromine_high_flag,
				:ls_iodine_low_flag,
				:ls_iodine_high_flag
				// Prakash - 10/25/2023 - End - Added for DevOps #73666 
	FROM		FormEcoflo 
	WHERE 	wcr_id 	   =  :ar_form_id
  	AND 		wcr_rev_id =  :ar_rev_id
	USING 	itr_forms;

	ll_rowcount = idw_profile_fuels_blending.RowCount()
	
	IF ll_form_id > 0 THEN
		ll_row = idw_profile_fuels_blending.GetRow()
		IF ll_rowcount <= 0 THEN
			ll_row = idw_profile_fuels_blending.InsertRow(0)
			idw_profile_fuels_blending.Object.added_by 	[ll_row] = gs_user_id
			idw_profile_fuels_blending.Object.date_added  [ll_row] = DateTime(Today(), Now())	
		END IF
	END IF	
	
	IF ll_row > 0 THEN
			idw_profile_fuels_blending.Object.profile_id				[ll_row] = ar_profile_id
			idw_profile_fuels_blending.Object.viscosity_value 		[ll_row] = li_viscosity_value
			idw_profile_fuels_blending.Object.total_solids_low 	[ll_row] = ls_total_solids_low
			idw_profile_fuels_blending.Object.total_solids_high 	[ll_row] = ls_total_solids_high
			idw_profile_fuels_blending.Object.total_solids_description [ll_row] = ls_total_solids_description
			idw_profile_fuels_blending.Object.fluorine_low 		[ll_row] = ldec_f_low
			idw_profile_fuels_blending.Object.fluorine_high		[ll_row] = ldec_f_high
			idw_profile_fuels_blending.Object.chlorine_low 	[ll_row] = ldec_cl_low
			idw_profile_fuels_blending.Object.chlorine_high 	[ll_row] = ldec_cl_high
			idw_profile_fuels_blending.Object.bromine_low 	[ll_row] = ldec_br_low
			idw_profile_fuels_blending.Object.bromine_high 	[ll_row] = ldec_br_high
			idw_profile_fuels_blending.Object.iodine_low 		[ll_row] = ldec_i_low
			idw_profile_fuels_blending.Object.iodine_high 	     [ll_row] = ldec_i_high
			idw_profile_fuels_blending.Object.modified_by 	 [ll_row] = gs_user_id
			idw_profile_fuels_blending.Object.date_modified 	 [ll_row] = DateTime(Today(), Now())	
			idw_profile_fuels_blending.Object.wcr_sign_name [ll_row] = ls_signing_name  
			idw_profile_fuels_blending.Object.wcr_sign_title 	 [ll_row] = ls_signing_title 
			idw_profile_fuels_blending.Object.wcr_sign_date 	 [ll_row] = ld_signing_date 
			idw_profile_fuels_blending.Object.wcr_sign_company 	[ll_row] = ls_signing_company 
			// Prakash - 10/25/2023 - Begin - Added for DevOps #73666 
			idw_profile_fuels_blending.Object.total_solids_flag 		[ll_row] = ls_total_solids_flag
			idw_profile_fuels_blending.Object.	organic_halogens_flag	[ll_row] = ls_organic_halogens_flag
			idw_profile_fuels_blending.Object.	fluorine_low_flag	[ll_row] = ls_fluorine_low_flag
			idw_profile_fuels_blending.Object.	fluorine_high_flag	[ll_row] = ls_fluorine_high_flag
			idw_profile_fuels_blending.Object.	chlorine_low_flag	[ll_row] = ls_chlorine_low_flag
			idw_profile_fuels_blending.Object.	chlorine_high_flag	[ll_row] = ls_chlorine_high_flag
			idw_profile_fuels_blending.Object. bromine_low_flag		[ll_row] = ls_bromine_low_flag
			idw_profile_fuels_blending.Object.	bromine_high_flag	[ll_row] = ls_bromine_high_flag
			idw_profile_fuels_blending.Object.	iodine_low_flag	[ll_row] = ls_iodine_low_flag
			idw_profile_fuels_blending.Object.	iodine_high_flag	[ll_row] = ls_iodine_high_flag
			// Prakash - 10/25/2023 - End - Added for DevOps #73666 
	END IF
END IF
end subroutine

public function string wf_validate_fuels_blending (string as_profile_status, long al_profile_id);Long 			ll_header_row, ll_row, ll_rowcount, ll_i
String 		ls_specific_technology_requested, ls_msg_validate, ls_total_solids_low, ls_total_solids_high, ls_total_solids_description, ls_routing_facility
Boolean 		lb_greensboro_facility
Int				li_viscosity_value
Decimal		ldec_f_low, ldec_f_high, ldec_cl_low, ldec_cl_high, ldec_br_low, ldec_br_high, ldec_i_low,ldec_i_high
String         ls_total_solids_flag, ls_organic_halogens_flag, ls_fluorine_low_flag, ls_fluorine_high_flag, ls_chlorine_low_flag, ls_chlorine_high_flag, ls_bromine_low_flag, ls_bromine_high_flag, ls_iodine_low_flag, ls_iodine_high_flag
			
IF as_profile_status = 'A' AND (NOT IsNull(al_profile_id) AND al_profile_id > 0) THEN	
	IF IsValid(idw_header) THEN ll_header_row = idw_header.GetRow()
	IF IsValid(idw_profile_fuels_blending) THEN ll_row = idw_profile_fuels_blending.GetRow()
	
	ls_specific_technology_requested = idw_header.object.specific_technology_requested [ll_header_row]
	
	IF ls_specific_technology_requested = 'T' THEN
		ll_rowcount = idw_wcr_facility.RowCount ()
		FOR ll_i = 1 to ll_rowcount		
			IF idw_wcr_facility.Object.company_id[ll_i] = 73 AND  idw_wcr_facility.Object.profit_ctr_id [ll_i] = 94 THEN
				lb_greensboro_facility = TRUE // EcoFlo Inc. - Grrensboro NC
				EXIT
			END IF
		NEXT
	END IF
	
	/*
	SELECT REPLACE(STR(FormWCRAssignments.company_id, 2, 0), ' ', '0') + '-' +REPLACE(STR(FormWCRAssignments.profit_ctr_id, 2, 0), ' ', '0')
	INTO :ls_routing_facility
	FROM Profile
	JOIN FormWCRAssignments ON FormWCRAssignments.form_id = Profile.form_id_wcr	
	JOIN ProfitCenter ON ProfitCenter.company_id = FormWCRAssignments.company_id 
	AND ProfitCenter.profit_ctr_id = FormWCRAssignments.profit_ctr_id
	WHERE Profile.profile_id = :al_profile_id
	USING gtr_share;
	*/
	
	ls_routing_facility = idw_header.object.routing_facility [ll_header_row]	
	IF IsNull(ls_routing_facility) THEN ls_routing_facility = ''
	
	IF Pos(ls_routing_facility, '73-94') > 0 THEN
		lb_greensboro_facility = TRUE // EcoFlo Inc. - Grrensboro NC
	END IF
	
	IF lb_greensboro_facility THEN 
		IF (ll_row > 0 AND ll_header_row > 0) THEN				
			li_viscosity_value 				= idw_profile_fuels_blending.Object.viscosity_value 				[ll_row]
			ls_total_solids_low 			= idw_profile_fuels_blending.Object.total_solids_low  			[ll_row]
			ls_total_solids_high 			= idw_profile_fuels_blending.Object.total_solids_high				[ll_row]
			ls_total_solids_description	= idw_profile_fuels_blending.Object.total_solids_description 	[ll_row]
			ldec_f_low		= idw_profile_fuels_blending.Object.fluorine_low 		[ll_row]
			ldec_f_high		= idw_profile_fuels_blending.Object.fluorine_high		[ll_row]
			ldec_cl_low		= idw_profile_fuels_blending.Object.chlorine_low 		[ll_row]
			ldec_cl_high		= idw_profile_fuels_blending.Object.chlorine_high 	[ll_row]
			ldec_br_low		= idw_profile_fuels_blending.Object.bromine_low 	[ll_row]
			ldec_br_high	= idw_profile_fuels_blending.Object.bromine_high 	[ll_row]
			ldec_i_low		= idw_profile_fuels_blending.Object.iodine_low 		[ll_row]
			ldec_i_high		= idw_profile_fuels_blending.Object.iodine_high 		[ll_row]
			// Prakash - 10/25/2023 - Begin - Added for DevOps #73666 
			ls_total_solids_flag          = idw_profile_fuels_blending.Object.total_solids_flag			[ll_row] 
			ls_organic_halogens_flag = idw_profile_fuels_blending.Object.organic_halogens_flag	[ll_row] 
			ls_fluorine_low_flag         = idw_profile_fuels_blending.Object.fluorine_low_flag	     	[ll_row] 
			ls_fluorine_high_flag        = idw_profile_fuels_blending.Object.fluorine_high_flag	     	[ll_row] 
			ls_chlorine_low_flag         = idw_profile_fuels_blending.Object.chlorine_low_flag	     	[ll_row] 
			ls_chlorine_high_flag       = idw_profile_fuels_blending.Object.chlorine_high_flag      	[ll_row]
			ls_bromine_low_flag        = idw_profile_fuels_blending.Object.bromine_low_flag			[ll_row] 
			ls_bromine_high_flag       = idw_profile_fuels_blending.Object.bromine_high_flag	    	 	[ll_row] 
			ls_iodine_low_flag           = idw_profile_fuels_blending.Object.	iodine_low_flag          	[ll_row] 
			ls_iodine_high_flag          = idw_profile_fuels_blending.Object.	iodine_high_flag	    		[ll_row] 
			
			IF IsNull(ls_total_solids_flag) THEN ls_total_solids_flag = 'F'
			IF IsNull(ls_organic_halogens_flag) THEN ls_organic_halogens_flag = 'F'
			
			IF IsNull(ls_fluorine_low_flag) THEN ls_fluorine_low_flag = 'F'
			IF IsNull(ls_fluorine_high_flag) THEN ls_fluorine_high_flag = 'F'
			IF IsNull(ls_chlorine_low_flag) THEN ls_chlorine_low_flag = 'F'
			IF IsNull(ls_chlorine_high_flag) THEN ls_chlorine_high_flag = 'F'
			IF IsNull(ls_bromine_low_flag) THEN ls_bromine_low_flag = 'F'
			IF IsNull(ls_bromine_high_flag) THEN ls_bromine_high_flag = 'F'
			IF IsNull(ls_iodine_low_flag) THEN ls_iodine_low_flag = 'F'
			IF IsNull(ls_iodine_high_flag) THEN ls_iodine_high_flag = 'F'
			// Prakash - 10/25/2023 - End - Added for DevOps #73666 
		END IF
		
		IF (IsNull(li_viscosity_value) OR li_viscosity_value = 0) THEN 
			IF ls_msg_validate = "" THEN
				ls_msg_validate = "Fuels Blending - Viscosity Value." 
			ELSE
				ls_msg_validate = ls_msg_validate + "~nFuels Blending - Viscosity Value." 
			END IF			
		END IF
		
		// Dipankar - 10/27/2023 - If Condition added for #73666
		IF ls_total_solids_flag = 'F' THEN
			IF (IsNull(ls_total_solids_low) OR  ls_total_solids_low = '' OR len(ls_total_solids_low) < 1) THEN 
				IF ls_msg_validate = "" THEN
					ls_msg_validate = "Fuels Blending - Total Solids Low."
				ELSE
					ls_msg_validate = ls_msg_validate +  "~nFuels Blending - Total Solids Low." 
				END IF			
			END IF
			
			IF (IsNull(ls_total_solids_high) OR  ls_total_solids_high = '' OR len(ls_total_solids_high) < 1) THEN 
				IF ls_msg_validate = "" THEN
					ls_msg_validate = "Fuels Blending - Total Solids High."
				ELSE
					ls_msg_validate = ls_msg_validate +  "~nFuels Blending - Total Solids High." 
				END IF			
			END IF
			
			IF (IsNull(ls_total_solids_description) OR  ls_total_solids_description = '' OR len(ls_total_solids_description) < 1) THEN 
				IF ls_msg_validate = "" THEN
					ls_msg_validate = "Fuels Blending - Total Solids Description."
				ELSE
					ls_msg_validate = ls_msg_validate +  "~nFuels Blending - Total Solids Description." 
				END IF			
			END IF
		END IF
		
		// Dipankar - 10/27/2023 - Modified for #73666
		IF ls_organic_halogens_flag = 'F' THEN
			IF ls_fluorine_low_flag = 'F' THEN
				IF IsNull(ldec_f_low) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Fluorine Low." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Fluorine Low." 
					END IF			
				END IF
			END IF
				
			IF ls_fluorine_high_flag = 'F' THEN
				IF IsNull(ldec_f_high) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Fluorine High." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Fluorine High." 
					END IF			
				END IF
			END IF
			
			IF ls_chlorine_low_flag = 'F' THEN
				IF IsNull(ldec_cl_low) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Chlorine Low." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Chlorine Low." 
					END IF			
				END IF
			END IF
			
			IF ls_chlorine_high_flag = 'F' THEN
				IF IsNull(ldec_cl_high) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Chlorine High." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Chlorine High." 
					END IF			
				END IF
			END IF
			
			IF ls_bromine_low_flag = 'F' THEN
				IF IsNull(ldec_br_low) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Bromine Low." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Bromine Low." 
					END IF			
				END IF
			END IF
			
			IF ls_bromine_high_flag = 'F' THEN
				IF IsNull(ldec_br_high) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Bromine High." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Bromine High." 
					END IF			
				END IF
			END IF
			
			IF ls_iodine_low_flag = 'F' THEN
				IF IsNull(ldec_i_low) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Iodine Low." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Iodine Low." 
					END IF			
				END IF
			END IF
			
			IF ls_iodine_high_flag = 'F' THEN
				IF IsNull(ldec_i_high) THEN 
					IF ls_msg_validate = "" THEN
						ls_msg_validate = "Fuels Blending - Iodine High." 
					ELSE
						ls_msg_validate = ls_msg_validate + "~nFuels Blending - Iodine High." 
					END IF			
				END IF
			END IF
		END IF
   END IF
END IF

RETURN ls_msg_validate
end function

public subroutine wf_wcr_profile_map_create_3 (long al_i);//Prakash -10/18/23 - Added this new method due to "script too large" error in wf_wcr_profile_map_create_2 () for DevOps #73666
// Also, moved all Fuels Blending related logic here itself with renamed columns which was added against #69393
long ll_i

ll_i = al_i

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "profile_id"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "viscosity_value"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "total_solids_low"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "total_solids_high"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "total_solids_description"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "fluorine_low"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "fluorine_high"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "chlorine_low"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "chlorine_high"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "bromine_low"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "bromine_high"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "iodine_low"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "iodine_high"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_company"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_name"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_title"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "wcr_sign_date"
istr_wcr_profile_map[ll_i].dw_profile			= idw_header

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "total_solids_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "organic_halogens_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "fluorine_low_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "fluorine_high_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "chlorine_low_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "chlorine_high_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "bromine_low_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "bromine_high_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "iodine_low_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending

ll_i++ 
istr_wcr_profile_map[ll_i].dw_wcr				= idw_wcr_display_1
istr_wcr_profile_map[ll_i].wcr_dataobject	= "d_profile_fuels_blending_supplement"
istr_wcr_profile_map[ll_i].wcr_column		= "iodine_high_flag"
istr_wcr_profile_map[ll_i].dw_profile			= idw_profile_fuels_blending
end subroutine

public subroutine wf_set_noneapply (boolean ab_flag, string as_colname, long al_row, datawindow adw);// Dipankar - 10/26/2023 - Added for #73666
Dec ldec_null
String ls_null, ls_flag = 'F', ls_colname
Int li_protect=0, li_lastpos

IF al_row <= 0 THEN RETURN

SetNull(ldec_null)
SetNull(ls_null)

IF ab_flag THEN 
	ls_flag = 'T'
	li_protect = 1
END IF

CHOOSE CASE adw.DataObject
	CASE 'd_profile_fuels_blending_supplement' 
		CHOOSE CASE as_colname
			CASE 'total_solids_flag'
				IF ab_flag THEN
					adw.Object.total_solids_low				[al_row] = ls_null	
					adw.Object.total_solids_high			[al_row] = ls_null
					adw.Object.total_solids_description	[al_row] = ls_null
				END IF
				
				adw.Object.total_solids_low.Protect 			= ab_flag
				adw.Object.total_solids_high.Protect 			= ab_flag
				adw.Object.total_solids_description.Protect 	= ab_flag
			
			 CASE 'organic_halogens_flag'
				IF ab_flag THEN					
					adw.Object.fluorine_low		[al_row] = ldec_null	
					adw.Object.fluorine_high		[al_row] = ldec_null
					adw.Object.bromine_low		[al_row] = ldec_null	
					adw.Object.bromine_high	[al_row] = ldec_null
					adw.Object.chlorine_low		[al_row] = ldec_null	
					adw.Object.chlorine_high	[al_row] = ldec_null
					adw.Object.iodine_low		[al_row] = ldec_null	
					adw.Object.iodine_high		[al_row] = ldec_null
				END IF	
				
				adw.Object.fluorine_low_flag	[al_row] = ls_flag
				adw.Object.fluorine_high_flag	[al_row] = ls_flag
				adw.Object.bromine_low_flag	[al_row] = ls_flag
				adw.Object.bromine_high_flag	[al_row] = ls_flag
				adw.Object.chlorine_low_flag	[al_row] = ls_flag
				adw.Object.chlorine_high_flag	[al_row] = ls_flag
				adw.Object.iodine_low_flag		[al_row] = ls_flag
				adw.Object.iodine_high_flag	[al_row] = ls_flag
				
				adw.Object.fluorine_low.Protect 	= ab_flag	
				adw.Object.fluorine_high.Protect 	= ab_flag
				adw.Object.bromine_low.Protect 	= ab_flag	
				adw.Object.bromine_high.Protect 	= ab_flag
				adw.Object.chlorine_low.Protect 	= ab_flag	
				adw.Object.chlorine_high.Protect 	= ab_flag
				adw.Object.iodine_low.Protect 		= ab_flag	
				adw.Object.iodine_high.Protect 	= ab_flag
				
			CASE  'fluorine_low_flag',  'fluorine_high_flag',  'bromine_low_flag',  'bromine_high_flag', 'chlorine_low_flag',  'chlorine_high_flag', &
				     'iodine_low_flag',  'iodine_high_flag'
					  
				li_lastpos = LastPos(as_colname, "_") // This gets last position of _ in the column name
					  
				ls_colname = Replace(as_colname, li_lastpos, 5, "") // This replaces _flag with blank string to get corresponding halogen column
				
				IF ab_flag THEN
					adw.SetItem(al_row, ls_colname, ldec_null)				
				END IF

				IF (NOT ab_flag) AND adw.Object.organic_halogens_flag [al_row] <> ls_flag THEN
					adw.Object.organic_halogens_flag	[al_row] = ls_flag
				END IF
				
				adw.Modify(ls_colname +".Protect=" + String(li_protect))

			CASE ELSE
				// Nothing to do				
		END CHOOSE
	CASE ELSE
		// Nothing to do
END CHOOSE

end subroutine

public function long wf_item_changed_fuels_blending (long al_row, string as_col, ref string as_data, datawindow adw);// Dipankar - 10/26/2023 - Added for #73666 as max size exceeded for dw_wcr_display_1.itemchanged
Boolean lb_flag
String ls_null, ls_zero = '.00'
Decimal ldec_null, ldec_zero = 0
Long ll_return = 0

SetNull(ls_null)
SetNull(ldec_null)

CHOOSE CASE as_col			
	CASE  'total_solids_flag', 'organic_halogens_flag', 'fluorine_low_flag',  'fluorine_high_flag',  'bromine_low_flag',  'bromine_high_flag', &
			  'chlorine_low_flag',  'chlorine_high_flag',  'iodine_low_flag',  'iodine_high_flag'		
			  
			IF as_data = 'T' THEN lb_flag = TRUE ELSE lb_flag = FALSE
			
			wf_set_noneapply(lb_flag, as_col, al_row, adw)
	// Dipankar - 03/13/2024 - Modified for #78522
	CASE 'total_solids_low', 'total_solids_high'
		IF NOT IsNumber(as_data) THEN
			SetNull(as_data) 
			adw.SetItem(al_row, as_col, as_data) 
		ELSEIF Double(as_data) < 0 OR Double(as_data) > 100 THEN
			SetNull(as_data) 
			adw.SetItem(al_row, as_col, as_data)
		ELSE
			as_data = Left(String(Round(Double(as_data),2)), 5) // Dipankar - 10/31/2023 - Taking 5 Chars as per the field width
			adw.SetItem(al_row, as_col, as_data)
		END IF
		
		ll_return = 2
	// Dipankar - 03/13/2024 - Modified for #78522
	CASE 'fluorine_low',  'fluorine_high',  'bromine_low',  'bromine_high', 'chlorine_low',  'chlorine_high',  'iodine_low',  'iodine_high'		
		IF Len(as_data) = 0 OR Double(as_data) < 0 OR Double(as_data) > 100 THEN 
			SetNull(as_data)
			adw.SetItem(al_row, as_col, ldec_null)
			ll_return = 2
		END IF	
END CHOOSE

RETURN ll_return
end function

public function integer wf_validate_ib_with_preassigned_ob (long al_ob_eq_profile_id, long al_ob_company_id, long al_ob_profit_ctr_id);//Subhrajyoti For 38816 - -Profile Tracking - Modification to validation logic for pre-assigned outbound  
// Initial Version
// This function checks for the pre assigned outbound profiles , if the waste codes are not matching with the inbound profile id's waste codes and the outbound profile is going to a US Ecology faclity
// and the outbound profile is marked as lab pack or generic then the users should get the warning to proceed.


datastore lds_profile_waste_code,lds_profile_waste_code_federal
long ll_ib_profile_id,ll_row,ll_waste_code_uid,ll_row_find,ll_ob_profile_id,ll_company_id,ll_profit_ctr_id,ll_rowcount
int li_ret
string ls_waste_code,ls_find,ls_haz_flag,ls_in_state
boolean lb_match_found_fed,lb_match_found_state,lb_match_found
character lc_labpack_flag, lc_generic_flag,lc_usecology_facility

lds_profile_waste_code_federal = create datastore
lds_profile_waste_code_federal.dataobject = 'd_profile_waste_code_federal'
lds_profile_waste_code_federal.SetTransObject(itr_share)



//Get the inbound profile id
ll_ib_profile_id = idw_header.object.profile_id[idw_header.GetRow()]
lds_profile_waste_code_federal.Retrieve(ll_ib_profile_id)
//Get the outbound profile id
ll_ob_profile_id = al_ob_eq_profile_id

IF NOT ISNULL(ll_ob_profile_id) THEN
	//Not isull al_ob_eq_profile_id
	lds_profile_waste_code = create datastore
	lds_profile_waste_code.DataObject = "d_profile_waste_code"
	lds_profile_waste_code.SetTransObject(itr_share)
	
	lds_profile_waste_code.Retrieve(ll_ob_profile_id)
	FOR ll_row = 1 TO lds_profile_waste_code_federal.RowCount()
		ll_waste_code_uid = lds_profile_waste_code_federal.Object.waste_code_uid[ll_row]
		ls_waste_code = lds_profile_waste_code_federal.Object.waste_code[ll_row]
		IF lds_profile_waste_code.RowCount() > 0 THEN
			ls_find = "waste_code_uid = "+ String(ll_waste_code_uid)
			ll_row_find = lds_profile_waste_code.Find(ls_find, 1, lds_profile_waste_code.RowCount() + 1 )
			IF ll_row_find <= 0 THEN
				lb_match_found_fed = FALSE
			ELSE
				lb_match_found_fed = TRUE
				EXIT
			END IF
		END IF
	NEXT
	
	ll_rowcount = idw_waste_code_state.Retrieve(ll_ob_profile_id)
		
	FOR ll_row = 1 TO ll_rowcount 
		 ls_haz_flag = idw_waste_code_state.GetItemString (ll_row,'haz_flag')
		 ll_waste_code_uid = idw_waste_code_state.GetItemnumber (ll_row,'waste_code_uid')
		 ls_waste_code = idw_waste_code_state.GetItemString (ll_row,'waste_code')
		 ls_in_state = idw_waste_code_state.GetItemString (ll_row,'state')
		// Skip non-haz waste codes
		IF ls_haz_flag <>  'T' THEN CONTINUE 
		IF lds_profile_waste_code.RowCount() > 0 THEN					
				ls_find = "waste_code_uid = "+ String(ll_waste_code_uid) //+ " AND waste_code_origin = 'S' "
				ll_row_find = lds_profile_waste_code.Find(ls_find, 1, lds_profile_waste_code.RowCount() + 1 )
				IF ll_row_find <= 0 THEN
					lb_match_found_state = FALSE
				ELSE
					lb_match_found_state = TRUE
					EXIT
				END IF
		END IF
	NEXT
	IF lb_match_found_fed OR lb_match_found_state THEN lb_match_found = TRUE
	
	IF lb_match_found THEN Return gi_success
	
	//Subhrajyoti - BEGIN - 01/12/2024  - Devops#74741
//		SELECT company_id,profit_ctr_id
//		INTO :ll_company_id,:ll_profit_ctr_id
//		FROM ProfileQuoteApproval
//		WHERE profile_id = :ll_ob_profile_id
//		USING itr_share;
//			
//		IF itr_share.sqlcode < 0 THEN
//			Messagebox(gs_app_name+' Error', itr_share.sqlerrtext)
//			Return gi_failure
//		END IF
	ll_company_id = al_ob_company_id
	ll_profit_ctr_id = al_ob_profit_ctr_id
//Subhrajyoti - END - 01/12/2024 - Devops#74741
END IF

SELECT IsNull(labpack_flag,'F'), IsNull(generic_flag,'F')
Into :lc_labpack_flag, :lc_generic_flag
FROM profile
WHERE profile_id = :ll_ob_profile_id
USING itr_share;

IF itr_share.sqlcode < 0 THEN
	Messagebox(gs_app_name+' Error', itr_share.sqlerrtext)
	Return gi_failure
END IF

SELECT IsNull(use_flag,'F')
INTO :lc_usecology_facility
FROM tsdf
WHERE eq_company = :ll_company_id
AND eq_profit_ctr = :ll_profit_ctr_id
AND tsdf_status = 'A'
USING itr_share;

IF itr_share.sqlcode < 0 THEN
	Messagebox(gs_app_name+' Error', itr_share.sqlerrtext)
	Return gi_failure
END IF

IF (lc_labpack_flag = 'T' OR lc_generic_flag = 'T') AND NOT (lb_match_found) AND lc_usecology_facility = 'T'  THEN
	ib_skip_validation_waste_code = True
	li_ret = Messagebox(gs_app_name+ ' Warning', 'The inbound profile has waste codes that do not match the pre-assigned outbound approval selected.'&
																    +'This is a warning because the pre-assigned outbound is flagged as a lab pack or generic inbound.  Do you want to continue?',Question!, YESNO!,1)
	IF li_ret= 1 THEN
		Return gi_success
	ELSE
		Return gi_failure
	END IF
	
END IF

Return gi_success


end function

public function long wf_audit_header (long al_profile_id);// Kamendra - DevOps #42054 - 1/18/2024 - Begin
LONG ll_form_id, ll_row_audit, ll_row

IF len(trim(is_profile_creation)) > 0 AND NOT ib_profile_creation THEN
	ll_row_audit = idw_audit.InsertRow(0)
	IF ll_row_audit <= 0 THEN
		MessageBox(gs_app_name + ":  Profile Audit", "Cannot insert audit record.", Exclamation!)
		RETURN gi_failure
	ELSE
		idw_audit.Object.table_name[ll_row_audit] = "Profile"
		idw_audit.Object.profile_id[ll_row_audit] = al_profile_id
		idw_audit.Object.column_name[ll_row_audit] = "created_by"
		idw_audit.Object.modified_by[ll_row_audit] = gs_user_id
		idw_audit.Object.date_modified[ll_row_audit] = idt_save_date
		idw_audit.Object.before_value[ll_row_audit] =  "(Inserted)"
		choose case lower(is_profile_creation)
			case 'wcr'
					ll_form_id = long(idw_detail.object.form_ids[1])
					idw_audit.Object.after_value[ll_row_audit] = "Form ID: " +string(ll_form_id)
			case 'copy'
					idw_audit.Object.after_value[ll_row_audit] = "Copied from Record: " + string(il_copy_profile_id)
			case 'new'
					idw_audit.Object.after_value[ll_row_audit] = "New Record"
		end choose
	
		is_profile_creation=''
		//ib_no_audit=TRUE
		ib_profile_creation=True
	END IF
END IF	

RETURN gi_success
// Kamendra - DevOps #42054 - 1/18/2024 - End
end function

on w_profile_dragon.create
int iCurrent
call super::create
this.st_class_name=create st_class_name
this.dw_recipe_update=create dw_recipe_update
this.dw_container_destination_cell=create dw_container_destination_cell
this.dw_container_destination_trench=create dw_container_destination_trench
this.dw_cwt_category_list=create dw_cwt_category_list
this.dw_profile_gen_contact_form=create dw_profile_gen_contact_form
this.dw_shipping_unit=create dw_shipping_unit
this.dw_receipt_ots_approval_list=create dw_receipt_ots_approval_list
this.dw_site_types_old=create dw_site_types_old
this.dw_copc_list=create dw_copc_list
this.dw_profile_access=create dw_profile_access
this.dw_profile_count=create dw_profile_count
this.dw_tracking=create dw_tracking
this.tab_1=create tab_1
this.cb_view=create cb_view
this.cb_select=create cb_select
this.cb_list_prices=create cb_list_prices
this.cb_list=create cb_list
this.dw_waste_import_supplement=create dw_waste_import_supplement
this.dw_benzene_waste_ops_supplemen=create dw_benzene_waste_ops_supplemen
this.dw_profile_thermal_supplement_form=create dw_profile_thermal_supplement_form
this.dw_profile_cylinder_supplement_dragon=create dw_profile_cylinder_supplement_dragon
this.dw_profile_pcb_supplement_dragon=create dw_profile_pcb_supplement_dragon
this.dw_profile_used_oil_supplement_dragon=create dw_profile_used_oil_supplement_dragon
this.dw_profile_debris_certification_dragon=create dw_profile_debris_certification_dragon
this.dw_profile_illinois_disposal_supplemen=create dw_profile_illinois_disposal_supplemen
this.dw_profile_ldr_form_dragon=create dw_profile_ldr_form_dragon
this.dw_profile_radioactive_supplement_page_3=create dw_profile_radioactive_supplement_page_3
this.dw_profile_radioactive_supplement_page_1=create dw_profile_radioactive_supplement_page_1
this.dw_profile_radioactive_supplement_page_2=create dw_profile_radioactive_supplement_page_2
this.dw_profile_radioactive_supplement_3sub=create dw_profile_radioactive_supplement_3sub
this.dw_appr_notification=create dw_appr_notification
this.dw_appr_renewal_notification=create dw_appr_renewal_notification
this.dw_generator_locations=create dw_generator_locations
this.cb_pdf=create cb_pdf
this.pb_pdf=create pb_pdf
this.dw_profile_consolidation_group=create dw_profile_consolidation_group
this.dw_ship_volume=create dw_ship_volume
this.dw_gen_knowledge_supplement=create dw_gen_knowledge_supplement
iCurrent=UpperBound(this.Control)
this.Control[iCurrent+1]=this.st_class_name
this.Control[iCurrent+2]=this.dw_recipe_update
this.Control[iCurrent+3]=this.dw_container_destination_cell
this.Control[iCurrent+4]=this.dw_container_destination_trench
this.Control[iCurrent+5]=this.dw_cwt_category_list
this.Control[iCurrent+6]=this.dw_profile_gen_contact_form
this.Control[iCurrent+7]=this.dw_shipping_unit
this.Control[iCurrent+8]=this.dw_receipt_ots_approval_list
this.Control[iCurrent+9]=this.dw_site_types_old
this.Control[iCurrent+10]=this.dw_copc_list
this.Control[iCurrent+11]=this.dw_profile_access
this.Control[iCurrent+12]=this.dw_profile_count
this.Control[iCurrent+13]=this.dw_tracking
this.Control[iCurrent+14]=this.tab_1
this.Control[iCurrent+15]=this.cb_view
this.Control[iCurrent+16]=this.cb_select
this.Control[iCurrent+17]=this.cb_list_prices
this.Control[iCurrent+18]=this.cb_list
this.Control[iCurrent+19]=this.dw_waste_import_supplement
this.Control[iCurrent+20]=this.dw_benzene_waste_ops_supplemen
this.Control[iCurrent+21]=this.dw_profile_thermal_supplement_form
this.Control[iCurrent+22]=this.dw_profile_cylinder_supplement_dragon
this.Control[iCurrent+23]=this.dw_profile_pcb_supplement_dragon
this.Control[iCurrent+24]=this.dw_profile_used_oil_supplement_dragon
this.Control[iCurrent+25]=this.dw_profile_debris_certification_dragon
this.Control[iCurrent+26]=this.dw_profile_illinois_disposal_supplemen
this.Control[iCurrent+27]=this.dw_profile_ldr_form_dragon
this.Control[iCurrent+28]=this.dw_profile_radioactive_supplement_page_3
this.Control[iCurrent+29]=this.dw_profile_radioactive_supplement_page_1
this.Control[iCurrent+30]=this.dw_profile_radioactive_supplement_page_2
this.Control[iCurrent+31]=this.dw_profile_radioactive_supplement_3sub
this.Control[iCurrent+32]=this.dw_appr_notification
this.Control[iCurrent+33]=this.dw_appr_renewal_notification
this.Control[iCurrent+34]=this.dw_generator_locations
this.Control[iCurrent+35]=this.cb_pdf
this.Control[iCurrent+36]=this.pb_pdf
this.Control[iCurrent+37]=this.dw_profile_consolidation_group
this.Control[iCurrent+38]=this.dw_ship_volume
this.Control[iCurrent+39]=this.dw_gen_knowledge_supplement
end on

on w_profile_dragon.destroy
call super::destroy
destroy(this.st_class_name)
destroy(this.dw_recipe_update)
destroy(this.dw_container_destination_cell)
destroy(this.dw_container_destination_trench)
destroy(this.dw_cwt_category_list)
destroy(this.dw_profile_gen_contact_form)
destroy(this.dw_shipping_unit)
destroy(this.dw_receipt_ots_approval_list)
destroy(this.dw_site_types_old)
destroy(this.dw_copc_list)
destroy(this.dw_profile_access)
destroy(this.dw_profile_count)
destroy(this.dw_tracking)
destroy(this.tab_1)
destroy(this.cb_view)
destroy(this.cb_select)
destroy(this.cb_list_prices)
destroy(this.cb_list)
destroy(this.dw_waste_import_supplement)
destroy(this.dw_benzene_waste_ops_supplemen)
destroy(this.dw_profile_thermal_supplement_form)
destroy(this.dw_profile_cylinder_supplement_dragon)
destroy(this.dw_profile_pcb_supplement_dragon)
destroy(this.dw_profile_used_oil_supplement_dragon)
destroy(this.dw_profile_debris_certification_dragon)
destroy(this.dw_profile_illinois_disposal_supplemen)
destroy(this.dw_profile_ldr_form_dragon)
destroy(this.dw_profile_radioactive_supplement_page_3)
destroy(this.dw_profile_radioactive_supplement_page_1)
destroy(this.dw_profile_radioactive_supplement_page_2)
destroy(this.dw_profile_radioactive_supplement_3sub)
destroy(this.dw_appr_notification)
destroy(this.dw_appr_renewal_notification)
destroy(this.dw_generator_locations)
destroy(this.cb_pdf)
destroy(this.pb_pdf)
destroy(this.dw_profile_consolidation_group)
destroy(this.dw_ship_volume)
destroy(this.dw_gen_knowledge_supplement)
end on

event activate;m_frame.mf_edit_menu("profile", TRUE, is_access)
//DevOps 17699 info_gde 11/10/2020; Form Management > Docs Pending Message(s)
int ll_row
ll_row=idw_header.rowcount()

if ll_row>0 then
if idw_header.object.document_update_status[ll_row] = 'P' AND ib_docs_pending=False then
    ib_docs_pending=True
	ib_posted_docs_pending=True
	POST wf_docs_pending_msg()		 
end if
end if

Messagebox("", "")




end event

event open;integer 	li_rc, li_col_count, li_i, li_connect, li_return,li_form_version_id,li_return_val = 1
long 		ll_rowcount, ll_rows, ll_row,ll_null
string 	ls_moderr, ls_response
boolean lb_update_wcr_flag = TRUE
datastore	lds_constituent_unit
str_wcr_params lst_params
str_pass	lstr
window  activesheet
//SK Navigate variables declaration



//DevOps 27525 info_gde 10/05/2022; Profile - Expand List and List with Prices tabs screen size
Post wf_Adj_List_Tab_Size()

str_navigate	lstr_nav
integer	li_ret, li_a
string	ls_class
powerobject	lp_null

String		ls_filter	// JCG 10/2/17 Gemini 46000 - Consolidation Group	
	
iw_profile = This
ib_no_audit = FALSE
li_rc = gi_success

SetNull(lp_null)
SetNull(ii_cwt_category_id)
SetNull(ll_null)
SetNull(li_form_version_id)

//Anitha
gw_frame.wf_db_connect(gs_database_share, "Cannot get connection to database " + gs_database_share)

if isvalid(message.powerobjectparm) then
	ls_class = message.powerobjectParm.classname()
	if ls_class = "str_navigate" then
		lstr_nav = message.powerobjectparm
		message.powerobjectparm = lp_null
		// MPM - 2/4/2020 - DevOps 13767, 13769, 13771, 13887
		if lstr_nav.s_opened_from = 'w_wcr' AND lstr_nav.s_compare_button='Create' then
			ib_opened_from_wcr = TRUE  
			is_profile_creation='wcr' //DevOps 16737 info_gde 02/19/2021; PROD-EQAI-Maintenance-Profile Tracking-Audit
			ib_profile_creation=False
		end if
	end if
end if

// Set up instance connections to the databases
// itr_share is used for all Profile transactions
itr_share = CREATE TRANSACTION

// itr_forms is used for document processing
itr_forms = CREATE TRANSACTION

// itr_image is used to connect to the image database
itr_image = CREATE TRANSACTION


// Connect to Share
li_connect = f_connect(itr_share, gs_server, gs_database_share, TRUE)
IF li_connect = gi_success THEN
	ib_connected_share = TRUE
	EXECUTE IMMEDIATE "SET ANSI_NULLS ON" USING itr_share;
	EXECUTE IMMEDIATE "SET ANSI_WARNINGS ON" USING itr_share;
	
	// Setup the datawindows
	idw_select = tab_1.tabpage_select.dw_select
	idw_select.SetTransObject(itr_share)
	
	idw_header = tab_1.tabpage_view.dw_header
	idw_header.SetTransObject(itr_share)
	
	idw_tracking = dw_tracking
	idw_tracking.SetTransObject(itr_share)
	
	idw_site_type = dw_site_types
	idw_site_type.SetTransObject(itr_share)
	
// agc 10/14/19 temp comment out
//	// DevOps 10373
//	idw_generator_locations = dw_generator_locations
//	idw_generator_locations.SetTransObject(itr_share)
	
	dw_profile_count.SetTransObject(itr_share)
	dw_receipt_ots_approval_list.SetTransObject(itr_share)
	
	idw_detail = tab_1.tabpage_view.tab_2.tabpage_detail.dw_detail
	idw_detail.SetTransObject(itr_share)
	
	idw_quoteheader = tab_1.tabpage_view.tab_2.tabpage_detail.dw_quoteheader
	idw_quoteheader.SetTransObject(itr_share)
	
	idw_approval = tab_1.tabpage_view.tab_2.tabpage_detail.dw_approval
	idw_approval.SetTransObject(itr_share)
	
	idw_comment = tab_1.tabpage_view.tab_2.tabpage_comment.dw_comment
	idw_comment.SetTransObject(itr_share)
		
	// SK 03292012 Changes to Technical tab to just show profileLAB info & not the compare datawindows
	//idw_technical = tab_1.tabpage_view.tab_2.tabpage_technical.tab_4.tabpage_active_waste_profile.dw_active_profile
	idw_technical = tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile
	idw_technical.SetTransObject(itr_share)
	// SK 03292012 HIDE LAB
	idw_lab = tab_1.tabpage_view.tab_2.tabpage_technical.tab_4.tabpage_compare.dw_lab
	idw_lab.SetTransObject(itr_share)
	
	idw_waste = tab_1.tabpage_view.tab_2.tabpage_waste.dw_waste
	idw_waste.SetTransObject(itr_share)
	// SK-TX WC - 08/01/2013
	idw_waste_code_fed = tab_1.tabpage_view.tab_2.tabpage_waste.dw_waste_code_fed
	idw_waste_code_fed.SetTransObject(itr_share)
	idw_waste_code_state = tab_1.tabpage_view.tab_2.tabpage_waste.dw_waste_code_state
	idw_waste_code_state.SetTransObject(itr_share)
	idw_waste_code_eq = tab_1.tabpage_view.tab_2.tabpage_waste.dw_waste_code_eq
	idw_waste_code_eq.SetTransObject(itr_share)
	
	idw_waste_other = tab_1.tabpage_view.tab_2.tabpage_waste.dw_waste_other
	idw_waste_other.SetTransObject(itr_share)
	
	idw_waste_profilelab = tab_1.tabpage_view.tab_2.tabpage_waste.dw_waste_profilelab
	idw_waste_profilelab.SetTransObject(itr_share)
	
	idw_const = tab_1.tabpage_view.tab_2.tabpage_const.dw_const
	idw_const.SetTransObject(itr_share)
	
	idw_waste_import_supplement.SetTransObject(itr_share)
	idw_benzene_waste_ops_supplemen.SetTransObject(itr_share)	
	idw_profile_thermal_supplement_form.SetTransObject(itr_share)	
	idw_profile_cylinder_supplement_dragon.SetTransObject(itr_share)
	idw_profile_debris_certification_dragon.SetTransObject(itr_share)
	idw_profile_used_oil_supplement_dragon.SetTransObject(itr_share)
	idw_profile_illinois_disposal_supplemen.SetTransObject(itr_share)
	idw_profile_ldr_form_dragon.SetTransObject(itr_share)	
	idw_profile_pcb_supplement_dragon.SetTransObject(itr_share) //COR2-JXM
	idw_profile_radioactive_supplement_page_1.SetTransObject(itr_share)
	idw_profile_radioactive_supplement_page_2.SetTransObject(itr_share)
	idw_profile_radioactive_supplement_page_3.SetTransObject(itr_share)
	idw_profile_radioactive_supplement_3sub.SetTransObject(itr_share)
	idw_profile_radioactive_waste.SetTransObject(itr_share)
	idw_gen_knowledge_supplement.SetTransObject(itr_share)
	idw_profile_fuels_blending.SetTransObject(itr_share) // Dipankar - 08/31/2023 - Added for DevOps 69393
	
	idw_composition = tab_1.tabpage_view.tab_2.tabpage_composition.dw_composition
	idw_composition.SetTransObject(itr_share)
	idw_composition_other = tab_1.tabpage_view.tab_2.tabpage_composition.dw_composition_other
	idw_composition_other.SetTransObject(itr_share)
	idw_composition_epa = tab_1.tabpage_view.tab_2.tabpage_composition.dw_composition_epa
	idw_composition_epa.SetTransObject(itr_share)
				
	idw_shipping = tab_1.tabpage_view.tab_2.tabpage_shipping.dw_shipping
	idw_shipping.SetTransObject(itr_share)

	// COR2-MPM
	idw_container_size = tab_1.tabpage_view.tab_2.tabpage_shipping.dw_container_size
	idw_container_size.SetTransObject(itr_share)
	
	idw_ldr_subcategory = tab_1.tabpage_view.tab_2.tabpage_shipping.dw_ldr_subcategory
	idw_ldr_subcategory.SetTransObject(itr_share)
	
	idw_wcr_facility = tab_1.tabpage_view.tab_2.tabpage_shipping.dw_wcr_facility
	idw_wcr_facility.SetTransObject(itr_share)
	
// rb 04/24/2012 added from unused
	idw_section_select = tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections
	idw_wcr_display_1 = tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1
	idw_wcr_display_1.SetTransObject(itr_share)

	 
	idw_wcr_display_2 = tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_2
	idw_wcr_display_2.SetTransObject(itr_share)
	
	// SK 09102012 added for contacts
	idw_wcr_display_3 = tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_3
	idw_wcr_display_3.SetTransObject(itr_share)
	
// MPM - 6/1/2020 - DevOps 15989 - Commented out all references to idw_wcr_display_4 because this
// datawindow is no longer being used.
//	idw_wcr_display_4 = tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_4
//	idw_wcr_display_4.SetTransObject(itr_share)
	
	idw_wcr_display_5 = tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_5
	idw_wcr_display_5.SetTransObject(itr_share)

	idw_shipping_unit = dw_shipping_unit
	idw_shipping_unit.SetTransObject(itr_share)
	
	idw_ship_volume = dw_ship_volume
	idw_ship_volume.SetTransObject(itr_share)
	
	idw_profile_gen_contact_form = dw_profile_gen_contact_form
	idw_profile_gen_contact_form.SetTransObject(itr_share)
	
//	idw_profile_wcr_facility = dw_profile_wcr_facility
//	idw_profile_wcr_facility.SetTransObject(itr_share)
/////////////////

	idw_statistics = tab_1.tabpage_view.tab_2.tabpage_statistics.dw_statistics
	idw_statistics.SetTransObject(itr_share)
		
	idw_form_availability = tab_1.tabpage_view.tab_2.tabpage_document.tab_3.tabpage_availability.dw_form_availability
	idw_form_availability.SetTrans(itr_share)
	
	idw_audit = tab_1.tabpage_view.tab_2.tabpage_audit.dw_audit
	idw_audit.SetTransObject(itr_share)
	idw_audit.Modify("Datawindow.Print.Preview=yes")
	
	idw_list_prices = tab_1.tabpage_3.dw_list_prices
	idw_list_prices.SetTransObject(itr_share)
	
	// rb - add rules and category tabs
	idw_rules = tab_1.tabpage_view.tab_2.tabpage_rules.dw_rules
	idw_rules.SetTransObject(itr_share)

	idw_category = tab_1.tabpage_view.tab_2.tabpage_category.dw_category
	idw_category.SetTransObject(itr_share)
      
	idw_recipe = tab_1.tabpage_view.tab_2.tabpage_recipe.dw_recipe
	idw_recipe.SetTransObject(itr_share) 	
	
	idw_recipe_update = dw_recipe_update
	idw_recipe_update.SetTransObject(itr_share) 	
	
	idw_list = tab_1.tabpage_4.dw_list
	idw_list.SetTransObject(itr_share)
	// setup the quick select buttons
	wf_setup_select_buttons()

	dw_copc_list.SetTransObject(itr_share)
	ll_rows = dw_copc_list.Retrieve()
	tab_1.tabpage_select.ddlb_copc.AddItem("")
	for ll_row = 1 to ll_rows
		tab_1.tabpage_select.ddlb_copc.AddItem(dw_copc_list.object.description[ll_row])
	next
	
	// JCG 10/2/17 Gemini 46000 - Consolidation Group
	dw_profile_consolidation_group.SetTransObject(itr_share)
	// JCG 10/12/17 Gemini 46000 - Consolidation Group
	
	// JDB 10/15/2017 Gemini 46000 - There is no need to filter this drop-down because on the Select tab we need to see all records.
//	ls_filter = "company_id = " + String(gi_company_id) + " AND profit_ctr_id = " + String(ii_profit_ctr_id)
//	dw_profile_consolidation_group.SetFilter(ls_filter)
//	dw_profile_consolidation_group.Filter()
	
	ll_rows = dw_profile_consolidation_group.Retrieve()
	tab_1.tabpage_select.ddlb_profile_consolidation_group.AddItem("")
	for ll_row = 1 to ll_rows
		tab_1.tabpage_select.ddlb_profile_consolidation_group.AddItem(dw_profile_consolidation_group.object.consolidation_group_desc[ll_row])
	next
	
	//
	dw_container_destination_trench.SetTransObject(itr_share)
	// JCG 10/12/17 Gemini 46010 - Default Disposal Location
	// JDB 10/15/2017 Gemini 46010 - There is no need to filter this drop-down because on the Select tab we need to see all records.
//	ls_filter = "company_id = " + String(gi_company_id) + " AND profit_ctr_id = " + String(ii_profit_ctr_id)
//	dw_container_destination_trench.SetFilter(ls_filter)
//	dw_container_destination_trench.Filter()
	
	ll_rows = dw_container_destination_trench.Retrieve()
	tab_1.tabpage_select.ddlb_container_destination_trench.AddItem("")
	for ll_row = 1 to ll_rows
		tab_1.tabpage_select.ddlb_container_destination_trench.AddItem(dw_container_destination_trench.object.trench_desc[ll_row])
	next
	//
	dw_container_destination_cell.SetTransObject(itr_share)
	// JCG 10/12/17 Gemini 46010 - Default Disposal Location
	// JDB 10/15/2017 Gemini 46010 - There is no need to filter this drop-down because on the Select tab we need to see all records.
//	ls_filter = "company_id = " + String(gi_company_id) + " AND profit_ctr_id = " + String(ii_profit_ctr_id)
//	dw_container_destination_cell.SetFilter(ls_filter)
//	dw_container_destination_cell.Filter()
	
	ll_rows = dw_container_destination_cell.Retrieve()
	tab_1.tabpage_select.ddlb_container_destination_cell.AddItem("")
	for ll_row = 1 to ll_rows
		tab_1.tabpage_select.ddlb_container_destination_cell.AddItem(dw_container_destination_cell.object.cell_desc[ll_row])
	next
	
	
	dw_cwt_category_list.SetTransObject(itr_share)
	ll_rows = dw_cwt_category_list.Retrieve()
	tab_1.tabpage_select.ddlb_cwt_category.AddItem("")
	for ll_row = 1 to ll_rows
		tab_1.tabpage_select.ddlb_cwt_category.AddItem(dw_cwt_category_list.object.cwt_category[ll_row])
	next

	// Populate the constituent quick fill drop down
	lds_constituent_unit = CREATE DATASTORE
	lds_constituent_unit.dataobject = "d_dddw_constituent_unit"
	lds_constituent_unit.SetTransObject(itr_share)
	ll_rows = lds_constituent_unit.Retrieve()
	tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_unit.AddItem("")
	FOR ll_row = 1 TO ll_rows
		tab_1.tabpage_view.tab_2.tabpage_const.ddlb_quick_fill_unit.AddItem(lds_constituent_unit.Object.constituent_unit[ll_row])
	NEXT
	DESTROY lds_constituent_unit
	
	// rb 05/30/2012 Retrieve WCR validations
	ids_profile_validation = create datastore
	ids_profile_validation.dataobject = "d_profile_validation"
	ids_profile_validation.SetTransObject (itr_share)
	ids_profile_validation.Retrieve ()
	
	// SK 09/26/2012 template data & lock items datastore
	ids_template_data = create datastore
	ids_template_data.dataobject = "d_wcr_master"
	ids_template_data.SetTransObject (itr_share)
	
	ids_profile_lock_item = create datastore
	ids_profile_lock_item.dataobject = "d_wcr_template_lockeditems"
	ids_profile_lock_item.SetTransObject (itr_share)
		
	// Connect to forms database
	li_connect = f_connect(itr_forms, gs_server, gs_database_share, TRUE)
	IF li_connect = gi_success THEN
		ib_connected_forms = TRUE
		EXECUTE IMMEDIATE "SET ANSI_NULLS ON" USING itr_forms;
		EXECUTE IMMEDIATE "SET ANSI_WARNINGS ON" USING itr_forms;
		
		// SK 01092012 New Technical tab
		idw_wcr_technical = tab_1.tabpage_view.tab_2.tabpage_technical.tab_4.tabpage_compare.dw_wcr_technical
		idw_wcr_technical.SetTransObject(itr_forms)
		
// SK 06202012 This DWs are not used any longer
//		idw_wcr_waste = tab_1.tabpage_view.tab_2.tabpage_waste.dw_wcr_waste
//		idw_wcr_waste.SetTransObject(itr_forms)
				
//		idw_wcr_const = tab_1.tabpage_view.tab_2.tabpage_const.dw_wcr_const
//		idw_wcr_const.SetTransObject(itr_forms)
		
		idw_form = tab_1.tabpage_view.tab_2.tabpage_document.tab_3.tabpage_form.dw_form
		idw_form.SetTrans(itr_forms)
	ELSE
		MessageBox(gs_app_name + ":  Connect Forms", itr_forms.SQLErrText, Exclamation!)
	END IF

	////////////////////////////////////
	// Set up user objects here
	////////////////////////////////////
	itp_note = tab_1.tabpage_view.tab_2.tabpage_note.u_tabpage_note
	itp_note.uf_init("Profile", iw_profile, tab_1.tabpage_view.tab_2)
	itp_note.uf_sleep()
	
	// SK 12052011
	//iuo_wcr_form = tab_1.tabpage_view.tab_2.tabpage_document.tab_3.tabpage_form.u_wcr_form
		
	iudw_document = tab_1.tabpage_view.tab_2.tabpage_document.tab_3.tabpage_document_document.uo_documents
	iudw_document.uf_init("Profile", iw_profile, tab_1.tabpage_view.tab_2.tabpage_document.tab_3)
	
	itab_price = tab_1.tabpage_view.tab_2.tabpage_price.tab_price
	itab_import_waste  = tab_1.tabpage_view.tab_2.tabpage_import.tab_import_waste
	
	
	////////////////////////////////////	
	// Set up the dropdownlistboxes
	////////////////////////////////////
	iddlb_profile_status = tab_1.tabpage_select.ddlb_profile_status
	iddlb_ots_flag = tab_1.tabpage_select.ddlb_ots_flag
  	iddlb_labpack_template_flag = tab_1.tabpage_select.ddlb_labpack_template_flag //DevOps 28728
	
	// Connect to image database
	li_connect = f_connect(itr_image, gs_srv_image, gs_database_image, TRUE)
	IF li_connect = gi_success THEN
		ib_connected_image = TRUE
		EXECUTE IMMEDIATE "SET ANSI_NULLS ON" USING itr_image;
		EXECUTE IMMEDIATE "SET ANSI_WARNINGS ON" USING itr_image;

	ELSE
		MessageBox(gs_app_name + ":  Connect Image Database", itr_image.SQLErrText, Exclamation!)
	END IF

ELSE
	MessageBox(gs_app_name + ":  Profile Connection Error", "Cannot connect to Profile Database '" + gs_server + "." + gs_database_share + "'~rSQLErrText:  " + itr_share.SQLErrText, Exclamation!)
	li_rc = gi_failure
	Close(This)
END IF

// Get Access
IF li_rc = gi_success THEN
	li_rc = wf_getaccess()
	IF li_rc = gi_failure THEN
		Close(This)
	END IF
END IF

// Continue to setup 
IF li_rc = gi_success THEN
	iddlb_ots_flag.SelectItem("All", 1)
	iddlb_ots_flag.TriggerEvent(SelectionChanged!)
	iddlb_profile_status.SelectItem("All", 1)
	iddlb_profile_status.TriggerEvent(SelectionChanged!)
	iddlb_labpack_template_flag.SelectItem("All", 1) //DevOps 28728
	iddlb_labpack_template_flag.TriggerEvent(SelectionChanged!)
	
	wf_reset_change_flags()
	
	// Initialize the basic Select for idw_header
	ls_moderr = idw_header.Describe("DataWindow.Table.Select")
	is_select_header = ls_moderr
	
	
	// Initialize the basic Select for idw_list_prices
	ls_moderr = idw_list_prices.Describe("DataWindow.Table.Select")
	is_select_list = ls_moderr
	
	is_document_source = "approval"

	
	SetMicrohelp("No records retrieved")
	
	tab_1.SelectedTab = ii_tabpage_select
	This.PostEvent("ue_post_select")
	
	SetPointer(Arrow!)
	SetMicroHelp("Ready")

	//////////////////////////////////////////////////////////////////////
	//  This is the code for NAVIGATE functionality
	//////////////////////////////////////////////////////////////////////
	If Isvalid(lstr_nav) THEN
		If Upper(lstr_nav.s_windowname) = Upper(this.classname()) Then
			for li_a = 1 to upperbound(lstr_nav.s_column_name[]) 
				li_ret = idw_select.SetColumn(lstr_nav.s_column_name[li_a])
				li_ret = idw_select.SetText(lstr_nav.s_column_value[li_a])
			Next	
			tab_1.post SelectTab(ii_tabpage_view )
			IF lstr_nav.s_column_value[1] = ""  OR IsNull (lstr_nav.s_column_value[1]) THEN 
				This.TriggerEvent("ue_new")
				 //Task - 12100 - WO - Navigate to profile failing - Added upperbound condition
				IF UpperBound ( lstr_nav.s_column_value[] ) = 4 THEN 
					is_nav_form_id = lstr_nav.s_column_value[3]
				END IF
				IF is_nav_form_id <> ""  OR Not IsNull(is_nav_form_id) THEN 
					lst_params.al_form_id = long ( is_nav_form_id ) 
					lst_params.as_user = gs_user_id
					lst_params.ab_assign = TRUE
					lst_params.as_assign_target = "profile"
					OpenWithParm(w_popup_wcr_assign_profile, lst_params)
					 is_nav_form_id = ""
					 lb_update_wcr_flag = FALSE
				END IF
			END IF
		End If
	END IF
	
END IF

// rb 04/24/2012 WCR / Profile column mapping
wf_wcr_profile_map_create ()

//DevOps:12666
IF Isvalid(lstr_nav) THEN
	IF Upper(lstr_nav.s_windowname) = Upper(this.classname()) Then
		for li_a = 1 to upperbound(lstr_nav.s_column_name[]) 
			li_ret = idw_select.SetColumn(lstr_nav.s_column_name[li_a])
			li_ret = idw_select.SetText(lstr_nav.s_column_value[li_a])
		Next	
	//	IF lstr_nav.s_column_value[3] <> ""  OR Not IsNull (lstr_nav.s_column_value[3]) THEN 
			IF UpperBound ( lstr_nav.s_column_value[] ) = 4 AND lb_update_wcr_flag = TRUE THEN 
				is_nav_form_id = lstr_nav.s_column_value[3]	
				lstr.l[1] = Long ( is_nav_form_id ) 
				lstr.l[2] = Long (lstr_nav.s_column_value[4])	 //1	//revision id 
				lstr.l[3] = li_form_version_id	//form version id
				lstr.l[4] = Long( lstr_nav.s_column_value[1]) //profile id
			//	lstr.l[5] = 0	//template id
				lstr.l[6] = ll_null
				lstr.s[1] = is_access
				OpenWithParm(w_popup_wcr_profile_compare_dragon, lstr)
				lstr = Message.powerobjectparm
				IF IsValid( lstr ) Then
					 wf_copy_wcr_dragon( lstr )
				ELSE
					 idw_header.setitemstatus(1,0,Primary!,NotModified!)
					 idw_detail.setitemstatus(1,0,Primary!,NotModified!)
					 idw_comment.setitemstatus(1,0,Primary!,NotModified!)
			          idw_shipping.setitemstatus(1,0,Primary!,NotModified!)
					Close(This)
					li_return_val = -1
				End If	
			 END IF
	 // END IF
	END IF			
END IF
//DevOps:21400
IF Isvalid(lstr_nav) THEN
	IF  UpperBound ( lstr_nav.s_column_value[] ) = 3 THEN 
		lstr_nav.s_column_value[3] = "w_popup_container_info"  
		Close (w_popup_container_info)
	END IF
END IF

IF li_return_val = 1 THEN 
	// MPM - 12/11/2018 - Task 5205 - Consolidation profile management
	// Get the scan document type of the State Review Confirmation document, which will be used later for validation
	SELECT type_id 
	INTO :ii_state_review_confirmation_type_id 
	FROM ScanDocumentType 
	WHERE scan_type = 'approval' 
	AND document_type = 'State Review Confirmation'
	USING itr_share;
	
	IF itr_share.SQLCode < 0 THEN
		MessageBox(gs_app_name+": SQL ERROR", itr_share.SQLErrText, Exclamation!)
	ELSEIF itr_share.SQLCode = 100 THEN
		MessageBox(gs_app_name+": Value Not Found", "The scan document type of 'State Review Confirmation' was not found in the ScanDocumentType table.", Exclamation!)
	END IF	
	
	st_class_name.Text = This.ClassName()
END IF


end event

event close;IF ib_connected_share THEN
	DISCONNECT USING itr_share;
END IF
IF ib_connected_forms THEN
	DISCONNECT USING itr_forms;
END IF
IF ib_connected_image THEN
	DISCONNECT USING itr_image;
END IF
// rb 03/18/2011
IF isvalid(itr_share) THEN
	destroy itr_share
END IF
IF isvalid(itr_forms) THEN
	destroy itr_forms;
END IF
IF isvalid(itr_image) THEN
	destroy itr_image;
END IF

m_frame.mf_edit_menu("profile", FALSE, is_access)
	

end event

event closequery;integer	li_response

Message.ReturnValue=0
wf_AcceptText()

IF wf_modifiedcount() > 0 THEN
	 IF ib_wcr_close = TRUE THEN 
		li_response = 2
		ib_wcr_close = FALSE
	ELSE
		// Prompt user to save
	    li_response = messagebox("Save Records", "Do you want to save changes?", Question!, YesNoCancel!, 1)
	END IF
	CHOOSE CASE li_response 
		CASE 1			
			This.TriggerEvent("ue_save")	
			IF wf_modifiedcount() > 0 THEN
				Message.ReturnValue = 1
			END IF
		CASE 2
			wf_reset_change_flags()
		CASE 3
			Message.ReturnValue =1
	END CHOOSE
END IF

// destroy the datastores if valid
IF Isvalid(ids_template_data) THEN DESTROY ids_template_data
IF Isvalid(ids_profile_lock_item) THEN DESTROY ids_profile_lock_item
IF Isvalid(ids_form_wcr) THEN DESTROY ids_form_wcr
IF Isvalid(ids_scan_wcr) THEN DESTROY ids_scan_wcr
end event

type dw_site_types from w_profile`dw_site_types within w_profile_dragon
end type

type st_class_name from statictext within w_profile_dragon
boolean visible = false
integer x = 2240
integer y = 16
integer width = 809
integer height = 64
integer textsize = -10
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 134217857
long backcolor = 65535
string text = "none"
boolean focusrectangle = false
end type

type dw_recipe_update from datawindow within w_profile_dragon
boolean visible = false
integer x = 3703
integer y = 2572
integer width = 686
integer height = 400
integer taborder = 170
string title = "none"
string dataobject = "d_profile_recipe_update"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_container_destination_cell from datawindow within w_profile_dragon
boolean visible = false
integer x = 4859
integer y = 2136
integer width = 535
integer height = 400
integer taborder = 310
string title = "none"
string dataobject = "dddw_container_tracking_cell"
boolean resizable = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_container_destination_trench from datawindow within w_profile_dragon
boolean visible = false
integer x = 4709
integer y = 2028
integer width = 535
integer height = 400
integer taborder = 90
string title = "none"
string dataobject = "dddw_container_tracking_trench"
boolean resizable = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_cwt_category_list from datawindow within w_profile_dragon
boolean visible = false
integer x = 5266
integer y = 1356
integer width = 686
integer height = 400
integer taborder = 320
string title = "none"
string dataobject = "d_cwt_category_list"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_profile_gen_contact_form from datawindow within w_profile_dragon
boolean visible = false
integer x = 4901
integer y = 372
integer width = 343
integer height = 208
integer taborder = 280
string title = "none"
string dataobject = "d_profile_gen_contact_form_dragon"
boolean border = false
boolean livescroll = true
end type

type dw_shipping_unit from datawindow within w_profile_dragon
boolean visible = false
integer x = 4901
integer y = 124
integer width = 343
integer height = 208
integer taborder = 180
string title = "none"
string dataobject = "d_profile_shipping_unit_dragon"
boolean border = false
boolean livescroll = true
end type

type dw_receipt_ots_approval_list from datawindow within w_profile_dragon
boolean visible = false
integer x = 4517
integer y = 1868
integer width = 686
integer height = 400
integer taborder = 70
string title = "none"
string dataobject = "d_receipt_ots_approval_list"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_site_types_old from datawindow within w_profile_dragon
boolean visible = false
integer x = 4521
integer y = 2300
integer width = 686
integer height = 272
integer taborder = 140
string title = "none"
string dataobject = "d_profile_various_types"
boolean border = false
boolean livescroll = true
end type

type dw_copc_list from datawindow within w_profile_dragon
boolean visible = false
integer x = 4512
integer y = 1436
integer width = 535
integer height = 400
string title = "none"
string dataobject = "d_profile_company_profit_center_list"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_profile_access from datawindow within w_profile_dragon
boolean visible = false
integer x = 4503
integer y = 664
integer width = 535
integer height = 748
integer taborder = 30
string title = "none"
string dataobject = "d_profile_access"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_profile_count from datawindow within w_profile_dragon
boolean visible = false
integer x = 4517
integer y = 388
integer width = 352
integer height = 244
integer taborder = 210
string title = "none"
string dataobject = "d_profile_count"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_tracking from datawindow within w_profile_dragon
boolean visible = false
integer x = 4517
integer y = 124
integer width = 352
integer height = 244
integer taborder = 270
string dataobject = "d_profile_tracking"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type tab_1 from tab within w_profile_dragon
integer y = 4
integer width = 4727
integer height = 2556
integer taborder = 20
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 67108864
boolean raggedright = true
boolean focusonbuttondown = true
boolean boldselectedtext = true
integer selectedtab = 1
tabpage_select tabpage_select
tabpage_view tabpage_view
tabpage_3 tabpage_3
tabpage_4 tabpage_4
end type

on tab_1.create
this.tabpage_select=create tabpage_select
this.tabpage_view=create tabpage_view
this.tabpage_3=create tabpage_3
this.tabpage_4=create tabpage_4
this.Control[]={this.tabpage_select,&
this.tabpage_view,&
this.tabpage_3,&
this.tabpage_4}
end on

on tab_1.destroy
destroy(this.tabpage_select)
destroy(this.tabpage_view)
destroy(this.tabpage_3)
destroy(this.tabpage_4)
end on

event selectionchanging;integer	li_rc, li_return,li_HEADER,li_display_status_uid 
string	ls_waste_code_from,ls_copy_source,ls_docs
long ll_profile_id
 

 //DevOps 1654 info_gde 06/25/2020; Prod - Profile Tracking - PDF Icon
 If pb_pdf.visible Then pb_pdf.visible = FALSE

CHOOSE CASE newindex
	CASE ii_tabpage_select
		
		// Save user's changes
		IF wf_check_changes() < 0 THEN
			RETURN 1
		END IF

		idw_active = idw_select
		ib_new_select = TRUE
		
		// Setup for user input
		wf_query_mode()	
	
		// Cleanup from previous retrieval
		wf_reset()
		idw_list_prices.Modify("Datawindow.Print.Preview=no")
		iddlb_profile_status.BringToTop = TRUE
		iddlb_ots_flag.BringToTop = TRUE
		iddlb_labpack_template_flag.BringToTop = TRUE //DevOps 28728
		
		// Set control variables
		ib_can_navigate = FALSE
		ib_can_print = FALSE
		ib_can_new = TRUE
		ib_can_copy = FALSE
		ib_can_void = FALSE
		ib_can_confirm = FALSE
		ib_can_cancel = FALSE
		ib_can_update = FALSE
		ib_can_quote = FALSE
		
		IF oldindex = ii_tabpage_view OR oldindex = ii_tabpage_list OR oldindex = ii_tabpage_list_prices THEN
			// 01052012 SK WCR User Edit Object has its own tabpage!
			// iuo_wcr_form.SetPosition(ToBottom!)
			ib_wcr = FALSE
		END IF
	
		ib_has_retrieved = FALSE	
		il_curr_row = 0
		ib_can_sort = FALSE
		SetMicroHelp("Ready")
		
	CASE ii_tabpage_view
		idw_active = idw_header

		IF NOT ib_new_record AND idw_header.RowCount() <= 0 THEN
			// check for entries outside of the select datawindow
			li_rc = wf_select_check()
			IF li_rc = 0 THEN
				IF f_delimit_search(idw_select) < 0 THEN
					RETURN 1		// prevent change
				END IF
			END IF
			IF tab_1.tabpage_select.sle_billing_project_id.Text = '0' THEN
				MessageBox(gs_app_name + ":  Selection Criteria", "Searching by billing project id 0 is not allowed due to the number of matches.", Information!)
				RETURN 1		// prevent change
			END IF
		END IF
		
		// make the detail tab the active tab before retrieving so images are not the active tab
		tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_detail
		
		IF ib_new_select = TRUE AND NOT ib_new_record THEN
			li_return = wf_validate_dates()
			If li_return > 0 Then
				Open(w_popup_cancel)
				gb_cancel = FALSE
				wf_set_criteria()
				wf_retrieve()
				// sk 09242012 
				wf_set_access()
				IF gb_cancel = FALSE THEN
					Close(gw_cancel)
				END IF
			End IF
		END IF
		
		// Set Control Variables
		ib_new_select = FALSE
		IF ib_new_record = FALSE THEN		
			SetMicroHelp(String(idw_header.RowCount()) + " record(s)")
		END IF
		
		ib_can_navigate = TRUE
		ib_can_print = TRUE
		ib_can_cancel = TRUE
		ib_can_new = TRUE
		ib_can_confirm = TRUE
		ib_can_update = TRUE
		ib_can_copy = TRUE
		ib_can_void = TRUE
		ib_can_sort = FALSE
		ib_can_quote = TRUE
		
		tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.setrow(1)
		tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.Event rowfocuschanged (1)
		
		//Subhrajyoti - Devops# 74308 - EQAI>Save Prompt - Rouge Validation
		
		IF NOT ib_new_record  AND oldindex = ii_tabpage_select THEN 
			IF idw_technical.rowcount( ) > 0 THEN
				idw_technical.SetItemStatus (1 ,0 , Primary! , NotModified! )
			END IF
		END IF
			
	CASE ii_tabpage_list_prices, ii_tabpage_list
		 
		// Save user's changes
		IF wf_check_changes() < 0 THEN
			RETURN 1
		END IF

		IF newindex = ii_tabpage_list_prices THEN
			idw_active = idw_list_prices
		ELSE
			idw_active = idw_list
		END IF
		idw_active.Modify("Datawindow.Print.Preview=yes")
///////////////////////////		
		IF idw_header.RowCount() <= 0 THEN 
			li_rc = wf_select_check()
			IF li_rc = 0 THEN			
				IF f_delimit_search(idw_select) < 0 THEN
					RETURN 1		// prevent change
				END IF
			End IF
		END IF

		SetMicroHelp("Displaying profile list ...")	
		ib_new_select = FALSE
		ib_has_retrieved = FALSE	
	
		// Retrieve records
		IF idw_header.RowCount() = 0 THEN
			li_return = wf_validate_dates()
			if li_return > 0 Then
				Open(w_popup_cancel)
				gb_cancel = FALSE
				wf_set_criteria()
				wf_retrieve()		
				IF gb_cancel = FALSE THEN
					Close(gw_cancel)
				END IF
			End If
		END IF // Moved from below to allow following lines to be processed even if dw_header has been populated. MK 9/28/2006

		// rb 04/06/2011 PB Bug? Saved pricing changes not displaying on List datawindows
		idw_active.ShareDataOff()
		idw_header.ShareData (idw_active)

		idw_active.Modify("Datawindow.Print.Preview=yes")
		SetMicroHelp(String(idw_header.RowCount()) + " record(s)"	)	

		// Set Control variables
		ib_can_sort = TRUE	
		ib_can_navigate = TRUE
		ib_can_print = TRUE
		ib_can_cancel = FALSE
		ib_can_new = TRUE
		ib_can_copy = FALSE
		ib_can_void = FALSE
		ib_can_update = FALSE
		ib_can_confirm = FALSE
		ib_can_quote = FALSE
		//DevOps 17699 info_gde 11/10/2020; Form Management > Docs Pending Message
		//ini docs pending
		ib_posted_docs_pending=False
END CHOOSE

ii_clicked_tab1 = newindex
SetPointer(Arrow!)
idw_active.SetFocus()
end event

event selectionchanged;//DevOps 17126 moved this code to dw_header.rowfocuschanged because it should fire for all rows selected, not just the first row


//integer li_HEADER, li_display_status_uid
//long ll_profile_id,ll_form_id
//string ls_docs, ls_copy_source, ls_doc_status_reason
//
//SetNull(ls_doc_status_reason)
//		 
//CHOOSE CASE newindex
//	CASE ii_tabpage_view 
//	//DevOps 16592 info_gde 07/06/2020; PROD EQAI - Docs Pending - Wrong Validation Message Prompted 
//	If oldindex=ii_tabpage_select OR oldindex=ii_tabpage_list Then  
////		li_HEADER=idw_header.rowcount()
//		li_HEADER=idw_header.getrow()
//		If li_HEADER>0 Then  
//			ls_docs=idw_header.object.document_update_status.primary[li_HEADER]
//			ll_profile_id=idw_header.object.profile_id.primary[li_HEADER]
//			ll_form_id=idw_header.object.form_id_wcr.primary[li_HEADER]
//			If ls_docs='P' Then  
//				SELECT TOP 1 copy_source,display_status_uid
//				INTO :ls_copy_source,:li_display_status_uid 
//				FROM dbo.FormWCR
//				WHERE profile_id  = :ll_profile_id
//				AND display_status_uid in (1,2,5,7,8) 
//				Order By date_created desc
//				USING itr_share;
//				
//				SELECT TOP 1 doc_status_reason 
//				INTO :ls_doc_status_reason 
//				FROM dbo.Profile
//				WHERE profile_id  = :ll_profile_id
//				AND lower(doc_status_reason) not in ('amendment in process','renewal in process','rejection in process', 'profile sync required') 
//				Order By date_added desc
//				USING itr_share;
//				
//				IF NOT isNull(ll_form_id) AND ll_form_id >0 THEN  
//				
//  				choose case  lower(ls_copy_source)
//					case 'amendment'
//						//IF copy_source = 'amendment'  then show MESSAGE for B
//						MessageBox("Docs Pending - Amendment in Process.","A Form has been generated and sent to the customer for completion."+'~n~r'+"Edits should not be made to the profile until the Form has been processed.")
//					   	idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//					case 'renewal'
//						//IF copy_source = 'amendment'  then show MESSAGE for A
//						MessageBox("Docs Pending - Renewal in Process.","A Form has been generated and sent to the customer for completion.  Edits should not be made to the profile until the Form has been processed.")				
//					    idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//					case else 
//						If li_display_status_uid=7 Then  
//						// then show MESSAGE for C
//							MessageBox("Docs Pending - Rejection in Process.","This profile has been rejected and sent to the customer for review.  Edits should not be made to the profile until the customer has resubmitted from COR.")			
//				              idw_detail.object.b_reject_form.visible=true  //DevOps 16668 info_gde 07/15/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//							idw_detail.object.form_ids.visible=true   //DevOps 16668 info_gde 07/15/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//							idw_detail.object.compute_10.visible=true   //DevOps 16668 info_gde 07/15/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						ElseIf not IsNull(ls_doc_status_reason) AND ls_doc_status_reason<>'' Then
//							MessageBox("Docs Pending - " +ls_doc_status_reason, "This profile has documents pending.  This profile should not be approved until the customer has provided the requested documents.")  
//							idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//							idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//							idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						End If  
//				end choose
//				
//			ELSEIF not IsNull(ls_doc_status_reason) AND ls_doc_status_reason<>'' Then
//							MessageBox("Docs Pending - " +ls_doc_status_reason, "This profile has documents pending.  This profile should not be approved until the customer has provided the requested documents.")  
//							idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//							idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//							idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//			END IF  
//			
//		End If   
//		End If  
//		End If  
//			//DevOps 16592 info_gde 07/06/2020; PROD EQAI - Docs Pending - Wrong Validation Message Prompted 
//	CASE ii_tabpage_select
//	CASE ii_tabpage_list
//	CASE ii_tabpage_list_prices
//END CHOOSE

//DevOps 17699 info_gde 11/10/2020; Form Management > Docs Pending Message
//ini docs pending
CHOOSE CASE newindex
	CASE ii_tabpage_view 
	ib_posted_docs_pending=TRUE
CASE ii_tabpage_select, ii_tabpage_list, ii_tabpage_list_prices
	ib_posted_docs_pending=FALSE
	ib_docs_pending=FALSE
END CHOOSE


if ib_increase_search_criteria then //DevOps 60694 info_gde 01/04/2022; EQAI - Application is getting terminated in Profile Tracking Screen.
  ib_increase_search_criteria=FALSE
  tab_1.SelectedTab = ii_tabpage_select
end if
		
end event

event clicked;//
end event

event getfocus;// Kamendra - DevOps #73554 - 12/04/2023 -Begin
IF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(tab_1.tabpage_select.ddlb_docs_pending)	
END IF	
// Kamendra - DevOps #73554 - 12/04/2023 -End
end event

type tabpage_select from userobject within tab_1
integer x = 18
integer y = 112
integer width = 4690
integer height = 2428
long backcolor = 67108864
string text = "Select"
long tabtextcolor = 33554432
string picturename = "C:\EQAI-Dev\Resources\select.bmp"
long picturemaskcolor = 536870912
string powertiptext = "Enter selection criteria"
pb_waste_code pb_waste_code
ddlb_labpack_template_flag ddlb_labpack_template_flag
pb_process_code pb_process_code
sle_process_code sle_process_code
ddlb_docs_pending ddlb_docs_pending
pb_recipe pb_recipe
sle_recipe sle_recipe
pb_billing_project_id pb_billing_project_id
sle_billing_project_id sle_billing_project_id
pb_consolidation_profile pb_consolidation_profile
sle_consolidation_profile sle_consolidation_profile
ddlb_container_destination_cell ddlb_container_destination_cell
ddlb_container_destination_trench ddlb_container_destination_trench
ddlb_profile_consolidation_group ddlb_profile_consolidation_group
ddlb_cwt_category ddlb_cwt_category
pb_const_id pb_const_id
sle_const_id sle_const_id
pb_tsdf_code_to pb_tsdf_code_to
pb_tsdf_code_from pb_tsdf_code_from
sle_tsdf_code_to sle_tsdf_code_to
sle_tsdf_code_from sle_tsdf_code_from
pb_tsdf_approval_code_to pb_tsdf_approval_code_to
pb_tsdf_approval_code_from pb_tsdf_approval_code_from
sle_tsdf_approval_code_to sle_tsdf_approval_code_to
sle_tsdf_approval_code_from sle_tsdf_approval_code_from
sle_treatment_to sle_treatment_to
sle_treatment_from sle_treatment_from
ddlb_copc ddlb_copc
pb_location_to pb_location_to
pb_location_from pb_location_from
pb_approval_code_to pb_approval_code_to
pb_approval_code_from pb_approval_code_from
pb_territory_code pb_territory_code
pb_contact pb_contact
pb_treatment_id_to pb_treatment_id_to
pb_treatment_id_from pb_treatment_id_from
pb_generator_id_to pb_generator_id_to
pb_generator_name_to pb_generator_name_to
pb_epa_id_to pb_epa_id_to
pb_customer_to pb_customer_to
pb_generator_id_from pb_generator_id_from
pb_generator_name_from pb_generator_name_from
pb_epa_id_from pb_epa_id_from
pb_customer_from pb_customer_from
sle_territory_code sle_territory_code
sle_location_to sle_location_to
sle_location_from sle_location_from
sle_approval_code_to sle_approval_code_to
sle_approval_code_from sle_approval_code_from
sle_eq_contact sle_eq_contact
ddlb_profile_status ddlb_profile_status
ddlb_ots_flag ddlb_ots_flag
sle_waste_code_to sle_waste_code_to
sle_waste_code_from sle_waste_code_from
dw_select dw_select
end type

on tabpage_select.create
this.pb_waste_code=create pb_waste_code
this.ddlb_labpack_template_flag=create ddlb_labpack_template_flag
this.pb_process_code=create pb_process_code
this.sle_process_code=create sle_process_code
this.ddlb_docs_pending=create ddlb_docs_pending
this.pb_recipe=create pb_recipe
this.sle_recipe=create sle_recipe
this.pb_billing_project_id=create pb_billing_project_id
this.sle_billing_project_id=create sle_billing_project_id
this.pb_consolidation_profile=create pb_consolidation_profile
this.sle_consolidation_profile=create sle_consolidation_profile
this.ddlb_container_destination_cell=create ddlb_container_destination_cell
this.ddlb_container_destination_trench=create ddlb_container_destination_trench
this.ddlb_profile_consolidation_group=create ddlb_profile_consolidation_group
this.ddlb_cwt_category=create ddlb_cwt_category
this.pb_const_id=create pb_const_id
this.sle_const_id=create sle_const_id
this.pb_tsdf_code_to=create pb_tsdf_code_to
this.pb_tsdf_code_from=create pb_tsdf_code_from
this.sle_tsdf_code_to=create sle_tsdf_code_to
this.sle_tsdf_code_from=create sle_tsdf_code_from
this.pb_tsdf_approval_code_to=create pb_tsdf_approval_code_to
this.pb_tsdf_approval_code_from=create pb_tsdf_approval_code_from
this.sle_tsdf_approval_code_to=create sle_tsdf_approval_code_to
this.sle_tsdf_approval_code_from=create sle_tsdf_approval_code_from
this.sle_treatment_to=create sle_treatment_to
this.sle_treatment_from=create sle_treatment_from
this.ddlb_copc=create ddlb_copc
this.pb_location_to=create pb_location_to
this.pb_location_from=create pb_location_from
this.pb_approval_code_to=create pb_approval_code_to
this.pb_approval_code_from=create pb_approval_code_from
this.pb_territory_code=create pb_territory_code
this.pb_contact=create pb_contact
this.pb_treatment_id_to=create pb_treatment_id_to
this.pb_treatment_id_from=create pb_treatment_id_from
this.pb_generator_id_to=create pb_generator_id_to
this.pb_generator_name_to=create pb_generator_name_to
this.pb_epa_id_to=create pb_epa_id_to
this.pb_customer_to=create pb_customer_to
this.pb_generator_id_from=create pb_generator_id_from
this.pb_generator_name_from=create pb_generator_name_from
this.pb_epa_id_from=create pb_epa_id_from
this.pb_customer_from=create pb_customer_from
this.sle_territory_code=create sle_territory_code
this.sle_location_to=create sle_location_to
this.sle_location_from=create sle_location_from
this.sle_approval_code_to=create sle_approval_code_to
this.sle_approval_code_from=create sle_approval_code_from
this.sle_eq_contact=create sle_eq_contact
this.ddlb_profile_status=create ddlb_profile_status
this.ddlb_ots_flag=create ddlb_ots_flag
this.sle_waste_code_to=create sle_waste_code_to
this.sle_waste_code_from=create sle_waste_code_from
this.dw_select=create dw_select
this.Control[]={this.pb_waste_code,&
this.ddlb_labpack_template_flag,&
this.pb_process_code,&
this.sle_process_code,&
this.ddlb_docs_pending,&
this.pb_recipe,&
this.sle_recipe,&
this.pb_billing_project_id,&
this.sle_billing_project_id,&
this.pb_consolidation_profile,&
this.sle_consolidation_profile,&
this.ddlb_container_destination_cell,&
this.ddlb_container_destination_trench,&
this.ddlb_profile_consolidation_group,&
this.ddlb_cwt_category,&
this.pb_const_id,&
this.sle_const_id,&
this.pb_tsdf_code_to,&
this.pb_tsdf_code_from,&
this.sle_tsdf_code_to,&
this.sle_tsdf_code_from,&
this.pb_tsdf_approval_code_to,&
this.pb_tsdf_approval_code_from,&
this.sle_tsdf_approval_code_to,&
this.sle_tsdf_approval_code_from,&
this.sle_treatment_to,&
this.sle_treatment_from,&
this.ddlb_copc,&
this.pb_location_to,&
this.pb_location_from,&
this.pb_approval_code_to,&
this.pb_approval_code_from,&
this.pb_territory_code,&
this.pb_contact,&
this.pb_treatment_id_to,&
this.pb_treatment_id_from,&
this.pb_generator_id_to,&
this.pb_generator_name_to,&
this.pb_epa_id_to,&
this.pb_customer_to,&
this.pb_generator_id_from,&
this.pb_generator_name_from,&
this.pb_epa_id_from,&
this.pb_customer_from,&
this.sle_territory_code,&
this.sle_location_to,&
this.sle_location_from,&
this.sle_approval_code_to,&
this.sle_approval_code_from,&
this.sle_eq_contact,&
this.ddlb_profile_status,&
this.ddlb_ots_flag,&
this.sle_waste_code_to,&
this.sle_waste_code_from,&
this.dw_select}
end on

on tabpage_select.destroy
destroy(this.pb_waste_code)
destroy(this.ddlb_labpack_template_flag)
destroy(this.pb_process_code)
destroy(this.sle_process_code)
destroy(this.ddlb_docs_pending)
destroy(this.pb_recipe)
destroy(this.sle_recipe)
destroy(this.pb_billing_project_id)
destroy(this.sle_billing_project_id)
destroy(this.pb_consolidation_profile)
destroy(this.sle_consolidation_profile)
destroy(this.ddlb_container_destination_cell)
destroy(this.ddlb_container_destination_trench)
destroy(this.ddlb_profile_consolidation_group)
destroy(this.ddlb_cwt_category)
destroy(this.pb_const_id)
destroy(this.sle_const_id)
destroy(this.pb_tsdf_code_to)
destroy(this.pb_tsdf_code_from)
destroy(this.sle_tsdf_code_to)
destroy(this.sle_tsdf_code_from)
destroy(this.pb_tsdf_approval_code_to)
destroy(this.pb_tsdf_approval_code_from)
destroy(this.sle_tsdf_approval_code_to)
destroy(this.sle_tsdf_approval_code_from)
destroy(this.sle_treatment_to)
destroy(this.sle_treatment_from)
destroy(this.ddlb_copc)
destroy(this.pb_location_to)
destroy(this.pb_location_from)
destroy(this.pb_approval_code_to)
destroy(this.pb_approval_code_from)
destroy(this.pb_territory_code)
destroy(this.pb_contact)
destroy(this.pb_treatment_id_to)
destroy(this.pb_treatment_id_from)
destroy(this.pb_generator_id_to)
destroy(this.pb_generator_name_to)
destroy(this.pb_epa_id_to)
destroy(this.pb_customer_to)
destroy(this.pb_generator_id_from)
destroy(this.pb_generator_name_from)
destroy(this.pb_epa_id_from)
destroy(this.pb_customer_from)
destroy(this.sle_territory_code)
destroy(this.sle_location_to)
destroy(this.sle_location_from)
destroy(this.sle_approval_code_to)
destroy(this.sle_approval_code_from)
destroy(this.sle_eq_contact)
destroy(this.ddlb_profile_status)
destroy(this.ddlb_ots_flag)
destroy(this.sle_waste_code_to)
destroy(this.sle_waste_code_from)
destroy(this.dw_select)
end on

type pb_waste_code from picturebutton within tabpage_select
integer x = 1527
integer y = 1344
integer width = 105
integer height = 84
integer taborder = 380
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string picturename = "c:\eqai-dev\resources\select.bmp"
string disabledname = "c:\eqai-dev\resources\select_inactive.bmp"
alignment htextalign = left!
end type

event clicked;
String ls_where,ls_waste_code
Integer li_idx
Long ll_waste_code
str_pick	lstr

//Devops# 18099 added by Venu
lstr.s_window_title			= "Waste Code Select"
lstr.i_window_width			= 0
lstr.b_multipick				= FALSE
lstr.i_tab_count				= 7
lstr.s_retrieve_by[1]		= "waste_code"
lstr.s_retrieve_by[2]		= "waste_code_desc"
lstr.s_button_text[1]		= "Select"
lstr.i_return_column_count	= 6
lstr.to_transaction			= gtr_share
		
FOR li_idx = 1 TO 7
	  CHOOSE CASE li_idx
			CASE 1
				lstr.s_tab_title[li_idx]	= 'D Series'
				lstr.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'D' AND WasteCode.waste_code_origin = 'F' "	
				lstr.s_dataobject[li_idx] = "d_quick_select_waste_code"
			CASE 2
				lstr.s_tab_title[li_idx]	= 'P Series'
				lstr.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'P' AND WasteCode.waste_code_origin = 'F' AND pcb_flag <> 'T' "
				lstr.s_dataobject[li_idx] = "d_quick_select_waste_code"
			CASE 3
				lstr.s_tab_title[li_idx]	= 'U Series'
				lstr.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'U' AND WasteCode.waste_code_origin = 'F' "				
				lstr.s_dataobject[li_idx] = "d_quick_select_waste_code"
			CASE 4
				lstr.s_tab_title[li_idx]	= 'K Series'
				lstr.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'K' AND WasteCode.waste_code_origin = 'F' "				
				lstr.s_dataobject[li_idx] = "d_quick_select_waste_code"
			CASE 5
				lstr.s_tab_title[li_idx]	= 'F Series'
				lstr.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'F' AND WasteCode.waste_code_origin = 'F' "	
				lstr.s_dataobject[li_idx] = "d_quick_select_waste_code"
			CASE 6
				lstr.s_tab_title[li_idx]	= 'State'
				lstr.s_dataobject[li_idx] = "d_quick_select_waste_code_state"
				lstr.s_where[li_idx] = ls_where + "WasteCode.waste_code_origin = 'S'"
			CASE 7
				lstr.s_tab_title[li_idx]	= 'Internal'
				lstr.s_where[li_idx] = ls_where + "WasteCode.waste_code_origin = 'E'"
				lstr.s_dataobject[li_idx] = "d_quick_select_waste_code"
		END CHOOSE
			
	     lstr.i_tabpage_type[li_idx]	= 1
			
		lstr.s_new_reference[li_idx] = ""
NEXT
		
// Open the popup
OpenWithParm(w_popup_quick_select, lstr)
		
// Get the return values
lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	SetPointer(HourGlass!)
	IF lstr.i_return_record_count > 0 THEN
			is_waste_code = string(lstr.return1[1])
			il_waste_code_uid = Long(lstr.return6[1])
			tab_1.tabpage_select.sle_waste_code_from.Text=is_waste_code		
	End If			
END IF
end event

type ddlb_labpack_template_flag from dropdownlistbox within tabpage_select
integer x = 3282
integer y = 352
integer width = 480
integer height = 400
integer taborder = 620
boolean bringtotop = true
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean vscrollbar = true
string item[] = {"Yes","No","All"}
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;string 	ls_labpack_temp_flag

ls_labpack_temp_flag = This.Text
CHOOSE CASE ls_labpack_temp_flag
	CASE "No"
 		is_labpack_template_flag = 'F'
	CASE "Yes"
 		is_labpack_template_flag = 'T'
	CASE "All"
		is_labpack_template_flag = ''
END CHOOSE
end event

type pb_process_code from picturebutton within tabpage_select
integer x = 4165
integer y = 256
integer width = 110
integer height = 96
integer taborder = 610
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string picturename = "c:\eqai-dev\resources\select.bmp"
string disabledname = "c:\eqai-dev\resources\select.bmp"
alignment htextalign = left!
end type

event clicked;integer	li_idx
str_pick	lstr_pick

lstr_pick.s_window_title			= "Lab Pack Process Select"
lstr_pick.i_window_width			= 0
lstr_pick.b_multipick				= FALSE
lstr_pick.i_tab_count				= 1
lstr_pick.i_return_column_count	= 6
lstr_pick.to_transaction			= itr_share
lstr_pick.s_tab_title[1]	= 'Lab Pack Process'
lstr_pick.s_dataobject[1] = "d_quick_select_labpack_process_code"
lstr_pick.s_where[1] = ""
lstr_pick.i_tabpage_type[1]	= 1
lstr_pick.s_new_reference[1] = ""

// Open the popup
OpenWithParm(w_popup_quick_select, lstr_pick)

// Get the return values
lstr_pick = Message.PowerObjectParm
IF IsValid(lstr_pick) THEN
	SetPointer(HourGlass!)
	FOR li_idx = 1 TO lstr_pick.i_return_record_count
		sle_process_code.Text = String(lstr_pick.return1[li_idx])
	NEXT
END IF

end event

type sle_process_code from singlelineedit within tabpage_select
integer x = 3282
integer y = 256
integer width = 873
integer height = 84
integer taborder = 600
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type ddlb_docs_pending from dropdownlistbox within tabpage_select
integer x = 3282
integer y = 548
integer width = 873
integer height = 408
integer taborder = 650
boolean bringtotop = true
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean allowedit = true
boolean sorted = false
boolean vscrollbar = true
string item[] = {"","All","Amendment in Process","Additional Docs Added","Data Update","Profile Sync Required","Rejection in Process","Renewal in Process","Waste Code Review"}
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;long		ll_row

// MPM - 4/26/2021 - Commented out DevOps 20234 changes below, since they are being deployed after EQAI 7.4.84.
This.Text=trim(This.Text)//DevOps 20234 info_gde 04/26/2021; Profile Tracking - Docs Pending Filter
is_docs_pending = This.Text

if trim(is_docs_pending) = "" then
	SetNull(is_docs_pending)
else
	is_docs_pending = "'"+is_docs_pending+"'"
	
end if


end event

event modified;// MPM - 4/26/2021 - Commented out DevOps 20234 changes below, since they are being deployed after EQAI 7.4.84.

//DevOps 20234 info_gde 04/26/2021; Profile Tracking - Docs Pending Filter
this.text=trim(this.text)
end event

event losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("profile_id_from")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(pb_consolidation_profile)	
END IF	
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_recipe from picturebutton within tabpage_select
integer x = 4165
integer y = 164
integer width = 101
integer height = 88
integer taborder = 590
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string picturename = "c:\eqai-dev\resources\select.bmp"
string disabledname = "c:\eqai-dev\resources\select_inactive.bmp"
end type

event clicked;integer	li_idx
str_pick	lstr_pick

lstr_pick.s_window_title			= "Recipe Select"
lstr_pick.i_window_width			= 0
lstr_pick.b_multipick				= FALSE
lstr_pick.i_tab_count				= 1
lstr_pick.i_return_column_count	= 6
lstr_pick.to_transaction			= itr_share
lstr_pick.s_tab_title[1]	= 'Recipes'
lstr_pick.s_dataobject[1] = "d_quick_select_recipe"
lstr_pick.s_where[1] = "RecipeHeader.recipe_validated = 'Y' "
lstr_pick.i_tabpage_type[1]	= 1
lstr_pick.s_new_reference[1] = ""

// Open the popup
OpenWithParm(w_popup_quick_select, lstr_pick)

// Get the return values
lstr_pick = Message.PowerObjectParm
IF IsValid(lstr_pick) THEN
	SetPointer(HourGlass!)
	FOR li_idx = 1 TO lstr_pick.i_return_record_count
		sle_recipe.Text = String(lstr_pick.return1[li_idx])
	NEXT
END IF

end event

type sle_recipe from singlelineedit within tabpage_select
integer x = 3282
integer y = 164
integer width = 873
integer height = 84
integer taborder = 580
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type pb_billing_project_id from picturebutton within tabpage_select
integer x = 4165
integer y = 64
integer width = 101
integer height = 88
integer taborder = 570
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string picturename = "c:\eqai-dev\resources\select.bmp"
string disabledname = "c:\eqai-dev\resources\select_inactive.bmp"
end type

event clicked;integer	li_idx
str_pick	lstr

lstr.s_window_title			= "Billing Project Select"
lstr.i_window_width			= 0
lstr.b_multipick				= False
lstr.i_tab_count				= 1
lstr.i_return_column_count	= 7
lstr.to_transaction 			= gtr_share
lstr.s_tab_title[1]			= 'Billing Project'
lstr.i_tabpage_type[1]		= 1
lstr.s_dataobject[1]			= "d_quick_select_billing_project_non_standard"
lstr.s_where[1]				= ""
lstr.s_retrieve_by[1]		= ""
lstr.s_new_reference[1]		= ""
	
OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	FOR li_idx = 1 TO lstr.i_return_record_count
		sle_billing_project_id.Text = String(lstr.return3[li_idx])
	NEXT
END IF

end event

type sle_billing_project_id from singlelineedit within tabpage_select
integer x = 3282
integer y = 68
integer width = 873
integer height = 84
integer taborder = 560
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type pb_consolidation_profile from picturebutton within tabpage_select
integer x = 4174
integer y = 448
integer width = 101
integer height = 88
integer taborder = 640
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string picturename = "c:\eqai-dev\resources\select.bmp"
string disabledname = "c:\eqai-dev\resources\select_inactive.bmp"
end type

event clicked;str_pick	lstr_pick
int			li_idx

// Setup quick select popup
lstr_pick.s_window_title			= "Consolidation Profile Select"
//lstr_pick.i_window_width			= 2000
lstr_pick.b_multipick				= False
lstr_pick.i_tab_count				= 1
lstr_pick.i_return_column_count	= 3
lstr_pick.to_transaction 			= itr_share
lstr_pick.s_tab_title[1]			= 'Consolidation Profile'
lstr_pick.i_tabpage_type[1]		= 1
lstr_pick.s_dataobject[1]			= "d_quick_select_consolidation_profile"
lstr_pick.s_where[1]				= ""
lstr_pick.s_retrieve_by[1]		= ""
lstr_pick.s_new_reference[1]		= ""
	
OpenWithParm(w_popup_quick_select, lstr_pick)

lstr_pick = Message.PowerObjectParm
IF IsValid(lstr_pick) THEN
	FOR li_idx = 1 TO lstr_pick.i_return_record_count
		sle_consolidation_profile.Text =String(lstr_pick.return3[li_idx])
//		ll_consolidation_profile_id = Long(lstr_pick.return1[li_idx])
//		ll_sub_profile_counter = Long(lstr_pick.return8[li_idx])
//		ls_state = String(lstr_pick.return9[li_idx])
//		ls_required_comment = String(lstr_pick.return10[li_idx])
//		ldt_date_reviewed = DateTime(lstr_pick.return11[li_idx])
	NEXT
END IF
end event

type sle_consolidation_profile from singlelineedit within tabpage_select
integer x = 3282
integer y = 452
integer width = 873
integer height = 84
integer taborder = 630
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
integer limit = 9
borderstyle borderstyle = stylelowered!
end type

type ddlb_container_destination_cell from dropdownlistbox within tabpage_select
integer x = 649
integer y = 2316
integer width = 873
integer height = 352
integer taborder = 550
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;
// JCG 10/3/17 Consolidation Group project
string		ls_cell_desc
long		ll_row

ls_cell_desc = This.Text

if trim(ls_cell_desc) = "" then
	SetNull(ii_container_destination_cell_uid)
else
	ll_row = dw_container_destination_cell.Find("cell_desc = '" + ls_cell_desc + "'", 1, dw_container_destination_cell.RowCount() + 1)
	if ll_row > 0 then
		ii_container_destination_cell_uid = dw_container_destination_cell.Object.container_destination_cell_uid[ll_row]
	end if
end if

end event

type ddlb_container_destination_trench from dropdownlistbox within tabpage_select
integer x = 649
integer y = 2220
integer width = 873
integer height = 352
integer taborder = 540
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;
// JCG 10/3/17 Consolidation Group project
string		ls_trench_desc
long		ll_row

ls_trench_desc = This.Text

if trim(ls_trench_desc) = "" then
	SetNull(ii_container_destination_trench_uid)
else
	ll_row = dw_container_destination_trench.Find("trench_desc = '" + ls_trench_desc + "'", 1, dw_container_destination_trench.RowCount() + 1)
	if ll_row > 0 then
		ii_container_destination_trench_uid = dw_container_destination_trench.Object.container_destination_trench_uid[ll_row]
	end if
end if


end event

type ddlb_profile_consolidation_group from dropdownlistbox within tabpage_select
integer x = 649
integer y = 2124
integer width = 1897
integer height = 352
integer taborder = 530
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;
// JCG 10/3/17 Consolidation Group project
string		ls_consolidation_group_desc
long		ll_row

ls_consolidation_group_desc = This.Text

if trim(ls_consolidation_group_desc) = "" then
	SetNull(ii_consolidation_group_uid)
else
	ll_row = dw_profile_consolidation_group.Find("consolidation_group_desc = '" + ls_consolidation_group_desc + "'", 1, dw_profile_consolidation_group.RowCount() + 1)
	if ll_row > 0 then
		ii_consolidation_group_uid = dw_profile_consolidation_group.Object.consolidation_group_uid[ll_row]
	end if
end if		

end event

type ddlb_cwt_category from dropdownlistbox within tabpage_select
integer x = 649
integer y = 2028
integer width = 480
integer height = 352
integer taborder = 520
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean sorted = false
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;string		ls_cwt_category
long		ll_row

ls_cwt_category = This.Text

if trim(ls_cwt_category) = "" then
	SetNull(ii_cwt_category_id)
else
	ll_row = dw_cwt_category_list.Find("cwt_category = '" + ls_cwt_category + "'", 1, dw_cwt_category_list.RowCount() + 1)
	if ll_row > 0 then
		ii_cwt_category_id = dw_cwt_category_list.Object.cwt_category_uid[ll_row]
	end if
end if		
end event

type pb_const_id from picturebutton within tabpage_select
integer x = 1527
integer y = 1944
integer width = 101
integer height = 88
integer taborder = 510
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string picturename = "c:\eqai-dev\resources\select.bmp"
end type

event clicked;int li_idx
string ls_where
long   ll_i, ll_const_id,	  ll_found_row
str_pick	lstr
str_pass   lstr_pass

lstr.s_window_title			= "Constituent Select"
lstr.i_window_width			= 2000
lstr.b_multipick				= TRUE
lstr.i_tab_count				= 26
lstr.s_retrieve_by[1]		= "const_alpha_desc"
lstr.s_button_text[1]		= "Alphabetize by Name"
lstr.i_return_column_count	= 20
lstr.to_transaction			= itr_share

ls_where = ""

FOR li_idx = 1 TO 26
lstr.s_tab_title[li_idx]		= Char(li_idx + 64)
lstr.i_tabpage_type[li_idx]	= 1
lstr.s_dataobject[li_idx]		= "d_quick_select_constituent"
lstr.s_where[li_idx]				= ls_where
lstr.s_new_reference[li_idx]	= "constituent"
NEXT

OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	IF lstr.i_return_record_count >= 1 THEN
		FOR ll_i = 1 TO lstr.i_return_record_count
			  ll_const_id = Long(lstr.return1[ll_i])			
			  parent.sle_const_id.text = string(ll_const_id)
		NEXT
	END IF
END IF
end event

type sle_const_id from singlelineedit within tabpage_select
integer x = 649
integer y = 1944
integer width = 873
integer height = 84
integer taborder = 500
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
borderstyle borderstyle = stylelowered!
end type

type pb_tsdf_code_to from upb_quick_select_profile_approval within tabpage_select
integer x = 2542
integer y = 1184
integer width = 105
integer height = 84
integer taborder = 320
boolean originalsize = false
string is_target_column_name = "sle_approval_code_to"
string is_target_type = "sle"
end type

event clicked;// OVERRIDE
//Return Column 1 - TSDF.TSDF_code,   
//Return Column 2 - TSDF.TSDF_name,   
//Return Column 3 - TSDF.EQ_flag,   
//Return Column 4 - TSDF.EQ_company,   
//Return Column 5 - TSDF.EQ_profit_ctr  
int		li_idx
str_pick	lstr

is_return_value = ""	

// Setup quick select popup
lstr.s_window_title			= "TSDF Select"
lstr.i_window_width			= 0
lstr.b_multipick				= FALSE
lstr.i_tab_count				= 2
lstr.i_return_column_count	= 5
lstr.to_transaction			= gtr_share// itr
		
li_idx = 1
lstr.s_tab_title[li_idx]			= "EQAI TSDF"
lstr.i_tabpage_type[li_idx]		= 1
lstr.s_dataobject[li_idx]			= "d_quick_select_tsdf"
lstr.s_where[li_idx]					= "EQ_flag = 'T'"
lstr.s_retrieve_by[li_idx]			= ""
lstr.s_new_reference[li_idx]		= ""

// Add TSDF Tab
li_idx++
lstr.s_tab_title[li_idx]			= "Non-EQAI TSDF"
lstr.i_tabpage_type[li_idx]		= 1
lstr.s_dataobject[li_idx]			= "d_quick_select_tsdf"
lstr.s_where[li_idx]					= "ISNULL(EQ_flag, 'F') = 'F'"
lstr.s_retrieve_by[li_idx]			= ""
lstr.s_new_reference[li_idx]		= ""
			
OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	IF lstr.i_return_record_count > 0 THEN
		sle_tsdf_code_to.text = String (lstr.return1[1])
	END IF
END IF

end event

type pb_tsdf_code_from from upb_quick_select_profile_approval within tabpage_select
integer x = 1527
integer y = 1180
integer width = 105
integer height = 84
integer taborder = 300
boolean originalsize = false
string is_target_column_name = "sle_approval_code_from"
string is_target_type = "sle"
end type

event clicked;// OVERRIDE
//Return Column 1 - TSDF.TSDF_code,   
//Return Column 2 - TSDF.TSDF_name,   
//Return Column 3 - TSDF.EQ_flag,   
//Return Column 4 - TSDF.EQ_company,   
//Return Column 5 - TSDF.EQ_profit_ctr  
int		li_idx
str_pick	lstr

is_return_value = ""	

// Setup quick select popup
lstr.s_window_title			= "TSDF Select"
lstr.i_window_width			= 0
lstr.b_multipick				= FALSE
lstr.i_tab_count				= 2
lstr.i_return_column_count	= 5
lstr.to_transaction			= gtr_share // itr
		
li_idx = 1
lstr.s_tab_title[li_idx]			= "EQAI TSDF"
lstr.i_tabpage_type[li_idx]		= 1
lstr.s_dataobject[li_idx]			= "d_quick_select_tsdf"
lstr.s_where[li_idx]					= "EQ_flag = 'T'"
lstr.s_retrieve_by[li_idx]			= ""
lstr.s_new_reference[li_idx]		= ""

// Add TSDF Tab
li_idx++
lstr.s_tab_title[li_idx]			= "Non-EQAI TSDF"
lstr.i_tabpage_type[li_idx]		= 1
lstr.s_dataobject[li_idx]			= "d_quick_select_tsdf"
lstr.s_where[li_idx]					= "ISNULL(EQ_flag, 'F') = 'F'"
lstr.s_retrieve_by[li_idx]			= ""
lstr.s_new_reference[li_idx]		= ""
			
OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	IF lstr.i_return_record_count > 0 THEN
		sle_tsdf_code_from.text = String (lstr.return1[1])
	END IF
END IF

end event

type sle_tsdf_code_to from singlelineedit within tabpage_select
integer x = 1664
integer y = 1176
integer width = 873
integer height = 84
integer taborder = 310
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type sle_tsdf_code_from from singlelineedit within tabpage_select
integer x = 649
integer y = 1176
integer width = 873
integer height = 84
integer taborder = 290
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type pb_tsdf_approval_code_to from upb_quick_select_profile_approval within tabpage_select
integer x = 2542
integer y = 1264
integer width = 105
integer height = 84
integer taborder = 360
boolean originalsize = false
string is_target_column_name = "sle_approval_code_to"
string is_target_type = "sle"
end type

event clicked;// OVERRIDE
// Return Column 1 - TSDFApproval.TSDF_approval_id,
// Return Column 2 - TSDFApproval.waste_stream,
// Return Column 3 - TSDF.TSDF_code,
// Return Column 4 - TSDFApproval.TSDF_approval_code,
int		li_idx
str_pick	lstr

is_return_value = ""	

// Setup quick select popup
lstr.s_window_title			= "TSDF Approval Select"
lstr.i_window_width			= 0
lstr.b_multipick				= FALSE
lstr.i_tab_count				= 1
lstr.i_return_column_count	= 4
lstr.to_transaction			= gtr_share// itr

lstr.s_tab_title[1]			= "TSDF Approvals"
lstr.i_tabpage_type[1]		= 1
lstr.s_dataobject[1]			= "d_quick_select_tsdf_approval"
lstr.s_where[1]				= ""
lstr.s_retrieve_by[1]		= ""
lstr.s_new_reference[1]		= ""

OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	IF lstr.i_return_record_count > 0 THEN
		sle_tsdf_approval_code_to.text = String (lstr.return4[1])
	END IF
END IF

end event

type pb_tsdf_approval_code_from from upb_quick_select_profile_approval within tabpage_select
integer x = 1527
integer y = 1264
integer width = 105
integer height = 84
integer taborder = 340
boolean originalsize = false
string is_target_column_name = "sle_approval_code_from"
string is_target_type = "sle"
end type

event clicked;// OVERRIDE
// Return Column 1 - TSDFApproval.TSDF_approval_id,
// Return Column 2 - TSDFApproval.waste_stream,
// Return Column 3 - TSDF.TSDF_code,
// Return Column 4 - TSDFApproval.TSDF_approval_code,
int		li_idx
str_pick	lstr

is_return_value = ""	

// Setup quick select popup
lstr.s_window_title			= "TSDF Approval Select"
lstr.i_window_width			= 0
lstr.b_multipick				= FALSE
lstr.i_tab_count				= 1
lstr.i_return_column_count	= 4
lstr.to_transaction			= gtr_share // itr

lstr.s_tab_title[1]			= "TSDF Approvals"
lstr.i_tabpage_type[1]		= 1
lstr.s_dataobject[1]			= "d_quick_select_tsdf_approval"
lstr.s_where[1]				= ""
lstr.s_retrieve_by[1]		= ""
lstr.s_new_reference[1]		= ""

OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	IF lstr.i_return_record_count > 0 THEN
		sle_tsdf_approval_code_from.text = String (lstr.return4[1])
	END IF
END IF

end event

type sle_tsdf_approval_code_to from singlelineedit within tabpage_select
integer x = 1664
integer y = 1260
integer width = 873
integer height = 84
integer taborder = 350
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type sle_tsdf_approval_code_from from singlelineedit within tabpage_select
integer x = 649
integer y = 1260
integer width = 873
integer height = 84
integer taborder = 330
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type sle_treatment_to from singlelineedit within tabpage_select
integer x = 1664
integer y = 1008
integer width = 873
integer height = 84
integer taborder = 230
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
borderstyle borderstyle = stylelowered!
end type

type sle_treatment_from from singlelineedit within tabpage_select
integer x = 649
integer y = 1008
integer width = 873
integer height = 84
integer taborder = 210
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
borderstyle borderstyle = stylelowered!
end type

event losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("inactive_flag")
END IF	
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type ddlb_copc from dropdownlistbox within tabpage_select
integer x = 649
integer y = 1680
integer width = 1399
integer height = 360
integer taborder = 470
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean sorted = false
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;string	ls_company_profit_ctr
long		ll_row

ls_company_profit_ctr = This.Text

if trim(ls_company_profit_ctr) = "" then
	SetNull(ii_company_id)
	SetNull(ii_profit_ctr_id)
else

	ll_row = dw_copc_list.Find("description = '" + ls_company_profit_ctr + "'", 1, dw_copc_list.RowCount() + 1)
	if ll_row > 0 then
		ii_company_id = dw_copc_list.Object.company_id[ll_row]
		ii_profit_ctr_id = dw_copc_list.Object.profit_ctr_id[ll_row]
	end if
end if		
end event

type pb_location_to from upb_quick_select_locations within tabpage_select
integer x = 2542
integer y = 1424
integer width = 105
integer height = 84
integer taborder = 420
boolean originalsize = false
string is_target_column_name = "sle_location_to"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_location_to)
end event

type pb_location_from from upb_quick_select_locations within tabpage_select
integer x = 1527
integer y = 1424
integer width = 105
integer height = 84
integer taborder = 400
boolean originalsize = false
string is_target_column_name = "sle_location_from"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_location_from)
end event

type pb_approval_code_to from upb_quick_select_profile_approval within tabpage_select
integer x = 2542
integer y = 1096
integer width = 105
integer height = 84
integer taborder = 280
boolean originalsize = false
string is_target_column_name = "sle_approval_code_to"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_approval_code_to)
end event

type pb_approval_code_from from upb_quick_select_profile_approval within tabpage_select
integer x = 1527
integer y = 1096
integer width = 105
integer height = 84
integer taborder = 260
boolean originalsize = false
string is_target_column_name = "sle_approval_code_from"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_approval_code_from)
end event

type pb_territory_code from upb_quick_select_territory within tabpage_select
integer x = 1527
integer y = 1600
integer width = 105
integer height = 84
integer taborder = 460
boolean originalsize = false
string powertiptext = "Quick-Select Territory"
string is_target_column_name = "sle_territory_code"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_territory_code)
end event

type pb_contact from upb_quick_select_eq_contact within tabpage_select
integer x = 1527
integer y = 1512
integer width = 105
integer height = 84
integer taborder = 440
boolean originalsize = false
string powertiptext = "Quick-Select Contact"
string is_target_column_name = "sle_eq_contact"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_eq_contact)
end event

type pb_treatment_id_to from upb_quick_select_treatment within tabpage_select
integer x = 2542
integer y = 1008
integer width = 105
integer height = 84
integer taborder = 240
boolean originalsize = false
integer ii_return_column = 1
string is_target_column_name = "sle_treatment_to"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_treatment_to)
end event

event clicked;//Return Column 1 - treatment_id
//Return Column 2 - treatment desc

str_pick	lstr
int		li_idx

// Setup quick select popup
lstr.s_window_title			= "Treatment"
lstr.i_window_width			= 0
lstr.b_multipick				= FALSE
lstr.i_tab_count				= 1
lstr.i_return_column_count	= 2
lstr.to_transaction			= itr_share

lstr.s_tab_title[1]			= "Treatment"
lstr.i_tabpage_type[1]		= 1
lstr.s_dataobject[1]			= "d_quick_select_treatment_profile"
lstr.s_where[1]				= ""
lstr.s_retrieve_by[1]		= ""
lstr.s_new_reference[1]		= ""

OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	FOR li_idx = 1 TO lstr.i_return_record_count
		if ii_return_column = 2 then
			is_return_value = String(lstr.return2[li_idx]) //treatment_treatment_desc
		else	
			is_return_value = String(lstr.return1[li_idx]) //approval_treatment_id
		end if
		if is_return_value > "" then
			exit
		end if
	NEXT
END IF

choose case is_target_type
	case "dw"
		uf_write_value_to_column( is_return_value )
	case "sle","em"
		uf_write_value_to_control( is_return_value )
end choose
end event

type pb_treatment_id_from from upb_quick_select_treatment within tabpage_select
integer x = 1527
integer y = 1008
integer width = 105
integer height = 84
integer taborder = 220
boolean originalsize = false
integer ii_return_column = 1
string is_target_column_name = "sle_treatment_from"
string is_target_type = "sle"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_sle(sle_treatment_from)
end event

event clicked;//Return Column 1 - treatment_id
//Return Column 2 - treatment desc

str_pick	lstr
int		li_idx

// Setup quick select popup
lstr.s_window_title			= "Treatment"
lstr.i_window_width			= 0
lstr.b_multipick				= FALSE
lstr.i_tab_count				= 1
lstr.i_return_column_count	= 2
lstr.to_transaction			= itr_share

lstr.s_tab_title[1]			= "Treatment"
lstr.i_tabpage_type[1]		= 1
lstr.s_dataobject[1]			= "d_quick_select_treatment_profile"
lstr.s_where[1]				= ""
lstr.s_retrieve_by[1]		= ""
lstr.s_new_reference[1]		= ""

OpenWithParm(w_popup_quick_select, lstr)

lstr = Message.PowerObjectParm
IF IsValid(lstr) THEN
	FOR li_idx = 1 TO lstr.i_return_record_count
		if ii_return_column = 2 then
			is_return_value = String(lstr.return2[li_idx]) //treatment_treatment_desc
		else	
			is_return_value = String(lstr.return1[li_idx]) //approval_treatment_id
		end if
		if is_return_value > "" then
			exit
		end if
	NEXT
END IF

choose case is_target_type
	case "dw"
		uf_write_value_to_column( is_return_value )
	case "sle","em"
		uf_write_value_to_control( is_return_value )
end choose
end event

type pb_generator_id_to from upb_quick_select_generator within tabpage_select
integer x = 2542
integer y = 420
integer width = 105
integer height = 84
integer taborder = 200
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 1
string is_target_column_name = "generator_id_to"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("ap_start_date_from")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_id_to")
END IF	
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_generator_name_to from upb_quick_select_generator within tabpage_select
integer x = 2542
integer y = 332
integer width = 105
integer height = 84
integer taborder = 180
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 3
string is_target_column_name = "generator_name_to"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_id_from")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_name_to")
END IF	
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_epa_id_to from upb_quick_select_generator within tabpage_select
integer x = 2542
integer y = 244
integer width = 105
integer height = 84
integer taborder = 160
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 2
string is_target_column_name = "generator_epa_id_to"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)

uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_name_from")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_epa_id_to")
END IF
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_customer_to from upb_quick_select_customer within tabpage_select
integer x = 2542
integer y = 156
integer width = 105
integer height = 84
integer taborder = 140
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 1
string is_target_column_name = "customer_id_to"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_epa_id_from")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("customer_id_to")
END IF
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_generator_id_from from upb_quick_select_generator within tabpage_select
integer x = 1527
integer y = 420
integer width = 105
integer height = 84
integer taborder = 190
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 1
string is_target_column_name = "generator_id_from"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_id_to")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_id_from")
END IF
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_generator_name_from from upb_quick_select_generator within tabpage_select
integer x = 1527
integer y = 332
integer width = 105
integer height = 84
integer taborder = 170
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 3
string is_target_column_name = "generator_name_from"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_name_to")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_name_from")
END IF
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_epa_id_from from upb_quick_select_generator within tabpage_select
integer x = 1527
integer y = 244
integer width = 105
integer height = 84
integer taborder = 150
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 2
string is_target_column_name = "generator_epa_id_from"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_epa_id_to")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("generator_epa_id_from")
END IF
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type pb_customer_from from upb_quick_select_customer within tabpage_select
integer x = 1527
integer y = 156
integer width = 105
integer height = 84
integer taborder = 130
boolean bringtotop = true
boolean originalsize = false
integer ii_return_column = 1
string is_target_column_name = "customer_id_from"
string is_target_type = "dw"
end type

event constructor;call super::constructor;uf_set_transaction(itr_share)
uf_set_datawindow(dw_select)
end event

event losefocus;call super::losefocus;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("customer_id_to")
ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
	SetFocus(idw_select)
	idw_select.SetColumn("customer_id_from")
END IF	
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type sle_territory_code from singlelineedit within tabpage_select
integer x = 649
integer y = 1596
integer width = 873
integer height = 84
integer taborder = 450
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
borderstyle borderstyle = stylelowered!
end type

type sle_location_to from singlelineedit within tabpage_select
integer x = 1664
integer y = 1428
integer width = 873
integer height = 84
integer taborder = 410
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type sle_location_from from singlelineedit within tabpage_select
integer x = 649
integer y = 1428
integer width = 873
integer height = 84
integer taborder = 390
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type sle_approval_code_to from singlelineedit within tabpage_select
integer x = 1664
integer y = 1092
integer width = 873
integer height = 84
integer taborder = 270
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type sle_approval_code_from from singlelineedit within tabpage_select
integer x = 649
integer y = 1092
integer width = 873
integer height = 84
integer taborder = 250
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 15
borderstyle borderstyle = stylelowered!
end type

type sle_eq_contact from singlelineedit within tabpage_select
integer x = 649
integer y = 1512
integer width = 873
integer height = 84
integer taborder = 430
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
borderstyle borderstyle = stylelowered!
end type

type ddlb_profile_status from dropdownlistbox within tabpage_select
integer x = 649
integer y = 1768
integer width = 480
integer height = 540
integer taborder = 480
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean sorted = false
boolean vscrollbar = true
string item[] = {"Approved","Pending","Hold","Canceled","Rejected","Void","All","Accepted"}
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;string	ls_profile_status

ls_profile_status = Lower(This.Text)
CHOOSE CASE ls_profile_status
	CASE "approved"
		is_profile_status = "A"
	CASE "canceled"
		is_profile_status = "C"
	CASE "hold"
		is_profile_status = "H"
	CASE "pending"
		is_profile_status = "P"
	CASE "rejected"
		is_profile_status = "R"
	CASE "void"
		is_profile_status = "V"
	CASE "all"
		is_profile_status = ""
	CASE "accepted"	
		is_profile_status = "F"
		ii_display_status_id = 3
END CHOOSE
end event

type ddlb_ots_flag from dropdownlistbox within tabpage_select
integer x = 649
integer y = 1856
integer width = 480
integer height = 400
integer taborder = 490
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
boolean vscrollbar = true
string item[] = {"Standard","OTS","All"}
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;string 	ls_ots_flag

ls_ots_flag = This.Text
CHOOSE CASE ls_ots_flag
	CASE "Standard"
		is_ots_flag = 'F'
	CASE "OTS"
		is_ots_flag = 'T'
	CASE "All"
		is_ots_flag = ''
END CHOOSE
end event

type sle_waste_code_to from singlelineedit within tabpage_select
string tag = "Removed this cretiria, Devops#18099"
boolean visible = false
integer x = 1664
integer y = 1168
integer width = 873
integer height = 84
integer taborder = 90
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 10
borderstyle borderstyle = stylelowered!
end type

type sle_waste_code_from from singlelineedit within tabpage_select
integer x = 649
integer y = 1344
integer width = 873
integer height = 84
integer taborder = 370
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 1090519039
textcase textcase = upper!
integer limit = 10
borderstyle borderstyle = stylelowered!
end type

type dw_select from uo_dw_param within tabpage_select
integer width = 4434
integer height = 2444
integer taborder = 10
string dataobject = "d_profile_select"
end type

event itemchanged;call super::itemchanged;string ls_data, ls_col_name, ls_null
long		ll_customer_id, ll_generator_id
datetime	ldt_null
integer	li_return

SetNull(ls_null)
SetNull(ldt_null)

ls_col_name = dwo.name
ls_data = string(data)
if isNull(ls_data) or (ls_data = "") then
	ls_data = "0"
end if
Choose Case dwo.name
	Case "customer_id_from" 
		ll_customer_id = long(ls_data)
		pb_approval_code_from.uf_set_customer_id(ll_customer_id)
	Case "customer_id_to" 
		ll_customer_id = long(ls_data)
		pb_approval_code_to.uf_set_customer_id(ll_customer_id)
	Case "generator_id_from" 
		ll_generator_id = long(ls_data)
		pb_approval_code_from.uf_set_generator_id(ll_generator_id)
	Case "generator_id_to"
		ll_generator_id = long(ls_data)
		pb_approval_code_to.uf_set_generator_id(ll_generator_id)
//	Case "ap_start_date_from","ap_expiration_date_from","date_modified_from","ap_start_date_to","ap_expiration_date_to","date_modified_to"
//		If data > '' Then
//			If Not Isdate(data) Then
//				MessageBox('Invalid Date','The date you entered is invalid.',stopsign!,OK!)
//				SetColumn(ls_col_name)
//				li_return = SetText(String(ldt_null))
//				//li_return = SetItem(row,ls_col_name,ldt_null)
//				//li_return = SetNull(data)
//				li_return = this.SetFocus()
//				Return 1
//			End If
//		End If
End Choose
end event

event rowfocuschanging;call super::rowfocuschanging;if newrow > 1 then
	return 1
end if
end event

event itemerror;call super::itemerror;String	ls_col_name
datetime	ldt_null

setNull(ldt_null)
ls_col_name = dwo.name

Choose Case lower(dwo.name)
	Case "ap_start_date_from","ap_expiration_date_from","date_modified_from","ap_start_date_to","ap_expiration_date_to","date_modified_to"
		return 1
End Choose

end event

event ue_keypressed;call super::ue_keypressed;// Kamendra - DevOps #73554 - 11/17/2023 -Begin
CHOOSE CASE THIS.GetColumnName()
	CASE "inactive_flag"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(sle_treatment_from)
		END IF	
	CASE "customer_id_from"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_customer_from)
		END IF
	CASE "customer_id_to"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_customer_to)
		ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_customer_from)
		END IF
	CASE "generator_epa_id_from"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_epa_id_from)
		ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_customer_to)
		END IF
	CASE "generator_epa_id_to"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_epa_id_to)
		ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_epa_id_from)
		END IF
	CASE "generator_name_from"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_generator_name_from)
		ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_epa_id_to)
		END IF
	CASE "generator_name_to"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_generator_name_to)
		ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_generator_name_from)
		END IF
	CASE "generator_id_from"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_generator_id_from)
		ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_generator_name_to)
		END IF
	CASE "generator_id_to"
		IF KeyDown(KeyTab!) AND NOT (KeyDown (KeyShift!) AND KeyDown (KeyTab!)) THEN
			SetFocus(pb_generator_id_to)
		ELSEIF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_generator_id_from)
		END IF
	CASE "ap_start_date_from"
		IF KeyDown (KeyShift!) AND KeyDown (KeyTab!) THEN
			SetFocus(pb_generator_id_to)
		END IF		
END CHOOSE	
// Kamendra - DevOps #73554 - 11/17/2023 -End
end event

type tabpage_view from userobject within tab_1
integer x = 18
integer y = 112
integer width = 4690
integer height = 2428
long backcolor = 67108864
string text = "View"
long tabtextcolor = 33554432
string picturename = "DataWindow5!"
long picturemaskcolor = 536870912
st_form_id_wcr st_form_id_wcr
st_1 st_1
tab_2 tab_2
dw_header dw_header
dw_profile_pharmaceutical_supplement dw_profile_pharmaceutical_supplement
end type

on tabpage_view.create
this.st_form_id_wcr=create st_form_id_wcr
this.st_1=create st_1
this.tab_2=create tab_2
this.dw_header=create dw_header
this.dw_profile_pharmaceutical_supplement=create dw_profile_pharmaceutical_supplement
this.Control[]={this.st_form_id_wcr,&
this.st_1,&
this.tab_2,&
this.dw_header,&
this.dw_profile_pharmaceutical_supplement}
end on

on tabpage_view.destroy
destroy(this.st_form_id_wcr)
destroy(this.st_1)
destroy(this.tab_2)
destroy(this.dw_header)
destroy(this.dw_profile_pharmaceutical_supplement)
end on

type st_form_id_wcr from statictext within tabpage_view
boolean visible = false
integer x = 4293
integer y = 160
integer width = 201
integer height = 64
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 67108864
string text = "(None)"
boolean focusrectangle = false
end type

type st_1 from statictext within tabpage_view
boolean visible = false
integer x = 3927
integer y = 160
integer width = 347
integer height = 64
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 67108864
string text = "Primary WPF:"
alignment alignment = right!
boolean focusrectangle = false
end type

type tab_2 from tab within tabpage_view
integer y = 280
integer width = 4690
integer height = 2148
integer taborder = 30
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 67108864
boolean raggedright = true
boolean focusonbuttondown = true
boolean boldselectedtext = true
integer selectedtab = 1
tabpage_detail tabpage_detail
tabpage_comment tabpage_comment
tabpage_technical tabpage_technical
tabpage_waste tabpage_waste
tabpage_const tabpage_const
tabpage_composition tabpage_composition
tabpage_shipping tabpage_shipping
tabpage_wcr tabpage_wcr
tabpage_price tabpage_price
tabpage_rules tabpage_rules
tabpage_category tabpage_category
tabpage_recipe tabpage_recipe
tabpage_import tabpage_import
tabpage_statistics tabpage_statistics
tabpage_note tabpage_note
tabpage_document tabpage_document
tabpage_audit tabpage_audit
end type

on tab_2.create
this.tabpage_detail=create tabpage_detail
this.tabpage_comment=create tabpage_comment
this.tabpage_technical=create tabpage_technical
this.tabpage_waste=create tabpage_waste
this.tabpage_const=create tabpage_const
this.tabpage_composition=create tabpage_composition
this.tabpage_shipping=create tabpage_shipping
this.tabpage_wcr=create tabpage_wcr
this.tabpage_price=create tabpage_price
this.tabpage_rules=create tabpage_rules
this.tabpage_category=create tabpage_category
this.tabpage_recipe=create tabpage_recipe
this.tabpage_import=create tabpage_import
this.tabpage_statistics=create tabpage_statistics
this.tabpage_note=create tabpage_note
this.tabpage_document=create tabpage_document
this.tabpage_audit=create tabpage_audit
this.Control[]={this.tabpage_detail,&
this.tabpage_comment,&
this.tabpage_technical,&
this.tabpage_waste,&
this.tabpage_const,&
this.tabpage_composition,&
this.tabpage_shipping,&
this.tabpage_wcr,&
this.tabpage_price,&
this.tabpage_rules,&
this.tabpage_category,&
this.tabpage_recipe,&
this.tabpage_import,&
this.tabpage_statistics,&
this.tabpage_note,&
this.tabpage_document,&
this.tabpage_audit}
end on

on tab_2.destroy
destroy(this.tabpage_detail)
destroy(this.tabpage_comment)
destroy(this.tabpage_technical)
destroy(this.tabpage_waste)
destroy(this.tabpage_const)
destroy(this.tabpage_composition)
destroy(this.tabpage_shipping)
destroy(this.tabpage_wcr)
destroy(this.tabpage_price)
destroy(this.tabpage_rules)
destroy(this.tabpage_category)
destroy(this.tabpage_recipe)
destroy(this.tabpage_import)
destroy(this.tabpage_statistics)
destroy(this.tabpage_note)
destroy(this.tabpage_document)
destroy(this.tabpage_audit)
end on

event selectionchanged;//DevOsp #14974 info_gde 03/27/2020; Other Functions - Application Terminated
integer	li_rc, li_null, li_revision_id
long		ll_profile_id, ll_row_header, ll_customer_id, ll_generator_id, ll_form_id_wcr, ll_contact_id
long		ll_rowcount, ll_rows, ll_detail_row, ll_row
string	ls_locked, ls_filter, ls_string, ls_null
any la_string
SetNull(ls_null)
str_wcr_params	lst_params
str_wcr_values lstr_wcr_values

wf_accepttext()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN

// rb 12/03/2012 Need to accepttext() if leaving Profile
CHOOSE CASE oldindex
	CASE ii_tabpage_wcr
		idw_wcr_display_1.AcceptText()
		idw_wcr_display_2.AcceptText()
		idw_wcr_display_3.AcceptText()
//		idw_wcr_display_4.AcceptText()
		// MPM - COR2
		idw_wcr_display_5.AcceptText()
		// 20191114 jcb #12448 repl cb_pdf.visible = FALSE      	// 20191113 jcb #12448   Hide get pdf button 
 		pb_pdf.visible = FALSE							// 20191114 jcb #12448   Hide get pdf picture-button 
	CASE  ii_tabpage_const
		ib_edit=True
END CHOOSE

ll_form_id_wcr = idw_header.Object.form_id_wcr[ll_row_header]
//is_rcra_waste_code_flag = idw_header.Object.RCRA_waste_code_flag[ll_row_header]
//

CHOOSE CASE newindex
	CASE ii_tabpage_technical, ii_tabpage_const, ii_tabpage_waste
//		idw_header.Sharedata(idw_waste_other)  
//		idw_technical.Sharedata(idw_waste_profilelab)  //dz
		wf_retrieve_primary_wcr(ll_form_id_wcr)
		wf_top6_show()

		// rb 07/11/2012 WPF now uses ShareData() and appends to filter
		if newindex = ii_tabpage_const then
			ls_filter = idw_const.Describe ("DataWindow.Table.Filter")
			if ls_filter = "?" then ls_filter = ""
			if Pos (ls_filter, " and uhc='T'") > 0 then
				ls_filter = Replace (ls_filter, Pos (ls_filter, " and uhc='T'"), 12, "")
			end if
			if Pos (ls_filter, "uhc='T'") > 0 then
				ls_filter = Replace (ls_filter, Pos (ls_filter, "uhc='T'"), 7, "")
			end if
			if ib_LDR_setFilter then ib_LDR_setFilter = false
			//DevOps:15235
			idw_const.SetFilter ("") // (ls_filter)
			idw_const.Filter ()
			idw_const.Sort ()
			
			ib_edit=False
			
			//DevOps 18322 info_gde 12/31/2020; EQAI-Compare Profile is not pulling over constituents correctly
			If (newindex=5 or newindex=8) and not ib_refresh_constituent Then
				wf_update_COR_consts()
    				 ib_refresh_constituent=TRUE
			End If
		end if
		
	CASE ii_tabpage_composition
//		idw_technical.Sharedata(idw_composition_other)
//		idw_header.Sharedata(idw_composition_epa)
// MPM - 11/30/2020 - DevOps 18101 - We no longer want to insert a blank composition row if there aren't any
//		IF idw_composition.Rowcount() <= 0 THEN
//			ll_row = idw_composition.insertrow(0)
// DevOps 16474 per Oswin don't set default to '%'
//			   idw_composition.object.unit[ll_row] = '%'
			// SK 12/10/2013.. don't assign any values to the blank row, unless user enters some data!!
			//idw_composition.object.profile_id[ll_row] = ll_profile_id
//		END IF
		
	// rb 04/27/2012 adjust height (rows may have been added on Composition tab)
	CASE ii_tabpage_wcr
//		if idw_wcr_display_1.dataobject = "d_profile_comp_and_gen_proc_form" then
//			idw_wcr_display_1.height = ( idw_wcr_display_1.Rowcount() * 80 ) + 304 + 40
//			ii_dw2_height = 972
//			ii_dw_height = idw_wcr_display_1.height
//			idw_wcr_display_2.y = ii_dw_height
//			idw_wcr_display_2.height = ii_dw2_height
//		end if
		tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.Post Event rowfocuschanged (tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.GetRow())
//		tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.Post Event rowfocuschanged (1)
		// 20191114 jcb #12448 repl cb_pdf.visible = TRUE                                        // 20191113 jcb #12448   SHOW get pdf button 
 		pb_pdf.visible = TRUE									// 20191114 jcb #12448   SHOW get pdf picture-button 
		
        
		//DevOsp #14974 info_gde 03/27/2020 - start
		ll_row_header = idw_header.GetRow()
		//DevOsp #14974 info_gde 03/27/2020 - end
		If ll_row_header > 0 Then
		If idw_wcr_display_1.dataobject="d_profile_generator_form_dragon" then
			la_string=LEFT ( idw_header.Object.gen_mail_addr1[ll_row_header], 1 )
			if isNull(la_string) then      Return 
			If IsNumber(la_string) AND Match(idw_header.Object.gen_mail_addr1[ll_row_header],"[A-Za-z]")  then 
		           idw_header.Object.gen_mail_addr2[ll_row_header] = ls_null	
			       idw_header.SetItemStatus(ll_row_header, "gen_mail_addr2", 	Primary!, NotModified!)
			elseif Len(trim(la_string))=0 then
				  idw_header.Object.gen_mail_addr1[ll_row_header] = ls_null	
				  idw_header.SetItemStatus(ll_row_header, "gen_mail_addr1", 	Primary!, NotModified!)  
			//20200426 jcb #15336 dlet	  elseif Not isNumber(la_string) then  ie: just cuz its not a number is no reason to blank it out
			//20200426 jcb #15336 dlet	  idw_header.Object.gen_mail_addr1[ll_row_header] = ls_null	
			//20200426 jcb #15336 dlet	  idw_header.SetItemStatus(ll_row_header, "gen_mail_addr1", 	Primary!, NotModified!)
			else
				 //20200426 JCB #15336, repl put combined address to line 1 not line 2
				 //  I did not reverse putting combined addrs to line 2 and blanking line1, because users are used to it, 
				 //  altho putting combined to line 1 and blanking line 2 might look better
			      idw_header.Object.gen_mail_addr2[ll_row_header] =  idw_header.Object.gen_mail_addr2[ll_row_header] 
		          idw_header.Object.gen_mail_addr1[ll_row_header] = idw_header.Object.gen_mail_addr1[ll_row_header] 	
			     idw_header.SetItemStatus(ll_row_header, "gen_mail_addr1", 	Primary!, NotModified!)
                   idw_header.SetItemStatus(ll_row_header, "gen_mail_addr2", 	Primary!, NotModified!)
		    end if
		end if
	     
	End If
	CASE ii_tabpage_document
		ll_profile_id = idw_header.Object.profile_id[ll_row_header]
		IF IsNull(ll_profile_id) OR ll_profile_id = 0 THEN
			RETURN 1
		ELSE
			IF tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectedTab = ii_tabpage_document_document THEN
				SetNull(li_null)
				ll_rowcount = wf_retrieve_documents(ll_row_header,ll_profile_id )
//				ll_customer_id = idw_header.Object.customer_id[ll_row_header]
//				ll_generator_id = idw_header.Object.generator_id[ll_row_header]
//				ll_rowcount = iudw_document.uf_Retrieve(is_document_source, li_null, li_null, -99999, ll_customer_id, ll_profile_id, -99999, ll_generator_id, is_access_to_scan)
//				ib_retrieved_documents = TRUE
				IF ll_rowcount > 0 THEN
					IF idw_header.GetItemStatus(ll_row_header, 0, primary!) = Datamodified! &
						OR idw_header.GetItemStatus(ll_row_header,0 , primary!) = NewModified! THEN
						ll_contact_id = idw_header.Object.contact_id[ll_row_header]
						
						iudw_document.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, FALSE)
					END IF
				END IF
			ELSEIF tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectedTab = ii_tabpage_form THEN
				IF NOT ib_added_wcr THEN
					ll_rowcount = idw_form.Retrieve(ll_profile_id)
				END IF
			END IF
		END IF
	
	CASE ii_tabpage_note
		itp_note.uf_awake()
		
		IF idw_header.GetItemStatus(ll_row_header, 0, primary!) = Datamodified! &
			OR idw_header.GetItemStatus(ll_row_header,0 , primary!) = NewModified! THEN
			ll_profile_id	= idw_header.Object.profile_id[ll_row_header]
			ll_customer_id = idw_header.Object.customer_id[ll_row_header]
			ll_generator_id = idw_header.Object.generator_id[ll_row_header]
			ll_contact_id = idw_header.Object.contact_id[ll_row_header]
			
			itp_note.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, ll_contact_id, FALSE)
		END IF
		
	CASE ii_tabpage_price
		// Show the prices for the current approval row
		wf_price("SHOWPRICE", 0)
		 
	CASE ii_tabpage_shipping

		// build dot shipping desc
		wf_build_dot_shipping_desc()
		 wf_set_other_billunit(idw_shipping)
	CASE ii_tabpage_import_waste
		wf_import_waste ("SHOWPRICE", 0)
		
	CASE ii_tabpage_audit  
   //DevOps 17097 info_gde 09/22/2020; Reject Form - Audit Tab
	    ll_profile_id=wf_get_profile_id()
		idw_audit.Retrieve(ll_profile_id) 
		ib_check_profile_origin=FALSE //Devops#42843 added by Venu to avoid Audit tab freeze.
		Commit Using itr_share;

	CASE ELSE
END CHOOSE

Postevent("ue_selectionchanging")

SetPointer(Arrow!)
end event

event selectionchanging;
wf_accepttext()

//DevOps #14024 info_gde; 02212020 -- EQAI - Maintenance - COR  - Form Management - New Profile - Accept
String ls_rc, ls_comments, ls_comment
long  ll_form

//DevOps #14024 info_gde; 02212020 -- Start
If newindex=4 Then
	ls_rc = idw_waste_other.Object.rcra_exempt_reason[1]
	ls_rc = idw_waste_other.Object.rcra_exempt_flag[1]
	if isNull(ls_rc) OR trim(ls_rc)='' then
		idw_waste_other.Object.rcra_exempt_flag[1]='U'
		wf_accepttext()
	end if

End If
//DevOps #14024 info_gde; 02212020 -- End

If newindex=16 Then //DevOps 27650 info_gde 11/30/2021; Profile Tracking - Default "Docs" Subtab
	tab_1.tabpage_view.tab_2.tabpage_document.tab_3.selectedtab = ii_tabpage_document_document

end if

//DevOps 18322 info_gde 12/31/2020; EQAI-Compare Profile is not pulling over constituents correctly
If (newindex=8 or newindex=5) and not ib_refresh_constituent Then
	wf_update_COR_consts()
     ib_refresh_constituent=TRUE
End If


		

end event

event constructor;//DevOps #14709 info_gde 03/19/2020; Add New Profile - Section A. (Add New Generator)
itab = this
end event

type tabpage_detail from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Detail"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_approval dw_approval
dw_detail dw_detail
dw_quoteheader dw_quoteheader
end type

on tabpage_detail.create
this.dw_approval=create dw_approval
this.dw_detail=create dw_detail
this.dw_quoteheader=create dw_quoteheader
this.Control[]={this.dw_approval,&
this.dw_detail,&
this.dw_quoteheader}
end on

on tabpage_detail.destroy
destroy(this.dw_approval)
destroy(this.dw_detail)
destroy(this.dw_quoteheader)
end on

type dw_approval from anc_dw within tabpage_detail
event ue_item ( )
integer y = 516
integer width = 4411
integer height = 1376
integer taborder = 40
boolean bringtotop = true
string dataobject = "d_profile_quote_approval"
boolean vscrollbar = true
boolean border = true
end type

event ue_item();string ls_approval_code

choose case lower(is_name)
	case 'approval_code'
		// Remove any end-blanks
		ls_approval_code = Trim(This.Object.approval_code[il_row])
		//DevOps 17195 info_gde 08/31/2020; EQAI: Incorrect D1 validation warning
		This.Object.approval_code[il_row] = trim(ls_approval_code)
end choose
end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
END IF

// MPM - 10/3/2018 - Task 5169 - Changes for thermal blending ratio
// Because there isn't a "##" edit mask on the thermal blending ratio column (because you can't set "nilisnull" on a column with
// an edit mask), we need to validate user entry
CHOOSE CASE Lower(dwo.name)
	CASE "thermal_blending_ratio"
		IF data <> "" AND (NOT(IsNumber(data)) OR Pos(data, '.') > 0) THEN
			MessageBox(gs_app_name + ":  Error", "You may only enter numbers in this field.", StopSign!)
			This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
		END IF
END CHOOSE


end event

event buttonclicked;//DevOps #14940 info_gde 04/10/2020; EQAI- PO from Profile tab not on price tab
//DevOps #15214 info_gde 04/16/2020 Application Terminated
boolean	lb_sort, ib_assign_labpack_profile = FALSE
datetime	ldt_confirm_date, ldt_today, ldt_date_reviewed, ldt_null
decimal	lc_null, lc_cust_discount
double	ldb_ddvoc_technical, ldb_ddvoc_lab,ldb_ccvoc_technical, ldb_ccvoc_lab
integer	li_connect, li_current_form_version, li_idx, li_profit_ctr_id, li_response, li_rc, li_last_tab
integer	li_company_id, li_eq_company_id, li_eq_profit_ctr_id, li_ans
long		ll_row, ll_row_tech, ll_row_company, ll_row_new, ll_tracking_id, ll_quote_id, ll_consolidation_profile_id, ll_pricing_disposal_rowcount
long		ll_row_header, ll_profile_id, ll_null, ll_treatment_id, ll_row_find, ll_row_treatment, ll_find_bill_unit_code, ll_find_bulk_billing_unit
long		ll_customer_id, ll_count, ll_rowcount, ll_waste_type_id, ll_a_counter, ll_generator_id, ll_sub_profile_counter,ll_labpack_profile_id
long		ll_OB_profile_id, ll_OB_company_id, ll_OB_profit_ctr_id, ll_OB_TSDF_approval_id, ll_row_comment,ll_process_code_uid,ll_labpack_process_code_uid
long		ll_billing_project_id, ll_po_sequence_id, ll_waste_type, ll_treatment_proc, ll_disp_svc, ll_waste_code_uid, ll_bulk_load_frequency_of_sample
string	ls_confirm_author, ls_confirm_update_by, ls_profile_status, ls_where, ls_tmp, ls_access, ls_consolidation_profile_approval_code
string	ls_expire, ls_start, ls_null, ls_location_control, ls_location, ls_search, ls_cust_name, ls_facility_tabpage, ls_facility, ls_dragon_reviewed_flag
string	ls_surcharge_flag, ls_sort, ls_find, ls_treatment_list, ls_epa_id, ls_where_all, ls_wastetype, ls_state, ls_required_comment
string	ls_db_name, ls_server_name, ls_location_type, ls_treatment_desc, ls_approval_code, ls_new_approval_code, ls_hand_instruct,ls_lab_pack_return_string
string	ls_customer_ins_sr_flag, ls_customer_ensr_flag, ls_eq_flag, ls_waste_code, ls_customer_cost_flag, ls_state_profile_review_required_flag
string	ls_purchase_order, ls_release, ls_short_name, ls_territory_code, ls_intervention_desc, ls_cwt_category_required_flag, ls_tracking_type
string	ls_category, ls_desc, ls_code, ls_text, ls_consolidate_cont_flag,ls_air_permit_flag, ls_bulk_load_sampling_frequency_required_flag
string	ls_thermal_blending_required_flag,ls_norm_threshold_flag,ls_d365_go_live_date,ls_process_code,ls_labpack_template_flag,ls_labpack_process_code
str_pass		lstr_pass
str_pick		lstr_pick
datastore	lds
string ls_po
String	ls_consolidation_group_flag, ls_disposal_trench_cell_flag	// JCG 10/11/17 Gemini 46000 - Consolidation Group
u_tabpage_profile_price ltabpage_profile_price
datawindowchild ldwc

IF is_access = "V" OR is_access = "P" OR is_access = "B" OR is_approval_readonly = "YES" THEN RETURN

ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN

// Set row to the button clicked row
IF idw_approval.GetRow() <> row THEN
	idw_approval.ScrolltoRow(row)
END IF
ll_quote_id = idw_header.Object.quote_id[ll_row_header]
ll_profile_id = idw_header.Object.profile_id[ll_row_header]
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
ls_tracking_type = idw_header.Object.tracking_type[ll_row_header]

// MPM - 9/11/2023 - DevOps 69309
ll_generator_id = idw_header.Object.generator_id[ll_row_header]

ldt_today = DateTime(Today(), Now())

CHOOSE CASE Lower(dwo.name)		
	CASE "b_billing_project_info"
		IF (NOT IsNull(ll_customer_id)) AND ll_customer_id > 0 THEN
			lstr_pass.s_dataobject = "d_customer_print_billing_info"
			lstr_pass.s_action = "billing project"
			lstr_pass.d[1] = ll_customer_id
			OpenWithParm(w_popup_info, lstr_pass)
		END IF
		
	CASE "b_billing_project"
		IF is_access_companies = "" THEN
			MessageBox(gs_app_name + ":  Add Approval", "You do not have access for any company to select Purchase Orders.", Exclamation!)
			RETURN
		END IF
		wf_billing_project_select(row)
		
	CASE "b_insert"
		IF is_access_companies = '' THEN
			MessageBox(gs_app_name + ":  Add Approval", "You do not have access for any company to add Approvals.", Exclamation!)
			RETURN
		END IF
		
		// User can select EQ Facilities to create an Approval in the companies they have access to
		// Setup quick select popup
		//lstr_pick.s_window_title			= "EQ Facilities"
		lstr_pick.s_window_title			= "US Ecology Facilities" //DevOps 19037 info_gde 02/18/2021; Profit Center Selection - Title bar change from EQ
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		lstr_pick.i_tab_count				= 1
		lstr_pick.i_return_column_count	= 12
		ls_where = "status = 'A' AND waste_receipt_flag = 'T' AND company_id IN (" + is_access_companies + ")"
		lstr_pick.to_transaction			= itr_share
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx]			= "Profit Center"
		lstr_pick.i_tabpage_type[li_idx]		= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_profit_center"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= ""

		OpenWithParm(w_popup_quick_select, lstr_pick)
		//DevOPs:20996 - either template_flag T or process_code not null then set TDB to approval code
		ls_labpack_template_flag = idw_header.object.labpack_template_flag[ll_row_header]
		ll_labpack_process_code_uid = idw_detail.object.process_code_uid[idw_detail.GetRow()]
		IF ls_labpack_template_flag = 'T' THEN 
			if isnull(ll_profile_id) then ll_profile_id = 0
			//ll_labpack_process_code_uid = idw_detail.object.process_code_uid[idw_detail.GetRow()]
			IF ll_labpack_process_code_uid > 0 THEN 
				idw_detail.GetChild (  "process_code_uid" ,ldwc )
				ls_labpack_process_code = ldwc.GetItemString (ldwc.getrow(), "process_code")
				//DevOps 29641 AGC 11/10/2021 added profile_id <> :ll_profile to query
				SELECT STUFF(REPLACE((SELECT DISTINCT  ' ,' + LTRIM(RTRIM(u3.profile_id)) 
				INTO :ls_lab_pack_return_string
				FROM Profile u3 
				WHERE process_code_uid = :ll_labpack_process_code_uid
				AND profile_id <> :ll_profile_id
				FOR XML PATH('')),' ,',', '), 1, 2, '')
				Using gtr_share;
		
				IF gtr_share.SQLCode < 0 then
					MessageBox ("SQL Error", gtr_share.SQLErrText, exclamation!)
				END IF
				IF Not Isnull(ls_lab_pack_return_string) OR ls_lab_pack_return_string <> "" THEN 
					MessageBox(gs_app_name+": Approval Change", "This Lab Pack Process code has already been used on another profile " + ls_lab_pack_return_string + '.' , Exclamation!) 
					RETURN
				ELSE
					ib_assign_labpack_profile = TRUE
				END IF
			END IF
//DevOps 29641 AGC 11/10/2021 commented out elseif
//		ELSEIF ll_labpack_process_code_uid > 0 THEN
//				idw_detail.GetChild (  "process_code_uid" ,ldwc )
//					ls_labpack_process_code = ldwc.GetItemString (ldwc.getrow(), "process_code")
//				
//				SELECT STUFF(REPLACE((SELECT DISTINCT  ' ,' + LTRIM(RTRIM(u3.profile_id)) 
//				INTO :ls_lab_pack_return_string
//				FROM Profile u3 
//				WHERE process_code_uid = :ll_labpack_process_code_uid
//				FOR XML PATH('')),' ,',', '), 1, 2, '')
//				Using gtr_share;
//		
//					IF gtr_share.SQLCode < 0 then
//						MessageBox ("SQL Error", gtr_share.SQLErrText, exclamation!)
//					END IF
//				IF Not Isnull(ls_lab_pack_return_string) OR ls_lab_pack_return_string <> "" THEN 
//					MessageBox(gs_app_name+": Approval Change", "This Lab Pack Process code has already been used on another profile " + ls_lab_pack_return_string + '.' , Exclamation!) 
//					RETURN
//				ELSE
//					ib_assign_labpack_profile = TRUE
//				END IF
		END IF
		
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// Get return values
				li_company_id = Long(lstr_pick.return3[li_idx])
				li_profit_ctr_id = Long(lstr_pick.return1[li_idx])
				ls_surcharge_flag = String(lstr_pick.return4[li_idx])
				ls_short_name = String(lstr_pick.return8[li_idx])
				ls_waste_code = idw_detail.Object.waste_code[ll_row_header]
				ls_bulk_load_sampling_frequency_required_flag = String(lstr_pick.return9[li_idx])
				ll_bulk_load_frequency_of_sample = Long(lstr_pick.return10[li_idx])
				ls_state_profile_review_required_flag = String(lstr_pick.return11[li_idx])
				ls_thermal_blending_required_flag = String(lstr_pick.return12[li_idx])
				
				// Add only new records
				ls_search = "company_id = " + String(li_company_id) &
					+ " AND profit_ctr_id = " + String(li_profit_ctr_id) 
				ll_row_company = This.Find(ls_search, 1, This.RowCount() + 1)
				IF ll_row_company > 0 THEN
					MessageBox(gs_app_name+": Approval", "An approval already exists for " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id,"00") + ".", Exclamation!)
					CONTINUE
				ELSE
					ll_row_new = This.InsertRow(0)
					IF ll_row_new = 1 THEN
						This.Object.primary_facility_flag[ll_row_new] = "T"
					ELSE
						This.Object.primary_facility_flag[ll_row_new] = "F"
					END IF
					This.Object.company_id[ll_row_new] = li_company_id
					This.Object.profit_ctr_id[ll_row_new] = li_profit_ctr_id
					This.Object.short_name[ll_row_new] = ls_short_name
					//DevOPs:20996
					IF ib_assign_labpack_profile = TRUE THEN
						
					    This.Object.approval_code[ll_row_new] = ls_labpack_process_code
						 ib_assign_labpack_profile = FALSE
				     ELSE
					    This.Object.approval_code[ll_row_new] = "TBD"
					END IF
					
					This.Object.quote_id[ll_row_new] = ll_quote_id
					This.Object.profile_id[ll_row_new] = ll_profile_id
					IF IsNull(ls_surcharge_flag) THEN ls_surcharge_flag = "F"
					This.Object.profitcenter_surcharge_flag[ll_row_new] = ls_surcharge_flag
					// Set sr_type to Exempt ONLY if this profit center doesn't do surcharges
					IF ls_surcharge_flag = "F" THEN
						This.Object.sr_type_code[ll_row_new] = "E"
					END IF
					This.Object.insurance_exempt[ll_row_new] = "F"
					This.Object.ensr_exempt[ll_row_new] = "F"
					This.Object.location_control[ll_row_new] = "B"
					This.Object.location_type[ll_row_new] = "U"
					This.Object.ldr_req_flag[ll_row_new] = "U"
					This.Object.status[ll_row_new] = "A"
					
					IF li_company_id = 2 THEN
						ll_row_tech = idw_technical.GetRow()
						IF ll_row_tech > 0 THEN
							ldb_ddvoc_technical = idw_technical.Object.ddvoc[ll_row_tech]
							ldb_ccvoc_technical = idw_technical.Object.ccvoc[ll_row_tech]
						END IF
						ll_row_tech = idw_lab.GetRow()
						IF ll_row_tech > 0 THEN
							ldb_ddvoc_lab = idw_lab.Object.ddvoc[ll_row_tech]
							ldb_ccvoc_lab = idw_lab.Object.ccvoc[ll_row_tech]
						ELSE
							ldb_ddvoc_lab = ldb_ddvoc_technical
							ldb_ccvoc_lab = ldb_ccvoc_technical
						END IF
						IF (ldb_ddvoc_technical >= 500 OR ldb_ddvoc_lab >= 500 or ldb_ccvoc_technical >= 500 OR ldb_ccvoc_lab >= 500) THEN
							This.Object.location[ll_row_new] = ls_null
							This.Object.location_control[ll_row_new] = "E"
							This.Object.location_type[ll_row_new] = ls_null
						END IF
					END IF
					
					// Set the territory code and customer discount
					// SK 09/16/15 set consolidate containers flag
					IF NOT IsNull(ll_customer_id) THEN
						SELECT CustomerBilling.territory_code, 
								CustomerBilling.cust_discount,
								CustomerBilling.insurance_surcharge_flag,
								CustomerBilling.ensr_flag,
								IsNull(Customer.customer_cost_flag, 'F')  ,
								IsNull(CustomerBilling.consolidate_containers_flag, Customer.consolidate_containers_flag)
							INTO :ls_territory_code, 
								:lc_cust_discount,
								:ls_customer_ins_sr_flag,
								:ls_customer_ensr_flag,
								:ls_customer_cost_flag,
								:ls_consolidate_cont_flag
							FROM Customer, CustomerBilling
							WHERE Customer.customer_ID = :ll_customer_id
							AND CustomerBilling.customer_ID = Customer.customer_ID
							AND CustomerBilling.billing_project_id = :gl_billing_project_id
						USING itr_share;
						IF itr_share.SQLcode < 0 THEN
							MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLErrText, Exclamation!)
							This.Object.territory_code[ll_row_new] = ls_null
							This.Object.cust_discount[ll_row_new] = ll_null
							This.Object.customerbilling_insurance_surcharge_flag[ll_row_new] = ls_null
							This.Object.customerbilling_ensr_flag[ll_row_new] = ls_null
							This.Object.customer_cost_flag[ll_row_new] = "F"
							This.Object.consolidate_containers_flag[ll_row_new] = ls_null
							RETURN 2
						ELSEIF itr_share.SQLcode = 100 THEN
							This.Object.territory_code[ll_row_new] = ls_null
							This.Object.cust_discount[ll_row_new] = ll_null
							This.Object.customerbilling_insurance_surcharge_flag[ll_row_new] = ls_null
							This.Object.customerbilling_ensr_flag[ll_row_new] = ls_null
							This.Object.customer_cost_flag[ll_row_new] = "F"
							This.Object.consolidate_containers_flag[ll_row_new] = ls_null
						ELSE
							This.Object.territory_code[ll_row_new] = ls_territory_code
							This.Object.cust_discount[ll_row_new] = lc_cust_discount
							This.Object.customerbilling_insurance_surcharge_flag[ll_row_new] = ls_customer_ins_sr_flag
							This.Object.customerbilling_ensr_flag[ll_row_new] = ls_customer_ensr_flag
							This.Object.customer_cost_flag[ll_row_new] = ls_customer_cost_flag
							This.Object.consolidate_containers_flag[ll_row_new] = ls_consolidate_cont_flag
						END IF
					END IF		
					
					// Initialize the CWT category to "Pending"
					This.Object.cwt_category_uid[ll_row_new] = 0
					
					// MPM - 9/27/2018 - Task 5186 - Set bulk load sampling frequency values
					This.Object.pc_bulk_load_sampling_frequency_required_flag[ll_row_new] = ls_bulk_load_sampling_frequency_required_flag
					This.Object.bulk_load_sampling_frequency_required_flag[ll_row_new] = ls_bulk_load_sampling_frequency_required_flag
					// MPM - DevOps task 9466 - Set the initial value for the interval to 0 to indicate that on the next receipt of that 
					// approval, a sample is required
					This.Object.loads_until_sample_required[ll_row_new] = 0 //ll_bulk_load_frequency_of_sample
					This.Object.bulk_approval[ll_row_new] = 'T'
					This.SetItemStatus(ll_row_new, "pc_bulk_load_sampling_frequency_required_flag", Primary!, NotModified!)
					This.SetItemStatus(ll_row_new, "bulk_load_sampling_frequency_required_flag", Primary!, NotModified!)
					This.SetItemStatus(ll_row_new, "loads_until_sample_required", Primary!, NotModified!)
					This.SetItemStatus(ll_row_new, "bulk_approval", Primary!, NotModified!)
					
					// MPM - 11/7/2018 - Task 5205 - Set consolidation profile management value
					This.Object.state_profile_review_required_flag[ll_row_new] = ls_state_profile_review_required_flag
					This.SetItemStatus(ll_row_new, "state_profile_review_required_flag", Primary!, NotModified!)
					
					// MPM - 12/6/2018 - Set the thermal blending required flag
					This.Object.pc_thermal_blending_required_flag[ll_row_new] = ls_thermal_blending_required_flag
					This.SetItemStatus(ll_row_new, "pc_thermal_blending_required_flag", Primary!, NotModified!)
					ib_changed_approval = TRUE
					ib_changed_waste  = TRUE
					
					This.ScrollToRow(ll_row_new)
					
					// SK 08162012 Commented below
					// rb 06/06/2012 - Update WCR Facility counts
//					select count(*)
//					into :ll_count
//					from ProfileWCRFacility
//					where profile_id = :ll_profile_id
//					and company_id = :li_company_id
//					and profit_ctr_id = :li_profit_ctr_id
//					using gtr_share;
//
//					this.Object.wcr_facility_match_count[ll_row_new] = ll_count
//
//					select count(*)
//					into :ll_count
//					from ProfileWCRFacility
//					where profile_id = :ll_profile_id
//					using gtr_share;
//
//					this.Object.wcr_facility_total_count[ll_row_new] = ll_count


					// Create a new price tab for this facility
					wf_price("NEW", ll_row_new)
					wf_import_waste("NEW", ll_row_new)
					
					// Set the surcharge type according to the primary waste code
					ls_waste_code = idw_detail.Object.waste_code[ll_row_header]
					ll_waste_code_uid = idw_detail.Object.waste_code_uid[ll_row_header]
					wf_sync_waste_code(ll_waste_code_uid, ls_waste_code, FALSE)
				END IF
			NEXT
		END IF
		//DevOps #15214 info_gde 04/16/2020 start
		//DevOps #14940 info_gde 04/10/2020 - start
		idw_header.Object.purchase_order_from_form[idw_header.getrow()] = is_po
		IF idw_approval.Getrow() > 0 THEN
	      	idw_approval.Object.purchase_order[ idw_approval.Getrow()]= is_po
		END IF
		//DevOps #14940 info_gde 04/10/2020 - end
		//DevOps #15214 info_gde 04/16/2020 - end
		
		// JCG 10/11/17 Gemini 46000 - Consolidation Group
		SELECT consolidation_group_flag, disposal_trench_cell_flag,air_permit_flag,norm_threshold_flag,dragon_reviewed_flag
		INTO :ls_consolidation_group_flag, :ls_disposal_trench_cell_flag, :ls_air_permit_flag,:ls_norm_threshold_flag,:ls_dragon_reviewed_flag
		FROM ProfitCenter
		WHERE	ProfitCenter.company_id = :li_company_id
		AND		ProfitCenter.profit_ctr_id = :li_profit_ctr_id
		USING gtr_share;
		
		IF gtr_share.SQLCode < 0 then
			MessageBox ("SQL Error", gtr_share.SQLErrText, exclamation!)
		END IF
		
		IF ls_consolidation_group_flag = 'F' OR IsNull(ls_consolidation_group_flag) THEN
			SetItem(ll_row_new, 'profitcenter_consolidation_group_flag', 'F')
		ELSEIF ls_consolidation_group_flag = 'T' THEN
			SetItem(ll_row_new, 'profitcenter_consolidation_group_flag', 'T')
		END IF
		
		IF ls_disposal_trench_cell_flag = 'F' OR IsNull(ls_disposal_trench_cell_flag) THEN
			SetItem(ll_row_new, 'profitcenter_disposal_trench_cell_flag', 'F')
		ELSEIF ls_disposal_trench_cell_flag = 'T' THEN
			SetItem(ll_row_new, 'profitcenter_disposal_trench_cell_flag', 'T')
		END IF
		//50074
		IF ls_air_permit_flag = 'F' OR IsNull(ls_air_permit_flag) THEN
			SetItem(ll_row_new, 'air_permit_flag', 'F')
		ELSEIF ls_air_permit_flag = 'T' THEN
			SetItem(ll_row_new, 'air_permit_flag', 'T')
		END IF 
		//11536
		IF ls_norm_threshold_flag = 'F' OR IsNull(ls_norm_threshold_flag) THEN
			SetItem(ll_row_new, 'norm_threshold_flag', 'F')
		ELSEIF ls_norm_threshold_flag = 'T' THEN
			SetItem(ll_row_new, 'norm_threshold_flag', 'T')
		END IF
		
		IF ls_dragon_reviewed_flag = 'F' OR IsNull(ls_dragon_reviewed_flag) THEN
			SetItem(ll_row_new, 'pc_dragon_reviewed_flag', 'F')
		ELSEIF ls_dragon_reviewed_flag = 'T' THEN
			SetItem(ll_row_new, 'pc_dragon_reviewed_flag', 'T')
		END IF
		
		// MPM - 5/6/2019 - DevOps task 10354 - Modified to run 'Copy Bill Units' when a new approval is created. 
		wf_price('COPY_BILL_UNIT', ll_row_new)

	CASE "b_treatment"
		// Check access to this company
		li_company_id = This.Object.company_id[row]
		ls_access = wf_profile_access(li_company_id)
		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
			MessageBox(gs_app_name+": Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
			RETURN
		END IF
			li_profit_ctr_id = This.Object.profit_ctr_id[row]
		ll_waste_type_id = idw_detail.GetItemNumber(idw_detail.GetRow(),'wastetype_id')
		//DevOps:20991 - Add process code tab to treatment
		ll_process_code_uid = idw_detail.GetItemNumber(idw_detail.GetRow(),'process_code_uid')
		If IsNull(ll_waste_type_id) then ll_waste_type_id = 0
		If IsNull(ll_process_code_uid) then ll_process_code_uid = 0
		
		ls_where_all = "Treatment.company_id = " + String(li_company_id) &
				+ " AND Treatment.profit_ctr_id = " + String(li_profit_ctr_id) &
				+ " AND Treatment.status = 'A'"
				
		If IsNull(ll_waste_type_id) Then
			ls_where = "Treatment.company_id = " + String(li_company_id) &
				+ " AND Treatment.profit_ctr_id = " + String(li_profit_ctr_id) &
				+ " AND Treatment.status = 'A'"
		Else
			ls_where = "Treatment.company_id = " + String(li_company_id) &
				+ " AND Treatment.profit_ctr_id = " + String(li_profit_ctr_id) &
				+ " AND Treatment.status = 'A'  and Treatment.Wastetype_id = " + String(ll_waste_type_id)
				
			Select description into :ls_wastetype from wastetype where wastetype_id = :ll_waste_type_id using itr_share; //sagar added itr_share 
			
		End If
			
		// Setup quick select popup
		lstr_pick.s_window_title			= "Approval Treatment"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= False
		IF  ll_process_code_uid = 0 THEN
		   lstr_pick.i_tab_count = 2
		   lstr_pick.i_return_column_count	= 8
		ELSE
		   lstr_pick.i_tab_count = 3
		   lstr_pick.i_return_column_count	= 9
		END IF
		
		lstr_pick.i_return_column_count	= 8
		lstr_pick.to_transaction			= itr_share
		
		lstr_pick.s_tab_title[1]		= "Treatments For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		If Not IsNull(ll_waste_type_id) Then
			 lstr_pick.s_tab_title[1] = lstr_pick.s_tab_title[1] + ' with a waste type of ' + ls_wastetype
		End If
		lstr_pick.i_tabpage_type[1]	= 1
		lstr_pick.s_dataobject[1]		= "d_quick_select_treatment"
		lstr_pick.s_where[1]				= ls_where
		lstr_pick.s_retrieve_by[1]		= ""
		lstr_pick.s_new_reference[1]	= ""
		
		lstr_pick.s_tab_title[2]		= "All Treatments For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00") 
		lstr_pick.i_tabpage_type[2]	= 1
		lstr_pick.s_dataobject[2]		= "d_quick_select_treatment"
		lstr_pick.s_where[2]				= ls_where_all
		lstr_pick.s_retrieve_by[2]		= ""
		lstr_pick.s_new_reference[2]	= ""
			
				//DevOps:20991 - 
		IF  ll_process_code_uid = 0 THEN 
			// fine
		ELSE
       	ls_where = "Treatment.company_id = " + String(li_company_id) &
				+ " AND Treatment.profit_ctr_id = " + String(li_profit_ctr_id) &
				+ " AND Treatment.status = 'A'  and Treatment.Wastetype_id = " + String(ll_waste_type_id) &
				+ " AND Treatment.process_code_uid = " + String(ll_process_code_uid)
			
			SELECT  process_code
			INTO :ls_process_code
			FROM LabPackProcessCode 
			WHERE process_code_uid = :ll_process_code_uid
			USING gtr_share;
			
			lstr_pick.s_tab_title[3]		= "Treatments For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00") 
			 lstr_pick.s_tab_title[3 ] =     lstr_pick.s_tab_title[3] + ' waste type of ' + ls_wastetype
			 lstr_pick.s_tab_title[3 ] =     lstr_pick.s_tab_title[3] + ' and LP process code of ' + ls_process_code
			 
			lstr_pick.i_tabpage_type[3]	= 1
			lstr_pick.s_dataobject[3]		= "d_quick_select_labpack_treatment"
			lstr_pick.s_where[3]				= ls_where
			lstr_pick.s_retrieve_by[3]		= ""
			lstr_pick.s_new_reference[3]	= ""
		END IF
		
		OpenWithParm(w_popup_quick_select, lstr_pick)

		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
		  FOR li_idx = 1 TO lstr_pick.i_return_record_count
			ll_treatment_id = Long(lstr_pick.return1[1])
			ls_treatment_desc = String(lstr_pick.return2[1])
			ll_waste_type = Long(lstr_pick.return5[1])
			ll_treatment_proc = Long(lstr_pick.return6[1])
			ll_disp_svc = Long(lstr_pick.return7[1])
			ls_cwt_category_required_flag = String(lstr_pick.return8[1])
			If ll_waste_type_id <> ll_waste_type  and ll_treatment_id <> 0 and ll_waste_type_id <> 0 Then
				li_ans = MessageBox('Waste Type Changed','You have selected a treatment with a different waste type. Do you want to change the waste type for this profile and clear the treatments from all of the approvals?',Question!,YesNo!)
				If li_ans = 1 Then
					for ll_a_counter = 1 to This.RowCount()
						If ll_a_counter = row then
							idw_detail.SetItem(idw_detail.GetRow(),'wastetype_id',ll_waste_type)
							This.Object.treatment_process_id[row] = ll_treatment_proc
							This.Object.disposal_service_id[row] = ll_disp_svc
							This.Object.treatment_id[row] = ll_treatment_id
							This.Object.treatment_treatment_desc[row] = ls_treatment_desc
							This.Object.cwt_category_required_flag[row] = ls_cwt_category_required_flag

							Select category, description, code into :ls_category, :ls_desc, :ls_code from wastetype where wastetype_id = :ll_waste_type using itr_share;
							ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
							idw_detail.object.t_waste_text.text = ls_text
				
							ib_changed_approval = TRUE
						Else
							This.Object.treatment_process_id[ll_a_counter] = ll_null
							This.Object.disposal_service_id[ll_a_counter] = ll_null	
							This.Object.treatment_id[ll_a_counter] = ll_null
							This.Object.treatment_treatment_desc[ll_a_counter] = ''
							This.Object.cwt_category_required_flag[ll_a_counter] = 'F'
						End IF
					Next
				End If	
			Else	
				idw_detail.SetItem(idw_detail.GetRow(),'wastetype_id',ll_waste_type)
				This.Object.treatment_process_id[row] = ll_treatment_proc
				This.Object.disposal_service_id[row] = ll_disp_svc
				This.Object.treatment_id[row] = ll_treatment_id
				This.Object.treatment_treatment_desc[row] = ls_treatment_desc
				This.Object.cwt_category_required_flag[row] = ls_cwt_category_required_flag
				ib_changed_approval = TRUE
				
				Select category, description, code into :ls_category, :ls_desc, :ls_code from wastetype where wastetype_id = :ll_waste_type using itr_share;
				ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
				idw_detail.object.t_waste_text.text = ls_text
			End If
		NEXT
		wf_filter_cwt_category(row)
		END IF
	CASE "b_confirm", "b_confirm_yes"
		// Check 'can' status
		IF NOT ib_can_confirm THEN
			RETURN
		ELSEIF ib_new_record THEN
			RETURN
		END IF
		
		// DevOps:12378
		SELECT  dbo.fn_get_D365_live()
		INTO :ls_d365_go_live_date
		FROM Company
		WHERE company_id = :gi_company_id
		USING gtr_share;
		
		 ls_labpack_template_flag = idw_header.Object.labpack_template_flag[ll_row_header]
		IF  IsNull(ls_labpack_template_flag) OR ls_labpack_template_flag <> 'T' THEN 
			IF  ls_d365_go_live_date = '1'   THEN 
			 li_rc =  f_chk_cust_status (ll_customer_id,FALSE)
				IF li_rc <> 1  THEN
					MessageBox(gs_app_name + ":  Confirm", "The approval may not be price confirmed because the customer is currently on inactive status.", Information!)
					RETURN
				END IF	
			 END IF
		END IF 
		// Check access to this company
		li_company_id = This.Object.company_id[row]
		ls_access = wf_profile_access(li_company_id)

		// Only Customer Service or Super can confirm an approval
		IF ls_access = "C" OR ls_access = "S" THEN
			// If this approval is inactive, can't confirm
			IF This.Object.status[row] = "I" THEN
				MessageBox(gs_app_name + ":  Confirm", "An Inactive approval cannot be confirmed.", Information!)
				RETURN
			END IF			
			
			// Save any changes
			IF wf_check_changes() < 0 THEN RETURN
			
			ls_profile_status = idw_header.Object.curr_status_code[ll_row_header]
			IF ls_profile_status = "V" THEN
				MessageBox(gs_app_name + ":  Confirm", "A voided Profile does not require confirmation.", Information!)
				RETURN
			ELSEIF ls_profile_status = "C" THEN
				MessageBox(gs_app_name + ":  Confirm", "A canceled Profile does not require confirmation.", Information!)
				RETURN
			ELSEIF ls_profile_status = "R" THEN
				MessageBox(gs_app_name + ":  Confirm", "A rejected Profile does not require confirmation.", Information!)
				RETURN
			ELSEIF ls_profile_status = "P" THEN
				MessageBox(gs_app_name + ":  Confirm", "A pending Profile does not require confirmation.", Information!)
				RETURN
			ELSEIF ls_profile_status <> "A" THEN
				MessageBox(gs_app_name + ":  Confirm", "Profile must be approved before an Approval can be confirmed.", Information!)
				RETURN
			END IF
		END IF
		
		ls_confirm_author = This.Object.confirm_author[row]
		ls_confirm_update_by = This.Object.confirm_update_by[row]
		ldt_confirm_date = This.Object.confirm_update_date[row]
		
		lstr_pass.s[1] = ls_confirm_author
		lstr_pass.s[2] = ls_confirm_update_by
		lstr_pass.s[3] = ls_access
		lstr_pass.datetimes[1] = ldt_confirm_date
		
		OpenWithParm(w_popup_quote_confirm_author, lstr_pass)
		
		lstr_pass = Message.PowerObjectParm
		IF IsValid(lstr_pass) THEN
			IF lstr_pass.i[1] = 1 THEN		// 0 = Cancel, 1 = OK
				This.Object.confirm_author[row] = lstr_pass.s[1]
				This.Object.confirm_update_by[row] = gs_user_id
				This.Object.confirm_update_date[row] = ldt_today
				ib_changed_approval = TRUE
				 
				 // MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
				    //DevOps 17963 info_gde 02/12/2021; Constituent Editting - Data Window Error
//					 idw_header.Object.tracking_EQ_contact[ll_row_header] = ""
//					ll_profile_id=idw_header.Object.profile_id[idw_header.GetRow()] 
//					ll_tracking_id=idw_tracking.Object.tracking_id[idw_tracking.GetRow()] 
//				
//					IF (ll_profile_id > 0 AND not isNull(ll_profile_id)) AND (ll_tracking_id>0 AND not isNull(ll_tracking_id)) THEN
//					Update  ProfileTracking
//					 set EQ_contact = ""
//					 Where profile_id = :ll_profile_id
//					 AND tracking_id = :ll_tracking_id
//					 
//					 USING itr_share;
//					 
//					 Update Department
//					 set department_code=""
//					 From Department  LEFT JOIN ProfileTracking
//					 ON   Department.department_id = ProfileTracking.department_id
//					 WHERE profiletracking.profile_id= :ll_profile_id
//					 AND profiletracking.tracking_id = :ll_tracking_id
//					 
//					 USING itr_share;
//					 
//					 COMMIT USING itr_share;
//					 
//					END IF
			END IF
		END IF
		
	CASE "b_location"
		// Check access to this company
		li_company_id = This.Object.company_id[row]
		ls_access = wf_profile_access(li_company_id)
		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
			RETURN
		END IF
			
		li_profit_ctr_id = This.Object.profit_ctr_id[row]
		
		// Setup quick select popup
		lstr_pick.s_window_title			= "Profile Location"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= FALSE
		lstr_pick.i_return_column_count	= 4
		lstr_pick.to_transaction			= itr_share
		ls_where = "ProcessLocation.company_id = " + String(li_company_id) &
			+ " AND ProcessLocation.profit_ctr_id = " + String(li_profit_ctr_id)
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx]			= "Process"
		lstr_pick.i_tabpage_type[li_idx]		= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_process_location"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= ""

		// Add EQ Facilities Tab
		ls_where = "IsNull(eq_flag,'F') = 'T'"
	
		li_idx++
		lstr_pick.s_tab_title[li_idx]			= "Outbound Location - EQ TSDF"
		lstr_pick.i_tabpage_type[li_idx]		= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_tsdf"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= "TSDF"

		// Add TSDF Tab
		ls_where = "IsNull(eq_flag,'F') = 'F'"
	
		li_idx++
		lstr_pick.s_tab_title[li_idx]			= "Outbound Location - Non-EQ TSDF"
		lstr_pick.i_tabpage_type[li_idx]		= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_tsdf"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= "TSDF"

		lstr_pick.i_tab_count						= li_idx
		
		OpenWithParm(w_popup_quick_select, lstr_pick)

		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetNull(ls_null)
			SetNull(lc_null)
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				This.Object.location[row] = String(lstr_pick.return1[li_idx])
				ls_location_type = String(lstr_pick.return2[li_idx])

				// Process Location
				IF IsNull(ls_location_type) OR ls_location_type = "P" THEN
					ls_location_control = String(lstr_pick.return3[li_idx])
					ls_location_type = "P"
					This.Object.location_type[row] = ls_location_type
					
					// Check DDVOC value for Company 2 only
					li_company_id = This.Object.company_id[row]
					IF li_company_id = 2 THEN
						ll_row_tech = idw_technical.GetRow()
						IF ll_row_tech > 0 THEN
							ldb_ddvoc_technical = idw_technical.Object.ddvoc[ll_row_tech]
							ldb_ccvoc_technical = idw_technical.Object.ccvoc[ll_row_tech]
						END IF
						ll_row_tech = idw_lab.GetRow()
						IF ll_row_tech > 0 THEN
							ldb_ddvoc_lab = idw_lab.Object.ddvoc[ll_row_tech]
							ldb_ccvoc_lab = idw_lab.Object.ccvoc[ll_row_tech]
						ELSE
							ldb_ddvoc_lab = ldb_ddvoc_technical
							ldb_ccvoc_lab = ldb_ccvoc_technical
						END IF
						IF (ldb_ddvoc_technical >= 500 OR ldb_ddvoc_lab >= 500 or ldb_ccvoc_technical >= 500 OR ldb_ccvoc_lab >= 500) AND NOT IsNull(ls_location_control) AND &
							ls_location_control <> "E" THEN
							MessageBox(gs_app_name + ":  Location/DDVOC Error", "DDVOC/CCVOC value is 500 or greater and requires an East-Side Only Location.", Exclamation!)
							This.Object.location[row] = ls_null
							This.Object.location_control[row] = "E"
							This.Object.location_type[row] = ls_null
						END IF
					END IF
					
				// Outbound Location
				ELSE
					// MPM - 9/11/2023 - DevOps 69309
					IF NOT f_chk_generator_restricted_tsdf(ll_generator_id, This.Object.location[row]) THEN
						MessageBox(gs_app_name + ":  Pre. Location", "A TSDF location that is not in the approved list for this outbound restricted generator has been selected. Please carefully review and select an approved location. You may view approved TSDF Locations within the Generator screen.", Exclamation!)
					END IF
					This.Object.location_type[row] = "O"
					This.Object.location_control[row] = ls_null
				END IF
				
				// These always get reset
				SetNull(ll_null)
				This.Object.OB_EQ_profile_id[row] = ll_null
				This.Object.OB_EQ_company_id[row] = ll_null
				This.Object.OB_EQ_profit_ctr_id[row] = ll_null
				This.Object.OB_TSDF_approval_id[row] = ll_null
			NEXT
			
			ib_changed_approval = TRUE
		END IF
		
	CASE "b_preassign"	
		// Check access to this company
		li_company_id = This.Object.company_id[row]
		ls_access = wf_profile_access(li_company_id)
		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
			RETURN
		END IF

		li_idx = 0
		ls_location = This.Object.location[row]
		li_profit_ctr_id = This.Object.profit_ctr_id[row]
		IF NOT IsNull(ls_location) THEN
			SELECT IsNull(eq_flag, 'F'), eq_company, eq_profit_ctr
				INTO :ls_eq_flag, :li_eq_company_id, :li_eq_profit_ctr_id
				FROM TSDF
				WHERE tsdf_code = :ls_location
			USING itr_share;
			IF itr_share.SQLcode < 0 THEN
				MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
				RETURN
			ELSEIF itr_share.SQLcode = 100 THEN
				MessageBox(gs_app_name + ":  Preassign by location", "Location is not a valid TSDF.", Exclamation!)
				RETURN
			ELSE
				// Build a special tab for an already assigned outbound approval
				ll_OB_profile_id = This.Object.OB_EQ_profile_id[row]
				ll_OB_company_id = This.Object.OB_EQ_company_id[row]
				ll_OB_profit_ctr_id = This.Object.OB_EQ_profit_ctr_id[row]
				ll_OB_TSDF_approval_id = This.Object.OB_TSDF_approval_id[row]
				ls_where = ""
				ls_expire = String(Today(), "mm-dd-yyyy")
				ls_start = String(RelativeDate(Today(), 1), "mm-dd-yyyy")
				
				IF ls_eq_flag = 'F' AND NOT IsNull(ll_OB_TSDF_approval_id) THEN
					li_idx++
					ls_where = "TSDFApproval.TSDF_approval_id = " + String(ll_OB_TSDF_approval_id)
					
					lstr_pick.s_tab_title[li_idx]			= "Preassigned TSDF Approval (current)"
					lstr_pick.i_tabpage_type[li_idx]		= 1
					lstr_pick.s_dataobject[li_idx]			= "d_quick_select_tsdf_approval"
					lstr_pick.s_where[li_idx]					= ls_where
					lstr_pick.s_retrieve_by[li_idx]			= ""
					lstr_pick.s_new_reference[li_idx]		= ""
	
					li_idx++
					ls_where = "TSDFApproval.TSDF_approval_id <> " + String(ll_OB_TSDF_approval_id) &
						+ " AND TSDFApproval.TSDF_approval_status = 'A'" &
						+ " AND TSDFApproval.TSDF_approval_expire_date > '" + ls_expire + "'" &
						+ " AND TSDFApproval.company_id = " + String(li_company_id) &
						+ " AND TSDFApproval.profit_ctr_id = " + String(li_profit_ctr_id) &
						+ " AND TSDFApproval.TSDF_code = '" + ls_location + "'"

					lstr_pick.s_tab_title[li_idx]			= "TSDF Approvals to " + ls_location
					lstr_pick.i_tabpage_type[li_idx]		= 1
					lstr_pick.s_dataobject[li_idx]			= "d_quick_select_tsdf_approval"
					lstr_pick.s_where[li_idx]					= ls_where
					lstr_pick.s_retrieve_by[li_idx]			= ""
					lstr_pick.s_new_reference[li_idx]		= ""

				ELSEIF ls_eq_flag = 'F' THEN
					li_idx++
					ls_where = "TSDFApproval.TSDF_approval_status = 'A'" &
						+ " AND TSDFApproval.TSDF_approval_expire_date > '" + ls_expire + "'" &
						+ " AND TSDFApproval.company_id = " + String(li_company_id) &
						+ " AND TSDFApproval.profit_ctr_id = " + String(li_profit_ctr_id) &
						+ " AND TSDFApproval.TSDF_code = '" + ls_location + "'"
			
					lstr_pick.s_tab_title[li_idx]			= "TSDF Approvals to " + ls_location
					lstr_pick.i_tabpage_type[li_idx]		= 1
					lstr_pick.s_dataobject[li_idx]			= "d_quick_select_tsdf_approval"
					lstr_pick.s_where[li_idx]					= ls_where
					lstr_pick.s_retrieve_by[li_idx]			= ""
					lstr_pick.s_new_reference[li_idx]		= ""

				ELSEIF ls_eq_flag = 'T' AND NOT IsNull(ll_OB_profile_id) AND &
					(ll_OB_company_id = li_eq_company_id) AND &
					(ll_OB_profit_ctr_id = li_eq_profit_ctr_id) THEN

					SELECT EPA_ID
						INTO :ls_epa_id
						FROM ProfitCenter
						WHERE company_id = :li_company_id
						AND profit_ctr_id = :li_profit_ctr_id
					USING itr_share;
					IF IsNull(ls_epa_id) THEN ls_epa_id = ""
					
					li_idx++
//					ls_where = "Profile.profile_id = " + String(ll_OB_profile_id) &
//						+ " AND ProfileQuoteApproval.company_id = " + String(ll_OB_company_id) &
//						+ " AND ProfileQuoteApproval.profit_ctr_id = " + String(ll_OB_profit_ctr_id) &
//						+ " AND Profile.ap_expiration_date > '" + ls_expire + "'"
					// MPM - 10/25/2018 - GEM 55823 - Corrected the concatenation of stuff into ls_where, which was causing an error when 
					// clicking on the pre-assigned outbound approval button
					ls_where = "p.profile_id = " + String(ll_OB_profile_id) &
					+ " AND pqa.company_id = " + String(ll_OB_company_id) &
					+ " AND pqa.profit_ctr_id = " + String(ll_OB_profit_ctr_id) &
					+ " AND p.ap_expiration_date > '" + ls_expire + "'"

					lstr_pick.s_tab_title[li_idx]			= "Preassigned Profile Approval (current)"
					lstr_pick.i_tabpage_type[li_idx]		= 1
					lstr_pick.s_dataobject[li_idx]			= "d_quick_select_profile_approval_gen"
					lstr_pick.s_where[li_idx]					= ls_where
					lstr_pick.s_retrieve_by[li_idx]			= ""
					lstr_pick.s_new_reference[li_idx]		= ""
	
					li_idx++
					IF ls_epa_id > "" THEN
						// Show approvals where the profile.generator is the EQ company for this facility
						ls_where = "p.profile_id <> " + String(ll_OB_profile_id) &
							+ " AND pqa.status = 'A'" &
							+ " AND pqa.company_id = " + String(ll_OB_company_id) &
							+ " AND pqa.profit_ctr_id = " + String(ll_OB_profit_ctr_id) &
							+ " AND p.ap_expiration_date > '" + ls_expire + "'" &
							+ " AND Generator.EPA_ID = '" + ls_epa_id + "'"
					ELSE
						ls_where = "p.profile_id <> " + String(ll_OB_profile_id) &
							+ " AND pqa.status = 'A'" &
							+ " AND pqa.company_id = " + String(ll_OB_company_id) &
							+ " AND pqa.profit_ctr_id = " + String(ll_OB_profit_ctr_id) &
							+ " AND p.ap_expiration_date > '" + ls_expire + "'"					
					END IF

					lstr_pick.s_tab_title[li_idx]			= "Profile Approvals"
					lstr_pick.i_tabpage_type[li_idx]		= 1
					lstr_pick.s_dataobject[li_idx]			= "d_quick_select_profile_approval_gen"
					lstr_pick.s_where[li_idx]					= ls_where
					lstr_pick.s_retrieve_by[li_idx]			= ""
					lstr_pick.s_new_reference[li_idx]		= ""
					
				ELSEIF ls_eq_flag = 'T' THEN
					
					SELECT EPA_ID
						INTO :ls_epa_id
						FROM ProfitCenter
						WHERE company_id = :li_company_id
						AND profit_ctr_id = :li_profit_ctr_id
					USING itr_share;
					IF IsNull(ls_epa_id) THEN ls_epa_id = ""

					li_idx++
					IF ls_epa_id > "" THEN
						// Show approvals where the profile.generator is the EQ company for this facility
						ls_where = "pqa.company_id = " + String(li_eq_company_id) &
							+ " AND pqa.profit_ctr_id = " + String(li_eq_profit_ctr_id) &
							+ " AND pqa.status = 'A'" &
							+ " AND p.ap_expiration_date > '" + ls_expire + "'" &
							+ " AND Generator.EPA_ID = '" + ls_epa_id + "'"
					ELSE
						ls_where = "p.profile_id <> " + String(ll_OB_profile_id) &
							+ " AND pqa.status = 'A'" &
							+ " AND pqa.company_id = " + String(ll_OB_company_id) &
							+ " AND pqa.profit_ctr_id = " + String(ll_OB_profit_ctr_id) &
							+ " AND p.ap_expiration_date > '" + ls_expire + "'"
					END IF

					lstr_pick.s_tab_title[li_idx]			= "Profile Approvals"
					lstr_pick.i_tabpage_type[li_idx]		= 1
					lstr_pick.s_dataobject[li_idx]			= "d_quick_select_profile_approval_gen"
					lstr_pick.s_where[li_idx]					= ls_where
					lstr_pick.s_retrieve_by[li_idx]			= ""
					lstr_pick.s_new_reference[li_idx]		= ""
				END IF	
			END IF
			
			// Setup quick select popup
			lstr_pick.s_window_title			= "Preassign Approval"
			lstr_pick.i_window_width			= 0
			lstr_pick.b_multipick				= FALSE
			lstr_pick.i_return_column_count	= 9
			lstr_pick.to_transaction			= itr_share
			lstr_pick.i_tab_count				= li_idx
			
			OpenWithParm(w_popup_quick_select, lstr_pick)
	
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				SetNull(ll_null)
				FOR li_idx = 1 TO lstr_pick.i_return_record_count
					IF ls_eq_flag = 'F' THEN
						This.Object.OB_TSDF_approval_id[row] = Long(lstr_pick.return1[li_idx])
						This.Object.OB_EQ_profile_id[row] = ll_null
						This.Object.OB_EQ_company_id[row] = ll_null
						This.Object.OB_EQ_profit_ctr_id[row] = ll_null
						This.Object.OB_approval[row] = STRING(lstr_pick.return4[li_idx])
					ELSE
						//Subhrajyoti - 01/12/2024  - Devops#74741 - added two arguments in the function
						IF wf_validate_ib_with_preassigned_ob(Long(lstr_pick.return7[li_idx]),Long(lstr_pick.return8[li_idx]),Long(lstr_pick.return9[li_idx]))<> gi_success THEN Return //Subhrajyoti For 38816 - -Profile Tracking - Modification to validation logic for pre-assigned outbound
						This.Object.OB_approval[row] = STRING(lstr_pick.return1[li_idx])
						This.Object.OB_EQ_profile_id[row] = Long(lstr_pick.return7[li_idx])
						This.Object.OB_EQ_company_id[row] = Long(lstr_pick.return8[li_idx])
						This.Object.OB_EQ_profit_ctr_id[row] = Long(lstr_pick.return9[li_idx])
						This.Object.OB_TSDF_approval_id[row] = ll_null
					END IF
				NEXT
				ib_changed_approval = TRUE
			END IF
			
		END IF
		
	CASE "b_exempt_reason"
		// Check access to this company
		li_company_id = This.Object.company_id[row]
		ls_access = wf_profile_access(li_company_id)
		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
			RETURN
		END IF

		IF ib_connected_forms THEN
			// 06/08/2012 SK replaced to look at the max version from table SRECExemptreason instead of the Formtype version
			SELECT MAX(version)
			INTO :li_current_form_version
			FROM SRECExemptReason
			USING itr_share;
			
			// Setup quick select popup
			lstr_pass.i[1] = Integer(This.Object.srec_exempt_id[row])
			lstr_pass.i[2] = li_current_form_version
			lstr_pass.tr_trans = itr_forms
			
			OpenWithParm(w_popup_get_values_srec, lstr_pass)
	
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.i[1] > 0 THEN
					This.Object.srec_exempt_id[row] = lstr_pass.i[1]
					ib_changed_approval = TRUE
				END IF
			END IF
		END IF
		
	CASE "b_delete"
		// Check access to this company
		li_company_id = This.Object.company_id[row]
		ls_access = wf_profile_access(li_company_id)
		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
			RETURN
		END IF

		// Check for usage
		ls_approval_code = This.Object.approval_code[row]
		li_company_id = This.Object.company_id[row]
		li_profit_ctr_id = This.Object.profit_ctr_id[row]
		IF NOT IsNull(ls_approval_code) THEN
			// Check usage
			lds = CREATE DATASTORE
			lds.DataObject = "d_profile_approval_usage"
			lds.SetTransObject(itr_share)
			ll_count = 0
			ll_rowcount = lds.Retrieve(gi_debug, li_company_id, li_profit_ctr_id, ls_approval_code, gs_connect_type)
			IF ll_rowcount > 0 THEN
				ll_count = lds.Object.usage_count[1]
			ELSE
				ll_count = 0
			END IF
			DESTROY lds;

			IF ll_count > 0 THEN
				MessageBox(gs_app_name + ":  Delete Approval", "Approval has been used in the system and cannot be deleted.", Exclamation!)
				This.Object.approval_code[row] = ls_approval_code
			ELSE
				li_response = MessageBox(gs_app_name + ":  Delete Approval", "Are you sure you want to delete Approval '" &
					+ ls_approval_code + "' for facility " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00") &
					+ "?", Question!, YesNo!, 2)
				IF li_response = 2 THEN
					RETURN
				ELSE
					// Audit and Remove the pricing for this approval
					li_rc = wf_price("REMOVE", row)
		            	li_rc = wf_import_waste ("REMOVE", row)
							
					IF li_rc = gi_success THEN
						li_rc = wf_audit(idw_approval, ll_profile_id, row, TRUE)
						IF li_rc <> gi_success THEN
							MessageBox(gs_app_name + ":  Approval Delete", "Audit failed; Approval cannot not deleted.", Exclamation!)
						ELSE
							This.DeleteRow(row)
						END IF
					END IF
					
				END IF
			END IF
		END IF
		
	CASE "b_load_intervention_desc"
		// Check access to this company
		li_company_id = This.Object.company_id[row]
		ls_access = wf_profile_access(li_company_id)
		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
			RETURN
		END IF
		
		// Setup quick select popup
		lstr_pass.s[1] = "Load Intervention Description (255 characters)"
		lstr_pass.s[2] = This.Object.load_intervention_desc[row]
		
		OpenWithParm(w_popup_edit, lstr_pass)

		lstr_pass = Message.PowerObjectParm
		IF IsValid(lstr_pass) THEN
			IF IsNull(lstr_pass.s[1]) THEN
				SetNull(ls_intervention_desc)
			ELSE
				ls_intervention_desc = Left(String(lstr_pass.s[1]), 255)
			END IF
			This.Object.load_intervention_desc[row] = ls_intervention_desc
			ib_changed_approval = TRUE
		END IF
		
	Case "b_codes"
		Open (w_popup_available_list)
		
//	CASE "b_territory"
//		ll_billing_project_id = This.Object.billing_project_id[row]
//		
//		IF IsNull(ll_customer_id) OR IsNull(ll_billing_project_id) THEN
//			RETURN
//		END IF
//		lstr_pass.s_action = "customer territory information"
//		lstr_pass.s_dataobject = "d_customer_billing_territory_information"
//		lstr_pass.l[1] = ll_customer_id
//		lstr_pass.l[2] = ll_billing_project_id
//		lstr_pass.s_win_title = "Customer Territory Information"
//		OpenWithParm(w_popup_info, lstr_pass)
			
	CASE "b_outbound_restricted_info"
		ll_generator_id = idw_header.Object.generator_id[ll_row_header]
		lstr_pass.l[1] = ll_generator_id
		OpenWithParm(w_popup_generator_outbound_restriction_info, lstr_pass)
		
				
	// RJB 1/12/2018 EQAI-47649  Profile - Assignment of consolidation group, trench, cell issues
	CASE "b_consolidation_group"

		li_company_id = idw_approval.Object.company_id[ row ] 
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ row ]

		// Check access to this company - ASK JASON  TODO RICH
//		ls_access = wf_profile_access(li_company_id)
//		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
//			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
//			RETURN
//		END IF
	
		// Setup quick select popup
		lstr_pick.s_window_title				= "Consolidation Group Select"
		lstr_pick.i_window_width				= 0
		lstr_pick.b_multipick					= FALSE
		lstr_pick.i_return_column_count	= 3
		lstr_pick.to_transaction				= itr_share
		ls_where = "ProfileConsolidationGroup.company_id = " + String(li_company_id) &
			+ " AND ProfileConsolidationGroup.profit_ctr_id = " + String(li_profit_ctr_id)
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx]				= "All Consolidation Groups For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		lstr_pick.i_tabpage_type[li_idx]			= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_consolidation_group"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= ""
	
		lstr_pick.i_tab_count						= li_idx
		
		OpenWithParm(w_popup_quick_select, lstr_pick)

		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetNull(ls_null)
			SetNull(ll_null)
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				
				// company and profit center check
				IF IsNull(lstr_pick.return2[li_idx]) or IsNull(lstr_pick.return3[li_idx]) THEN
					This.Object.consolidation_group_uid[row] = ll_null
					RETURN
				ELSE
					IF li_company_id <> lstr_pick.return2[li_idx] or li_profit_ctr_id <> lstr_pick.return3[li_idx] THEN
						This.Object.consolidation_group_uid[row] = ll_null
						MessageBox(gs_app_name + ":  Approval Change", "You selected a consolidation group for the wrong company.", Exclamation!)
						RETURN
					END IF
				END IF
				
				// set the guid
				IF  IsNull(lstr_pick.return1) THEN
					This.Object.consolidation_group_uid[row] = ll_null
				ELSE
					This.Object.consolidation_group_uid[row] = Long(lstr_pick.return1[li_idx])
				END IF
			NEXT
			
			ib_changed_approval = TRUE
		END IF

	// RJB 1/12/2018 EQAI-47649  Profile - Assignment of cell
	CASE "b_default_cell"

		li_company_id = idw_approval.Object.company_id[ row ] 
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ row ]

		// Check access to this company - ASK JASON  TODO RICH
//		ls_access = wf_profile_access(li_company_id)
//		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
//			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
//			RETURN
//		END IF
	
		// Setup quick select popup
		lstr_pick.s_window_title				= "Default Cell Select"
		lstr_pick.i_window_width				= 0
		lstr_pick.b_multipick					= FALSE
		lstr_pick.i_return_column_count	= 3
		lstr_pick.to_transaction				= itr_share
		ls_where = "ContainerDestinationCell.company_id = " + String(li_company_id) &
			+ " AND ContainerDestinationCell.profit_ctr_id = " + String(li_profit_ctr_id)
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx]				= "All Container Tracking Cells For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		lstr_pick.i_tabpage_type[li_idx]			= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_container_tracking_cell"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= ""
	
		lstr_pick.i_tab_count						= li_idx
		
		OpenWithParm(w_popup_quick_select, lstr_pick)

		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetNull(ls_null)
			SetNull(ll_null)
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				
				// company and profit center check
				IF IsNull(lstr_pick.return2[li_idx]) or IsNull(lstr_pick.return3[li_idx]) THEN
					This.Object.container_destination_cell_uid[row] = ll_null
					RETURN
				ELSE
					IF li_company_id <> lstr_pick.return2[li_idx] or li_profit_ctr_id <> lstr_pick.return3[li_idx] THEN
						This.Object.container_destination_cell_uid[row] = ll_null
						MessageBox(gs_app_name + ":  Approval Change", "You selected a container tracking cell for the wrong company.", Exclamation!)
						RETURN
					END IF
				END IF
				
				// set the guid
				IF  IsNull(lstr_pick.return1) THEN
					This.Object.container_destination_cell_uid[row] = ll_null
				ELSE
					This.Object.container_destination_cell_uid[row] = Long(lstr_pick.return1[li_idx])
				END IF
				
			NEXT
			
			ib_changed_approval = TRUE
		END IF

	// RJB 1/12/2018 EQAI-47649  Profile - Assignment of trench
	CASE "b_default_trench"

		li_company_id = idw_approval.Object.company_id[ row ] 
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ row ]

		// Check access to this company - ASK JASON  TODO RICH
//		ls_access = wf_profile_access(li_company_id)
//		IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
//			MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
//			RETURN
//		END IF
	
		// Setup quick select popup
		lstr_pick.s_window_title				= "Default Trench Select"
		lstr_pick.i_window_width				= 0
		lstr_pick.b_multipick					= FALSE
		lstr_pick.i_return_column_count	= 3
		lstr_pick.to_transaction				= itr_share
		ls_where = "ContainerDestinationTrench.company_id = " + String(li_company_id) &
			+ " AND ContainerDestinationTrench.profit_ctr_id = " + String(li_profit_ctr_id)
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx]				= "All Container Tracking Trenches For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		lstr_pick.i_tabpage_type[li_idx]			= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_container_tracking_trench"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= ""
	
		lstr_pick.i_tab_count						= li_idx
		
		OpenWithParm(w_popup_quick_select, lstr_pick)

		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetNull(ls_null)
			SetNull(ll_null)
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				
				// company and profit center check
				IF IsNull(lstr_pick.return2[li_idx]) or IsNull(lstr_pick.return3[li_idx]) THEN
					This.Object.container_destination_trench_uid[row] = ll_null
					RETURN
				ELSE
					IF li_company_id <> lstr_pick.return2[li_idx] or li_profit_ctr_id <> lstr_pick.return3[li_idx] THEN
						This.Object.container_destination_trench_uid[row] = ll_null
						MessageBox(gs_app_name + ":  Approval Change", "You selected a container tracking trench for the wrong company.", Exclamation!)
						RETURN
					END IF
				END IF
				
				// set the guid
				IF  IsNull(lstr_pick.return1) THEN
					This.Object.container_destination_trench_uid[row] = ll_null
				ELSE
					This.Object.container_destination_trench_uid[row] = Long(lstr_pick.return1[li_idx])
				END IF
			NEXT
			
			ib_changed_approval = TRUE
		END IF
		
     CASE  "b_air_permit_status"
         li_company_id = idw_approval.Object.company_id[ row ] 
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ row ]
	
		// Setup quick select popup
		lstr_pick.s_window_title				= "Air Permit Status Select"
		lstr_pick.i_window_width				= 0
		lstr_pick.b_multipick					= FALSE
		lstr_pick.i_return_column_count	= 3
		lstr_pick.to_transaction				= itr_share
		ls_where = "AirPermitStatus.company_id = " + String(li_company_id) &
			+ " AND AirPermitStatus.profit_ctr_id = " + String(li_profit_ctr_id)
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx]				= "All Air Permit Statuses For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
		lstr_pick.i_tabpage_type[li_idx]			= 1
		lstr_pick.s_dataobject[li_idx]			= "d_quick_select_air_permit_status"
		lstr_pick.s_where[li_idx]					= ls_where
		lstr_pick.s_retrieve_by[li_idx]			= ""
		lstr_pick.s_new_reference[li_idx]		= ""
	
		lstr_pick.i_tab_count						= li_idx
		
		OpenWithParm(w_popup_quick_select, lstr_pick)

		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetNull(ls_null)
			SetNull(ll_null)
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				
				// company and profit center check
				IF IsNull(lstr_pick.return2[li_idx]) or IsNull(lstr_pick.return3[li_idx]) THEN
					This.Object.air_permit_status_uid[row] = ll_null
					RETURN
				ELSE
					IF li_company_id <> lstr_pick.return2[li_idx] or li_profit_ctr_id <> lstr_pick.return3[li_idx] THEN
						This.Object.air_permit_status_uid[row] = ll_null
						MessageBox(gs_app_name + ":  Approval Change", "You selected an Air Permit Status for the wrong company.", Exclamation!)
						RETURN
					END IF
				END IF
				
				// set the guid
				IF  IsNull(lstr_pick.return1) THEN
					This.Object.air_permit_status_uid[row] = ll_null
				ELSE
					This.Object.air_permit_status_uid[row] = Long(lstr_pick.return1[li_idx])
				END IF
			NEXT
			
			ib_changed_approval = TRUE
		END IF
	
	// MPM - 11/7/2018 - Task 5205 - Consolidation Profile management
	CASE "b_consolidation_profile"
		ls_profile_status = idw_header.Object.curr_status_code[ll_row_header]
		IF ls_tracking_type = 'A' OR ls_tracking_type = 'APRC' THEN
//		IF ls_profile_status = 'A' OR ls_profile_status = 'P' THEN
			MessageBox(gs_app_name + ":  Consolidation Profile", "A consolidation profile cannot be assigned when the profile is in Approved status.", Exclamation!)
			RETURN
		END IF
		
         li_company_id = idw_approval.Object.company_id[ row ] 
		li_profit_ctr_id = idw_approval.Object.profit_ctr_id[ row ]
		ls_facility = string(li_company_id, '00') + '-' + String(li_profit_ctr_id, '00')
		li_last_tab = upperbound(itab_price.control)
		FOR li_idx = 2 TO li_last_tab
			ltabpage_profile_price = itab_price.control[li_idx]
			IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible THEN
					ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
					IF ls_facility = ls_facility_tabpage THEN
						ll_pricing_disposal_rowcount = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.RowCount()
						IF ll_pricing_disposal_rowcount > 0 THEN
							ll_find_bill_unit_code = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Find("NOT IsNull(bill_unit_code)", 1, ll_pricing_disposal_rowcount + 1)
							ll_find_bulk_billing_unit = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Find("IsNull(bulk_flag) OR bulk_flag in ('T', 'U')", 1, ll_pricing_disposal_rowcount + 1)
						END IF
						EXIT
					END IF
				END IF
			end if
		NEXT
		
		IF ll_find_bulk_billing_unit > 0 THEN
			MessageBox(gs_app_name + ":  Consolidation Profile", "Bulk units cannot be used with a consolidation profile.", Exclamation!)
			RETURN
		END IF
		
		IF ll_pricing_disposal_rowcount = 0 OR ll_find_bill_unit_code = 0 THEN
			MessageBox(gs_app_name + ":  Consolidation Profile", "Please assign the billing units before selecting a consolidation profile.", Exclamation!)
			RETURN
		END IF
		
		// Check for usage
		ls_approval_code = Trim(This.Object.approval_code[row])
		IF NOT f_Empty(ls_approval_code) AND Upper(Left(ls_approval_code,3)) <> 'TBD' THEN
			// Check usage
			lds = CREATE DATASTORE
			lds.DataObject = "d_profile_approval_usage"
			lds.SetTransObject(itr_share)
			ll_count = 0
			ll_rowcount = lds.Retrieve(gi_debug, li_company_id, li_profit_ctr_id, ls_approval_code, gs_connect_type)
			IF ll_rowcount > 0 THEN
				ll_count = lds.Object.usage_count[1]
			ELSE
				ll_count = 0
			END IF
			DESTROY lds;

			IF ll_count > 0 THEN
				MessageBox(gs_app_name + ":  Consolidation Profile", "Approval has been used in the system and cannot be changed.", Exclamation!)
				RETURN
			END IF
		END IF
		
		ls_where = "company_id = " + String(li_company_id) + " AND profit_ctr_id = " + String(li_profit_ctr_id) + " AND status = 'A'"

		// Setup quick select popup
		lstr_pick.s_window_title			= "Consolidation Profile Select"
		//lstr_pick.i_window_width			= 2000
		lstr_pick.b_multipick				= False
		lstr_pick.i_tab_count				= 1
		lstr_pick.i_return_column_count	= 11
		lstr_pick.to_transaction 			= gtr_share
		lstr_pick.s_tab_title[1]			= 'Consolidation Profile'
		lstr_pick.i_tabpage_type[1]		= 1
		lstr_pick.s_dataobject[1]			= "d_quick_select_consolidation_profile"
		lstr_pick.s_where[1]				= ls_where
		lstr_pick.s_retrieve_by[1]		= ""
		lstr_pick.s_new_reference[1]		= ""
			
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				ls_consolidation_profile_approval_code = String(lstr_pick.return3[li_idx])
				ll_consolidation_profile_id = Long(lstr_pick.return1[li_idx])
				ll_sub_profile_counter = Long(lstr_pick.return8[li_idx])
				ls_state = String(lstr_pick.return9[li_idx])
				ls_required_comment = String(lstr_pick.return10[li_idx])
				ldt_date_reviewed = DateTime(lstr_pick.return11[li_idx])
			NEXT
			IF IsNull(ll_consolidation_profile_id) THEN
				// User select a "blank" consolidation profile, so we need to reset some fields
				SetNull(ll_null)
				This.Object.consolidation_profile_id[row] = ll_null
				This.Object.consolidation_profile_approval_code[row] = ls_null
				ls_new_approval_code =  'TBD_' + String(ll_profile_id)
				This.Object.approval_code[row] = ls_new_approval_code
				This.Object.state_reviewed_flag[row] = 'F'
				SetNull(ldt_null)
				This.Object.date_state_reviewed[row] = ldt_null
				This.Object.catalyst_flag[row] = ls_null

				IF idw_comment.RowCount() > 0 THEN
					ls_hand_instruct = idw_comment.Object.hand_instruct[1]
					IF Len(Trim(ls_hand_instruct)) > 0 THEN
						MessageBox(gs_app_name + ":  Consolidation Profile", "Please review the Special Handling Instructions, as they may need to be updated after removing the consolidation profile from the approval.")
					END IF
				END IF
			ELSE
				// User selected a real consolidation profile, so we need to update some fields
				This.Object.consolidation_profile_id[row] = ll_consolidation_profile_id
				This.Object.consolidation_profile_approval_code[row] = ls_consolidation_profile_approval_code
				ls_new_approval_code = ls_consolidation_profile_approval_code + '-' + String(ll_sub_profile_counter)
				This.Object.approval_code[row] = ls_new_approval_code
				IF Len(ls_required_comment) > 0 THEN
					ll_row_comment = idw_comment.GetRow()
					IF ll_row_comment > 0 THEN
						ls_hand_instruct = idw_comment.Object.hand_instruct[ll_row_comment]
						IF Len(ls_hand_instruct) > 0 THEN
							ls_hand_instruct = ls_hand_instruct + "~r~n" + ls_state + ':  ' + ls_required_comment
						ELSE
							ls_hand_instruct = ls_state + ':  ' + ls_required_comment
						END IF
						IF Len(ls_hand_instruct) > 32766 THEN
							MessageBox(gs_app_name + ":  Consolidation Profile", "The new Special Handing Instructions for this profile is more than 32,766 characters.  The maximum number of characters in that field is 32,766 characters, so only the first 32,766 characters will be saved to that field.")
							idw_comment.Object.hand_instruct[ll_row_comment] = Left(ls_hand_instruct, 32766)
						ELSE
							idw_comment.Object.hand_instruct[ll_row_comment] = ls_hand_instruct
						END IF
					END IF
				END IF
				This.Object.state_reviewed_flag[row] = 'T'
				IF NOT IsNull(ldt_date_reviewed) THEN
					This.Object.date_state_reviewed[row] = ldt_date_reviewed
				END IF
				
				/*
				// ue_save contains the following update, if the consolidation_profile_id was changed
				
				UPDATE ConsolidationProfile
				SET sub_profile_counter = sub_profile_counter + 1,
					date_modified = :ldt_today,
					modified_by = :gs_user_id
				WHERE consolidation_profile_id = :ll_consolidation_profile_id
				USING itr_share;
				*/
				
			END IF

			IF not ib_retrieved_documents then
				wf_retrieve_documents( ll_row_header, ll_profile_id)
			END IF
			iudw_document.uf_set_approval_code("approval", ls_approval_code, ls_new_approval_code)
			ib_changed_approval = TRUE
		END IF
	CASE ELSE
		
END CHOOSE
end event

event itemchanged;boolean	lb_standard_customer_billing
integer	li_response, li_rc, li_ans, li_null, li_last_tab, li_idx
long		ll_row, ll_row_find, ll_treatment_id, ll_company_id, ll_profit_ctr_id, ll_count, ll_null, ll_find_bulk_billing_unit
long		ll_row_quoteheader, ll_row_header, ll_profile_id, ll_row_treatment, ll_rowcount, ll_find_bill_unit_code
long		ll_profit_cntr_id,ll_customer_id, ll_billing_project_id, ll_po_sequence_id, ll_a_counter, ll_pricing_disposal_rowcount
long		ll_wastetype_id, ll_disposal_service_id, ll_treatment_process_id, ll_waste_type, ll_waste_type_id,ll_waste_code_uid
string	ls_find, ls_approval_code, ls_treatment_desc, ls_access, ls_waste_code, ls_project_name, ls_labpack_template_flag
string	ls_release, ls_territory_code, ls_intervention_desc, ls_null, ls_facility, ls_bulk_flag, ls_profile_status, ls_routing_facility
string	ls_manifest_dot_sp_number, ls_dot_sp_permit_text, ls_state_profile_review_required_flag, ls_process_code
string ls_customerbilling_consolidate_cont_flag, ls_customer_consolidate_cont_flag, ls_facility_tabpage, ls_tracking_type, ls_profit_ctr_name
datastore lds
u_tabpage_profile_price	ltabpage_profile_price

// Check access to this company
ll_company_id = This.Object.company_id[row]
ls_access = wf_profile_access(ll_company_id)
IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
	MessageBox(gs_app_name + ":  Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
	RETURN 2	
END IF
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN RETURN 2
ll_customer_id = idw_header.object.customer_id[ll_row_header]
ls_labpack_template_flag = idw_header.object.labpack_template_flag[ll_row_header] //DevOps 28731
SetNull(ll_null)
SetNull(ls_null)
SetNull(li_null)

CHOOSE CASE Lower(dwo.name)
		
	CASE "approval_code"
		// Check for duplicate
		ll_company_id = This.Object.company_id[row]
		ll_profit_ctr_id = This.Object.profit_ctr_id[row]
		// Remove any end-blanks
		ls_approval_code = Trim(This.Object.approval_code[row])
		 il_row=row
		 is_name=dwo.name
		 postevent ('ue_item')
		//DevOps 17196 info_gde 08/28/2020; Profile Approval Code allows for a space at the beginning & end of the approval code
		This.Object.approval_code[row] = trim(ls_approval_code)
		ll_row_header = idw_header.GetRow()
		IF ll_row_header > 0 THEN
			ll_profile_id = idw_header.Object.profile_id[ll_row_header]
		END IF
		IF IsNull(ll_profile_id) THEN ll_profile_id = 0
		
		// MPM - 11/7/2018 - Task 5205 - Consolidation profile management
		ls_state_profile_review_required_flag = This.Object.state_profile_review_required_flag[row]
		IF ls_state_profile_review_required_flag = 'T' THEN
			ls_facility = string(ll_company_id, '00') + '-' + String(ll_profit_ctr_id, '00')
			li_last_tab = upperbound(itab_price.control)
			FOR li_idx = 2 TO li_last_tab
				ltabpage_profile_price = itab_price.control[li_idx]
				IF IsValid(ltabpage_profile_price) THEN
					IF ltabpage_profile_price.visible THEN
						ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
						IF ls_facility = ls_facility_tabpage THEN
							ll_pricing_disposal_rowcount = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.RowCount()
							IF ll_pricing_disposal_rowcount > 0 THEN
								ll_find_bill_unit_code = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Find("NOT IsNull(bill_unit_code)", 1, ll_pricing_disposal_rowcount + 1)
								ll_find_bulk_billing_unit = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Find("IsNull(bulk_flag) OR bulk_flag in ('T', 'U')", 1, ll_pricing_disposal_rowcount + 1)
							END IF
							EXIT
						END IF
					END IF
				end if
			NEXT		
			
			//DevOps:28852 - Users should be able to update the Approval Code on an Approval Facility, regardless of it bill units have been added for that facility on the Price tab.
//			IF ll_pricing_disposal_rowcount = 0 OR ll_find_bill_unit_code < 1 THEN
//				MessageBox(gs_app_name + ":  Approval Change", "Please assign the billing units before changing the approval code.", Exclamation!)
//				This.Object.approval_code[row] = ls_approval_code
//				RETURN 2
//			END IF
			
			ls_tracking_type = idw_header.Object.tracking_type[ll_row_header]
			IF (ls_tracking_type = 'A' OR ls_tracking_type = 'APRC') AND ll_find_bulk_billing_unit = 0 THEN
				MessageBox(gs_app_name + ":  Approval Change", "Approval cannot be changed when the profile is in Approved status.", Exclamation!)
				This.Object.approval_code[row] = ls_approval_code
				RETURN 2
			END IF
		END IF
		
		SELECT COUNT(*)
			INTO :ll_count
			FROM ProfileQuoteApproval
			WHERE company_id = :ll_company_id
			AND profit_ctr_id = :ll_profit_ctr_id
			AND profile_id <> :ll_profile_id
			AND approval_code = :data
		USING itr_share;
		IF ll_count > 0 THEN
			MessageBox(gs_app_name + ":  Approval", "Approval code already exists with a different Profile ID.", Exclamation!)
			SetNull(ls_approval_code)
			This.Object.approval_code[row] = ls_approval_code
			RETURN 2
		END IF
		
		//DevOps 28731 AGC 11/03/2021 if this isn't a labpack template then don't allow approval code to be the same as a labpack code
		//DevOps:29702 AM 11/24/2021 - Added TBD condition to avoid the nonlabpack template to proceed in old way.
		if isnull(ls_labpack_template_flag) or ls_labpack_template_flag <> 'T' then
			ls_process_code = data
			
			select count(1)
			into :ll_count
			from plt_ai.dbo.labpackprocesscode
			where process_code = :ls_process_code
			and process_code <> 'TBD'
			using gtr_share;
			
			if gtr_share.sqlcode <> 0 then
				messagebox('SQL Error','Error checking labpack process code')
			end if
			
			if ll_count > 0 then
				messagebox('Approval Code','Error: The approval code cannot be assigned to ' + ls_process_code + '.  This is reserved for a Lab Pack Template.')
				return 2
			end if
		end if
		
		// Check for usage
		IF NOT f_Empty(ls_approval_code) AND Upper(Left(ls_approval_code,3)) <> 'TBD' THEN
			// Check usage
			lds = CREATE DATASTORE
			lds.DataObject = "d_profile_approval_usage"
			lds.SetTransObject(itr_share)
			ll_count = 0
			ll_rowcount = lds.Retrieve(gi_debug, ll_company_id, ll_profit_ctr_id, ls_approval_code, gs_connect_type)
			IF ll_rowcount > 0 THEN
				ll_count = lds.Object.usage_count[1]
			ELSE
				ll_count = 0
			END IF
			DESTROY lds;

			IF ll_count > 0 THEN
				MessageBox(gs_app_name + ":  Approval Change", "Approval has been used in the system and cannot be changed.", Exclamation!)
				This.Object.approval_code[row] = ls_approval_code
				RETURN 2
			END IF
			IF not ib_retrieved_documents then
				wf_retrieve_documents( ll_row_header, ll_profile_id)
			END IF
			iudw_document.uf_set_approval_code("approval",ls_approval_code,string(data))
		END IF
		
	CASE "primary_facility_flag"
		FOR ll_row = 1 TO This.RowCount()
			This.Object.primary_facility_flag[ll_row] = "F"
		NEXT
		This.Object.primary_facility_flag[row] = data
		
	
	CASE "treatment_id"
		IF NOT IsNull(data) THEN
			ll_treatment_id = Integer(data)
			
			// Treatment must be valid for this company and profit center
			ll_company_id = This.Object.company_id[row]
			ll_profit_ctr_id = This.Object.profit_ctr_id[row]
			SELECT wastetype_id, disposal_service_id, treatment_process_id,treatment_desc 
			INTO :ll_wastetype_id, :ll_disposal_service_id, :ll_treatment_process_id, :ls_treatment_desc FROM Treatment
			WHERE company_id = :ll_company_id
			AND profit_ctr_id = :ll_profit_ctr_id
			AND treatment_id = :ll_treatment_id
			USING itr_share;
			IF itr_share.SQLcode < 0 THEN
				MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
				SetNull(ll_treatment_id)
				SetNull(ls_treatment_desc)
				This.Object.treatment_id[row] = ll_treatment_id
				This.Object.treatment_treatment_desc[row] = ls_treatment_desc
				This.object.treatment_process_id[row] = ll_null
				This.object.disposal_service_id[row] = ll_null
				RETURN 2
			ELSEIF itr_share.SQLcode = 100 THEN
				MessageBox(gs_app_name + ":  Treatment", "This treatment is not valid for " + String(ll_company_id,"00") + "-" + string(ll_profit_ctr_id,"00"), Exclamation!)
				SetNull(ll_treatment_id)
				SetNull(ls_treatment_desc)
				This.Object.treatment_id[row] = ll_treatment_id
				This.Object.treatment_treatment_desc[row] = ls_treatment_desc
				This.object.treatment_process_id[row] = ll_null
				This.object.disposal_service_id[row] = ll_null
				RETURN 2
			ELSE
				ll_waste_type_id =idw_detail.object.wastetype_id[idw_detail.GetRow()]
				if ll_waste_type_id <> ll_wastetype_id Then
					li_ans = MessageBox('Waste Type Changed','You have selected a treatment with a different waste type. Do you want to change the waste type for this profile and clear the treatments from all of the approvals?',Question!,YesNo!)
					If li_ans = 1 Then
						idw_detail.SetItem(idw_detail.GetRow(),'wastetype_id',ll_waste_type)
						for ll_a_counter = 1 to This.RowCount()
							If ll_a_counter = row then
								This.Object.treatment_process_id[row] = ll_treatment_process_id
								This.Object.disposal_service_id[row] = ll_disposal_service_id
								This.Object.treatment_treatment_desc[row] = ls_treatment_desc
								ib_changed_approval = TRUE
							Else
								This.Object.treatment_process_id[ll_a_counter] = ll_null
								This.Object.disposal_service_id[ll_a_counter] = ll_null	
								This.Object.treatment_id[ll_a_counter] = ll_null
								This.Object.treatment_treatment_desc[ll_a_counter] = ''
							End IF
						Next
					End If	
				Else	
					This.Object.treatment_process_id[row] = ll_treatment_process_id
					This.Object.disposal_service_id[row] = ll_disposal_service_id
					This.Object.treatment_treatment_desc[row] = ls_treatment_desc
					ib_changed_approval = TRUE	
				End If
			END IF
		Else
			This.object.treatment_process_id[row] = ll_null
			This.object.disposal_service_id[row] = ll_null
			This.Object.treatment_treatment_desc[row] = ls_treatment_desc
		End IF
		
	CASE "sr_type_code"
		ll_row_header = idw_header.GetRow()
		IF ll_row_header > 0 THEN
			ls_waste_code = idw_header.Object.waste_code[ll_row_header]
			ll_waste_code_uid = idw_header.Object.waste_code_uid[ll_row_header]
			li_rc = wf_set_sr_type_code(ls_waste_code, ll_waste_code_uid, row)
			IF li_rc = gi_failure THEN
				This.Object.sr_type_code[row] = This.Object.sr_type_code.Original[row]
				RETURN 2
			ELSE
				wf_price("SURCHARGEPRICE", row)
			END IF
		END IF
	
	CASE "disposal_service_id"
		IF data <> "1" THEN
			This.Object.disposal_service_other_desc[row] = ""
		END IF
		
	CASE "load_intervention_required"
		IF data = "F" THEN
			SetNull(ls_intervention_desc)
			This.Object.load_intervention_desc[row] = ls_intervention_desc
		END IF
			
	// SK 08/25/2015 
	CASE "print_dot_sp_flag"
		IF data = "T" THEN
			ls_manifest_dot_sp_number 	= idw_header.Object.manifest_dot_sp_number[ll_row_header]
			ls_dot_sp_permit_text 			= idw_header.Object.dot_sp_permit_text[ll_row_header]
			IF  ls_manifest_dot_sp_number > '' OR ls_dot_sp_permit_text > '' THEN
				// do nothing
			ELSE
				MessageBox(gs_app_name + ":  Shipping", "You have not entered a DOT SP number or a DOT SP text", Exclamation!)
			END IF
		END IF
		
	// SK 09/15/2015
	CASE "consolidate_containers_flag"
		IF data = "T" THEN
			// Check that the billing project & customer level flags allow consolidation for this approval
			SELECT consolidate_containers_flag
			INTO :ls_customer_consolidate_cont_flag
			FROM Customer
			WHERE customer_id = :ll_customer_id
			USING itr_share;
			
			IF itr_share.SQLcode < 0 THEN
				MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
				RETURN 2
			ELSEIF (Isnull(ls_customer_consolidate_cont_flag) OR Upper(ls_customer_consolidate_cont_flag) <> 'T') THEN
				MessageBox(gs_app_name + ":  Customer", "Consolidation of material is not allowed for this customer.", Exclamation!)
				RETURN 2
			END IF

			ll_billing_project_id = This.object.billing_project_id[row]
			
			SELECT consolidate_containers_flag
			INTO :ls_customerbilling_consolidate_cont_flag
			FROM CustomerBilling
			WHERE customer_id = :ll_customer_id
			AND billing_project_id = :ll_billing_project_id
			USING itr_share;
			
			IF itr_share.SQLcode < 0 THEN
				MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
				RETURN 2
			ELSEIF (Isnull(ls_customerbilling_consolidate_cont_flag) OR Upper(ls_customerbilling_consolidate_cont_flag) <> 'T' ) THEN
				IF Isnull(ll_billing_project_id) THEN 
					//PROJ-37226
					//MessageBox(gs_app_name + ":  CustomerBilling", "Billing project must be set for this approval before consolidation can be allowed. ", Exclamation!)
				ELSE
					MessageBox(gs_app_name + ":  CustomerBilling", "Consolidation of material is not allowed for the billing project: " + String(ll_billing_project_id), Exclamation!)
			     RETURN 2	
			    END IF	
			END IF
		END IF
		
	// MPM - 10/3/2018 - Task 5169 - Changes for thermal blending ratio
	CASE "thermal_blending_required_flag"
		IF data = "F" THEN
			IF NOT IsNull(This.Object.thermal_blending_ratio[row]) THEN
				This.Object.thermal_blending_ratio[row] = li_null
			END IF
		END IF
		
	CASE "thermal_blending_ratio"
		IF data = "0" THEN
			MessageBox(gs_app_name + ":  Approval", "Thermal blending ratio must be greater than zero.", Exclamation!)
			RETURN 2
		END IF
	//COR2 JXM 11531 08/01/2019 Check Dragon Reviewed Flag user access	
	CASE "dragon_reviewed_flag"
        if ls_access = "S" OR ls_access = "A" then
			// continue
			this.object.dragon_reviewed_flag.protect = 0 //unprotect
		else
			this.object.dragon_reviewed_flag.protect = 1 //protect
			//MessageBox(gs_app_name + ":  Dragon Reviewed", "You do not have access to change the Dragon Reviewed flag.", Exclamation!)
			//return 2
		end if	
	CASE ELSE
END CHOOSE

ib_changed_approval = TRUE

end event

event rowfocuschanging;// Prevent going to new row
IF This.Rowcount() > 0 AND currentrow > 0 THEN
	IF newrow > This.RowCount() THEN
		RETURN 1
	END IF
END IF


end event

event rowfocuschanged;call super::rowfocuschanged;wf_filter_cwt_category(currentrow)
wf_filter_consolidation_group(currentrow)		// JCG 9/29/17 Consolodation Group project
wf_filter_default_disposal_location(currentrow)	// JCG 10/6/17 Consolodation Group project
//wf_filter_air_permit_code(currentrow)	 //50074

end event

event ue_report;call super::ue_report;long				ll_curr_row, ll_consolidation_profile_id
str_pass			lstr_pass
w_popup_info  lw_info

ll_curr_row = This.GetRow()

Choose Case as_col_name

	CASE "consolidation_profile_approval_code"
		if ai_indicate  < 3 Then
			return 1
		Else
			ll_consolidation_profile_id = This.Object.consolidation_profile_id[ll_curr_row]
			IF (Not IsNull(ll_consolidation_profile_id)) AND ll_consolidation_profile_id > 0 THEN
				lstr_pass.s_dataobject = "d_consolidation_profile_print"
				lstr_pass.s_action = "consolidation profile"
				lstr_pass.d[1] = ll_consolidation_profile_id
				OpenWithParm(lw_info, lstr_pass)
			END IF
		End If

End Choose

Return 0
end event

event ue_navigate;call super::ue_navigate;long				ll_row, ll_id
str_navigate		lstr_nav
window			lw_window
string				ls_status

ll_row = getRow()

Choose Case as_col_name
		
	Case 'consolidation_profile_approval_code'
		if ai_indicate  < 3 Then
			return 1
		Else
			lstr_nav.s_windowname = 'w_consolidation_profile'
//			lstr_nav.s_profit_ctr = String(ii_profit_ctr_id)
//			lstr_nav.s_profit_ctr = String(This.Object.profit_ctr_id[ll_row])
			lstr_nav.s_column_name[1] = 'consolidation_profile_approval_code_from'
			lstr_nav.s_column_value[1] = String(this.object.consolidation_profile_approval_code[ll_row])
			lstr_nav.s_column_name[2] = 'status'
			ll_id = This.Object.consolidation_profile_id[ll_row]

			select status
			into :ls_status
			from ConsolidationProfile
			where consolidation_profile_id = :ll_id
			using itr_share;
			
			commit using itr_share;

			lstr_nav.s_column_value[2] = ls_status
			if Not IsNull(lstr_nav.s_column_value[1]) then
				OpenSheetWithParm(lw_window, lstr_nav, 'w_consolidation_profile', w_frame, gi_win_menu_loc, Layered!)
			End If	
		End If

End Choose

return 0

end event

event ue_lookup;call super::ue_lookup;str_pick	lstr_pick
integer	li_idx, li_company_id, li_profit_ctr_id
string		ls_access, ls_where, ls_where_all, ls_wastetype
long		ll_price_code_uid, ll_waste_type_id, ll_curr_row

Choose Case as_col_name
	Case 'price_code_uid'
		if ai_indicate  < 3 Then
			return 1
		Else
			
			ll_curr_row = This.GetRow()
			
			// Check access to this company
			li_company_id = This.Object.company_id[ll_curr_row]
			ls_access = wf_profile_access(li_company_id)
			IF ls_access = 'N' OR ls_access = 'V' OR ls_access = 'P' OR ls_access = 'B' THEN 
				MessageBox(gs_app_name+": Approval Change", "You do not have access to change Approval information for this company.", Exclamation!)
				RETURN 0
			END IF
			li_profit_ctr_id = This.Object.profit_ctr_id[ll_curr_row]
			ll_waste_type_id = idw_detail.GetItemNumber(idw_detail.GetRow(),'wastetype_id')
			
			IF IsNull(ll_waste_type_id) OR ll_waste_type_id = 0 THEN
				MessageBox(gs_app_name+": Approval Change", "You must specify a waste type before specifying a price code.", Exclamation!)
				RETURN 0
			END IF
		
			ls_where_all = "f.company_id = " + String(li_company_id) &
					+ " AND f.profit_ctr_id = " + String(li_profit_ctr_id) &
					+ " AND f.status = 'A'"
					
			If IsNull(ll_waste_type_id) Then
				ls_where = "f.company_id = " + String(li_company_id) &
					+ " AND f.profit_ctr_id = " + String(li_profit_ctr_id) &
					+ " AND f.status = 'A'"
			Else
				ls_where = "f.company_id = " + String(li_company_id) &
					+ " AND f.profit_ctr_id = " + String(li_profit_ctr_id) &
					+ " AND f.status = 'A'  and wt.wastetype_id = " + String(ll_waste_type_id)
					
				Select description into :ls_wastetype from wastetype where wastetype_id = :ll_waste_type_id using itr_share;  
				
				IF itr_share.SQLcode < 0 THEN
					MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
					RETURN 0
				END IF
				
			End If
			
			// Setup quick select popup
			lstr_pick.s_window_title				= "Price Code"
			lstr_pick.i_window_width				= 4000
			lstr_pick.i_dataobject_width			= 4200
			lstr_pick.b_multipick					= FALSE
			lstr_pick.i_tab_count 					= 2
			lstr_pick.i_return_column_count	= 5
			lstr_pick.b_hide_new					= TRUE
			lstr_pick.to_transaction				= itr_share
			
			lstr_pick.s_tab_title[1]= "Price Codes For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00")
			If Not IsNull(ll_waste_type_id) Then
				 lstr_pick.s_tab_title[1] = lstr_pick.s_tab_title[1] + ' with a Waste Type of ' + ls_wastetype
			End If
			lstr_pick.i_tabpage_type[1]	= 1
			lstr_pick.s_dataobject[1]		= "d_quick_select_price_code"
			lstr_pick.s_where[1]				= ls_where
			lstr_pick.s_retrieve_by[1]		= ""
			lstr_pick.s_new_reference[1]	= ""
			
			lstr_pick.s_tab_title[2]		= "All Price Codes For " + String(li_company_id, "00") + "-" + String(li_profit_ctr_id, "00") 
			lstr_pick.i_tabpage_type[2]	= 1
			lstr_pick.s_dataobject[2]		= "d_quick_select_price_code"
			lstr_pick.s_where[2]				= ls_where_all
			lstr_pick.s_retrieve_by[2]		= ""
			lstr_pick.s_new_reference[2]	= ""
				
			OpenWithParm(w_popup_quick_select, lstr_pick)

			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				FOR li_idx = 1 TO lstr_pick.i_return_record_count
					ll_price_code_uid = Long(lstr_pick.return5[1])
					This.Object.price_code_uid[ll_curr_row] = ll_price_code_uid
					ib_changed_approval = TRUE
				NEXT
			END IF
		End IF
End Choose

return 0

end event

event doubleclicked;// MPM - 9/30/2022 - DevOps 42691
// OVERRIDE ANCESTOR
CHOOSE CASE dwo.Name
	CASE "price_code_uid"
		This.event ue_lookup (dwo.Name, 3, dwo.Name)
	CASE ELSE
		CALL SUPER::doubleclicked
END CHOOSE

end event

type dw_detail from anc_dw within tabpage_detail
event ue_mouse_scroll pbm_vbxevent47
event ue_noscroll pbm_vscroll
integer width = 4411
integer height = 2024
integer taborder = 30
string dataobject = "d_profile_detail_dragon"
end type

event ue_mouse_scroll;return 1
end event

event ue_noscroll;// MPM - 4/4/2023 - DevOps 63649 - Prevent ability to scroll with mouse wheel
RETURN 1
end event

event getfocus;long		ll_row

ll_row = This.GetRow()
IF ll_row <> il_curr_row THEN This.ScrollToRow(il_curr_row)


IF ll_row > 0 THEN
	This.SetColumn("ap_start_date")
END IF
end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
END IF
end event

event itemchanged;
boolean	lb_show_msg, lb_authorized = false
datetime	ldt_today, ldt_null, ldt_expired_not_received
integer	li_rc, li_rc_waste, li_response, li_sequence_id, li_hdr_row,i
long		ll_row_waste, ll_i, ll_profile_id, ll_row_approval, ll_row_find, ll_waste_code_uid,ll_appr_treatment,ll_treatment_id,ll_null
long		ll_count, ll_process_code_id
string	ls_waste_code, ls_waste_code_current, ls_search, ls_primary, ls_haz_flag, ls_null, ls_approval
string	ls_find, ls_waste_code_primary, ls_tracking_type, ls_process_code, ls_labpack_template_flag, ls_lab_pack_return_string

SetNull(ls_null)
SetNull(ldt_null)
SetNull(ll_null)
ll_profile_id = This.Object.profile_id[row]
li_hdr_row = idw_header.getrow()

CHOOSE CASE Lower(dwo.name)
	CASE "one_time_only"
		IF NOT IsNull(data) THEN
			IF data = 'T' THEN
				This.Object.reapproval_allowed[row] = 'F'
				// SK 10/16/2012 Sync the Shipping Frequency to One-time
				IF li_hdr_row > 0 THEN
					idw_header.object.shipping_frequency[li_hdr_row] = '1'
					wf_wcr_profile_map_sync (idw_header, 'shipping_frequency', li_hdr_row, '1')
				END IF
			END IF
		END IF
		
	CASE "reapproval_allowed"
		IF NOT IsNull(data) THEN
			IF data = 'T' THEN
				This.Object.one_time_only[row] = 'F'
				// SK 10/16/2012 Sync the Shipping Frequency if one-time
				IF li_hdr_row > 0 THEN
					IF idw_header.object.shipping_frequency[li_hdr_row] = '1' THEN
						idw_header.object.shipping_frequency[li_hdr_row] = ls_null
						wf_wcr_profile_map_sync (idw_header, 'shipping_frequency', li_hdr_row, ls_null)
					END IF
				END IF
			END IF
		END IF

// SK 08/20/2013 The field "waste_code" is hidden from detail		
//	CASE "waste_code"
//		ls_waste_code_current = This.Object.waste_code[row]
//		
//		// Can user change waste code?
//		li_rc = wf_access_waste_const()
//		IF li_rc = gi_failure THEN
//			MessageBox(gs_app_name+": Waste Code", "You do not have access to change waste codes.", Exclamation!)
//			This.Object.waste_code[row] = ls_waste_code_current
//			RETURN 2
//		END IF	
//		
//		IF IsNull(data) THEN
//			ls_waste_code = data
//			SetNull(ll_waste_code_uid)
//			// This will unconfirm pricing
//			FOR ll_row_approval = 1 to idw_approval.RowCount()
//				li_rc = wf_set_sr_type_code(ls_waste_code, ll_row_approval)
//				IF li_rc = gi_failure THEN
//					This.Object.waste_code[row] = ls_waste_code_current
//					RETURN 2
//				END IF
//			NEXT
//		ELSE
//			// SK 04/18/2013 Assign primary waste_code_UID
//			SELECT waste_code, waste_code_uid
//				INTO :ls_waste_code, :ll_waste_code_uid
//				FROM WasteCode
//				WHERE Wastecode.waste_code= :data
//			USING itr_share;
//		
//			IF itr_share.SQLCode < 0 THEN
//				MessageBox ("SQL Error", itr_share.SQLErrText, Exclamation!)
//				ls_waste_code = ls_waste_code_current
//				RETURN 2
//			ELSEIF itr_share.SQLCode = 100 THEN
//				MessageBox(gs_app_name + ":  Waste Code", "The waste code '" + data + "' is not valid.", Exclamation!)
//				ls_waste_code = ls_waste_code_current
//				RETURN 2
//			ELSE
//				// Check to see if this change will unconfirm pricing
//				FOR ll_row_approval = 1 to idw_approval.RowCount()
//					li_rc = wf_set_sr_type_code(ls_waste_code, ll_row_approval)
//					IF li_rc = gi_failure THEN
//						This.Object.waste_code[row] = ls_waste_code_current
//						RETURN 2
//					END IF
//				NEXT
//
//				ls_search = "waste_code='" + ls_waste_code + "'"
//				ll_row_waste = idw_waste.Find(ls_search, 1, idw_waste.RowCount() + 1)
//				IF ll_row_waste > 0 THEN
//					// This waste code is already specified.  Is it in the top 6?
//					li_sequence_id = idw_waste.Object.sequence_id[ll_row_waste]
//				ELSE
//					// Does not exist.  Create a new waste record
//					ll_row_waste = idw_waste.InsertRow(0)
//					idw_waste.Object.profile_id[ll_row_waste] = ll_profile_id
//					idw_waste.Object.waste_code[ll_row_waste] = ls_waste_code
//					// SK 04/18/2013 waste code UID
//					idw_waste.Object.waste_code_UID[ll_row_waste] = ll_waste_code_UID
//					SetNull(li_sequence_id)
////					idw_waste.Object.primary_flag[ll_row_waste] = "F"
////					idw_waste.Object.include[ll_row_waste] = 0
//				END IF
//				// We know this is the new primary waste code
//				// Swap positions with old primary
//				ls_find = "sequence_id = 1 AND primary_flag = 'T'"
//				ll_row_find = idw_waste.Find(ls_find, 1, idw_waste.RowCount() + 1)
//				IF ll_row_find > 0 THEN
//					idw_waste.Object.sequence_id[ll_row_find] = li_sequence_id
//					idw_waste.Object.primary_flag[ll_row_find] = 'F'
//					IF IsNull(li_sequence_id) THEN
//						idw_waste.Object.include[ll_row_find] = 0
//					ELSE
//						idw_waste.Object.include[ll_row_find] = 1
//					END IF
//				END IF
//				// Show this as the new primary waste code
//				idw_waste.Object.sequence_id[ll_row_waste] = 1
//				idw_waste.Object.primary_flag[ll_row_waste] = 'T'
//				idw_waste.Object.include[ll_row_waste] = 1
//				ib_changed_waste_code = TRUE
//			END IF
//		END IF
//		
//		// Sync waste codes
//		IF idw_waste.RowCount() = 1 THEN
//			lb_show_msg = FALSE
//		ELSE
//			lb_show_msg = TRUE
//		END IF
//		Post	wf_sync_waste_code(ll_waste_code_uid, ls_waste_code, lb_show_msg)
		
	CASE "ots_flag"
		IF NOT IsNull(data) THEN
			IF data = "F" THEN
				wf_update_receipt_for_ots(ll_profile_id, 1)
				This.Object.b_update_receipt_for_ots.Visible = 0
			END IF
		END IF
		
	// SK 08142012 Profile_available_on_web
	CASE "pending_profile_available_web"
		IF Upper(data) = 'T' THEN
			this.object.pending_profile_available_date[row] = DateTime(Today(), Now())
		ELSE
			this.object.pending_profile_available_date[row] = ldt_null
		END IF
//	CASE "annual_recertification_date"
//		ls_tracking_type = idw_header.object.tracking_type[li_hdr_row]
//			IF (is_access = "C" and ( ls_tracking_type = "APRC" OR ls_tracking_type = 'A' ) ) OR &
//				is_access = "A" OR is_access = "S" THEN
//				lb_authorized = TRUE
//			ELSEIF ls_tracking_type = "APRC"  THEN
//				IF is_access = "A" OR is_access = "S" THEN
//					lb_authorized = TRUE
//				END IF	
//			 END IF
//			IF lb_authorized = FALSE THEN  
//				This.Object.annual_recertification_date[row] = ldt_null
//			     MessageBox(gs_app_name + ":  Profile", "You are not authorized to change Annual Recertification.", Exclamation!)
//				 Return 2
//			END IF
//	CASE "epa_consent_date"
//		ls_tracking_type = idw_header.object.tracking_type[li_hdr_row]
//			IF (is_access = "C" and ( ls_tracking_type = "APRC" OR ls_tracking_type = 'A' ) ) OR &
//				is_access = "A" OR is_access = "S" THEN
//				lb_authorized = TRUE
//			ELSEIF ls_tracking_type = "APRC"  THEN
//				IF is_access = "A" OR is_access = "S" THEN
//					lb_authorized = TRUE
//				END IF	
//			 END IF
//			IF lb_authorized = FALSE THEN  
//				This.Object.epa_consent_date[row] = ldt_null
//			     MessageBox(gs_app_name + ":  Profile", "You are not authorized to change EPA Consent .", Exclamation!)
//				 Return 2
//			END IF

	// MPM - 4/29/2021 - DevOps 19944 
	CASE "ap_expiration_date"
		IF NOT IsNull(idw_header.GetItemDateTime(li_hdr_row, 'expired_not_received_date', Primary!, TRUE)) THEN
			MessageBox(gs_app_name+": Profile Expiration Date", "This profile is flagged as Inactive. Make sure this record is sent to the Approvals team for review prior to Renewal.", Exclamation!)
			ldt_expired_not_received = DateTime(data)
			IF ldt_expired_not_received > DateTime(Today()) THEN
				idw_header.Object.expired_not_received_date[li_hdr_row] = ldt_null
			END IF
		END IF
		//DevOp:20991 labpack process code should contain treatment id 
	CASE "process_code_uid"
	//DevOps 29641 AGC 11/13/2021 added validation for duplicate lab pack process
		ls_labpack_template_flag =  idw_header.Object.labpack_template_flag[li_hdr_row]
		if ls_labpack_template_flag = 'T' then
			if not isnull(data) and len(data) > 0 then
				if isnumber(data) then
					ll_process_code_id = long(data)
					select process_code
					into :ls_process_code
					from LabPackProcessCode
					where process_code_uid = :ll_process_code_id
					using gtr_share;
				
					if gtr_share.sqlcode <> 0 then
						messagebox('Error','Unable to retrieve lab pack process code')
					end if
				
					ll_profile_id = this.object.profile_id[row]
					if isnull(ll_profile_id) then ll_profile_id = 0
				
					select count(1)
					into :ll_count
					from Profile
					where profile_id <> :ll_profile_id
					and process_code_uid = :ll_process_code_id
					and labpack_template_flag = 'T'
					using gtr_share;
				
					if gtr_share.sqlcode <> 0 then
						messagebox('Error','Unable to check for duplicate lab pack process code')
					else
						if ll_count > 0 then
							SELECT STUFF(REPLACE((SELECT DISTINCT  ' ,' + LTRIM(RTRIM(u3.profile_id)) 
							INTO :ls_lab_pack_return_string
							FROM Profile u3 
							WHERE process_code_uid = :ll_process_code_id
							AND profile_id <> :ll_profile_id
							FOR XML PATH('')),' ,',', '), 1, 2, '')
							Using gtr_share;
		
							IF gtr_share.SQLCode < 0 then
								MessageBox ("SQL Error", gtr_share.SQLErrText, exclamation!)
							END IF
							
							messagebox('Duplicate Lab Pack Process','Only one Profile Template may exist for each Lab Pack Process - ' + ls_process_code + ' has already been used on another profile ' + ls_lab_pack_return_string)
							return 1
						end if
					end if
				end if
			end if
		end if
		
		FOR i = 1 TO dw_approval.Rowcount()
			ll_appr_treatment = idw_approval.Object.treatment_id[i]		
				IF ll_appr_treatment > 0 THEN 
					 DECLARE process_code CURSOR   FOR
					 SELECT  treatment_id
						FROM treatmentheader 
						WHERE process_code_uid = :data
						AND treatment_id = :ll_appr_treatment
							  USING gtr_share;
										 
							OPEN process_code;
							DO WHILE gtr_share.SQLCode = 0
									  FETCH process_code INTO :ll_treatment_id;
								IF ll_treatment_id =  0 OR IsNull( ll_treatment_id) THEN 
									MessageBox(gs_app_name+": Profile Process Code", "The treatments have been removed from the approvals as the process code selected does not work with the treatment that was previously assigned. Please review.", Exclamation!)
									 idw_approval.Object.treatment_id[i] = ll_null
								END IF
							
							   IF itr_share.SQLCode = -1 THEN
									MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading LabPack Process Code" + &
												"~nPress OK to Continue.", StopSign!)
											CLOSE process_code;
							  END IF	
							  
							 FETCH process_code INTO :ll_treatment_id;
									  
							LOOP
							CLOSE process_code ;
				  END IF
		NEXT 
		
END CHOOSE
end event

event buttonclicked;
integer	li_idx, li_ans, li_a_cntr, li_response, li_rc, li_pos, li_logfile
long		ll_customer_id, ll_generator_id, ll_choice, ll_row, ll_rowcount, ll_disposition_id, ll_display_status_uid,ll_process_code_uid
long		ll_orig_wastetype, ll_new_wastetype, ll_null, ll_profile_id, ll_renewal_count, ll_wcr_count, ll_resubmited_revision_id
long		ll_source_form_id, ll_source_revision_id, ll_contact_id, ll_source_form_id_old, ll_source_revision_id_old, ll_comments
string	ls_where, ls_where_customer, ls_where_generator, ls_contact_name, ls_tab_text
string	ls_disposition_desc, ls_desc, ls_code, ls_text, ls_category, ls_submitted_by, ls_send_string
string ls_web_user_email, ls_sign_email, ls_temp, ls_logfile, ls_source_form_revision, ls_source_form_id, ls_source_revision_id, ls_copy_source
datetime ldt_today
datastore	lds_tabs
str_pick	lstr_pick
str_pass lstr
str_messagesender_email lstr_m
String ls_tab_name //Subhrajyoti - 01/02/2024 - Devops# 43102 - Profile Tracking - Improve the Waste Type select box
Long ll_tab_to_select //Subhrajyoti - 01/02/2024 - Devops# 43102 - Profile Tracking - Improve the Waste Type select box
//str_pass lstr_pass
//
//SetNull(ll_null)
//
IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN
//
ldt_today = datetime(today())
CHOOSE CASE Lower(dwo.name)	
//		
	CASE "b_contact"
		ll_customer_id = This.Object.customer_id[row]
		ll_generator_id = This.Object.generator_id[row]
		IF IsNull(ll_customer_id) THEN
			ls_where_customer = ""
		ELSE
			ls_where_customer = "ContactXRef.customer_id = " + String(ll_customer_id) &
				+ " AND ContactXRef.status = 'A'"
		END IF
		IF IsNull(ll_generator_id) THEN
			ls_where_generator = ""
		ELSE
			ls_where_generator = "ContactXRef.generator_id = " + String(ll_generator_id) &
				+ " AND ContactXRef.status = 'A'"
		END IF
		
		lstr_pick.s_window_title			= "Select Profile Contact"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= FALSE

		li_idx++
		lstr_pick.s_tab_title[li_idx]		= "Customer Contacts"
		lstr_pick.i_tabpage_type[li_idx]	= 1
		lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_customer"
		lstr_pick.s_where[li_idx]			= ls_where_customer
		lstr_pick.s_retrieve_by[li_idx]	= ""
		lstr_pick.s_new_reference[li_idx]= ""
		lstr_pick.i_return_column_count	= 6

		li_idx++
		lstr_pick.s_tab_title[li_idx]		= "Generator Contacts"
		lstr_pick.i_tabpage_type[li_idx]	= 1
		lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_generator"
		lstr_pick.s_where[li_idx]			= ls_where_generator
		lstr_pick.s_retrieve_by[li_idx]	= ""
		lstr_pick.s_new_reference[li_idx]= ""
		lstr_pick.i_return_column_count	= 6
		 		
		lstr_pick.i_tab_count				= li_idx

		OpenWithParm(w_popup_quick_select, lstr_pick)
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				This.Object.contact_id[row] = Long(lstr_pick.return1[li_idx])
				ls_contact_name = string(lstr_pick.return2[li_idx])
				This.Object.contact_name[row] = ls_contact_name
//	SK 09/10/2012 Contact info is stored seperate into ProfileContact, and is not linked with the above!
//				// rb 06/12/2012
//				This.Object.tech_contact_name[row]		= ls_contact_name
//				This.Object.tech_contact_phone[row]		= ""
//				This.Object.tech_contact_fax[row]		= ""
//				This.Object.tech_cont_email[row]			= string(lstr_pick.return6[li_idx])
//				this.Object.tech_contact_mobile[row]	= ""
			NEXT
		END IF
		
	CASE "b_spoc"
		lstr_pick.s_window_title = "Select EQ Contact"
		lstr_pick.i_window_width = 0
		lstr_pick.b_multipick = FALSE
		lstr_pick.i_tab_count = 1
		lstr_pick.i_return_column_count = 7
		lstr_pick.to_transaction = gtr_share
		// added company_id SK 07/08/2014
		// EQAI-48865  USE Contact List in Profile Screen -Detail Tab --- AM - Commented this code ---//Users.department_id = 2 AND
		ls_where = " Access.company_id = " + string(gi_company_id) // department_id 2 = Central Customer Service
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx] = "Central Customer Service"
		lstr_pick.i_tabpage_type[li_idx] = 1
		lstr_pick.s_dataobject[li_idx] = "d_quick_select_users"
		lstr_pick.s_where[li_idx] = ls_where
		lstr_pick.s_new_reference[li_idx] = ""
		
		OpenWithParm(w_popup_quick_select, lstr_pick)
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				This.Object.EQ_contact[row] = String(lstr_pick.return2[li_idx])
				ls_contact_name = String(lstr_pick.return4[li_idx])
				This.Object.user_name[row] = ls_contact_name
			NEXT
		END IF
		ib_changed_profile = TRUE
		
	CASE "b_wastetype"
		lds_tabs = CREATE DATASTORE
		lds_tabs.DataObject = "dddw_wastetype"
		lds_tabs.SetTransObject(itr_share)
		ll_rowcount = lds_tabs.Retrieve()
		
		// Get the categories from the WasteType table
		ls_tab_text = ""
		
		//Subhrajyoti - Begin - 01/02/2024 - Devops# 43102 - Profile Tracking - Improve the Waste Type select box
		ll_orig_wastetype = This.Object.wastetype_id[row]
		FOR ll_row = 1 to ll_rowcount
			IF ll_orig_wastetype = lds_tabs.Object.wastetype_id[ll_row] THEN
				ls_tab_name = lds_tabs.Object.category[ll_row]
				EXIT
			END IF
		NEXT
		//Subhrajyoti - End - 01/02/2024 - Devops# 43102 - Profile Tracking - Improve the Waste Type select box
		
		FOR ll_row = 1 TO ll_rowcount
			IF Lower(ls_tab_text) = Lower(lds_tabs.Object.category[ll_row]) THEN
				CONTINUE
			ELSE
				ls_tab_text = lds_tabs.Object.category[ll_row]
				li_idx++
				lstr_pick.s_tab_title[li_idx]	= ls_tab_text
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_retrieve_by[li_idx] = ""
				lstr_pick.s_new_reference[li_idx] = ""
				lstr_pick.s_dataobject[li_idx] = "d_quick_select_wastetype"
				lstr_pick.s_where[li_idx] = "category = '" + ls_tab_text + "'"
				
				//Subhrajyoti - 01/02/2024 - Devops# 43102 - Profile Tracking - Improve the Waste Type select box -- Added single line IF condition.
				IF UPPER(TRIM(ls_tab_text)) = UPPER(TRIM(ls_tab_name)) THEN ll_tab_to_select = li_idx
			END IF
		NEXT
		
		lstr_pick.i_tab_count = li_idx
		DESTROY lds_tabs;

		lstr_pick.s_window_title = "Select Waste Type"
		//DevOps 15335 info_gde 06/02/2020; Profile Waste Type pop up too narrow
		lstr_pick.i_window_width = 0 
		//lstr_pick.i_window_width = 0
		lstr_pick.b_multiline= TRUE//DevOps 15335 info_gde 06/02/2020; Profile Waste Type pop up too narrow
		lstr_pick.b_multipick = FALSE 
		lstr_pick.i_return_column_count = 4	
		//Subhrajyoti - 01/02/2024 - Devops# 43102 - Profile Tracking - Improve the Waste Type select box 
		lstr_pick.l[1] = ll_tab_to_select 
		
		OpenWithParm(w_popup_quick_select, lstr_pick)
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
		  FOR li_idx = 1 TO lstr_pick.i_return_record_count
			ll_orig_wastetype = This.Object.wastetype_id[row]
			ll_new_wastetype = lstr_pick.return1[li_idx]
			ls_category = String(lstr_pick.return2[li_idx])
			ls_desc = String(lstr_pick.return3[li_idx])
			ls_code = String(lstr_pick.return4[li_idx])
			
			If Not IsNull(ll_orig_wastetype) and ll_orig_wastetype <> ll_new_wastetype  and idw_approval.RowCount() > 0 Then
				li_ans = MessageBox('Change of Waste Type',' Changing the waste type on the profile will remove the treatments and associated fields on each approval line.  Do you wish to continue?',Question!,YesNo!)
				If li_ans = 1 then
					This.Object.wastetype_id[row] = ll_new_wastetype
					ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
					This.object.t_waste_text.text = ls_text
					For li_a_cntr = 1 to idw_approval.Rowcount()
						idw_approval.Object.treatment_id[li_a_cntr] = ll_null
						idw_approval.Object.treatment_treatment_desc[li_a_cntr] = ''
						idw_approval.object.treatment_process_id[li_a_cntr] = ll_null
						idw_approval.object.disposal_service_id[li_a_cntr] = ll_null
					Next
					ib_changed_profile = TRUE
				End If
			Else
				If idw_approval.RowCount() > 0 Then
					li_ans = MessageBox('Change of Waste Type',' Changing the waste type on the profile will remove the treatments and associated fields on each approval line.  Do you wish to continue?',Question!,YesNo!)
					If li_ans = 1 then
						This.Object.wastetype_id[row] = ll_new_wastetype
						ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
						This.object.t_waste_text.text = ls_text
						For li_a_cntr = 1 to idw_approval.Rowcount()
							idw_approval.Object.treatment_id[li_a_cntr] = ll_null
							idw_approval.Object.treatment_treatment_desc[li_a_cntr] = ''
							idw_approval.object.treatment_process_id[li_a_cntr] = ll_null
							idw_approval.object.disposal_service_id[li_a_cntr] = ll_null
						Next
						ib_changed_profile = TRUE
					End If				
				Else
					This.Object.wastetype_id[row] = ll_new_wastetype
					ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
					This.object.t_waste_text.text = ls_text
					ib_changed_profile = TRUE
				End IF
			End If
		  NEXT
		END IF
	// rb 
	CASE "b_disposition"
		ll_customer_id = This.Object.customer_id[row]
		IF IsNull( ll_customer_id ) THEN
			ls_where_customer = ""
		Else
			ls_where_customer = " OR type_code='C' AND customer_id=" + String(ll_customer_id)
		END IF

		lstr_pick.s_window_title			= "Disposition Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= FALSE
		lstr_pick.i_tab_count				= 1
		lstr_pick.s_button_text[1]			= "Select"
		lstr_pick.i_return_column_count	= 3
		lstr_pick.to_transaction			= itr_share
		
		FOR li_idx = 1 to 1
			CHOOSE CASE li_idx
				CASE 1
					lstr_pick.s_tab_title[li_idx]	= 'All Dispositions'
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_disposition"
					lstr_pick.s_where[li_idx] = "type_code='S'" + ls_where_customer
			END CHOOSE
			lstr_pick.i_tabpage_type[li_idx]	= 1
			lstr_pick.s_new_reference[li_idx] = ""
		NEXT
		
		lstr_pick.s_initial_modify = "disposition_id.Height.AutoSize='Yes' disposition_desc.Height.AutoSize='Yes'"

		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
			
			if lstr_pick.i_return_record_count = 1 then
				// Get return values
				ll_disposition_id = lstr_pick.return1[1]
				ls_disposition_desc = lstr_pick.return2[1]
				ls_code = lstr_pick.return3[1]
				this.Object.disposition_id[row] = ll_disposition_id
				this.Object.disposition_desc[row] = ls_disposition_desc
				this.Object.type_code[row] = ls_code
			end if
		END IF

	
//	CASE "b_source_code"
//		// Setup quick select popup
//		lstr_pick.s_window_title			= "EPA Source Code Select"
//		lstr_pick.i_window_width			= 0
//		lstr_pick.b_multipick				= FALSE
//		lstr_pick.i_tab_count				= 1
//		lstr_pick.i_return_column_count	= 1
//		
//		lstr_pick.s_tab_title[1]			= "Source Codes"
//		lstr_pick.i_tabpage_type[1]		= 1
//		lstr_pick.s_dataobject[1]			= "d_quick_select_source_code"
//		lstr_pick.s_where[1]				= ""
//		lstr_pick.s_retrieve_by[1]		= ""
//		lstr_pick.s_new_reference[1]		= ""
//		
//		OpenWithParm(w_popup_quick_select, lstr_pick)
//		lstr_pick = Message.PowerObjectParm
//		IF IsValid(lstr_pick) THEN
//			IF lstr_pick.i_return_record_count = 1 THEN
//				This.Object.epa_source_code[row] = String(lstr_pick.return1[1])
//				ib_changed_profile = TRUE
//			END IF
//		END IF
		
	CASE "b_update_receipt_for_ots"
		ll_profile_id = This.Object.profile_id[row]
		wf_update_receipt_for_ots(ll_profile_id, 0)
		
	//DevOps:20991	
	CASE "b_labpack_info"
		ll_process_code_uid = This.Object.process_code_uid[row]
		lstr.l[1] = ll_process_code_uid
		OpenWithParm(w_popup_labpack_process_info, lstr)
	//DevOps 15614
	CASE "b_reject_form"
		//DevOps 17097 info_gde 09/22/2020; Reject Form - Audit Tab
		ll_profile_id = wf_get_profile_id()
		if ll_profile_id > 0 then 
		idw_audit.SetRedraw (false)
		ii_rejection=0
		li_rc = wf_audit(idw_audit, ll_profile_id, 0, True)
		end if
		//Save Changes
		iw_profile.TriggerEvent("ue_save")
		
		ll_profile_id = This.Object.profile_id[row]
//		ll_source_form_id = This.Object.source_form_id[row]
//		ll_source_revision_id = This.Object.source_revision_id[row]
		select max(form_id)
		into :ll_source_form_id
		from formwcr
		where profile_id = :ll_profile_id using gtr_share;
		
		if isnull(ll_source_form_id) or ll_source_form_id = 0 then
			messagebox('Error','Error finding form id')
			return
		end if
		
		select max(revision_id)
		into :ll_source_revision_id
		from formwcr
		where profile_id = :ll_profile_id
		and form_id = :ll_source_form_id using gtr_share;

		if isnull(ll_source_revision_id) or ll_source_revision_id = 0 then
			messagebox('Error','Error finding form revision id')
			return
		end if
		
		//Reject and Send Email
		li_response = MessageBox( gs_app_name + ": Reject", "Are you sure that you would like to reject this form? The user will be able to make changes and resubmit.",Question!, YesNo!,2)
		IF li_response = 1 THEN				
			if not DirectoryExists(gs_eqai_path) then
				li_rc = CreateDirectory(gs_eqai_path)
			end if
				
			if li_rc < 0 then
				MessageBox("Send Email Failed", gs_eqai_path + " Directory could not be created")
				return
			end if
			
			SELECT sign_email 
			INTO :ls_sign_email
			FROM FormSignature 
			WHERE form_id = :ll_source_form_id
			AND revision_id = :ll_source_revision_id
			USING gtr_share ;
		         
			SELECT submitted_by
			INTO :ls_submitted_by
			FROM FORMWCR
			WHERE form_id = :ll_source_form_id
			AND revision_id = :ll_source_revision_id
			USING gtr_share ;
				
			SELECT email, contact_id
			INTO :ls_web_user_email, :ll_contact_id
			FROM Contact
			WHERE web_userid = :ls_submitted_by
			AND contact_status = 'A'
			USING gtr_share ;
					
			lstr.s[1] = ls_sign_email
			lstr.s[2] = ls_web_user_email
			lstr.s[3] = 'R'
			lstr.l[1]	= ll_source_form_id
			lstr.l[2]	= ll_source_revision_id
			lstr.sl_profile_id = ll_profile_id //DevOps 15173 info_gde 03/08/2021; EQAI - Maintenance - COR  - Form Management - Renewal - Reject
			lstr.s_submitted_by=ls_submitted_by
			
			OpenWithParm(w_email_recipient_text_dragon, lstr)
			
			lstr = Message.PowerObjectParm
			IF IsValid(lstr) THEN			
				//ls_send_string = Message.StringParm
				ls_send_string = lstr.s[1]
				if isNull(lstr.s[4]) then 
					ls_temp=''
				else
					ls_temp=lstr.s[4]
				end if
			END IF
			
			IF len(ls_temp) > 0 Then //DevOps 11354 info_gde 04/07/2021; Attachment Tab "Comments"
				idw_header.object.comment[idw_header.GetRow()]= ls_temp
			End If
			
			
			li_rc = 0
			if isNull(ls_send_string) then
				MessageBox("E-mail Not Sent", "No e-mail address was provided. E-mail not sent")
				return
			elseif ls_send_string = "-1" or (ls_send_string = "") then
				//cancelled
				return
			end if
			
			li_pos = Pos(Upper(ls_send_string), "/M=", 1)
			//ls_temp = mid(ls_send_string,li_pos + 3,len(ls_send_string) - li_pos - 2)
			li_pos = pos(ls_temp, '/', 1)
			if li_pos > 0 then
				//ls_temp = left(ls_temp,li_pos - 2)
			end if
			
			ls_temp = trim (ls_temp)
			Insert Into FormNote (form_id,revision_id,type,status,comment,added_by,date_added,modified_by,date_modified)
			values (:ll_source_form_id , :ll_source_revision_id, 'EMAIL', 'R', :ls_temp, :gs_user_id, :ldt_today, :gs_user_id, :ldt_today )
			using gtr_share;
			commit using gtr_share;
						
			UPDATE Scan
			SET status = 'V',
				form_id = null,
				revision_id = null
			WHERE form_id = :ll_source_form_id
			AND revision_id = :ll_source_revision_id
			AND TYPE_ID = 129
			USING itr_image ;
			COMMIT USING itr_image;
			
			//DevOps 16480 don't void scan table images except for type_id = 129
//			SELECT count(*)
//			INTO :ll_renewal_count
//			FROM FORMWCR
//			WHERE form_id = :ll_source_form_id
//			AND revision_id = :ll_source_revision_id
//			AND (UPPER(copy_source) = 'RENEWAL' OR UPPER(copy_source) = 'RESUBMITED') 
//			AND display_status_uid = 5 
//			USING gtr_share ;
//			
//			IF ll_renewal_count > 0 THEN 
//				 UPDATE Scan
//				 SET status = 'V',
//				 	form_id = null,
//					 revision_id = null
//				 WHERE form_id = :ll_source_form_id
//				 AND revision_id = :ll_source_revision_id
//				 AND TYPE_ID = 17
//				 USING itr_image ;
//				 COMMIT USING itr_image;
//			END IF 
			//DevOps 17527 info_gde 10/22/2020; Form Management > Reject Filter
		
			
//			UPDATE FORMWCR 
//			SET display_status_uid  = 6,
//					profile_id = null /*,
//			      copy_source = 	'resubmited' */
//			WHERE form_id = :ll_source_form_id
//			AND revision_id = :ll_source_revision_id
//			USING gtr_share ;
//				
//			COMMIT USING gtr_share;
			
			
			
			Insert Into FormWCRStatusAudit values (:ll_source_form_id,:ll_source_revision_id,7,:ldt_today,:gs_user_id) USING gtr_share;
			COMMIT USING gtr_share;
			
			
			
			
//			//DevOps 17527 info_gde 10/19/2020; Form Management > Reject Filter
//			SELECT isnull(copy_source, 'csnew')   
//			INTO :ls_copy_source
//			From FORMWCR 
//			WHERE form_id = :ll_source_form_id
//			AND revision_id = :ll_source_revision_id
//			USING gtr_share ;
//			
			
			
			//call stored procedure to get new revision id
			// Call sp_approved_copy
			//exec sp_Approved_Copy '617139','renewal','eoswin'
			DECLARE lproc PROCEDURE  FOR dbo.sp_Approved_Copy
				@profile_id = :ll_profile_id,
				@copysource = 'amendment',
				@web_userid = :ls_submitted_by
			USING gtr_share;
			gtr_share.AutoCommit = true
			EXECUTE lproc;
			li_rc = gtr_share.SQLCode

			if li_rc < 0 then
				messagebox(gs_app_name + ": Error","Procedure sp_approved_copy failed with the following error:~r~n~r~n" + gtr_share.sqlerrtext,Exclamation!)
			end if

			
			
			
			ll_source_form_id_old = ll_source_form_id
			ll_source_revision_id_old = ll_source_revision_id
			ll_source_form_id = 0
			ll_source_revision_id = 0
			do while gtr_share.SQLCode = 0
				FETCH lproc INTO :ls_source_form_revision;
			loop
			CLOSE lproc;
			gtr_share.AutoCommit = false
			
			
			li_pos = lastpos(ls_source_form_revision,'-')
			if li_pos > 0 then
				ls_source_form_id = mid(ls_source_form_revision,1,li_pos - 1)
				ls_source_revision_id = mid(ls_source_form_revision,li_pos + 1)
				if isnumber(ls_source_form_id) then
					ll_source_form_id = long(ls_source_form_id)
				end if
				if isnumber(ls_source_revision_id) then
					ll_source_revision_id = long(ls_source_revision_id)
				end if
			else
				if isnumber(ls_source_form_revision) then
					ll_source_form_id = long(ls_source_form_revision)
					select count(1)
					into :ll_wcr_count
					from formwcr
					where form_id = :ll_source_form_id using gtr_share;
					if ll_wcr_count = 0 then
						ll_source_form_id = ll_source_form_id_old
					end if
				end if
			end if
			
		
			
			if ll_source_form_id > 0 then
				if ll_source_revision_id < 1 then
					select revision_id
					into :ll_source_revision_id
					from plt_ai.dbo.FormWCRStatusAudit
					where form_id = :ll_source_form_id
					and added_by = :ls_submitted_by
					and date_added in (select max(date_added)
					                             from plt_ai.dbo.FormWCRStatusAudit
											  where form_id = :ll_source_form_id
											  and added_by = :ls_submitted_by) using gtr_share;
					if gtr_share.SQLCode = 0 then
						li_rc = 1
					else
						if gtr_share.SQLCode = 100 then
							li_rc = 1
							ll_source_revision_id = 1
						end if
					end if
				end if
				ldt_today = datetime(today(),now())
				insert into documentsendercontact
					(form_type
					,form_id
					,revision_id
					,profile_id
					,contact_id
					,original_contact
					,email
					,added_by
					,date_added
					,modified_by
					,date_modified)
				values
					('wcr'
					,:ll_source_form_id
					,:ll_source_revision_id
					,:ll_profile_id
					,:ll_contact_id
					,'T'
					,:ls_web_user_email
					,:gs_user_id
					,:ldt_today
					,:gs_user_id
					,:ldt_today) using gtr_share;
			end if
			
			insert into FormNote
			(form_id, revision_id, type, status, comment, added_by, date_added, modified_by, date_modified)
			select :ll_source_form_id, :ll_source_revision_id, type, status, comment, :gs_user_id, :ldt_today, :gs_user_id, :ldt_today
			from FormNote
			where form_id = :ll_source_form_id_old and revision_id = :ll_source_revision_id_old using gtr_share;
			
			
			
			
			//DevOps 16687 change document update status to P instead of A, change doc status reason to Rejection in Process instead of null
			UPDATE Profile
			SET display_status_uid = 7, document_update_status = 'P', doc_status_reason = 'Rejection in Process'
			WHERE profile_id = :ll_profile_id
			USING gtr_share;
			
			COMMIT using gtr_share;
			
			//DevOps 16480 update revision id on Scan table images for all type_id's not just 17
			UPDATE Scan
			SET form_id = :ll_source_form_id,
				  revision_id = :ll_source_revision_id
			WHERE form_id = :ll_source_form_id_old
			AND revision_id = :ll_source_revision_id_old
			/* AND TYPE_ID = 17 */
			USING itr_image ;
			COMMIT USING itr_image;
			
			string ls_doc_status_reason
//			setnull(ls_doc_status_reason)
			ls_doc_status_reason = 'Rejection in Process'
			this.setitem(row,'display_status_uid',7)
			this.setitem(row,'display_status_form',7)
			this.setitem(row,'doc_status_reason',ls_doc_status_reason)
			this.setitem(row,'document_update_status','P')
//			this.setitem(row,'source_form_id',ll_source_form_id)
//			this.setitem(row,'source_revision_id',ll_source_revision_id)
			this.setitemstatus(row,'display_status_uid',Primary!,NotModified!)
			this.setitemstatus(row,'display_status_form',Primary!,NotModified!)
			this.setitemstatus(row,'doc_status_reason',Primary!,NotModified!)
			this.setitemstatus(row,'document_update_status',Primary!,NotModified!)
//			this.setitemstatus(row,'source_form_id',Primary!,NotModified!)
//			this.setitemstatus(row,'source_revision_id',Primary!,NotModified!)

			ls_send_string = '"' + gs_eqai_path + '\GWSend.exe" ' + ls_send_string
			//ls_send_string += ' /U="' + gs_user_id + '"'
			ls_send_string += ' "'  + '   '
				
			li_logfile = FileOpen(ls_logfile, LineMode!, Write!, LockWrite!, Append!)
			FileWrite(li_logfile,String(today(),"mm/dd/yyyy hh:mm:ss") + "-" + ls_send_string)
			FileClose(li_logfile)
					
			if f_parse_gwsend_string (ls_send_string, lstr_m) then
				if not f_messagesender_email (lstr_m, this) then
					li_rc = -1
				else
					messagebox('Reject Form','Form has been rejected successfully.')
				end if
			else
				li_rc = -1
			end if
			li_rc = RegistrySet("HKEY_CURRENT_USER\Software\EQPDF","BypassSaveAs",RegString!,"0")
			this.setredraw(false)
//			idw_header.reselectrow(row)
//			idw_header.sharedata(this)
////			idw_header.TriggerEvent(RowFocusChanged!)
//			idw_detail.ScrollToRow(idw_header.getrow())
//			idw_comment.ScrollToRow(idw_header.getrow())
//			idw_shipping.ScrollToRow(idw_header.getrow())
//			idw_composition_epa.ScrollToRow(idw_header.getrow())
//			idw_waste_other.ScrollToRow(idw_header.getrow())

			select max(form_id)
			into :ll_source_form_id
			from formwcr
			where profile_id = :ll_profile_id using itr_share;
		
			select max(revision_id)
			into :ll_source_revision_id
			from formwcr
			where profile_id = :ll_profile_id
			and form_id = :ll_source_form_id using itr_share;
	
			select display_status_uid
			into :ll_display_status_uid
			from formwcr
			where profile_id = :ll_profile_id
			and form_id = :ll_source_form_id
			and revision_id = :ll_source_revision_id using itr_share;
	
			if not isnull(ll_source_form_id) and ll_source_form_id > 0 then
				idw_header.setitem(ll_row,'display_status_form',ll_display_status_uid)
				idw_header.setitem(ll_row,'form_ids',string(ll_source_form_id) + '-' + string(ll_source_revision_id))
				idw_header.setitemstatus(ll_row,'display_status_form',Primary!,NotModified!)
				idw_header.setitemstatus(ll_row,'form_ids',Primary!,NotModified!)
			end if

			this.setredraw(true)
			//MessageBox("Docs Pending - Rejection in Process.","This profile has been rejected and sent to the customer for review.  Edits should not be made to the profile until the customer has resubmitted from COR.")
		
			
			
			
			//DevOps 17527 info_gde 10/22/2020; Form Management > Reject Filter
			UPDATE FORMWCR 
			SET display_status_uid  = 7,
					copy_source = 'resubmited',  //:ls_copy_source, //DevOps 17527 info_gde 10/19/2020; Form Management > Reject Filter
					//copy_source = 'csnew', /* DevOps 16124 change to 'csnew' instead of 'resubmited', */
					submitted_by = null,
					date_submitted = null,
					signing_date = null
			WHERE form_id = :ll_source_form_id
			AND revision_id = :ll_source_revision_id
			USING gtr_share ;
			
			COMMIT using gtr_share;
			
			//DevOps 17527 info_gde 10/22/2020; Form Management > Reject Filter
		END IF
		
END CHOOSE
end event

event rowfocuschanging;
long ll_row_header

ll_row_header = idw_header.getrow()
//return focus to the first column if the header row <> detail row
if ll_row_header <> newrow then
	setcolumn("ap_start_date")
	return 1
end if

end event

event rowfocuschanged;long	ll_wastetype
string ls_category, ls_desc, ls_text, ls_code

	
	il_curr_row = currentrow
	if currentrow > 0 then
		ll_wastetype = This.Object.wastetype_id_3[il_curr_row]
		Select category, description, code into :ls_category, :ls_desc, :ls_code from wastetype where wastetype_id = :ll_wastetype using itr_share;
		ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
		idw_detail.object.t_waste_text.text = ls_text
	End If
end event

event ue_lookup;integer	li_idx, li_ans, li_a_cntr
long		ll_customer_id, ll_generator_id, ll_choice, ll_row, ll_rowcount, ll_disposition_id
long		ll_orig_wastetype, ll_new_wastetype, ll_null, ll_profile_id,ll_curr_row
string	ls_where, ls_where_customer, ls_where_generator, ls_contact_name, ls_tab_text
string	ls_disposition_desc, ls_desc, ls_code, ls_text, ls_category
datastore	lds_tabs
str_pick	lstr_pick
str_pass lstr_pass

SetNull(ll_null)

ll_curr_row = GetRow()

if ai_indicate > 1 then
	IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 0
End If

CHOOSE CASE Lower(as_col_name)	
		
	CASE "contact_id"
		If ai_indicate < 3 then
			return 1
		Else
			ll_customer_id = This.Object.customer_id[ll_curr_row]
			ll_generator_id = This.Object.generator_id[ll_curr_row]
			IF IsNull(ll_customer_id) THEN
				ls_where_customer = ""
			ELSE
				ls_where_customer = "ContactXRef.customer_id = " + String(ll_customer_id) &
					+ " AND ContactXRef.status = 'A'"
			END IF
			IF IsNull(ll_generator_id) THEN
				ls_where_generator = ""
			ELSE
				ls_where_generator = "ContactXRef.generator_id = " + String(ll_generator_id) &
					+ " AND ContactXRef.status = 'A'"
			END IF
			
			lstr_pick.s_window_title			= "Select Profile Contact"
			lstr_pick.i_window_width			= 0
			lstr_pick.b_multipick				= FALSE
	
			li_idx++
			lstr_pick.s_tab_title[li_idx]		= "Customer Contacts"
			lstr_pick.i_tabpage_type[li_idx]	= 1
			lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_customer"
			lstr_pick.s_where[li_idx]			= ls_where_customer
			lstr_pick.s_retrieve_by[li_idx]	= ""
			lstr_pick.s_new_reference[li_idx]= ""
			lstr_pick.i_return_column_count	= 6
	
			li_idx++
			lstr_pick.s_tab_title[li_idx]		= "Generator Contacts"
			lstr_pick.i_tabpage_type[li_idx]	= 1
			lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_generator"
			lstr_pick.s_where[li_idx]			= ls_where_generator
			lstr_pick.s_retrieve_by[li_idx]	= ""
			lstr_pick.s_new_reference[li_idx]= ""
			lstr_pick.i_return_column_count	= 6
			
			lstr_pick.i_tab_count				= li_idx
	
			OpenWithParm(w_popup_quick_select, lstr_pick)
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				FOR li_idx = 1 TO lstr_pick.i_return_record_count
					This.Object.contact_id[ll_curr_row] = Long(lstr_pick.return1[li_idx])
					ls_contact_name = string(lstr_pick.return2[li_idx])
					This.Object.contact_name[ll_curr_row] = ls_contact_name
				NEXT
			END IF
		End If
		
	CASE "user_code"
		If ai_indicate < 3 then
			return 1
		Else
			lstr_pick.s_window_title = "Select EQ Contact"
			lstr_pick.i_window_width = 0
			lstr_pick.b_multipick = FALSE
			lstr_pick.i_tab_count = 1
			lstr_pick.i_return_column_count = 7
			lstr_pick.to_transaction = gtr_share
			// added company_id SK 07/08/2014
			ls_where = "Users.department_id = 2 AND Access.company_id = " + string(gi_company_id) // department_id 2 = Central Customer Service
			
			li_idx = 1
			lstr_pick.s_tab_title[li_idx] = "Central Customer Service"
			lstr_pick.i_tabpage_type[li_idx] = 1
			lstr_pick.s_dataobject[li_idx] = "d_quick_select_users"
			lstr_pick.s_where[li_idx] = ls_where
			lstr_pick.s_new_reference[li_idx] = ""
			
			OpenWithParm(w_popup_quick_select, lstr_pick)
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				FOR li_idx = 1 TO lstr_pick.i_return_record_count
					This.Object.EQ_contact[ll_curr_row] = String(lstr_pick.return2[li_idx])
					ls_contact_name = String(lstr_pick.return4[li_idx])
					This.Object.user_name[ll_curr_row] = ls_contact_name
				NEXT
			END IF
			ib_changed_profile = TRUE
		End IF
		
	CASE "wastetype_id"
		If ai_indicate < 3 then
			return 1
		Else
			lds_tabs = CREATE DATASTORE
			lds_tabs.DataObject = "dddw_wastetype"
			lds_tabs.SetTransObject(itr_share)
			ll_rowcount = lds_tabs.Retrieve()
			
			// Get the categories from the WasteType table
			ls_tab_text = ""
			FOR ll_row = 1 TO ll_rowcount
				IF Lower(ls_tab_text) = Lower(lds_tabs.Object.category[ll_row]) THEN
					CONTINUE
				ELSE
					ls_tab_text = lds_tabs.Object.category[ll_row]
					li_idx++
					lstr_pick.s_tab_title[li_idx]	= ls_tab_text
					lstr_pick.i_tabpage_type[li_idx]	= 1
					lstr_pick.s_retrieve_by[li_idx] = ""
					lstr_pick.s_new_reference[li_idx] = ""
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_wastetype"
					lstr_pick.s_where[li_idx] = "category = '" + ls_tab_text + "'"
				END IF
			NEXT
			
			lstr_pick.i_tab_count = li_idx
			DESTROY lds_tabs;
	
			lstr_pick.s_window_title = "Select Waste Type"
			lstr_pick.i_window_width = 0
			lstr_pick.b_multipick = FALSE
			lstr_pick.i_return_column_count = 4	
			
			OpenWithParm(w_popup_quick_select, lstr_pick)
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
			   FOR li_idx = 1 TO lstr_pick.i_return_record_count
				ll_orig_wastetype = This.Object.wastetype_id[ll_curr_row]
				ll_new_wastetype = lstr_pick.return1[li_idx]
				ls_category = String(lstr_pick.return2[li_idx])
				ls_desc = String(lstr_pick.return3[li_idx])
				ls_code = String(lstr_pick.return4[li_idx])
				
				If Not IsNull(ll_orig_wastetype) and ll_orig_wastetype <> ll_new_wastetype  and idw_approval.RowCount() > 0 Then
					li_ans = MessageBox('Change of Waste Type',' Changing the waste type on the profile will remove the treatments and associated fields on each approval line.  Do you wish to continue?',Question!,YesNo!)
					If li_ans = 1 then
						This.Object.wastetype_id[ll_curr_row] = ll_new_wastetype
						ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
						This.object.t_waste_text.text = ls_text
						For li_a_cntr = 1 to idw_approval.Rowcount()
							idw_approval.Object.treatment_id[li_a_cntr] = ll_null
							idw_approval.Object.treatment_treatment_desc[li_a_cntr] = ''
							idw_approval.object.treatment_process_id[li_a_cntr] = ll_null
							idw_approval.object.disposal_service_id[li_a_cntr] = ll_null
						Next
						ib_changed_profile = TRUE
					End If
				Else
					If idw_approval.RowCount() > 0 Then
						li_ans = MessageBox('Change of Waste Type',' Changing the waste type on the profile will remove the treatments and associated fields on each approval line.  Do you wish to continue?',Question!,YesNo!)
						If li_ans = 1 then
							This.Object.wastetype_id[ll_curr_row] = ll_new_wastetype
							ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
							This.object.t_waste_text.text = ls_text
							For li_a_cntr = 1 to idw_approval.Rowcount()
								idw_approval.Object.treatment_id[li_a_cntr] = ll_null
								idw_approval.Object.treatment_treatment_desc[li_a_cntr] = ''
								idw_approval.object.treatment_process_id[li_a_cntr] = ll_null
								idw_approval.object.disposal_service_id[li_a_cntr] = ll_null
							Next
							ib_changed_profile = TRUE
						End If				
					Else
						This.Object.wastetype_id[ll_curr_row] = ll_new_wastetype
						ls_text = Trim(ls_category) + '-' + Trim(ls_desc) + '   (' + Trim(ls_code) + ')'
						This.object.t_waste_text.text = ls_text
						ib_changed_profile = TRUE
					End IF
				End If
			NEXT
			END IF
		End IF
	// rb 
	CASE "disposition_id"
		If ai_indicate < 3 then
			return 1
		Else
	
			lstr_pick.s_window_title			= "Disposition Select"
			lstr_pick.i_window_width			= 0
			lstr_pick.b_multipick				= FALSE
			lstr_pick.i_tab_count				= 1
			lstr_pick.s_button_text[1]			= "Select"
			lstr_pick.i_return_column_count	= 2
			lstr_pick.to_transaction			= itr_share
			
			FOR li_idx = 1 to 1
				CHOOSE CASE li_idx
					CASE 1
						lstr_pick.s_tab_title[li_idx]	= 'All Dispositions'
						lstr_pick.s_dataobject[li_idx] = "d_quick_select_disposition"
						lstr_pick.s_where[li_idx] = ""
				END CHOOSE
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_new_reference[li_idx] = ""
			NEXT
			
			lstr_pick.s_initial_modify = "disposition_id.Height.AutoSize='Yes' disposition_desc.Height.AutoSize='Yes'"
	
			// Open the popup
			OpenWithParm(w_popup_quick_select, lstr_pick)
			
			// Get the return values
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				SetPointer(HourGlass!)
				
				if lstr_pick.i_return_record_count = 1 then
					// Get return values
					ll_disposition_id = lstr_pick.return1[1]
					ls_disposition_desc = lstr_pick.return2[1]
					this.Object.disposition_id[ll_curr_row] = ll_disposition_id
					this.Object.disposition_desc[ll_curr_row] = ls_disposition_desc
				end if
			END IF
		End If
			
		CASE "epa_source_code"
			If ai_indicate < 3 then
				return 1
			Else			
				// Setup quick select popup
				lstr_pick.s_window_title			= "EPA Source Code Select"
				lstr_pick.i_window_width			= 0
				lstr_pick.b_multipick				= FALSE
				lstr_pick.i_tab_count				= 1
				lstr_pick.i_return_column_count	= 1
				lstr_pick.to_transaction 			= itr_share
				lstr_pick.s_tab_title[1]			= "Source Codes"
				lstr_pick.i_tabpage_type[1]		= 1
				lstr_pick.s_dataobject[1]			= "d_quick_select_source_code"
				lstr_pick.s_where[1]				= ""
				lstr_pick.s_retrieve_by[1]		= ""
				lstr_pick.s_new_reference[1]		= ""
				
				OpenWithParm(w_popup_quick_select, lstr_pick)
				lstr_pick = Message.PowerObjectParm
				IF IsValid(lstr_pick) THEN
					IF lstr_pick.i_return_record_count = 1 THEN
						This.Object.epa_source_code[ll_curr_row] = String(lstr_pick.return1[1])
						ib_changed_profile = TRUE
					END IF
				END IF
			End If
			
		// SK 07182012		
		CASE "epa_form_code"
			If ai_indicate < 3 then
				return 1
			Else			
				// Setup quick select popup
				lstr_pick.s_window_title			= "EPA Form Code Select"
				lstr_pick.i_window_width			= 0
				lstr_pick.b_multipick				= FALSE
				lstr_pick.i_tab_count				= 1
				lstr_pick.i_return_column_count	= 1
				lstr_pick.to_transaction 			= itr_share
				lstr_pick.s_tab_title[1]			= "EPA Form Codes"
				lstr_pick.i_tabpage_type[1]		= 1
				lstr_pick.s_dataobject[1]			= "d_quick_select_epa_form_code"
				lstr_pick.s_where[1]				= ""
				lstr_pick.s_retrieve_by[1]		= ""
				lstr_pick.s_new_reference[1]		= ""
				
				OpenWithParm(w_popup_quick_select, lstr_pick)
				lstr_pick = Message.PowerObjectParm
				IF IsValid(lstr_pick) THEN
					IF lstr_pick.i_return_record_count = 1 THEN
						This.Object.epa_form_code[ll_curr_row] = String(lstr_pick.return1[1])
						ib_changed_profile = TRUE
					END IF
				END IF
			End If


End Choose

Return 0
end event

event itemerror;call super::itemerror;return 1 //DevOps 29641 AGC 11/13/2021
end event

event doubleclicked;// OVERRIDE ANCESTOR SCRIPT

// MPM - 1/28/2022 - DevOps 21908
IF dwo.name = 'ap_expiration_date' AND This.Object.inactive_flag[row] = 'T' THEN
	MessageBox(gs_app_name+": Profile Expiration Date", 'The Expiration Date field cannot be updated when the Inactive checkbox is checked.', Exclamation!)
ELSE
	CALL SUPER::doubleclicked
END IF

end event

event rbuttondown;// OVERRIDE ANCESTOR SCRIPT

// MPM - 1/28/2022 - DevOps 21908
IF dwo.name = 'ap_expiration_date' AND This.Object.inactive_flag[row] = 'T' THEN
	MessageBox(gs_app_name+": Profile Expiration Date", 'The Expiration Date field cannot be updated when the Inactive checkbox is checked.', Exclamation!)
ELSE
	CALL SUPER::rbuttondown
END IF

end event

type dw_quoteheader from datawindow within tabpage_detail
integer x = 759
integer width = 498
integer height = 156
integer taborder = 10
boolean bringtotop = true
string dataobject = "d_profile_quote_header"
boolean border = false
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type tabpage_comment from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Comment"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_comment dw_comment
end type

on tabpage_comment.create
this.dw_comment=create dw_comment
this.Control[]={this.dw_comment}
end on

on tabpage_comment.destroy
destroy(this.dw_comment)
end on

type dw_comment from datawindow within tabpage_comment
event ue_mouse_scroll pbm_vbxevent47
event ue_tabout pbm_dwntabout
event ue_noscroll pbm_vscroll
integer y = 12
integer width = 4375
integer height = 1520
integer taborder = 30
string title = "none"
string dataobject = "d_profile_comments_dragon"
boolean border = false
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event ue_mouse_scroll;return 1
end event

event ue_tabout;tab_1.tabpage_view.tab_2.selecttab( ii_tabpage_technical )
idw_technical.Post setfocus()
end event

event ue_noscroll;// MPM - 5/24/2021 - DevOps 18677 - prevent vertical scrolling
RETURN 1
end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
END IF
end event

event getfocus;long		ll_row

ll_row = This.GetRow()
IF ll_row <> il_curr_row THEN This.ScrollToRow(il_curr_row)

IF ll_row > 0 THEN
	This.SetColumn("hand_instruct")
END IF
end event

event rowfocuschanging;
long ll_row_header

ll_row_header = idw_header.getrow()
//return focus to the first column if the header row <> detail row
if ll_row_header <> newrow then
	setcolumn("hand_instruct")
	return 1
end if

end event

type tabpage_technical from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Tech"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
tab_4 tab_4
dw_active_profile dw_active_profile
dw_profile_radioactive_waste dw_profile_radioactive_waste
end type

on tabpage_technical.create
this.tab_4=create tab_4
this.dw_active_profile=create dw_active_profile
this.dw_profile_radioactive_waste=create dw_profile_radioactive_waste
this.Control[]={this.tab_4,&
this.dw_active_profile,&
this.dw_profile_radioactive_waste}
end on

on tabpage_technical.destroy
destroy(this.tab_4)
destroy(this.dw_active_profile)
destroy(this.dw_profile_radioactive_waste)
end on

type tab_4 from tab within tabpage_technical
boolean visible = false
integer x = 882
integer y = 552
integer width = 2665
integer height = 996
integer taborder = 30
boolean enabled = false
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 67108864
boolean raggedright = true
boolean focusonbuttondown = true
boolean boldselectedtext = true
integer selectedtab = 1
tabpage_active_waste_profile tabpage_active_waste_profile
tabpage_compare tabpage_compare
end type

event selectionchanged;integer	li_rc
long		ll_row, ll_profile_id, ll_rows

wf_AcceptText()
ll_row = idw_header.GetRow()
IF ll_row <= 0 THEN RETURN
ll_profile_id = idw_header.Object.profile_id[ll_row]
IF IsNull(ll_profile_id) OR ll_profile_id = 0 THEN RETURN 1

CHOOSE CASE newindex
	CASE ii_tabpage_technical_active_waste_profile
			// Retrieve active waste profile
			
	CASE ii_tabpage_technical_compare
			li_rc = idw_technical.ShareData(This.tabpage_compare.dw_technical)
			
		
	CASE ELSE
END CHOOSE

SetPointer(Arrow!)
end event

on tab_4.create
this.tabpage_active_waste_profile=create tabpage_active_waste_profile
this.tabpage_compare=create tabpage_compare
this.Control[]={this.tabpage_active_waste_profile,&
this.tabpage_compare}
end on

on tab_4.destroy
destroy(this.tabpage_active_waste_profile)
destroy(this.tabpage_compare)
end on

type tabpage_active_waste_profile from userobject within tab_4
integer x = 18
integer y = 112
integer width = 2629
integer height = 868
long backcolor = 67108864
string text = "Active Waste Profile"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_active_profile_1 dw_active_profile_1
end type

on tabpage_active_waste_profile.create
this.dw_active_profile_1=create dw_active_profile_1
this.Control[]={this.dw_active_profile_1}
end on

on tabpage_active_waste_profile.destroy
destroy(this.dw_active_profile_1)
end on

type dw_active_profile_1 from anc_dw within tabpage_active_waste_profile
event ue_mouse_scroll pbm_vbxevent47
integer width = 4389
integer height = 1980
integer taborder = 40
string dataobject = "d_profile_technical_dragon"
boolean vscrollbar = true
end type

event ue_mouse_scroll;return 1
end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
END IF
end event

event ue_lookup;call super::ue_lookup;long		ll_row
string	ls_color, ls_consistency, ls_new_color, ls_new_consistency
str_pass	lstr_pass

wf_accepttext()
IF ai_indicate > 1 THEN
	IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
END IF

ll_row = GetRow()

CHOOSE CASE Lower(as_col_name)
		
	CASE "color"
		IF ai_indicate < 3 THEN
			RETURN 1
		ELSE
			ls_color = This.Object.color[ll_row]
			IF IsNull(ls_color) THEN ls_color = ""
			lstr_pass.s[1] = ls_color
			lstr_pass.s[2] = "COLOR"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_color <> lstr_pass.s[1] THEN
						ls_new_color = lstr_pass.s[1]
						This.Object.color[ll_row] = ls_new_color
						This.AcceptText()
						This.SetColumn("color")
						ib_changed_technical = TRUE
					END IF
				END IF
			END IF
		End IF
	
	CASE "consistency"
		IF ai_indicate < 3 THEN
			return 1
		ELSE
			ls_consistency = This.Object.consistency[ll_row]
			IF IsNull(ls_consistency) THEN ls_consistency = ""
			lstr_pass.s[1] = ls_consistency
			lstr_pass.s[2] = "CONSISTENCY"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_consistency <> lstr_pass.s[1] THEN
						ls_new_consistency = lstr_pass.s[1]
						This.Object.consistency[ll_row] = ls_new_consistency
						This.AcceptText()
						This.SetColumn("consistency")
						ib_changed_technical = TRUE
					END IF
				END IF
			END IF	
		END IF
END CHOOSE

RETURN 0
end event

event itemchanged;call super::itemchanged;integer	li_rc

//li_rc = wf_lab_tech_itemchanged(This, row, dwo.name, data)
ib_changed_technical = TRUE

RETURN li_rc
end event

event buttonclicked;// Coding for Color & Consistency
end event

type tabpage_compare from userobject within tab_4
integer x = 18
integer y = 112
integer width = 2629
integer height = 868
long backcolor = 67108864
string text = "Compare"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_wcr_technical dw_wcr_technical
dw_lab dw_lab
dw_technical dw_technical
end type

on tabpage_compare.create
this.dw_wcr_technical=create dw_wcr_technical
this.dw_lab=create dw_lab
this.dw_technical=create dw_technical
this.Control[]={this.dw_wcr_technical,&
this.dw_lab,&
this.dw_technical}
end on

on tabpage_compare.destroy
destroy(this.dw_wcr_technical)
destroy(this.dw_lab)
destroy(this.dw_technical)
end on

type dw_wcr_technical from anc_dw within tabpage_compare
integer x = 2958
integer y = 8
integer width = 1458
integer height = 1984
integer taborder = 70
string dataobject = "d_profile_wcr_lab"
boolean vscrollbar = true
end type

event scrollvertical;IF idw_lab.Rowcount() > 0 THEN
	idw_lab.Object.DataWindow.VerticalScrollPosition = scrollpos
END IF

IF idw_technical.Rowcount() > 0 THEN
	idw_technical.Object.DataWindow.VerticalScrollPosition = scrollpos
END IF
end event

type dw_lab from anc_dw within tabpage_compare
integer x = 1477
integer y = 8
integer width = 1477
integer height = 1984
integer taborder = 20
string dataobject = "d_profile_lab"
boolean vscrollbar = true
end type

event buttonclicked;//string	ls_color, ls_consistency, ls_new_color, ls_new_consistency
//str_pass	lstr_pass
//
//wf_accepttext()
//IF is_access <> 'L' AND is_access <> 'S' THEN RETURN
//
//CHOOSE CASE Lower(dwo.name)
//	CASE "b_color"
//		ls_color = This.Object.color[row]
//		IF IsNull(ls_color) THEN ls_color = ""
//		lstr_pass.s[1] = ls_color
//		lstr_pass.s[2] = "COLOR"
//		lstr_pass.tr_trans = itr_share
//
//		OpenWithParm(w_popup_color_consistency, lstr_pass)
//	
//		lstr_pass = Message.PowerObjectParm
//		IF IsValid(lstr_pass) THEN
//			IF lstr_pass.d[1] = 1 THEN
//				IF ls_color <> lstr_pass.s[1] THEN
//					ls_new_color = lstr_pass.s[1]
//					This.Object.color[row] = ls_new_color
//					This.AcceptText()
//					This.SetColumn("color")
//					ib_changed_lab = TRUE
//					
//					// Copy to technical
//					idw_technical.Object.color[row] = ls_new_color
//					ib_changed_technical = TRUE
//				END IF
//			END IF
//		END IF
//	
//	CASE "b_consistency"
//		ls_consistency = This.Object.consistency[row]
//		IF IsNull(ls_consistency) THEN ls_consistency = ""
//		lstr_pass.s[1] = ls_consistency
//		lstr_pass.s[2] = "CONSISTENCY"
//		lstr_pass.tr_trans = itr_share
//
//		OpenWithParm(w_popup_color_consistency, lstr_pass)
//	
//		lstr_pass = Message.PowerObjectParm
//		IF IsValid(lstr_pass) THEN
//			IF lstr_pass.d[1] = 1 THEN
//				IF ls_consistency <> lstr_pass.s[1] THEN
//					ls_new_consistency = lstr_pass.s[1]
//					This.Object.consistency[row] = ls_new_consistency
//					This.AcceptText()
//					This.SetColumn("consistency")
//					ib_changed_lab = TRUE
//					
//					// Copy to technical
//					idw_technical.Object.consistency[row] = ls_new_consistency
//					ib_changed_technical = TRUE
//				END IF
//			END IF
//		END IF		
//END CHOOSE
end event

event itemchanged;integer	li_rc
long		ll_row_technical
string	ls_column_name, ls_col_type

li_rc = wf_lab_tech_itemchanged(This, row, dwo.name, data)
ib_changed_lab = TRUE


Post wf_lab_sync_technical(dwo.name) 

RETURN li_rc

end event

event rowfocuschanged;//IF idw_technical.GetRow() <> currentrow THEN
//	idw_technical.ScrollToRow(currentrow)
//END IF

IF idw_technical.Rowcount() > 0 THEN
	idw_technical.Object.DataWindow.VerticalScrollPosition = idw_lab.Object.Datawindow.VerticalScrollPosition
END IF

IF idw_wcr_technical.Rowcount() > 0 THEN
	idw_wcr_technical.Object.DataWindow.VerticalScrollPosition = idw_lab.Object.Datawindow.VerticalScrollPosition
END IF
end event

event rowfocuschanging;long		ll_profile_id, ll_row_header

// Prevent this from happening
IF This.Rowcount() > 0 AND currentrow > 0 THEN
	ll_profile_id = This.Object.profile_id[currentrow]
	ll_row_header = idw_header.GetRow()
	IF ll_row_header > 0 THEN
		IF idw_header.Object.profile_id[ll_row_header] = ll_profile_id THEN
			RETURN 1
		END IF
	END IF
END IF
end event

event scrollvertical;IF idw_technical.Rowcount() > 0 THEN
	idw_technical.Object.DataWindow.VerticalScrollPosition = scrollpos
END IF

IF idw_wcr_technical.Rowcount() > 0 THEN
	idw_wcr_technical.Object.DataWindow.VerticalScrollPosition = scrollpos
END IF
end event

event ue_lookup;call super::ue_lookup;string	ls_color, ls_consistency, ls_new_color, ls_new_consistency
str_pass	lstr_pass
long		ll_row

wf_accepttext()
If ai_indicate > 1 then
	// rb 02/24/2011 Looks like this was pasted in from left-most DW, original buttonclicked restored
	//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
	IF is_access <> 'L' AND is_access <> 'S' THEN RETURN 0
End If

ll_row = GetRow()



CHOOSE CASE Lower(as_col_name)
		
	CASE "color"
		If ai_indicate < 3 Then
			return 1
		Else
			ls_color = This.Object.color[ll_row]
			IF IsNull(ls_color) THEN ls_color = ""
			lstr_pass.s[1] = ls_color
			lstr_pass.s[2] = "COLOR"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_color <> lstr_pass.s[1] THEN
						ls_new_color = lstr_pass.s[1]
						This.Object.color[ll_row] = ls_new_color
						This.AcceptText()
						This.SetColumn("color")
						ib_changed_lab = TRUE
						
						// Copy to technical
						idw_technical.Object.color[ll_row] = ls_new_color
						ib_changed_technical = TRUE
						
					END IF
				END IF
			END IF
		End IF
	
	CASE "consistency"
		If ai_indicate < 3 Then
			return 1
		Else
			ls_consistency = This.Object.consistency[ll_row]
			IF IsNull(ls_consistency) THEN ls_consistency = ""
			lstr_pass.s[1] = ls_consistency
			lstr_pass.s[2] = "CONSISTENCY"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_consistency <> lstr_pass.s[1] THEN
						ls_new_consistency = lstr_pass.s[1]
						This.Object.consistency[ll_row] = ls_new_consistency
						This.AcceptText()
						This.SetColumn("consistency")
						ib_changed_lab = TRUE
						
						// Copy to technical
						idw_technical.Object.consistency[ll_row] = ls_new_consistency
						ib_changed_technical = TRUE						
						
					END IF
				END IF
			END IF	
		End If
END CHOOSE

return 0
end event

type dw_technical from anc_dw within tabpage_compare
integer y = 8
integer width = 1477
integer height = 1984
integer taborder = 40
string dataobject = "d_profile_lab"
boolean vscrollbar = true
end type

event buttonclicked;//string	ls_color, ls_consistency, ls_new_color, ls_new_consistency
//str_pass	lstr_pass
//
//wf_accepttext()
//
//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN
//
//CHOOSE CASE Lower(dwo.name)
//	CASE "b_color"
//		ls_color = This.Object.color[row]
//		IF IsNull(ls_color) THEN ls_color = ""
//		lstr_pass.s[1] = ls_color
//		lstr_pass.s[2] = "COLOR"
//		lstr_pass.tr_trans = itr_share
//
//		OpenWithParm(w_popup_color_consistency, lstr_pass)
//	
//		lstr_pass = Message.PowerObjectParm
//		IF IsValid(lstr_pass) THEN
//			IF lstr_pass.d[1] = 1 THEN
//				IF ls_color <> lstr_pass.s[1] THEN
//					ls_new_color = lstr_pass.s[1]
//					This.Object.color[row] = ls_new_color
//					This.AcceptText()
//					This.SetColumn("color")
//					ib_changed_technical = TRUE
//				END IF
//			END IF
//		END IF
//	
//	CASE "b_consistency"
//		ls_consistency = This.Object.consistency[row]
//		IF IsNull(ls_consistency) THEN ls_consistency = ""
//		lstr_pass.s[1] = ls_consistency
//		lstr_pass.s[2] = "CONSISTENCY"
//		lstr_pass.tr_trans = itr_share
//
//		OpenWithParm(w_popup_color_consistency, lstr_pass)
//	
//		lstr_pass = Message.PowerObjectParm
//		IF IsValid(lstr_pass) THEN
//			IF lstr_pass.d[1] = 1 THEN
//				IF ls_consistency <> lstr_pass.s[1] THEN
//					ls_new_consistency = lstr_pass.s[1]
//					This.Object.consistency[row] = ls_new_consistency
//					This.AcceptText()
//					This.SetColumn("consistency")
//					ib_changed_technical = TRUE
//				END IF
//			END IF
//		END IF		
//END CHOOSE
end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))

END IF
end event

event itemchanged;integer	li_rc

li_rc = wf_lab_tech_itemchanged(This, row, dwo.name, data)
ib_changed_technical = TRUE

RETURN li_rc
end event

event itemfocuschanged;IF dwo.name = "source_control" THEN
	this.SetColumn("odor")
END IF

end event

event rowfocuschanged;//IF idw_lab.GetRow() <> currentrow THEN
//	idw_lab.ScrollToRow(currentrow)
//END IF

IF idw_lab.Rowcount() > 0 THEN
	idw_lab.Object.DataWindow.VerticalScrollPosition = idw_technical.Object.Datawindow.VerticalScrollPosition
END IF

IF idw_wcr_technical.Rowcount() > 0 THEN
	idw_wcr_technical.Object.DataWindow.VerticalScrollPosition = idw_technical.Object.Datawindow.VerticalScrollPosition
END IF
end event

event rowfocuschanging;long		ll_profile_id, ll_row_header

// Prevent this from happening
IF This.Rowcount() > 0 AND currentrow > 0 THEN
	ll_profile_id = This.Object.profile_id[currentrow]
	ll_row_header = idw_header.GetRow()
	IF ll_row_header > 0 THEN
		IF idw_header.Object.profile_id[ll_row_header] = ll_profile_id THEN
			RETURN 1
		END IF
	END IF
END IF


end event

event scrollvertical;IF idw_lab.Rowcount() > 0 THEN
	idw_lab.Object.DataWindow.VerticalScrollPosition = scrollpos
END IF

IF idw_wcr_technical.Rowcount() > 0 THEN
	idw_wcr_technical.Object.DataWindow.VerticalScrollPosition = scrollpos
END IF
end event

event ue_lookup;call super::ue_lookup;string	ls_color, ls_consistency, ls_new_color, ls_new_consistency
str_pass	lstr_pass
long	ll_row

wf_accepttext()
If ai_indicate > 1 then
	IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
End If

ll_row = GetRow()


CHOOSE CASE Lower(as_col_name)
		
	CASE "color"
		If ai_indicate < 3 Then
			return 1
		Else
			ls_color = This.Object.color[ll_row]
			IF IsNull(ls_color) THEN ls_color = ""
			lstr_pass.s[1] = ls_color
			lstr_pass.s[2] = "COLOR"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_color <> lstr_pass.s[1] THEN
						ls_new_color = lstr_pass.s[1]
						This.Object.color[ll_row] = ls_new_color
						This.AcceptText()
						This.SetColumn("color")
						ib_changed_technical = TRUE
					END IF
				END IF
			END IF
		End IF
	
	CASE "consistency"
		If ai_indicate < 3 Then
			return 1
		Else
			ls_consistency = This.Object.consistency[ll_row]
			IF IsNull(ls_consistency) THEN ls_consistency = ""
			lstr_pass.s[1] = ls_consistency
			lstr_pass.s[2] = "CONSISTENCY"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_consistency <> lstr_pass.s[1] THEN
						ls_new_consistency = lstr_pass.s[1]
						This.Object.consistency[ll_row] = ls_new_consistency
						This.AcceptText()
						This.SetColumn("consistency")
						ib_changed_technical = TRUE
					END IF
				END IF
			END IF	
		End If
END CHOOSE

return 0
end event

type dw_active_profile from anc_dw within tabpage_technical
event ue_mouse_scroll pbm_vbxevent47
integer width = 4402
integer height = 1980
integer taborder = 50
boolean bringtotop = true
string dataobject = "d_profile_technical_dragon"
end type

event buttonclicked;
Decimal ld_null
Long	ll_row_header, ll_profile_id

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
END IF

SetNull(ld_null)

CHOOSE CASE lower(dwo.name)
	CASE "b_clear_tab"
		This.object.tab[row] = ld_null
		
	CASE ELSE
END CHOOSE

end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
END IF
end event

event itemchanged;call super::itemchanged;boolean	lb_adjoining_ph = TRUE, lb_adjoining_ignitability = TRUE
integer	li_rc=0, li_pos
long		ll_null, ll_profile_id, ll_ignitability_compare_temp
string	ls_ph1, ls_ph2, ls_ph3, ls_ph4, ls_ph5, ls_temp, ls_data, ls_null
string 	ls_ignitability_lt_90, ls_ignitability_90_139, ls_ignitability_140_199, ls_ignitability_gte_200, ls_ignitability_na
string		ls_consistency_solid, ls_consistency_liquid, ls_consistency_dust, ls_consistency_debris, ls_consistency_sludge
string		ls_consistency_gas_aerosol, ls_consistency, ls_ignitability_does_not_flash
decimal	ld_null
dwobject	ldwo

Setnull(ls_null)
Setnull(ll_null)
Setnull(ld_null)

// rb 12/04/2012 Uncommented this, it was commented out, and East Side Only was not working
li_rc = wf_lab_tech_itemchanged(This, row, dwo.name, data)
ib_changed_technical = TRUE

ls_ph1 = GetItemString(row,"ph_lte_2")
ls_ph2 = GetItemString(row,"ph_gt_2_lt_5")
ls_ph3 = GetItemString(row,"ph_gte_5_lte_10")
ls_ph4 = GetItemString(row,"ph_gt_10_lt_12_5")
ls_ph5 = GetItemString(row,"ph_gte_12_5")
IF isNull(ls_ph1) OR (ls_ph1 = "") THEN ls_ph1 = "F"
IF isNull(ls_ph2) OR (ls_ph2 = "") THEN ls_ph2 = "F"
IF isNull(ls_ph3) OR (ls_ph3 = "") THEN ls_ph3 = "F"
IF isNull(ls_ph4) OR (ls_ph4 = "") THEN ls_ph4 = "F"
IF isNull(ls_ph5) OR (ls_ph5 = "") THEN ls_ph5 = "F"

ls_ignitability_lt_90 	= GetItemString(row,"ignitability_lt_90")
ls_ignitability_90_139 	= GetItemString(row,"ignitability_90_139")
ls_ignitability_140_199 = GetItemString(row,"ignitability_140_199")
ls_ignitability_gte_200 = GetItemString(row,"ignitability_gte_200")
ls_ignitability_na 		= GetItemString(row,"ignitability_na")
IF isNull(ls_ignitability_lt_90) OR (ls_ignitability_lt_90 = "") THEN ls_ignitability_lt_90 = "F"
IF isNull(ls_ignitability_90_139) OR (ls_ignitability_90_139 = "") THEN ls_ignitability_90_139 = "F"
IF isNull(ls_ignitability_140_199) OR (ls_ignitability_140_199 = "") THEN ls_ignitability_140_199 = "F"
IF isNull(ls_ignitability_gte_200) OR (ls_ignitability_gte_200 = "") THEN ls_ignitability_gte_200 = "F"

// MPM - 6/12/2020 - DevOps 16233
ll_ignitability_compare_temp = This.Object.ignitability_compare_temperature[row]
ls_ignitability_does_not_flash = This.Object.ignitability_does_not_flash[row]

// COR2-MPM
ls_consistency = Trim(This.Object.consistency[row])
// MPM - 2/26/2021 - DevOps 19177 - After investigation, I found that sometimes the consistency will incorrectly have a colon (':') at its end, 
// e.g., "SOLID:", or "SLUDGE:LIQUID:", so I'm removing it the final colon if it exists.  This seems to be caused, at least in part, by how the 
// consistency string was being built in wf_copy_wcr_dragon, and I've corrected that in that function.
IF Right(ls_consistency, 1) = ':' THEN ls_consistency = Left(ls_consistency, Len(ls_consistency) - 1)

IF ls_consistency = "" THEN SetNull(ls_consistency)
ls_consistency_solid = This.Object.consistency_solid[row]
ls_consistency_dust = This.Object.consistency_dust[row]
ls_consistency_debris = This.Object.consistency_debris[row]
ls_consistency_sludge = This.Object.consistency_sludge[row]
ls_consistency_liquid = This.Object.consistency_liquid[row]
ls_consistency_gas_aerosol = This.Object.consistency_gas_aerosol[row]

// rb 05/08/2012 
choose case dwo.Name
	// SK 07/12/2013		
	CASE "benzene_unit"
		IF upper(data) = 'U' THEN
			this.object.benzene[row] = ll_null
			ldwo = this.Object.benzene
			this.Event itemchanged (row, ldwo, ls_null)
		END IF
		
	case "halogen_source"
		this.Object.halogen_source_desc[row] = ""
		ldwo = this.Object.halogen_source_desc
		this.Event itemchanged (row, ldwo, "")
		
		this.Object.halogen_source_other[row] = ""
		ldwo = this.Object.halogen_source_other
		this.Event itemchanged (row, ldwo, "")
	Case "waste_contains_spec_hand_none"
		If data = "T" Then
			SetItem(row,"shock_sensitive_waste","F")
			SetItem(row,"biohazard","F")
			SetItem(row,"aluminum","F")
			SetItem(row,"free_liquid","F")
			SetItem(row,"oily_residue","F")
			SetItem(row,"asbestos_friable","F")
			SetItem(row,"pyrophoric_waste","F")
			SetItem(row,"metal_fines","F")
			SetItem(row,"dioxins","F")
			SetItem(row,"norm","F")
			SetItem(row,"tenorm","F")
			SetItem(row,"furans","F")
			SetItem(row,"air_reactive","F")
			SetItem(row,"react_cyanide","F")
			SetItem(row,"isocyanates","F")
			SetItem(row,"explosives","F")
			SetItem(row,"radioactive_waste","F")
			SetItem(row,"react_sulfide","F")
			SetItem(row,"water_reactive","F")
			SetItem(row,"asbestos_non_friable","F")
			SetItem(row,"biodegradable_sorbents","F")
			SetItem(row,"temp_ctrl_org_peroxide","F")
			SetItem(row,"section_f_none_apply_flag","T")
		END IF
	Case "section_f_none_apply_flag"
		If data = "T" Then
			SetItem(row,"shock_sensitive_waste","F")
			SetItem(row,"biohazard","F")
			SetItem(row,"aluminum","F")
			SetItem(row,"free_liquid","F")
			SetItem(row,"oily_residue","F")
			SetItem(row,"asbestos_friable","F")
			SetItem(row,"pyrophoric_waste","F")
			SetItem(row,"metal_fines","F")
			SetItem(row,"dioxins","F")
			SetItem(row,"norm","F")
			SetItem(row,"tenorm","F")
			SetItem(row,"furans","F")
			SetItem(row,"air_reactive","F")
			SetItem(row,"react_cyanide","F")
			SetItem(row,"isocyanates","F")
			SetItem(row,"explosives","F")
			SetItem(row,"radioactive_waste","F")
			SetItem(row,"react_sulfide","F")
			SetItem(row,"water_reactive","F")
			SetItem(row,"asbestos_non_friable","F")
			SetItem(row,"biodegradable_sorbents","F")
			SetItem(row,"temp_ctrl_org_peroxide","F")
			SetItem(row,"waste_contains_spec_hand_none","T")
			SetItem(row,"react_sulfide_ppm", ld_null)	//DevOps 16821 Set to null FHC
			SetItem(row, "reactcyanide_ppm", ld_null)	//DevOps 16821 Set to null FHC
		END IF
	CASE "free_liquid", "metal_fines", "water_reactive", "biohazard", "shock_sensitive_waste", "oily_residue" &
				, "dioxins", "furans", "aluminum", "asbestos_non_friable", "asbestos_friable", "radioactive_waste", &
				"air_reactive", "isocyanates", "biodegradable_sorbents", "pyrophoric_waste", "react_sulfide", "react_cyanide" &
				, "explosives", "temp_ctrl_org_peroxide", "norm", "tenorm"
		If data = "T" Then
			SetItem(row,"waste_contains_spec_hand_none","F")
			SetItem(row,"section_f_none_apply_flag","F")
		END IF
	CASE "ph_lte_2"
		ls_ph1 = data
		ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
		lb_adjoining_ph = wf_validate_adjoining(ls_temp)
		this.object.ph_na[row] = 'F'
		IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
	CASE "ph_gt_2_lt_5"
		ls_ph2 = data
		ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
		lb_adjoining_ph = wf_validate_adjoining(ls_temp)
		this.object.ph_na[row] = 'F'
		IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
	CASE "ph_gte_5_lte_10"
		ls_ph3 = data
		ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
		lb_adjoining_ph = wf_validate_adjoining(ls_temp)
		this.object.ph_na[row] = 'F'
		IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
	CASE "ph_gt_10_lt_12_5"
		ls_ph4 = data
		ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
		lb_adjoining_ph = wf_validate_adjoining(ls_temp)
		this.object.ph_na[row] = 'F'
		IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
	CASE "ph_gte_12_5"
		ls_ph5 = data
		ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
		lb_adjoining_ph = wf_validate_adjoining(ls_temp)
		this.object.ph_na[row] = 'F'
		IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
	CASE "ph_na"
		IF upper(data) = 'T' THEN
			this.object.ph_lte_2[row] = 'F'
			this.object.ph_gt_2_lt_5[row] = 'F'
			this.object.ph_gte_5_lte_10[row] = 'F'
			this.object.ph_gt_10_lt_12_5[row] = 'F'
			this.object.ph_gte_12_5[row] = 'F'
			POST wf_set_ph_from_to()
		END IF
	CASE "ignitability_lt_90"
		ls_ignitability_lt_90 = data
		ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
		lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
		IF lb_adjoining_ignitability THEN
			IF ls_ignitability_lt_90 = 'T' THEN
				this.object.ignitability_na[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_na', row, 'F')
				this.object.ignitability_does_not_flash[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_does_not_flash', row, 'F')
			ELSE
				IF ll_ignitability_compare_temp < 90 THEN
					this.object.ignitability_compare_temperature[row] = ll_null
					wf_wcr_profile_map_sync (this, 'ignitability_compare_temperature', row, ls_null)
				END IF
			END IF
			POST wf_set_ignitability()
		END IF
	CASE "ignitability_90_139"
		ls_ignitability_90_139 = data
		ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
		lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
		IF lb_adjoining_ignitability THEN
			IF ls_ignitability_90_139 = 'T' THEN
				this.object.ignitability_na[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_na', row, 'F')
				this.object.ignitability_does_not_flash[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_does_not_flash', row, 'F')
			ELSE
				IF ll_ignitability_compare_temp >= 90 AND ll_ignitability_compare_temp < 140 THEN
					this.object.ignitability_compare_temperature[row] = ll_null
					wf_wcr_profile_map_sync (this, 'ignitability_compare_temperature', row, ls_null)
				END IF
			END IF
			POST wf_set_ignitability()
		END IF
	CASE "ignitability_140_199"
		ls_ignitability_140_199 = data
		ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
		lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
		IF lb_adjoining_ignitability THEN
			IF ls_ignitability_140_199 = 'T' THEN
				this.object.ignitability_na[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_na', row, 'F')
				this.object.ignitability_does_not_flash[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_does_not_flash', row, 'F')
			ELSE
				IF ll_ignitability_compare_temp >= 140 AND ll_ignitability_compare_temp < 200 THEN
					this.object.ignitability_compare_temperature[row] = ll_null
					wf_wcr_profile_map_sync (this, 'ignitability_compare_temperature', row, ls_null)
				END IF
			END IF
			POST wf_set_ignitability()
		END IF
	CASE "ignitability_gte_200"
		ls_ignitability_gte_200 = data
		ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
		lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
		IF lb_adjoining_ignitability THEN
			IF ls_ignitability_gte_200 = 'T' THEN
				this.object.ignitability_na[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_na', row, 'F')
				this.object.ignitability_does_not_flash[row] = 'F'
				wf_wcr_profile_map_sync (this, 'ignitability_does_not_flash', row, 'F')
			ELSE
				IF ll_ignitability_compare_temp >= 200 THEN
					this.object.ignitability_compare_temperature[row] = ll_null
					wf_wcr_profile_map_sync (this, 'ignitability_compare_temperature', row, ls_null)
				END IF
			END IF
			POST wf_set_ignitability()
		END IF
	CASE 'ignitability_na'
		IF upper(data) = 'T' THEN
			this.object.ignitability_lt_90[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_lt_90", row, "F")
			this.object.ignitability_90_139[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "F")
			this.object.ignitability_140_199[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "F")
			this.object.ignitability_gte_200[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_gte_200", row, "F")
			this.object.ignitability_flammable_solid[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_flammable_solid", row, "F")
			this.object.ignitability_compare_temperature[row] = ll_null
			wf_wcr_profile_map_sync (this, "ignitability_compare_temperature", row, ls_null)
			this.object.ignitability_does_not_flash[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")
		END IF
		POST wf_set_ignitability()
	CASE "ignitability_does_not_flash"
		if data = 'T' then
			this.object.ignitability_compare_temperature[row] = ll_null
			wf_wcr_profile_map_sync (this, 'ignitability_compare_temperature', row, ls_null)
			this.object.ignitability_lt_90[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_lt_90", row, "F")
			this.object.ignitability_90_139[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "F")
			this.object.ignitability_140_199[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "F")
			this.object.ignitability_gte_200[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_gte_200", row, "F")
			this.object.ignitability_na[row] = 'F'
			wf_wcr_profile_map_sync (this, 'ignitability_na', row, 'F')
			this.object.ignitability_flammable_solid[row] = 'F'
			wf_wcr_profile_map_sync (this, 'ignitability_flammable_solid', row, 'F')
		end if
		POST wf_set_ignitability()
	CASE "ignitability_flammable_solid"
		IF data = 'T' THEN
			this.object.ignitability_does_not_flash[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")
			this.object.ignitability_na[row] = 'F'
			wf_wcr_profile_map_sync (this, 'ignitability_na', row, 'F')
		END IF
	CASE "ignitability_compare_temperature"
		IF IsNumber(data) THEN
			IF Long(data) < 90 THEN
				This.object.ignitability_lt_90[row] = 'T'
				wf_wcr_profile_map_sync (this, "ignitability_lt_90", row, "T")
				IF ls_ignitability_gte_200 = 'T' AND ls_ignitability_140_199 <> 'T' THEN
					this.object.ignitability_140_199[row] = 'T'
					wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "T")
				END IF
				IF this.object.ignitability_140_199[row] = 'T' AND ls_ignitability_90_139 <> 'T' THEN
					this.object.ignitability_90_139[row] = 'T'
					wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "T")
				END IF
			ELSEIF Long(data) >= 90 AND Long(data) < 140 THEN
				this.object.ignitability_90_139[row] = 'T'
				wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "T")
				IF ls_ignitability_gte_200 = 'T' AND ls_ignitability_140_199 <> 'T' THEN
					this.object.ignitability_140_199[row] = 'T'
					wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "T")
				END IF
			ELSEIF Long(data) >= 140 AND Long(data) < 200 THEN
				this.object.ignitability_140_199[row] = 'T'
				wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "T")
				IF ls_ignitability_lt_90 = 'T' AND ls_ignitability_90_139 <> 'T' THEN
					this.object.ignitability_90_139[row] = 'T'
					wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "T")
				END IF
			ELSEIF Long(data) >= 200 THEN
				this.object.ignitability_gte_200[row] = 'T'
				wf_wcr_profile_map_sync (this, "ignitability_gte_200", row, "T")
				IF ls_ignitability_90_139 = 'T' AND ls_ignitability_140_199 <> 'T' THEN
					this.object.ignitability_140_199[row] = 'T'
					wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "T")
				END IF
				IF ls_ignitability_lt_90 = 'T' AND ls_ignitability_90_139 <> 'T' THEN
					this.object.ignitability_90_139[row] = 'T'
					wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "T")
				END IF
			END IF
			This.object.ignitability_does_not_flash[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")
			This.object.ignitability_na[row] = 'F'
			wf_wcr_profile_map_sync (this, "ignitability_na", row, "F")
		END IF
		POST wf_set_ignitability()	
	CASE 'subject_to_mact_neshap'
		IF upper(data) = 'F' OR upper(data) = 'U' THEN
			this.object.neshap_chem_1[row] = ls_null
			this.object.neshap_chem_2[row] = ls_null
			this.object.neshap_standards_part[row] = 0
			this.object.neshap_subpart[row] = ls_null
		END IF
	
	// SK 07/11/2014
	CASE 'odor_desc'
		IF lower(data) <> 'other' THEN
			this.object.odor_other_desc[row] = ls_null
		END IF
//	Case "univ_rg_na"
//			If data = "T" Then
//				SetItem(row,"universal","F")
//				SetItem(row,"recyclable_commodity","F")
//			End If
//	Case "universal", "recyclable_commodity"
//			If data = "T" Then
//				SetItem(row,"univ_rg_na","F")
//			End If
	// COR2-MPM
	CASE "consistency_solid"
		IF data = 'T' THEN
//			IF ls_consistency_liquid = 'T' THEN
//				// Remove LIQUID from consistency
//				IF Pos(ls_consistency, ':') > 0 THEN
//					// LIQUID plus some other consistency is currently selected, so replace LIQUID with SOLID and sync
//					MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Solid will be selected and Liquid will be unselected.")
//					ls_consistency = Replace (ls_consistency, Pos(ls_consistency, "LIQUID"), 6, "SOLID")
//				ELSE
//					// Just set the consistency to SOLID and sync
//					MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Solid will be selected and Liquid will be unselected.")
//					ls_consistency = 'SOLID'
//				END IF
//				This.Object.consistency[row] = ls_consistency
//				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
//				This.Object.consistency_liquid[row] = 'F'
//				wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
//				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			ELSE
			IF Pos(ls_consistency, ':') > 0 THEN
				// If there are already 2 consistencies selected, set the consistency to "Varies"
				MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
				This.Object.consistency_varies[row] = 'T'
				This.Object.consistency[row] = 'VARIES'
				wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
				wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
				IF ls_consistency_dust = 'T' THEN
					This.Object.consistency_dust[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
				END IF
				IF ls_consistency_debris = 'T' THEN
					This.Object.consistency_debris[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
				END IF
				IF ls_consistency_sludge = 'T' THEN
					This.Object.consistency_sludge[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
				END IF
				IF ls_consistency_liquid = 'T' THEN
					This.Object.consistency_liquid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
				END IF
				IF ls_consistency_gas_aerosol = 'T' THEN
					This.Object.consistency_gas_aerosol[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
				END IF
				// Don't allow the value to change
				RETURN 2
			// If there is no consistency already selected, then set consistency to SOLID and sync 
			ELSEIF IsNull(ls_consistency) THEN
				This.Object.consistency[row] = 'SOLID'
				wf_wcr_profile_map_sync (this, "consistency", row, 'SOLID')
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				IF ls_consistency = 'VARIES' THEN
					// Replace 'VARIES' with 'SOLID' and sync
					This.Object.consistency[row] = 'SOLID'
					wf_wcr_profile_map_sync (this, "consistency", row, 'SOLID')
					This.Object.consistency_varies[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// There is already one consistency selected, so append :SOLID to consistency and sync 
					ls_consistency = ls_consistency + ':SOLID'
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		ELSEIF data = 'F' THEN
			li_pos = Pos(ls_consistency, ':SOLID')
			IF li_pos > 0 THEN
				// Remove :SOLID from consistency and sync 
				ls_consistency = Left(ls_consistency, li_pos - 1)
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSEIF Left(ls_consistency, 6) = 'SOLID:' THEN
				// MPM - 2/26/2021 - DevOps 19177
				// Remove SOLID: from beginning of consistency and sync 
				ls_consistency = Mid(ls_consistency, 7, Len(ls_consistency))
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				// Consistency must be "SOLID", so set the consistency to null and sync
				This.Object.consistency[row] = ls_null
				wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			END IF
		END IF
	CASE "consistency_dust"
		IF data = 'T' THEN
			// If there are already 2 consistencies selected, set the consistency to "Varies"
			IF Pos(ls_consistency, ':') > 0 THEN
				MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
				This.Object.consistency_varies[row] = 'T'
				This.Object.consistency[row] = 'VARIES'
				wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
				wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
				IF ls_consistency_solid = 'T' THEN
					This.Object.consistency_solid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
				END IF
				IF ls_consistency_debris = 'T' THEN
					This.Object.consistency_debris[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
				END IF
				IF ls_consistency_sludge = 'T' THEN
					This.Object.consistency_sludge[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
				END IF
				IF ls_consistency_liquid = 'T' THEN
					This.Object.consistency_liquid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
				END IF
				IF ls_consistency_gas_aerosol = 'T' THEN
					This.Object.consistency_gas_aerosol[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
				END IF
				// Don't allow the value to change
				RETURN 2
			// If there is no consistency already selected, then set consistency to DUST/POWDER and sync 
			ELSEIF IsNull(ls_consistency) THEN
				This.Object.consistency[row] = 'DUST/POWDER'
				wf_wcr_profile_map_sync (this, "consistency", row, 'DUST/POWDER')
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				IF ls_consistency = 'VARIES' THEN
					// Replace 'VARIES' with 'DUST/POWDER' and sync
					This.Object.consistency[row] = 'DUST/POWDER'
					wf_wcr_profile_map_sync (this, "consistency", row, 'DUST/POWDER')
					This.Object.consistency_varies[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// There is already one consistency selected, so append :DUST/POWDER to consistency and sync 
					ls_consistency = ls_consistency + ':DUST/POWDER'
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		ELSEIF data = 'F' THEN
			li_pos = Pos(ls_consistency, ':DUST/POWDER')
			IF li_pos > 0 THEN
				// Remove :DUST/POWDER from consistency and sync 
				ls_consistency = Left(ls_consistency, li_pos - 1)
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSEIF Left(ls_consistency, 12) = 'DUST/POWDER:' THEN
				// MPM - 2/26/2021 - DevOps 19177
				// Remove DUST/POWDER: from beginning of consistency and sync 
				ls_consistency = Mid(ls_consistency, 13, Len(ls_consistency))
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				// Consistency must be "DUST/POWDER", so set the consistency to null and sync
				This.Object.consistency[row] = ls_null
				wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			END IF
		END IF
	CASE "consistency_debris"
		IF data = 'T' THEN
			// If there are already 2 consistencies selected, set the consistency to "Varies"
			IF Pos(ls_consistency, ':') > 0 THEN
				MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
				This.Object.consistency_varies[row] = 'T'
				wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
				This.Object.consistency[row] = 'VARIES'
				wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
				IF ls_consistency_dust = 'T' THEN
					This.Object.consistency_dust[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
				END IF
				IF ls_consistency_solid = 'T' THEN
					This.Object.consistency_solid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
				END IF
				IF ls_consistency_sludge = 'T' THEN
					This.Object.consistency_sludge[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
				END IF
				IF ls_consistency_liquid = 'T' THEN
					This.Object.consistency_liquid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
				END IF
				IF ls_consistency_gas_aerosol = 'T' THEN
					This.Object.consistency_gas_aerosol[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
				END IF
				// Don't allow the value to change
				RETURN 2
			// If there is no consistency already selected, then set consistency to DEBRIS and sync 
			ELSEIF IsNull(ls_consistency) THEN
				This.Object.consistency[row] = 'DEBRIS'
				wf_wcr_profile_map_sync (this, "consistency", row, 'DEBRIS')
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				IF ls_consistency = 'VARIES' THEN
					// Replace 'VARIES' with 'DEBRIS' and sync
					This.Object.consistency[row] = 'DEBRIS'
					wf_wcr_profile_map_sync (this, "consistency", row, 'DEBRIS')
					This.Object.consistency_varies[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// There is already one consistency selected, so append :DEBRIS to consistency and sync 
					ls_consistency = ls_consistency + ':DEBRIS'
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		ELSEIF data = 'F' THEN
			// Remove DEBRIS from consistency and sync 
			li_pos = Pos(ls_consistency, ':DEBRIS')
			IF li_pos > 0 THEN
				// Remove :DEBRIS from consistency
				ls_consistency = Left(ls_consistency, li_pos - 1)
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSEIF Left(ls_consistency, 7) = 'DEBRIS:' THEN
				// MPM - 2/26/2021 - DevOps 19177
				// Remove DEBRIS: from the beginning of consistency
				ls_consistency = Mid(ls_consistency, 8, Len(ls_consistency))
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				// Consistency must be "DEBRIS", so set the consistency to null and sync
				This.Object.consistency[row] = ls_null
				wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			END IF
		END IF
	CASE "consistency_sludge"
		IF data = 'T' THEN
			// If there are already 2 consistencies selected, then set the consistency to "Varies"
			IF Pos(ls_consistency, ':') > 0 THEN
				MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
				This.Object.consistency_varies[row] = 'T'
				wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
				This.Object.consistency[row] = 'VARIES'
				wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
				IF ls_consistency_dust = 'T' THEN
					This.Object.consistency_dust[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
				END IF
				IF ls_consistency_debris = 'T' THEN
					This.Object.consistency_debris[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
				END IF
				IF ls_consistency_solid = 'T' THEN
					This.Object.consistency_solid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
				END IF
				IF ls_consistency_liquid = 'T' THEN
					This.Object.consistency_liquid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
				END IF
				IF ls_consistency_gas_aerosol = 'T' THEN
					This.Object.consistency_gas_aerosol[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
				END IF
				// Don't allow the value to change
				RETURN 2
			// If there is no consistency already selected, then set consistency to SLUDGE and sync 
			ELSEIF IsNull(ls_consistency) THEN
				This.Object.consistency[row] = 'SLUDGE'
				wf_wcr_profile_map_sync (this, "consistency", row, 'SLUDGE')
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				IF ls_consistency = 'VARIES' THEN
					// Replace 'VARIES' with 'SLUDGE' and sync
					This.Object.consistency[row] = 'SLUDGE'
					wf_wcr_profile_map_sync (this, "consistency", row, 'SLUDGE')
					This.Object.consistency_varies[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// There is already one consistency selected, so append :SLUDGE to consistency and sync 
					ls_consistency = ls_consistency + ':SLUDGE'
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		ELSEIF data = 'F' THEN
			li_pos = Pos(ls_consistency, ':SLUDGE')
			IF li_pos > 0 THEN
				// Remove :SLUDGE from consistency and sync 
				ls_consistency = Left(ls_consistency, li_pos - 1)
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSEIF Left(ls_consistency, 7) = 'SLUDGE:' THEN
				// MPM - 2/26/2021 - DevOps 19177
				// Remove SLUDGE: from consistency and sync 
				ls_consistency = Mid(ls_consistency, 8, Len(ls_consistency))
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				// Consistency must be "SLUDGE", so set the consistency to null and sync
				This.Object.consistency[row] = ls_null
				wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			END IF
		END IF
	CASE "consistency_liquid"
		IF data = 'T' THEN
//			IF ls_consistency_solid = 'T' THEN
//				// Remove SOLID from consistency
//				IF Pos(ls_consistency, ':') > 0 THEN
//					// SOLID plus some other consistency is currently selected, so replace SOLID with LIQUID and sync
//					MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Liquid will be selected and Solid will be unselected.")
//					ls_consistency = Replace (ls_consistency, Pos(ls_consistency, "SOLID"), 5, "LIQUID")
//				ELSE
//					// Just set the consistency to LIQUID and sync
//					MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Liquid will be selected and Solid will be unselected.")
//					ls_consistency = 'LIQUID'
//				END IF
//				This.Object.consistency[row] = ls_consistency
//				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
//				This.Object.consistency_solid[row] = 'F'
//				wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
//				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			ELSE
			IF Pos(ls_consistency, ':') > 0 THEN
				// If there are already 2 consistencies selected, then set the consistency to "Varies"
				MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
				This.Object.consistency_varies[row] = 'T'
				wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
				This.Object.consistency[row] = 'VARIES'
				wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
				IF ls_consistency_dust = 'T' THEN
					This.Object.consistency_dust[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
				END IF
				IF ls_consistency_debris = 'T' THEN
					This.Object.consistency_debris[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
				END IF
				IF ls_consistency_sludge = 'T' THEN
					This.Object.consistency_sludge[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
				END IF
				IF ls_consistency_solid = 'T' THEN
					This.Object.consistency_solid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
				END IF
				IF ls_consistency_gas_aerosol = 'T' THEN
					This.Object.consistency_gas_aerosol[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
				END IF
				// Don't allow the value to change
				RETURN 2
			// If there is no consistency already selected, then set consistency to LIQUID and sync 
			ELSEIF IsNull(ls_consistency) THEN
				This.Object.consistency[row] = 'LIQUID'
				wf_wcr_profile_map_sync (this, "consistency", row, 'LIQUID')
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				IF ls_consistency = 'VARIES' THEN
					// Replace 'VARIES' with 'LIQUID' and sync
					This.Object.consistency[row] = 'LIQUID'
					wf_wcr_profile_map_sync (this, "consistency", row, 'LIQUID')
					This.Object.consistency_varies[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// There is already one consistency selected, so append :LIQUID to consistency and sync 
					ls_consistency = ls_consistency + ':LIQUID'
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		ELSEIF data = 'F' THEN
			li_pos = Pos(ls_consistency, ':LIQUID')
			IF li_pos > 0 THEN
				// Remove :LIQUID from consistency and sync 
				ls_consistency = Left(ls_consistency, li_pos - 1)
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSEIF Left(ls_consistency, 7) = 'LIQUID:' THEN
				// MPM - 2/26/2021 - DevOps 19177
				// Remove LIQUID: from consistency and sync 
				ls_consistency = Mid(ls_consistency, 8, Len(ls_consistency))
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				// Consistency must be "LIQUID", so set the consistency to null and sync
				This.Object.consistency[row] = ls_null
				wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			END IF
		END IF
	CASE "consistency_gas_aerosol"
		IF data = 'T' THEN
			// If there are already 2 consistencies selected, set the consistency to "Varies"
			IF Pos(ls_consistency, ':') > 0 THEN
				MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
				This.Object.consistency_varies[row] = 'T'
				wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
				This.Object.consistency[row] = 'VARIES'
				wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
				IF ls_consistency_dust = 'T' THEN
					This.Object.consistency_dust[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
				END IF
				IF ls_consistency_debris = 'T' THEN
					This.Object.consistency_debris[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
				END IF
				IF ls_consistency_sludge = 'T' THEN
					This.Object.consistency_sludge[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
				END IF
				IF ls_consistency_liquid = 'T' THEN
					This.Object.consistency_liquid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
				END IF
				IF ls_consistency_solid = 'T' THEN
					This.Object.consistency_gas_aerosol[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
				END IF
				// Don't allow the value to change
				RETURN 2
			// If there is no consistency already selected, then set consistency to GAS/AEROSOL and sync 
			ELSEIF IsNull(ls_consistency) THEN
				This.Object.consistency[row] = 'GAS/AEROSOL'
				wf_wcr_profile_map_sync (this, "consistency", row, 'GAS/AEROSOL')
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				IF ls_consistency = 'VARIES' THEN
					// Replace 'VARIES' with 'GAS/AEROSOL' and sync
					This.Object.consistency[row] = 'GAS/AEROSOL'
					wf_wcr_profile_map_sync (this, "consistency", row, 'GAS/AEROSOL')
					This.Object.consistency_varies[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// There is already one consistency selected, so append :GAS/AEROSOL to consistency and sync 
					ls_consistency = ls_consistency + ':GAS/AEROSOL'
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		ELSEIF data = 'F' THEN
			li_pos = Pos(ls_consistency, ':GAS/AEROSOL')
			IF li_pos > 0 THEN
				// Remove :GAS/AEROSOL from consistency and sync 
				ls_consistency = Left(ls_consistency, li_pos - 1)
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSEIF Left(ls_consistency, 12) = 'GAS/AEROSOL:' THEN
				// MPM - 2/26/2021 - DevOps 19177
				// Remove GAS/AEROSOL: from beginning of consistency and sync 
				ls_consistency = Mid(ls_consistency, 13, Len(ls_consistency))
				This.Object.consistency[row] = ls_consistency
				wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				// Consistency must be "GAS/AEROSOL", so set the consistency to null and sync
				This.Object.consistency[row] = ls_null
				wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			END IF
		END IF
	CASE "consistency_varies"
		IF data = 'T' THEN
			// Uncheck any other consistencies and sync
			IF ls_consistency_solid = 'T' THEN
				This.Object.consistency_solid[row] = 'F'
				wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
			END IF
			IF ls_consistency_dust = 'T' THEN
				This.Object.consistency_dust[row] = 'F'
				wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
			END IF
			IF ls_consistency_debris = 'T' THEN
				This.Object.consistency_debris[row] = 'F'
				wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
			END IF
			IF ls_consistency_sludge = 'T' THEN
				This.Object.consistency_sludge[row] = 'F'
				wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
			END IF
			IF ls_consistency_liquid = 'T' THEN
				This.Object.consistency_liquid[row] = 'F'
				wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
			END IF
			IF ls_consistency_gas_aerosol = 'T' THEN
				This.Object.consistency_gas_aerosol[row] = 'F'
				wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
			END IF
			This.Object.consistency[row] = 'VARIES'
			wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		ELSE
			// Set consistency to null and sync
			This.Object.consistency[row] = ls_null
			wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		END IF
	CASE "handling_issue"
		if data <> 'T' then
			this.Object.handling_issue_desc[row] = ls_null
			wf_wcr_profile_map_sync (this, 'handling_issue_desc', row, ls_null)
		end if

END CHOOSE

IF NOT lb_adjoining_ph OR NOT lb_adjoining_ignitability THEN 
	li_rc = 1	
ELSE
	// rb 04/24/2012
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
END IF

RETURN li_rc
end event

event ue_lookup;call super::ue_lookup;int		li_hdr_row
long		ll_row
string	ls_color, ls_consistency, ls_new_color, ls_new_consistency, ls_curr_status_code
str_pass	lstr_pass

wf_accepttext()
li_hdr_row = idw_header.getrow()
IF li_hdr_row > 0 THEN ls_curr_status_code = Upper(idw_header.object.curr_status_code[li_hdr_row])
IF ai_indicate > 1 THEN
	//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
	IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 0
	
	IF is_access = 'L' AND ls_curr_status_code = 'A' THEN RETURN 0
END IF

ll_row = GetRow()

CHOOSE CASE Lower(as_col_name)
		
	CASE "color"
		IF ai_indicate < 3 THEN
			RETURN 1
		ELSE
			ls_color = This.Object.color[ll_row]
			IF IsNull(ls_color) THEN ls_color = ""
			lstr_pass.s[1] = ls_color
			lstr_pass.s[2] = "COLOR"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_color <> lstr_pass.s[1] THEN
						ls_new_color = lstr_pass.s[1]
						This.Object.color[ll_row] = ls_new_color
						This.AcceptText()
						This.SetColumn("color")
						ib_changed_technical = TRUE
					END IF
				END IF
			END IF
		End IF

// COR2-MPM
//	CASE "consistency"
//		IF ai_indicate < 3 THEN
//			return 1
//		ELSE
//			ls_consistency = This.Object.consistency[ll_row]
//			IF IsNull(ls_consistency) THEN ls_consistency = ""
//			lstr_pass.s[1] = ls_consistency
//			lstr_pass.s[2] = "CONSISTENCY"
//			lstr_pass.tr_trans = itr_share
//	
//			OpenWithParm(w_popup_color_consistency, lstr_pass)
//		
//			lstr_pass = Message.PowerObjectParm
//			IF IsValid(lstr_pass) THEN
//				IF lstr_pass.d[1] = 1 THEN
//					IF ls_consistency <> lstr_pass.s[1] THEN
//						ls_new_consistency = lstr_pass.s[1]
//						This.Object.consistency[ll_row] = ls_new_consistency
//						This.AcceptText()
//						This.SetColumn("consistency")
//						ib_changed_technical = TRUE
//					END IF
//				END IF
//			END IF	
//		END IF
END CHOOSE

RETURN 0
end event

event itemerror;call super::itemerror;// rb 06/26/2012 blanking out these fields was giving dw error
string ls_col
decimal ld_null

SetNull(ld_null)

ls_col = dwo.name
choose case lower(ls_col)

	case "btu_per_lb", "ph_from", "ph_to", "tab"

		if data <> "" then
			MessageBox("Validation Error","Numeric value required")
		end if
		post SetItem(row,ls_col,ld_null)
		return 1
	case 'ph_lte_2', 'ph_gt_2_lt_5', 'ph_gte_5_lte_10', 'ph_gt_10_lt_12_5', 'ph_gte_12_5'
		MessageBox("Validation Error","Selected ph values must form a continuous range~r~nwith no breaks between selected items")
		post SetItem(row,ls_col,ld_null)
		return 1
	case 'pcb_concentration_0_49', 'pcb_concentration_50_499', 'pcb_concentration_500'
		MessageBox("Validation Error","Selected PCB concentration values must form a continuous range~r~nwith no breaks between selected items")
		post SetItem(row,ls_col,ld_null)
		return 1
	case 'ignitability_lt_90', 'ignitability_90_139', 'ignitability_140_199', 'ignitability_gte_200'
		MessageBox("Validation Error","Selected Ignitability values must form a continuous range~r~nwith no breaks between selected items")
		post SetItem(row,ls_col,ld_null)
		return 1

	// rb 12/04/2012 Itemchanged validation error on AcceptText()
	case "neshap_standards_part"
		return 1

end choose

return 0
end event

type dw_profile_radioactive_waste from anc_dw within tabpage_technical
integer x = 2149
integer y = 592
integer width = 1545
integer height = 88
integer taborder = 80
boolean bringtotop = true
string dataobject = "d_profile_radioactive_waste"
end type

event constructor;call super::constructor;idw_profile_radioactive_waste = This
end event

type tabpage_waste from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Waste"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_wcr_waste dw_wcr_waste
dw_waste dw_waste
dw_waste_code_fed dw_waste_code_fed
dw_waste_code_state dw_waste_code_state
dw_waste_code_eq dw_waste_code_eq
dw_waste_profilelab dw_waste_profilelab
dw_waste_other dw_waste_other
end type

on tabpage_waste.create
this.dw_wcr_waste=create dw_wcr_waste
this.dw_waste=create dw_waste
this.dw_waste_code_fed=create dw_waste_code_fed
this.dw_waste_code_state=create dw_waste_code_state
this.dw_waste_code_eq=create dw_waste_code_eq
this.dw_waste_profilelab=create dw_waste_profilelab
this.dw_waste_other=create dw_waste_other
this.Control[]={this.dw_wcr_waste,&
this.dw_waste,&
this.dw_waste_code_fed,&
this.dw_waste_code_state,&
this.dw_waste_code_eq,&
this.dw_waste_profilelab,&
this.dw_waste_other}
end on

on tabpage_waste.destroy
destroy(this.dw_wcr_waste)
destroy(this.dw_waste)
destroy(this.dw_waste_code_fed)
destroy(this.dw_waste_code_state)
destroy(this.dw_waste_code_eq)
destroy(this.dw_waste_profilelab)
destroy(this.dw_waste_other)
end on

type dw_wcr_waste from datawindow within tabpage_waste
boolean visible = false
integer y = 1760
integer width = 4411
integer height = 224
integer taborder = 10
boolean enabled = false
string dataobject = "d_profile_wcr_waste_code"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_waste from datawindow within tabpage_waste
integer x = 3301
integer y = 884
integer width = 1120
integer height = 84
integer taborder = 40
boolean bringtotop = true
string dataobject = "d_profile_waste_code"
boolean border = false
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;boolean	lb_access_ok
datetime	ldt_today, ldt_null
integer	li_idx, li_option, li_rc, li_count, li_sequence_id, li_response, li_company_id, li_include
long		ll_profile_id, ll_row, ll_row_header, ll_row_waste, ll_rowcount, ll_row_find, ll_row_approval, ll_waste_code_uid
long     ll_default_sequence_id
string	ls_where, ls_find, ls_waste_code, ls_primary_flag, ls_sort, ls_null, ls_approval, ls_haz_flag
string	ls_and, ls_msg_waste, ls_access, ls_state, ls_waste_code_origin, ls_seq_flag, ls_short_waste_code
str_pick	lstr_pick
str_pass lstr_pass
str_waste_code lstr_waste
dwItemStatus ldwItemStatus

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
	ls_waste_code = idw_header.Object.waste_code[ll_row_header]
	ll_waste_code_uid = idw_header.Object.waste_code_uid[ll_row_header]
	ls_where = ""
END IF

SetNull(ldt_null)
SetNull(ls_null)

CHOOSE CASE dwo.name
	CASE 'b_wc_preview'
		// This is disabled not visible to the user. We can add it in a later phase if required!
		// If there are unsaved changes, return
		//	IF wf_check_changes() < 0 THEN RETURN
		
		
	CASE "b_assign"
		lstr_pick.s_window_title			= "Waste Code Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		lstr_pick.i_tab_count				= 7
		lstr_pick.s_retrieve_by[1]		= "waste_code"
		lstr_pick.s_retrieve_by[2]		= "waste_code_desc"
		lstr_pick.s_button_text[1]		= "Select"
		lstr_pick.s_button_text[2]		= "All"
		lstr_pick.s_button_text[3]		= "All (This Tab Only)"
		lstr_pick.i_return_column_count	= 9
		lstr_pick.to_transaction			= itr_share
		
		ls_where = wf_build_waste_code_where()
		IF ls_where > "" THEN
			ls_and = " AND "
		ELSE
			ls_and = ""
		END IF
		ls_where += ls_and

		// rb 07/12/2012 If called form WPF Haz or Non Haz tabs, restrict list
		if tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_wcr then
			choose case tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.dataobject

				case "d_profile_hazardous_wastes_form"
					ls_where += "WasteCode.haz_flag = 'T' AND "

				case "d_profile_non_hazardous_wastes_form"
					ls_where += "WasteCode.haz_flag = 'F' AND "

			end choose
		end if

		FOR li_idx = 1 TO 7
			CHOOSE CASE li_idx
				CASE 1
					lstr_pick.s_tab_title[li_idx]	= 'D Series'
					lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'D' AND WasteCode.waste_code_origin = 'F' "	
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				CASE 2
					lstr_pick.s_tab_title[li_idx]	= 'P Series'
					lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'P' AND WasteCode.waste_code_origin = 'F' AND pcb_flag <> 'T' "
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				CASE 3
					lstr_pick.s_tab_title[li_idx]	= 'U Series'
					lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'U' AND WasteCode.waste_code_origin = 'F' "				
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				CASE 4
					lstr_pick.s_tab_title[li_idx]	= 'K Series'
					lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'K' AND WasteCode.waste_code_origin = 'F' "				
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				CASE 5
					lstr_pick.s_tab_title[li_idx]	= 'F Series'
					lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'F' AND WasteCode.waste_code_origin = 'F' "	
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				CASE 6
					lstr_pick.s_tab_title[li_idx]	= 'State'
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code_state"
					lstr_pick.s_where[li_idx] = ls_where + "WasteCode.waste_code_origin = 'S'"
				CASE 7
					lstr_pick.s_tab_title[li_idx]	= 'Internal'
					lstr_pick.s_where[li_idx] = ls_where + "WasteCode.waste_code_origin = 'E'"
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"

			END CHOOSE
			lstr_pick.i_tabpage_type[li_idx]	= 1
			
			lstr_pick.s_new_reference[li_idx] = ""
		NEXT
		
		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
			
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// Get return values
				ls_waste_code = string(lstr_pick.return1[li_idx])
				ls_state      = string(lstr_pick.return5[li_idx])
				ll_waste_code_uid = Long(lstr_pick.return6[li_idx])
				ll_default_sequence_id = Long(lstr_pick.return7[li_idx])
				ls_waste_code_origin = String(lstr_pick.return8[li_idx])
				ls_short_waste_code	= String(lstr_pick.return9[li_idx])
				// MPM - 4/26/2021 - DevOps 19913 - Added haz_flag
				ls_haz_flag	= String(lstr_pick.return3[li_idx])
				
				ls_find = "waste_code_uid= " + String(ll_waste_code_uid) + ""
				// Add new waste codes to the proper dw -- Fed/State/EQ
				CHOOSE CASE Upper(ls_waste_code_origin)
					CASE 'F'
						ll_row_waste = idw_waste_code_fed.Find(ls_find, 1, idw_waste_code_fed.RowCount()+1)
						IF ll_row_waste > 0 THEN
							CONTINUE
						ELSE
							ll_row_waste = idw_waste_code_fed.InsertRow(0)
							idw_waste_code_fed.Object.waste_code[ll_row_waste] = ls_waste_code
							idw_waste_code_fed.Object.waste_code_uid[ll_row_waste] = ll_waste_code_uid
							idw_waste_code_fed.Object.sequence_flag[ll_row_waste] = 'F'
							IF ll_row_waste <= ii_top6 THEN
								idw_waste_code_fed.object.include[ll_row_waste] = 1
								idw_waste_code_fed.object.sequence_id[ll_row_waste] = ll_row_waste
							ELSE
								idw_waste_code_fed.object.include[ll_row_waste] = 0
							END IF
							idw_waste_code_fed.object.primary_flag[ll_row_waste] = 'F'
							idw_waste_code_fed.object.default_sequence_id[ll_row_waste] = ll_default_sequence_id
							idw_waste_code_fed.object.profilewastecode_waste_code[ll_row_waste] = ls_short_waste_code
							idw_waste_code_fed.object.status[ll_row_waste] = 'A'
							//idw_waste_code_fed.object.sequence_id[ll_row_waste] = ll_row_waste
							// MPM - 4/26/2021 - DevOps 19913 - Added haz_flag
							idw_waste_code_fed.object.haz_flag[ll_row_waste] = ls_haz_flag
							ib_changed_waste_code = TRUE
						END IF	
						
					CASE 'S'
						ll_row_waste = idw_waste_code_state.Find(ls_find, 1, idw_waste_code_state.RowCount()+1)
						IF ll_row_waste > 0 THEN
							CONTINUE
						ELSE
							ll_row_waste = idw_waste_code_state.InsertRow(0)
							idw_waste_code_state.Object.waste_code[ll_row_waste] = ls_waste_code
							idw_waste_code_state.Object.waste_code_uid[ll_row_waste] = ll_waste_code_uid
							idw_waste_code_state.Object.sequence_flag[ll_row_waste] = 'A'
							idw_waste_code_state.Object.state[ll_row_waste] = ls_state
							idw_waste_code_state.object.primary_flag[ll_row_waste] = 'F'
							idw_waste_code_state.object.default_sequence_id[ll_row_waste] = ll_default_sequence_id
							idw_waste_code_state.object.profilewastecode_waste_code[ll_row_waste] = ls_short_waste_code
							idw_waste_code_state.object.status[ll_row_waste] = 'A'
							//idw_waste_code_state.object.sequence_id[ll_row_waste] = ll_row_waste
							// MPM - 4/26/2021 - DevOps 19913 - Added haz_flag
							idw_waste_code_state.object.haz_flag[ll_row_waste] = ls_haz_flag
							ib_changed_waste_code = TRUE
						END IF	
						
					CASE 'E'
						ll_row_waste = idw_waste_code_eq.Find(ls_find, 1, idw_waste_code_eq.RowCount()+1)
						IF ll_row_waste > 0 THEN
							CONTINUE
						ELSE
							ll_row_waste = idw_waste_code_eq.InsertRow(0)
							idw_waste_code_eq.Object.waste_code[ll_row_waste] = ls_waste_code
							idw_waste_code_eq.Object.waste_code_uid[ll_row_waste] = ll_waste_code_uid
							idw_waste_code_eq.Object.sequence_flag[ll_row_waste] = 'O'
							IF ll_row_waste <= ii_top6 THEN
								idw_waste_code_eq.Object.include[ll_row_waste] = 1
							ELSE
								idw_waste_code_eq.Object.include[ll_row_waste] = 0
							END IF
							idw_waste_code_eq.object.primary_flag[ll_row_waste] = 'F'
							idw_waste_code_eq.object.default_sequence_id[ll_row_waste] = ll_default_sequence_id
							idw_waste_code_eq.object.profilewastecode_waste_code[ll_row_waste] = ls_short_waste_code
							idw_waste_code_eq.object.status[ll_row_waste] = 'A'
							//idw_waste_code_state.object.sequence_id[ll_row_waste] = ll_row_waste
							ib_changed_waste_code = TRUE
						END IF	
						
					CASE ELSE
						// dont do anything
				END CHOOSE
			NEXT
		END IF

	CASE "b_delete"
		lstr_pass.s[1] = "Delete Waste Codes"
		lstr_pass.s[2] = "Select Delete Option"
		lstr_pass.s[3] = "All Waste Codes except the ones available for Manifest printing"
		lstr_pass.s[4] = "All Waste Codes"
		lstr_pass.d[1] = 1 
		
		OpenWithParm(w_popup_any2_options, lstr_pass)
		
		li_option = Message.DoubleParm
		ls_msg_waste = ''
		IF li_option = 1 OR li_option = 2  THEN
			// Delete All waste codes first except ones available for manifest print
			// (i.e fed, eq codes with include=1 or state codes with sequence_flag = B/A)
			//Loop through Federals
			ll_rowcount = idw_waste_code_fed.RowCount()
			FOR ll_row = ll_rowcount TO 1 STEP -1
				li_include = idw_waste_code_fed.object.include[ll_row]
				IF li_include=0 OR IsNull(li_include) THEN
					ldwItemStatus = idw_waste_code_fed.GetItemStatus(ll_row, 0, Primary!)
					IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) then
						idw_waste_code_fed.RowsDiscard(ll_row, ll_row, Primary!)
					ELSE
						wf_audit(idw_waste_code_fed, ll_profile_id, ll_row, TRUE)
						idw_waste_code_fed.DeleteRow (ll_row)
					END IF
					ib_changed_waste_code = TRUE
				END IF
			NEXT
			//Loop through State waste codes
			ll_rowcount = idw_waste_code_state.RowCount()
			FOR ll_row = ll_rowcount TO 1 STEP -1
				ls_seq_flag = Upper(idw_waste_code_state.object.sequence_flag[ll_row])
				IF ls_seq_flag='O' OR IsNull(ls_seq_flag) THEN
					ldwItemStatus = idw_waste_code_state.GetItemStatus(ll_row, 0, Primary!)
					IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) then
						idw_waste_code_state.RowsDiscard(ll_row, ll_row, Primary!)
					ELSE
						wf_audit(idw_waste_code_state, ll_profile_id, ll_row, TRUE)
						idw_waste_code_state.DeleteRow (ll_row)
					END IF
					ib_changed_waste_code = TRUE
				END IF
			NEXT
			//Loop through EQ
			ll_rowcount = idw_waste_code_eq.RowCount()
			FOR ll_row = ll_rowcount TO 1 STEP -1
				li_include = idw_waste_code_eq.object.include[ll_row]
				IF li_include=0 OR IsNull(li_include) THEN
					ldwItemStatus = idw_waste_code_eq.GetItemStatus(ll_row, 0, Primary!)
					IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) then
						idw_waste_code_eq.RowsDiscard(ll_row, ll_row, Primary!)
					ELSE
						wf_audit(idw_waste_code_eq, ll_profile_id, ll_row, TRUE)
						idw_waste_code_eq.DeleteRow (ll_row)
					END IF
					ib_changed_waste_code = TRUE
				END IF
			NEXT
		END IF

		IF li_option = 2 THEN
			// Delete remaining waste codes too, ie the available for manifest printing
			ll_rowcount = idw_waste_code_fed.RowCount()
			FOR ll_row = ll_rowcount TO 1 STEP -1
				ldwItemStatus = idw_waste_code_fed.GetItemStatus(ll_row, 0, Primary!)
				IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) then
					idw_waste_code_fed.RowsDiscard(ll_row, ll_row, Primary!)
				ELSE
					wf_audit(idw_waste_code_fed, ll_profile_id, ll_row, TRUE)
					idw_waste_code_fed.DeleteRow (ll_row)
				END IF
				ib_changed_waste_code = TRUE
			NEXT
			//Loop through State waste codes
			ll_rowcount = idw_waste_code_state.RowCount()
			FOR ll_row = ll_rowcount TO 1 STEP -1
				ldwItemStatus = idw_waste_code_state.GetItemStatus(ll_row, 0, Primary!)
				IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) then
					idw_waste_code_state.RowsDiscard(ll_row, ll_row, Primary!)
				ELSE
					wf_audit(idw_waste_code_state, ll_profile_id, ll_row, TRUE)
					idw_waste_code_state.DeleteRow (ll_row)
				END IF
				ib_changed_waste_code = TRUE
			NEXT
			//Loop through EQ
			ll_rowcount = idw_waste_code_eq.RowCount()
			FOR ll_row = ll_rowcount TO 1 STEP -1
				ldwItemStatus = idw_waste_code_eq.GetItemStatus(ll_row, 0, Primary!)
				IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) then
					idw_waste_code_eq.RowsDiscard(ll_row, ll_row, Primary!)
				ELSE
					wf_audit(idw_waste_code_eq, ll_profile_id, ll_row, TRUE)
					idw_waste_code_eq.DeleteRow (ll_row)
				END IF
				ib_changed_waste_code = TRUE
			NEXT
		END IF
		
	CASE ELSE
END CHOOSE
			
IF ib_changed_waste_code THEN
	//Sort and Groupcalc
	idw_waste_code_fed.Sort()
	idw_waste_code_state.Sort()
	idw_waste_code_eq.Sort()
	idw_waste_code_state.Groupcalc()
	
	wf_top6_renumber()
	wf_set_waste_code_sequence(idw_waste_code_state)
	wf_set_waste_code_sequence(idw_waste_code_eq)
	POST wf_set_primary_waste_code()
		
	// rb 12/05/2012 The instance vars that WCR reference need to be updated
	Post wf_populate_wastecodes_wcr ('all')
	// set the answers for parent questions rcra listed, rcra characteristic, state haz and state nonhaz 
	Post wf_wcr_set_waste_code_answers ()
	POST wf_set_rcra_haz_flag()

END IF
end event

event doubleclicked;//// SK 08/15 This DW IS NOT BEING USED ANYMORE TO SHOW WASTE CODES
//
//boolean	lb_access_ok
//integer	li_response, li_sequence_id, li_idx, li_null, li_company_id, li_rc
//long		ll_row_header, ll_rows, ll_row_find, ll_row_approval, ll_profile_id, ll_waste_code_uid
//string	ls_object, ls_waste_code, ls_primary, ls_find, ls_access
//dwItemStatus ldwItemStatus
//
// IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN
//
//// Can user change waste code?
//li_rc = wf_access_waste_const()
//IF li_rc = gi_failure THEN
//	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
//	RETURN
//END IF	
//
//// Check for header line on Active approval
//ll_row_header = idw_header.GetRow() 
//IF ll_row_header <= 0 THEN 
//	RETURN
//ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
//	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
//	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
//	RETURN
//ELSE
//	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
//END IF
//SetNull(li_null)
//
//
//ls_object = Lower(dwo.name)
//
//IF Len(ls_object) > 0 THEN
//	// The substring is used because there are 10 fields and they end in _XX
//	IF Lower(Left(ls_object, 10)) = "waste_code" THEN
//		
//		ll_rows = This.RowCount()
//		IF (row > 0) AND (row <= ll_rows) THEN
//			// Make sure they want to delete this row
//			ls_waste_code = idw_waste.Object.waste_code[row]
//			ll_waste_code_uid = idw_waste.Object.waste_code_uid[row]
//			
//			ls_primary = idw_waste.Object.primary_flag[row]
//			IF ls_primary = "F" THEN
//				li_response = MessageBox(gs_app_name + ":  Delete Secondary Waste Code", "Are you sure you want to delete Secondary Waste Code " + ls_waste_code + "?", Question!, YesNo!, 2)
//			ELSE				
//				li_response = MessageBox(gs_app_name + ":  Delete Primary Waste Code", "Are you sure you want to delete Primary Waste Code " + ls_waste_code + "?", Question!, YesNo!, 2)
//			END IF
//			IF li_response = 1 THEN
//
//				// Was this waste code in the top 6?
//				li_sequence_id = This.Object.sequence_id[row]
//				IF NOT IsNull(li_sequence_id) THEN
//					This.Object.primary_flag[row] = 'F'
//					This.Object.sequence_id[row] = li_null
//					wf_top6_renumber()
//					
//					// Look for the primary
//					ls_find = "sequence_id = 1"
//					ll_row_find = This.Find(ls_find, 1, This.RowCount() + 1)
//					IF ll_row_find > 0 THEN
//						ls_waste_code = This.Object.waste_code[ll_row_find]
//						ll_waste_code_uid = This.Object.waste_code_uid[ll_row_find]
//					ELSE
//						SetNull(ls_waste_code)
//						SetNull(ll_waste_code_uid)
//					END IF
//					Post wf_sync_waste_code(ll_waste_code_uid, ls_waste_code, FALSE)
//				END IF
//			
//				// Delete this Waste Code
//				ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
//				IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
//					This.RowsDiscard(row, row, Primary!)
//				ELSE
//					wf_audit(idw_waste, ll_profile_id, row, TRUE)
//					This.DeleteRow(row)
//				END IF 
//				ib_changed_waste_code = TRUE
//				wf_top6_renumber()
//			END IF
//		END IF
//	END IF
//END IF
//
//// rb 07/13/2012 Set waste code WPF answers
//Post wf_wcr_set_waste_code_answers ()
//
end event

event itemchanged;// SK 08/15 This DW IS NOT BEING USED ANYMORE TO SHOW WASTE CODES

////boolean	lb_access_ok
//integer	li_sequence_id, li_include, li_count, li_rc, li_pos, li_null
//long		ll_row_header, ll_row, ll_row_find, ll_row_approval, ll_waste_code_uid
//string	ls_find, ls_null, ls_waste_code, ls_column
////datetime	ldt_null
//
//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 1
//
//// Can user change waste code?
//li_rc = wf_access_waste_const()
//IF li_rc = gi_failure THEN
//	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
//	RETURN 2
//END IF	
//
//// Check for header line on Active approval
//ll_row_header = idw_header.GetRow() 
//IF ll_row_header <= 0 THEN 
//	RETURN 1
//ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
//	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
//	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
//	RETURN 1
//END IF
//
//SetNull(ls_null)
//SetNull(li_null)
////SetNull(ldt_null)
//
//li_pos = Pos(dwo.name, "_")
//ls_column = LEFT(dwo.name, li_pos - 1)
//
//CHOOSE CASE ls_column
//	CASE "include"
//		li_include = Integer(data)
//
//		IF li_include = 1 THEN
//			li_count = 0
//			For ll_row = 1 To This.RowCount()
//				If This.Object.include[ll_row] = 1 Then
//					li_count ++
//					If li_count = ii_top6 Then
//						MessageBox(gs_app_name+": Top 6 Waste Codes", "Please de-select a waste code to add a new waste code to the Top 6.", Exclamation!)
//						RETURN 2
//					End If
//				End If
//			Next
//
//			//li_count must be less than ii_top6
//			This.Object.sequence_id[row] = li_count + 1
//			If This.Object.sequence_id[row] = 1 Then
//				This.Object.primary_flag[row] = 'T'
//				ls_waste_code = This.Object.waste_code[row]
//				ll_waste_code_uid = This.object.waste_code_uid[row]
//				Post wf_sync_waste_code(ll_waste_code_uid, ls_waste_code, FALSE)
//			End If	
//
//		Else
//			// Deselect
//			li_sequence_id = This.Object.sequence_id[row]
//			This.Object.sequence_id[row] = li_null
//			// renumber
//			For ll_row = 1 To This.RowCount()
//				If This.Object.sequence_id[ll_row] > li_sequence_id Then
//					This.Object.sequence_id[ll_row] = This.Object.sequence_id[ll_row] - 1
//					If This.Object.sequence_id[ll_row] = 1 Then
//						This.Object.primary_flag[ll_row] = 'T'
//					End IF
//				End If
//			Next
//			
//			If li_sequence_id = 1 Then
//				This.Object.primary_flag[row] = 'F'
//				// primary changed, sync with the new primary waste code
//				ls_find = "sequence_id = 1"
//				ll_row_find = This.Find(ls_find, 1, This.RowCount() + 1)
//				IF ll_row_find > 0 THEN
//					ls_waste_code = This.Object.waste_code[ll_row_find]
//					ll_waste_code_uid = This.Object.waste_code_uid[ll_row_find]
//				ELSE
//					SetNull(ls_waste_code)
//					SetNull(ll_waste_code_uid)
//				END IF
//				Post wf_sync_waste_code(ll_waste_code_uid, ls_waste_code, FALSE)
//			End IF
//		End If
//	CASE ELSE
//END CHOOSE
//
//Post wf_top6_show()
//
////CHOOSE CASE ls_column
////	CASE "include"
////		li_include = Integer(data)
////		
////		// User is adding a waste code to the top 6
////		IF li_include = 1 THEN
////			
////			// Count the top6 waste codes
////			li_count = 0
////			ls_find = "include = 1"
////			ll_row_find = 1
////			DO WHILE ll_row_find > 0
////				ll_row_find = idw_waste.Find(ls_find, ll_row_find, idw_waste.RowCount() + 1)
////				IF ll_row_find > 0 THEN
////					li_count++
////					ll_row_find++
////				END IF
////			LOOP
////
////			// Set the first pick as primary
////			IF li_count = 0 THEN
////				ls_waste_code = This.Object.waste_code[row]
////				Post wf_sync_waste_code(ls_waste_code, FALSE)
////				
////			// Reject if there are already 6 picked
////			ELSEIF li_count = ii_top6 THEN
////				MessageBox(gs_app_name+": Top 6 Waste Codes", "Please de-select a waste code to add a new waste code to the Top 6.", Exclamation!)
////				This.Object.include[row] = 0
////				RETURN 2
////			ELSE
////				// Set this one 
////				This.Object.sequence_id[row] = li_count + 1
////			END IF
////
////		// User deselecting this from the Top 6
////		ELSE
////			li_rc = gi_success
////			// Renumber
////			li_sequence_id = This.Object.sequence_id[row]
////
////			// Check to see if this change will unconfirm pricing
////			IF li_sequence_id = 1 THEN
////				ls_find = "sequence_id = 2"
////				ll_row_find = This.Find(ls_find, 1, This.RowCount() + 1)
////				IF ll_row_find > 0 THEN
////					ls_waste_code = This.Object.waste_code[ll_row_find]
////				END IF
////				
////				FOR ll_row_approval = 1 to idw_approval.RowCount()
////					li_rc = wf_set_sr_type_code(ls_waste_code, ll_row_approval)
////					IF li_rc = gi_failure THEN
////						This.Object.include[row] = 1
////						EXIT
////					END IF
////				NEXT
////			END IF
////			
////			// Deselect
////			IF li_rc = gi_success THEN
////				This.Object.primary_flag[row] = 'F'
////				This.Object.sequence_id[row] = li_null
////	
////				// Look for the primary to reset
////				IF li_sequence_id = 1 THEN
////					// Deselected the primary
////					wf_top6_renumber()
////	
////					// Find the new primary
////					ls_find = "sequence_id = 1"
////					ll_row_find = This.Find(ls_find, 1, This.RowCount() + 1)
////					IF ll_row_find > 0 THEN
////						ls_waste_code = This.Object.waste_code[ll_row_find]
////					ELSE
////						SetNull(ls_waste_code)
////					END IF
////					Post wf_sync_waste_code(ls_waste_code, FALSE)
////				END IF
////			END IF
////		END IF
////		
////	CASE ELSE
////END CHOOSE
////
////Post wf_top6_renumber()
end event

type dw_waste_code_fed from datawindow within tabpage_waste
integer y = 968
integer width = 2222
integer height = 1000
integer taborder = 50
boolean bringtotop = true
string dataobject = "d_profile_waste_code_federal"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;boolean	lb_access_ok, lb_unconfirmed_price_msg = FALSE
datetime	ldt_today, ldt_null
decimal{4}  ld_percentage_price, lc_price
integer	li_idx, li_option, li_rc, li_count, li_sequence_id, li_response, li_compnay_id, li_tab_cnt, li_null,li_profit_ctr_id,li_last_tab,i,li_seq = 1
long		ll_profile_id, ll_row, ll_row_header, ll_row_waste, ll_rowcount, ll_row_find, ll_row_approval, ll_waste_code_uid,ll_price_disposal_rowcount
Long		ll_default_sequence_id,li_prod_company_id,li_prod_profit_ctr_id,ll_product_id,ll_price_rowcount,ll_rownew,ll_seq_approval_row,ll_disposal_seq_id
string	ls_where, ls_find, ls_waste_code, ls_primary_flag, ls_sort, ls_null, ls_approval, ls_haz_flag,ls_currency_code,ls_generic_flag,ls_optional_flag, ls_state
string	ls_and, ls_msg_waste, ls_access, ls_short_waste_code,ls_facility_tabpage,ls_disposal_bill_unit,ls_price_filter,ls_labpack_flag,ls_prod_description
str_pick	lstr_pick
str_pass lstr_pass
str_waste_code lstr_waste
dwItemStatus ldwItemStatus
u_tabpage_profile_price ltabpage_profile_price

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
END IF

SetNull(ldt_null)
SetNull(ls_null)
SetNull(li_null)

CHOOSE CASE dwo.name
	CASE "b_assign"
		lstr_pick.s_window_title			= "Waste Code Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		CHOOSE CASE lower(is_listed_characteristic)
			CASE 'listed'
				li_tab_cnt = 4
			CASE 'characteristic'
				li_tab_cnt = 1
			//COR2-MPM
			CASE 'both'
				li_tab_cnt = 5
			CASE ELSE
				li_tab_cnt = 5
		END CHOOSE
		lstr_pick.i_tab_count = li_tab_cnt
		lstr_pick.s_retrieve_by[1]		= "waste_code"
		lstr_pick.s_retrieve_by[2]		= "waste_code_desc"
		lstr_pick.s_button_text[1]		= "Select"
		lstr_pick.s_button_text[2]		= "All"
		lstr_pick.s_button_text[3]		= "All (This Tab Only)"
		lstr_pick.i_return_column_count	= 9
		lstr_pick.to_transaction			= itr_share
		
		ls_where = wf_build_waste_code_where()
		IF ls_where > "" THEN
			ls_and = " AND "
		ELSE
			ls_and = ""
		END IF
		ls_where += ls_and
	
		//COR2-MPM
//		IF lower(is_listed_characteristic) <> 'listed' THEN
		IF lower(is_listed_characteristic) = 'characteristic' OR is_listed_characteristic = '' THEN
			FOR li_idx = 1 TO li_tab_cnt
				CHOOSE CASE li_idx
					CASE 1
						lstr_pick.s_tab_title[li_idx]	= 'D Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'D' AND WasteCode.waste_code_origin = 'F' "	
					CASE 2
						lstr_pick.s_tab_title[li_idx]	= 'P Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'P' AND WasteCode.waste_code_origin = 'F' AND pcb_flag <> 'T' "
					CASE 3
						lstr_pick.s_tab_title[li_idx]	= 'U Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'U' AND WasteCode.waste_code_origin = 'F' "				
					CASE 4
						lstr_pick.s_tab_title[li_idx]	= 'K Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'K' AND WasteCode.waste_code_origin = 'F' "				
					CASE 5
						lstr_pick.s_tab_title[li_idx]	= 'F Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'F' AND WasteCode.waste_code_origin = 'F' "	
					CASE ELSE
				END CHOOSE
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				lstr_pick.s_new_reference[li_idx] = ""
			NEXT
		ELSEIF lower(is_listed_characteristic) = 'listed' THEN
			FOR li_idx = 1 TO li_tab_cnt
				CHOOSE CASE li_idx
					CASE 1
						lstr_pick.s_tab_title[li_idx]	= 'P Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'P' AND WasteCode.waste_code_origin = 'F' AND pcb_flag <> 'T' "
					CASE 2
						lstr_pick.s_tab_title[li_idx]	= 'U Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'U' AND WasteCode.waste_code_origin = 'F' "				
					CASE 3
						lstr_pick.s_tab_title[li_idx]	= 'K Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'K' AND WasteCode.waste_code_origin = 'F' "				
					CASE 4
						lstr_pick.s_tab_title[li_idx]	= 'F Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'F' AND WasteCode.waste_code_origin = 'F' "	
					CASE ELSE
				END CHOOSE
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				lstr_pick.s_new_reference[li_idx] = ""
			NEXT
		//COR2-MPM
		ELSEIF lower(is_listed_characteristic) = 'both' THEN
			FOR li_idx = 1 TO li_tab_cnt
				CHOOSE CASE li_idx
					CASE 1
						lstr_pick.s_tab_title[li_idx]	= 'D Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'D' AND WasteCode.waste_code_origin = 'F' AND WasteCode.haz_flag = 'T' AND WasteCode.waste_type_code IN ('L', 'C') "	
					CASE 2
						lstr_pick.s_tab_title[li_idx]	= 'P Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'P' AND WasteCode.waste_code_origin = 'F' AND pcb_flag <> 'T' AND WasteCode.haz_flag = 'T' AND WasteCode.waste_type_code IN ('L', 'C') "
					CASE 3
						lstr_pick.s_tab_title[li_idx]	= 'U Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'U' AND WasteCode.waste_code_origin = 'F' AND WasteCode.haz_flag = 'T' AND WasteCode.waste_type_code IN ('L', 'C') "				
					CASE 4
						lstr_pick.s_tab_title[li_idx]	= 'K Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'K' AND WasteCode.waste_code_origin = 'F' AND WasteCode.haz_flag = 'T' AND WasteCode.waste_type_code IN ('L', 'C') "				
					CASE 5
						lstr_pick.s_tab_title[li_idx]	= 'F Series'
						lstr_pick.s_where[li_idx] = ls_where + "SUBSTRING(WasteCode.waste_code, 1, 1) = 'F' AND WasteCode.waste_code_origin = 'F' AND WasteCode.haz_flag = 'T' AND WasteCode.waste_type_code IN ('L', 'C') "	
					CASE ELSE
				END CHOOSE
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx] = "d_quick_select_waste_code"
				lstr_pick.s_new_reference[li_idx] = ""
			NEXT
		END IF
		
		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
			
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// Get return values
				ls_waste_code = string(lstr_pick.return1[li_idx])
				ll_waste_code_uid = Long(lstr_pick.return6[li_idx])
				ll_default_sequence_id = Long(lstr_pick.return7[li_idx])
				ls_short_waste_code = String(lstr_pick.return9[li_idx])
				// MPM - 4/26/2021 - DevOps 19913 - Added haz_flag
				ls_haz_flag = String(lstr_pick.return3[li_idx])

				// Add only new waste codes
				ls_find = "waste_code_uid= " + String(ll_waste_code_uid) + ""
				ll_row_waste = idw_waste_code_fed.Find(ls_find, 1, idw_waste_code_fed.RowCount()+1)
				IF ll_row_waste > 0 THEN
					CONTINUE
				ELSE
					ll_row_waste = idw_waste_code_fed.InsertRow(0)
					idw_waste_code_fed.Object.waste_code[ll_row_waste] = ls_waste_code
					idw_waste_code_fed.Object.waste_code_uid[ll_row_waste] = ll_waste_code_uid
					idw_waste_code_fed.Object.sequence_flag[ll_row_waste] = 'F'
					IF ll_row_waste <= ii_top6 THEN
						idw_waste_code_fed.object.include[ll_row_waste] = 1
						idw_waste_code_fed.object.sequence_id[ll_row_waste] = ll_row_waste
					ELSE
						idw_waste_code_fed.object.include[ll_row_waste] = 0
					END IF
					idw_waste_code_fed.object.primary_flag[ll_row_waste] = 'F'
					idw_waste_code_fed.object.default_sequence_id[ll_row_waste] = ll_default_sequence_id
					idw_waste_code_fed.object.profilewastecode_waste_code[ll_row_waste] = ls_short_waste_code
					idw_waste_code_fed.object.status[ll_row_waste] = 'A'
					// MPM - 4/26/2021 - DevOps 19913 - Added haz_flag
					idw_waste_code_fed.object.haz_flag[ll_row_waste] = ls_haz_flag
					ib_changed_waste_code = TRUE
				END IF
			NEXT
		END IF
		//DevOps:12644
		li_last_tab = upperbound(itab_price.control)
		IF idw_waste_code_fed.Rowcount() > 0 THEN
			FOR ll_row_approval = 1 TO idw_approval.RowCount()
				li_compnay_id = idw_approval.Object.company_id [ll_row_approval]
				li_profit_ctr_id = idw_approval.Object.profit_ctr_id [ll_row_approval]
			  IF li_compnay_id = 22 THEN
				FOR li_idx = 2 TO li_last_tab
					ltabpage_profile_price = itab_price.control[li_idx]
					IF IsValid(ltabpage_profile_price) THEN
					 ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
					 ls_facility_tabpage = left ( ls_facility_tabpage,2)							
					 IF  ls_facility_tabpage = '22' THEN  
						ll_price_disposal_rowcount = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.rowcount()
						IF ll_price_disposal_rowcount > 0 THEN 								
						FOR i = 1 to ll_price_disposal_rowcount
							ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
							ls_facility_tabpage = left ( ls_facility_tabpage,2)							
							 IF ls_facility_tabpage = '22' THEN  
								ls_disposal_bill_unit = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Object.bill_unit_code[i]
								ll_disposal_seq_id = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Object.sequence_id[i]
								ls_price_filter = "product_code =  'FEEFLHAZ' AND bill_unit_code = " + "'" + ls_disposal_bill_unit + "'"
								ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Setfilter (ls_price_filter)
								ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Filter ()
								ll_price_rowcount = ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.rowcount()
								IF ll_price_rowcount = 0 THEN
									ll_seq_approval_row = ltabpage_profile_price.dw_approval.GetRow()
									IF ll_seq_approval_row > 0 THEN 
										IF li_seq = 1 THEN 
											 li_sequence_id = ltabpage_profile_price.uof_next_sequence_id(ll_seq_approval_row)
											 li_seq = 0
										ELSE
											li_sequence_id++
										END IF
									END IF
									ls_currency_code = idw_header.Object.currency_code[idw_header.GetRow()]
									ls_generic_flag =  idw_header.Object.generic_flag[idw_header.GetRow()] 
									 ls_labpack_flag =  idw_header.Object.labpack_flag[idw_header.GetRow()]  
									 ll_rownew = f_quote_service( ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled, li_compnay_id, li_profit_ctr_id, li_sequence_id, ls_currency_code)
									 SELECT company_id,profit_ctr_id,product_id,description,percentage_price
									 INTO  :li_prod_company_id,:li_prod_profit_ctr_id,:ll_product_id,:ls_prod_description,:ld_percentage_price
									 FROM Product  
									 WHERE product_code = 'FEEFLHAZ'
									 AND bill_unit_code = :ls_disposal_bill_unit
									 AND company_id = 22 and profit_ctr_id = 0
									 USING gtr_share;
									 
									 IF ls_generic_flag = 'T' OR ls_labpack_flag = 'T' THEN 
										ls_optional_flag = 'T'
									ELSE
										ls_optional_flag = 'F'
									 END IF
									 
									 lc_price = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Object.price[i]
									 IF Not IsNull (lc_price ) OR lc_price <> 0 THEN 
										 ld_percentage_price = (ld_percentage_price *lc_price) /100
									END IF
		
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.price[ll_rownew] = ld_percentage_price 
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.bill_method[ll_rownew] = 'U'
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.bill_quantity_flag[ll_rownew] = 'U'
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.product_code[ll_rownew] =  'FEEFLHAZ'
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.product_id[ll_rownew] = ll_product_id
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.service_desc[ll_rownew] = ls_prod_description
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.bill_unit_code[ll_rownew] = ls_disposal_bill_unit						
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.optional_flag[ll_rownew] =  ls_optional_flag
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.product_company_id[ll_rownew] = li_prod_company_id
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.product_profit_ctr_id[ll_rownew] = li_prod_profit_ctr_id
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.dist_company_id[ll_rownew] = li_compnay_id
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.dist_profit_ctr_id[ll_rownew] = li_profit_ctr_id
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.print_on_invoice_flag[ll_rownew] = 'F' 
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.price_override_flag[ll_rownew] = 'F'
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.record_type[ll_rownew] = 'S'
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.price_line[ll_rownew] = string(i)
									ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Object.ref_sequence_id[ll_rownew] = ll_disposal_seq_id
									IF NOT IsNull(idw_approval.Object.confirm_update_date[ll_row_approval]) THEN
										idw_approval.Object.confirm_author[ll_row_approval] = ls_null
										idw_approval.Object.confirm_update_by[ll_row_approval] = ls_null
										idw_approval.Object.confirm_update_date[ll_row_approval] = ldt_null
									    lb_unconfirmed_price_msg = TRUE
									END IF
								END IF
							  ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Setfilter ("")
							  ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Filter()	
							END IF
						NEXT
						END IF
					END IF
					END IF
				NEXT
		  END IF
		NEXT
	  END IF
		IF lb_unconfirmed_price_msg = TRUE  THEN
			MessageBox(gs_app_name + ":  Warning:", "The Florida hazardous fee will be added and the approval into 22-00 will need to be price confirmed.")
			lb_unconfirmed_price_msg = FALSE
		END IF
		
	CASE "b_delete"
		// Should behave just like the double click delete
		li_response = MessageBox(gs_app_name + ":  Delete Federal Waste Codes", "Are you sure you want to delete all federal waste codes?", Question!, YesNo!, 2)
		IF li_response = 1 THEN
			ll_rowcount = idw_waste_code_fed.RowCount()
			FOR ll_row = ll_rowcount TO 1 STEP -1
				// Delete this Waste Code
				ldwItemStatus = This.GetItemStatus(ll_row, 0, Primary!)
				IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
					This.RowsDiscard(ll_row, ll_row, Primary!)
				ELSE
					wf_audit(idw_waste_code_fed, ll_profile_id, ll_row, TRUE)
					This.DeleteRow(ll_row)
				END IF 
				ib_changed_waste_code = TRUE
			NEXT
		END IF
	
	CASE "b_manifest_order"
		// Fed Top 6 renumber
		li_count = 0
		ls_find = "include = 1"
		ll_row_find = 1
		DO WHILE ll_row_find > 0
			ll_row_find = This.Find(ls_find, ll_row_find, This.Rowcount() + 1 )
			IF ll_row_find > 0 THEN
				li_count++
				lstr_waste.waste_code[li_count] 		= idw_waste_code_fed.Object.waste_code[ll_row_find]
				lstr_waste.primary_flag[li_count] 	= idw_waste_code_fed.Object.primary_flag[ll_row_find]
				lstr_waste.sequence_id[li_count] 	= idw_waste_code_fed.Object.sequence_id[ll_row_find]
				lstr_waste.waste_code_row[li_count] = ll_row_find		
				lstr_waste.waste_code_uid[li_count] = idw_waste_code_fed.Object.waste_code_uid[ll_row_find]
				ll_row_find++
			END IF
		LOOP
		IF li_count = 0 THEN
			MessageBox(gs_app_name+": Set Waste Code Manifest printing Order", "There are no waste codes selected.", Exclamation!)
			RETURN
		ELSEIF li_count = 1 THEN
			MessageBox(gs_app_name+": Set Waste Code Manifest printing Order", "There is only 1 waste code selected.", Exclamation!)
			RETURN
		ELSE
			lstr_waste.waste_code_count = li_count
			lstr_waste.title = "Profile Federal Waste Codes - Top 6 available for manifest print"
			lstr_waste.source = "PROFILE"
			
			OpenWithParm(w_popup_waste_code, lstr_waste)
			
			lstr_waste = Message.PowerObjectParm
			IF IsValid(lstr_waste) THEN
				li_rc = gi_success
				FOR li_idx = 1 TO li_count
					IF li_rc = gi_success THEN
						ls_waste_code 		= lstr_waste.waste_code[li_idx]
						ll_waste_code_uid = lstr_waste.waste_code_uid[li_idx]
						ls_primary_flag 	= lstr_waste.primary_flag[li_idx]
						li_sequence_id 	= lstr_waste.sequence_id[li_idx]
						ll_row_find 		= lstr_waste.waste_code_row[li_idx]
						
						// Check for pricing unconfirm
						IF li_sequence_id = 1 THEN					
							FOR ll_row_approval = 1 TO idw_approval.RowCount()
								li_rc = wf_set_sr_type_code(ls_waste_code, ll_waste_code_uid, ll_row_approval)
								IF li_rc = gi_failure THEN
									EXIT // Do not assign the new order from the pop-up as user does not wish to unconfirm pricing by changing order
								END IF
							NEXT
						END IF
						
						// If pricing unconfirm won't happen or user is ok with it happening then proceed with the new
						// order they just set in the pop-up
						IF li_rc = gi_success THEN
							ls_find = "waste_code_uid = " + string(ll_waste_code_uid)
							ll_row_find = This.Find(ls_find, 1, This.Rowcount() + 1 )
							IF ll_row_find > 0 THEN // this should always find the row
								idw_waste_code_fed.Object.primary_flag[ll_row_find] 	= ls_primary_flag
								idw_waste_code_fed.Object.sequence_id[ll_row_find] 	= li_sequence_id
								IF IsNull(li_sequence_id) THEN 
									idw_waste_code_fed.Object.include[ll_row_find] = 0
								END IF
								ib_changed_waste_code = TRUE
							END IF
						END IF
					END IF
				NEXT
			END IF
		END IF

	CASE ELSE
END CHOOSE

IF ib_changed_waste_code THEN
	wf_top6_renumber()
	wf_set_primary_waste_code()
	// rb 12/05/2012 The instance vars that WCR reference need to be updated
	Post wf_populate_wastecodes_wcr ('fed')
	
	// rb 07/13/2012 Set waste code WPF answers
	Post wf_wcr_set_waste_code_answers ()
	POST wf_set_rcra_haz_flag()
END IF

end event

event doubleclicked;boolean	lb_access_ok
integer	li_response, li_sequence_id, li_idx, li_null, li_company_id, li_rc
long		ll_row_header, ll_rows, ll_row_find, ll_row_approval, ll_profile_id, ll_waste_code_uid
long		ll_row, ll_row_count
string	ls_object, ls_waste_code, ls_primary, ls_find, ls_access
dwItemStatus ldwItemStatus

 IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN
END IF	

// Check for header line on Active approval
ll_row_header = idw_header.GetRow() 
IF ll_row_header <= 0 THEN 
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
END IF
SetNull(li_null)


ls_object = Lower(dwo.name)

IF Len(ls_object) > 0 THEN
	// The substring is used because there are 10 fields and they end in _XX
	IF Lower(Left(ls_object, 10)) = "waste_code" THEN
		
		ll_rows = This.RowCount()
		IF (row > 0) AND (row <= ll_rows) THEN
			// Make sure they want to delete this row
			ls_waste_code = idw_waste_code_fed.Object.waste_code[row]
			ll_waste_code_uid = idw_waste_code_fed.Object.waste_code_uid[row]
			
			li_response = MessageBox(gs_app_name + ":  Delete Federal Waste Code", "Are you sure you want to delete Waste Code " + ls_waste_code + "?", Question!, YesNo!, 2)
			IF li_response = 1 THEN
				// Delete this Waste Code
				ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
				IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
					This.RowsDiscard(row, row, Primary!)
				ELSE
					wf_audit(idw_waste_code_fed, ll_profile_id, row, TRUE)
					This.DeleteRow(row)
				END IF 
				ib_changed_waste_code = TRUE
			END IF
		END IF
	END IF
END IF

IF ib_changed_waste_code THEN
	wf_top6_renumber()
	wf_set_primary_waste_code()
	POST wf_populate_wastecodes_wcr ('fed')
	// rb 07/13/2012 Set waste code WPF answers
	POST wf_wcr_set_waste_code_answers ()
	POST wf_set_rcra_haz_flag()
END IF
end event

event itemchanged;//boolean	lb_access_ok
integer	li_sequence_id, li_include, li_count, li_rc, li_pos, li_null
long		ll_row_header, ll_row, ll_row_find, ll_row_approval, ll_waste_code_uid
string	ls_find, ls_null, ls_waste_code, ls_column, ls_status
//datetime	ldt_null

IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 1

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN 2
END IF	

// Check for header line on Active approval
ll_row_header = idw_header.GetRow() 
IF ll_row_header <= 0 THEN 
	RETURN 1
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN 1
END IF

SetNull(li_null)

li_pos = Pos(dwo.name, "_")
ls_column = LEFT(dwo.name, li_pos - 1)
CHOOSE CASE Lower(ls_column)
	CASE "include"
		li_include = Integer(data)
		IF li_include = 1 THEN
			ls_status = Upper(This.Object.status[row])
			IF ls_status = 'I' THEN
				MessageBox(gs_app_name+": Waste Codes available for Manifest Print", "Inactive waste code cannot be selected for manifest printing.", Exclamation!)
				RETURN 2
			END IF
			li_count = 0
			FOR ll_row = 1 To This.RowCount()
				IF This.Object.include[ll_row] = 1 THEN
					li_count ++
					IF li_count = ii_top6 THEN
						MessageBox(gs_app_name+": Waste Codes available for Manifest Print", "Please de-select a waste code to add a new waste code to the available codes for manifest printing.", Exclamation!)
						RETURN 2
					END IF
				END IF
			NEXT
			IF li_count < ii_top6 THEN
				This.Object.sequence_id[row] = li_count + 1
			END IF
		ELSE
			// Deselect
			This.Object.sequence_id[row] = li_null
		END IF
		Post wf_top6_renumber()
		//POST wf_set_waste_code_sequence(This)
		POST wf_set_primary_waste_code()
								
	CASE ELSE
END CHOOSE 
end event

type dw_waste_code_state from datawindow within tabpage_waste
integer x = 2226
integer y = 968
integer width = 1582
integer height = 1000
integer taborder = 60
boolean bringtotop = true
string dataobject = "d_profile_waste_code_state"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;// DevOps #13045; info_GDE 02/05/20 Add New Profile - Section E.; Constraint on state_waste_codes field to accept ONLY TX state waste codes

boolean	lb_access_ok, lb_move = FALSE
datetime	ldt_today, ldt_null
integer	li_idx, li_rc, li_response, li_linked_generator_count
long		ll_profile_id, ll_row_header, ll_rowcount, ll_waste_code_uid, ll_row_waste, ll_default_sequence_id,ll_generator_id
Long     ll_row, ll_prev_row, ll_next_row, ll_found_row, ll_waste_other_row,ll_tx_waste_other_row
string	ls_null, ls_access, ls_where, ls_and, ls_waste_code, ls_find, ls_short_waste_code, ls_state, ls_haz_flag
String	ls_curr_seq_flag, ls_new_seq_flag, ls_curr_seq_flag_display, ls_new_seq_flag_display, ls_status, ls_STEERS_reportable_flag

str_pick	lstr_pick
DWItemStatus ldwItemStatus
str_pass	lstr_pass

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
	ll_generator_id =  idw_header.Object.generator_id[ll_row_header] //DevOps:18010
END IF

SetNull(ldt_null)
SetNull(ls_null)

CHOOSE CASE dwo.name
	CASE "b_add_state_wc"
		lstr_pick.s_window_title			= "State Waste Code Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		lstr_pick.i_tab_count				= 1
		lstr_pick.s_retrieve_by[1]		= "waste_code"
		lstr_pick.s_retrieve_by[2]		= "waste_code_desc"
		lstr_pick.s_button_text[1]		= "Select"
		lstr_pick.i_return_column_count	= 11
		lstr_pick.to_transaction			= itr_share
		
		ls_where = wf_build_waste_code_where()
		IF ls_where > "" THEN
			ls_and = " AND "
		ELSE
			ls_and = ""
		END IF
		ls_where += ls_and
		
		// COR2-MPM
		/*
		if tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_wcr then
			choose case tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.dataobject

				case "d_profile_hazardous_wastes_form"
					ls_where += "WasteCode.haz_flag = 'T' AND "

				case "d_profile_non_hazardous_wastes_form"
					ls_where += "WasteCode.haz_flag = 'F' AND "

			end choose
		end if
		*/
		
		// COR2-MPM
// DevOps #13045  ---  Start
		IF is_waste_code_state = 'PA' THEN
			ls_where += "WasteCode.state = 'PA' AND "
		ELSEIF is_waste_code_state = 'TX' THEN
			lstr_pick.b_multipick	= FALSE
			ls_where += "WasteCode.state = 'TX' AND "
		ELSEIF is_waste_code_state = 'not PA' THEN
			ls_where += "WasteCode.state <> 'PA' AND WasteCode.state <> 'TX' AND "
		END IF
//		IF is_waste_code_state = 'PA' THEN
//			ls_where += "WasteCode.state = 'PA' AND "
//		ELSEIF is_waste_code_state = 'not PA' THEN
//			ls_where += "WasteCode.state <> 'PA' AND "
//		END IF
// DevOps #13045  ---  End
		
		lstr_pick.s_tab_title[1]	= 'State'
		lstr_pick.s_dataobject[1] = "d_quick_select_waste_code_state"
		lstr_pick.s_where[1] = ls_where + "WasteCode.waste_code_origin = 'S'"
		lstr_pick.i_tabpage_type[1]	= 1
		lstr_pick.s_new_reference[1] = ""
		lstr_pick.s_new_reference[1] = ""
		lstr_pick.l[1] = ll_generator_id //DevOps:18010
		
		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
			
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// Get return values
				ls_waste_code 		= string(lstr_pick.return1[li_idx])
				ll_waste_code_uid = Long(lstr_pick.return6[li_idx])
				ls_state      = string(lstr_pick.return5[li_idx])
				ll_default_sequence_id = Long(lstr_pick.return7[li_idx])
				ls_short_waste_code	= String(lstr_pick.return9[li_idx])
				ls_STEERS_reportable_flag =String(lstr_pick.return10[li_idx])
				li_linked_generator_count = Int(lstr_pick.return11[li_idx])	
				// MPM - 4/26/2021 - DevOps 19913 - Added haz_flag
				ls_haz_flag = String(lstr_pick.return3[li_idx])
				
				// Add only new waste codes
				ls_find = "waste_code_uid= " + String(ll_waste_code_uid) + ""
				ll_row_waste = idw_waste_code_state.Find(ls_find, 1, idw_waste_code_state.RowCount()+1)
				IF ll_row_waste > 0 THEN
					CONTINUE
				ELSE
					ll_row_waste = idw_waste_code_state.InsertRow(0)
					idw_waste_code_state.Object.waste_code[ll_row_waste] = ls_waste_code
					idw_waste_code_state.Object.waste_code_uid[ll_row_waste] = ll_waste_code_uid
					idw_waste_code_state.Object.sequence_flag[ll_row_waste] = 'A'
					idw_waste_code_state.Object.state[ll_row_waste] = ls_state
					idw_waste_code_state.object.primary_flag[ll_row_waste] = 'F'
					idw_waste_code_state.object.default_sequence_id[ll_row_waste] = ll_default_sequence_id
					idw_waste_code_state.object.profilewastecode_waste_code[ll_row_waste] = ls_short_waste_code
					idw_waste_code_state.object.status[ll_row_waste] = 'A'
					idw_waste_code_state.object.STEERS_reportable_flag[ll_row_waste] = ls_STEERS_reportable_flag
					idw_waste_code_state.object.linked_generator_count[ll_row_waste] = li_linked_generator_count
					// MPM - 4/26/2021 - DevOps 19913 - Added haz_flag
					idw_waste_code_state.object.haz_flag[ll_row_waste] = ls_haz_flag
					ib_changed_waste_code = TRUE
					
			      	//TX 
					IF ls_state = 'TX' THEN 
						ll_tx_waste_other_row = idw_waste_other.GetRow()
						IF ll_tx_waste_other_row > 0 THEN
							idw_header.Object.texas_state_waste_code[ll_row_header] = ls_waste_code
							  IF ll_row_waste = 1 THEN 
							     idw_waste_code_state.object.texas_primary_flag[ll_row_waste] = 'T'
							 END IF
							   is_tx_state_waste_codes = ls_waste_code
							//idw_waste_other.Object.texas_state_waste_code[ll_tx_waste_other_row] = ls_waste_code
						END IF
					END IF
					
					// Update the PA residual waste flag, if necessary
					IF ls_state = 'PA' THEN 
						ll_waste_other_row = idw_waste_other.GetRow()
						IF ll_waste_other_row > 0 THEN
							IF IsNull(idw_waste_other.Object.pa_residual_waste_flag[ll_waste_other_row]) OR idw_waste_other.Object.pa_residual_waste_flag[ll_waste_other_row] <> 'T' THEN
								idw_waste_other.Object.pa_residual_waste_flag[ll_waste_other_row] = 'T'
							END IF
						END IF
					END IF
				END IF
			NEXT
		END IF
		// resort and group calc
		This.Sort()
		This.GroupCalc()
			
	CASE "b_del_state_wc"
		li_response = MessageBox(gs_app_name + ":  Delete State Waste Code", "Are you sure you want to delete this row?", Question!, YesNo!, 2)
		IF li_response = 1 THEN
			// Delete this Waste Code
			ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
			IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
				This.RowsDiscard(row, row, Primary!)
			ELSE
				wf_audit(idw_waste_code_state, ll_profile_id, row, TRUE)
				This.DeleteRow(row)
			END IF 
			ib_changed_waste_code = TRUE
		END IF
	
	CASE "b_move_up"
		ll_rowcount = This.Rowcount()
		ls_find = "Upper(status)= 'I'"
		ll_found_row = This.Find(ls_find, 1, ll_rowcount+1)
		IF ll_found_row > 0 THEN
			MessageBox(gs_app_name + ":  Move State Waste Code", "Please delete inactive waste codes before re-ordering.", StopSign!)
			RETURN
		END IF
		FOR ll_row = 1 TO ll_rowcount
			IF This.IsSelected(ll_row) = TRUE THEN
				EXIT
			END IF
		NEXT
		IF ll_row > 1 THEN
			ll_prev_row = ll_row - 1
			IF (Upper(This.Object.state[ll_row]) = Upper(This.Object.state[ll_prev_row])) THEN
				ls_curr_seq_flag	= Upper(This.Object.sequence_flag[ll_row])
				ls_new_seq_flag	= Upper(This.Object.sequence_flag[ll_prev_row])
				IF (ls_curr_seq_flag <> 'B' AND ls_new_seq_flag = 'B') OR (ls_curr_seq_flag = 'O' AND ls_new_seq_flag <> 'O') THEN
					ls_curr_seq_flag_display = This.Describe("Evaluate('LookUpDisplay(sequence_flag) ', " + String(ll_row) + ")")
					ls_new_seq_flag_display = This.Describe("Evaluate('LookUpDisplay(sequence_flag) ', " + String(ll_prev_row) + ")")
					MessageBox(gs_app_name + ":  Move State Waste Code", "Waste code with print sequence set to '" + ls_curr_seq_flag_display &
					+ "' cannot be moved before waste code with print sequence set to '" + ls_new_seq_flag_display + "'", StopSign!)
//						IF li_response = 1 THEN
//						END IF
				ELSE
					lb_move = TRUE
				END IF
				IF lb_move THEN
					ll_waste_code_uid		= This.object.waste_code_uid[ll_prev_row]
					ls_waste_code			= This.object.waste_code[ll_prev_row]
					ls_short_waste_code	= This.object.ProfileWastecode_waste_code[ll_prev_row]
					ll_default_sequence_id	= This.object.default_sequence_id[ll_prev_row]
					ls_status				= This.object.status[ll_prev_row]
					ls_STEERS_reportable_flag = This.Object.STEERS_reportable_flag[ll_prev_row]
					li_linked_generator_count = This.Object.linked_generator_count[ll_prev_row]
					
					This.object.waste_code_uid[ll_prev_row] 		= This.object.waste_code_uid[ll_row]
					This.object.waste_code[ll_prev_row] 			= This.object.waste_code[ll_row]
					This.object.ProfileWastecode_waste_code[ll_prev_row] = This.object.ProfileWastecode_waste_code[ll_row]
					This.object.default_sequence_id[ll_prev_row] = This.object.default_sequence_id[ll_row]
					This.Object.sequence_flag[ll_prev_row]			= ls_curr_seq_flag
					This.object.status[ll_prev_row]					= This.object.status[ll_row]
					This.Object.STEERS_reportable_flag[ll_prev_row] = This.Object.STEERS_reportable_flag[ll_row]
					This.Object.linked_generator_count[ll_prev_row] = This.Object.linked_generator_count[ll_row]
					
					This.object.waste_code_uid[ll_row] 					= ll_waste_code_uid
					This.object.waste_code[ll_row] 						= ls_waste_code
					This.object.ProfileWastecode_waste_code[ll_row] = ls_short_waste_code
					This.object.default_sequence_id[ll_row] 			= ll_default_sequence_id
					This.Object.sequence_flag[ll_row]					= ls_new_seq_flag
					This.object.status[ll_row]								= ls_status
					This.Object.STEERS_reportable_flag[ll_row] = ls_STEERS_reportable_flag
					This.Object.linked_generator_count[ll_row] = li_linked_generator_count
					
					This.SelectRow(ll_row, FALSE)
					This.SelectRow(ll_prev_row, TRUE)
					ib_changed_waste_code = TRUE
				END IF
			END IF
		END IF
				
	CASE "b_move_down"
		ll_rowcount = This.Rowcount()
		ls_find = "Upper(status)= 'I'"
		ll_found_row = This.Find(ls_find, 1, ll_rowcount+1)
		IF ll_found_row > 0 THEN
			MessageBox(gs_app_name + ":  Move State Waste Code", "Please delete inactive waste codes before re-ordering.", StopSign!)
			RETURN
		END IF
		FOR ll_row = 1 TO ll_rowcount
			IF This.IsSelected(ll_row) = TRUE THEN
				EXIT
			END IF
		NEXT
		IF ll_row < ll_rowcount THEN
			ll_next_row = ll_row + 1
			IF (Upper(This.Object.state[ll_row]) = Upper(This.Object.state[ll_next_row])) THEN
				ls_curr_seq_flag	= Upper(This.Object.sequence_flag[ll_row])
				ls_new_seq_flag	= Upper(This.Object.sequence_flag[ll_next_row])
				IF (ls_curr_seq_flag = 'B' AND ls_new_seq_flag <> 'B') OR (ls_curr_seq_flag = 'A' AND ls_new_seq_flag = 'O') THEN
					ls_curr_seq_flag_display = This.Describe("Evaluate('LookUpDisplay(sequence_flag) ', " + String(ll_row) + ")")
					ls_new_seq_flag_display = This.Describe("Evaluate('LookUpDisplay(sequence_flag) ', " + String(ll_next_row) + ")")
					MessageBox(gs_app_name + ":  Move State Waste Code", "Waste code with print sequence set to '" + ls_curr_seq_flag_display &
					+ "' cannot be moved below waste code with print sequence set to '" + ls_new_seq_flag_display +"'", StopSign!)
//						IF li_response = 1 THEN
//						END IF
				ELSE
					lb_move = TRUE
				END IF
				IF lb_move THEN
					ll_waste_code_uid		= This.object.waste_code_uid[ll_next_row]
					ls_waste_code			= This.object.waste_code[ll_next_row]
					ls_short_waste_code	= This.object.ProfileWastecode_waste_code[ll_next_row]
					ll_default_sequence_id	= This.object.default_sequence_id[ll_next_row]
					ls_status				= This.object.status[ll_next_row]
					ls_STEERS_reportable_flag = This.Object.STEERS_reportable_flag[ll_next_row]
					li_linked_generator_count = This.Object.linked_generator_count[ll_next_row]
					
					This.object.waste_code_uid[ll_next_row] 		= This.object.waste_code_uid[ll_row]
					This.object.waste_code[ll_next_row] 			= This.object.waste_code[ll_row]
					This.object.ProfileWastecode_waste_code[ll_next_row] = This.object.ProfileWastecode_waste_code[ll_row]
					This.object.default_sequence_id[ll_next_row] = This.object.default_sequence_id[ll_row]
					This.Object.sequence_flag[ll_next_row]			= ls_curr_seq_flag
					This.Object.status[ll_next_row]					= This.object.status[ll_row]
					This.Object.STEERS_reportable_flag[ll_next_row] = This.Object.STEERS_reportable_flag[ll_row]
					This.Object.linked_generator_count[ll_next_row] = This.Object.linked_generator_count[ll_row]
					
					This.object.waste_code_uid[ll_row] 					= ll_waste_code_uid
					This.object.waste_code[ll_row] 						= ls_waste_code
					This.object.ProfileWastecode_waste_code[ll_row] = ls_short_waste_code
					This.object.default_sequence_id[ll_row] 			= ll_default_sequence_id
					This.Object.sequence_flag[ll_row]					= ls_new_seq_flag
					This.object.status[ll_row]								= ls_status
					This.Object.STEERS_reportable_flag[ll_row] = ls_STEERS_reportable_flag
					This.Object.linked_generator_count[ll_row] = li_linked_generator_count
					
					This.SelectRow(ll_row, FALSE)
					This.SelectRow(ll_next_row, TRUE)
					ib_changed_waste_code = TRUE
					
				END IF
			END IF
		END IF
	
	CASE "b_generator_info"
		ll_waste_code_uid = This.Object.waste_code_uid[row]
		lstr_pass.s_dataobject = "d_waste_code_generator_info"
		lstr_pass.s_action = "waste code generator"
		lstr_pass.d[1] = ll_waste_code_uid
		OpenWithParm(w_popup_info, lstr_pass)
		
	CASE ELSE
END CHOOSE

IF ib_changed_waste_code THEN
	wf_set_waste_code_sequence(This)
	POST wf_set_primary_waste_code()
	// rb 12/05/2012 The instance vars that WCR reference need to be updated
	// MPM - COR2
//	Post wf_populate_wastecodes_wcr ('state')
	Post wf_populate_wastecodes_wcr ('all')
	// rb 07/13/2012 Set waste code WPF answers
	Post wf_wcr_set_waste_code_answers ()
END IF

end event

event itemchanged;integer	li_rc, i
long		ll_row_header, ll_row, ll_waste_code_uid, ll_tx_state_count
string	ls_null, ls_waste_code

IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 1

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN 2
END IF	

// Check for header line on Active approval
ll_row_header = idw_header.GetRow() 
IF ll_row_header <= 0 THEN 
	RETURN 1
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN 1
END IF

CHOOSE CASE Lower(dwo.name)
	CASE 'sequence_flag'
		POST wf_set_waste_code_sequence(This)
		POST wf_set_primary_waste_code()
	CASE "texas_primary_flag"
		IF data = 'T' THEN 
		   ll_tx_state_count = This.rowcount()
			FOR i = 1 TO ll_tx_state_count
				IF i <> row THEN 
					This.Object.texas_primary_flag [i] = 'F'
				END IF
			NEXT
		END IF
	CASE ELSE
END CHOOSE
end event

event clicked;// Row Higlight
Long	ll_row, ll_rowcount

IF row > 0 THEN
	ll_rowcount = This.Rowcount()
	IF ll_rowcount > 1 THEN
		FOR ll_row = 1 TO ll_rowcount
			IF ll_row <> row THEN
				This.SelectRow(ll_row, FALSE)
			END IF
		NEXT
	END IF
	
	This.SelectRow(row, TRUE)
END IF
end event

type dw_waste_code_eq from datawindow within tabpage_waste
integer x = 3808
integer y = 968
integer width = 599
integer height = 1000
integer taborder = 60
boolean bringtotop = true
string dataobject = "d_profile_waste_code_eq"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;boolean	lb_access_ok, lb_move
datetime	ldt_today, ldt_null
integer	li_idx, li_rc, li_response, li_include
long		ll_profile_id, ll_row_header, ll_rowcount, ll_waste_code_uid, ll_row_waste, ll_default_sequence_id
Long		ll_row, ll_prev_row, ll_next_row
string	ls_null, ls_access, ls_where, ls_and, ls_waste_code, ls_find, ls_short_waste_code

str_pick	lstr_pick
DWItemStatus ldwItemStatus

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
END IF

SetNull(ldt_null)
SetNull(ls_null)

CHOOSE CASE dwo.name
	CASE "b_add_eq"
//		ll_new_row = This.InsertRow(0)
		lstr_pick.s_window_title			= "Internal Waste Code Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		lstr_pick.i_tab_count				= 1
		lstr_pick.s_retrieve_by[1]		= "waste_code"
		lstr_pick.s_retrieve_by[2]		= "waste_code_desc"
		lstr_pick.s_button_text[1]		= "Select"
		lstr_pick.i_return_column_count	= 9
		lstr_pick.to_transaction			= itr_share
		
		ls_where = wf_build_waste_code_where()
		IF ls_where > "" THEN
			ls_and = " AND "
		ELSE
			ls_and = ""
		END IF
		ls_where += ls_and
		
		lstr_pick.s_tab_title[1]	= 'Internal'
		lstr_pick.s_dataobject[1] = "d_quick_select_waste_code"
		lstr_pick.s_where[1] = ls_where + "WasteCode.waste_code_origin = 'E'"
		lstr_pick.i_tabpage_type[1]	= 1
		lstr_pick.s_new_reference[1] = ""
			
		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
			
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// Get return values
				ls_waste_code = string(lstr_pick.return1[li_idx])
				ll_waste_code_uid = Long(lstr_pick.return6[li_idx])
				ll_default_sequence_id = Long(lstr_pick.return7[li_idx])
				ls_short_waste_code	= String(lstr_pick.return9[li_idx])
				
				// Add only new waste codes
				ls_find = "waste_code_uid= " + String(ll_waste_code_uid) + ""
				ll_row_waste = idw_waste_code_eq.Find(ls_find, 1, idw_waste_code_eq.RowCount()+1)
				IF ll_row_waste > 0 THEN
					CONTINUE
				ELSE
					ll_row_waste = idw_waste_code_eq.InsertRow(0)
					idw_waste_code_eq.Object.waste_code[ll_row_waste] = ls_waste_code
					idw_waste_code_eq.Object.waste_code_uid[ll_row_waste] = ll_waste_code_uid
					idw_waste_code_eq.Object.sequence_flag[ll_row_waste] = 'O'
					IF ll_row_waste <= ii_top6 THEN
						idw_waste_code_eq.Object.include[ll_row_waste] = 1
					ELSE
						idw_waste_code_eq.Object.include[ll_row_waste] = 0
					END IF
					idw_waste_code_eq.object.primary_flag[ll_row_waste] = 'F'
					idw_waste_code_eq.object.default_sequence_id[ll_row_waste] = ll_default_sequence_id
					idw_waste_code_eq.object.profilewastecode_waste_code[ll_row_waste] = ls_short_waste_code
					idw_waste_code_eq.object.status[ll_row_waste] = 'A'
					//idw_waste_code_state.object.sequence_id[ll_row_waste] = ll_row_waste
					ib_changed_waste_code = TRUE
				END IF
			NEXT
			//This.Sort()
		END IF
		
				
	CASE "b_del_eq"
		li_response = MessageBox(gs_app_name + ":  Delete Internal Waste Code", "Are you sure you want to delete this row?", Question!, YesNo!, 2)
		IF li_response = 1 THEN
			// Delete this Waste Code
			ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
			IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
				This.RowsDiscard(row, row, Primary!)
			ELSE
				wf_audit(idw_waste_code_eq, ll_profile_id, row, TRUE)
				This.DeleteRow(row)
			END IF 
			ib_changed_waste_code = TRUE
		END IF
	
//	CASE "b_move_up"
//		ll_rowcount = This.Rowcount()
//		FOR ll_row = 1 TO ll_rowcount
//			IF This.IsSelected(ll_row) = TRUE THEN
//				EXIT
//			END IF
//		NEXT
//		IF ll_row > 1 THEN
//			ll_prev_row = ll_row - 1
//			
//			li_include 				= This.Object.include[ll_row]
//			ls_waste_code 			= This.Object.waste_code[ll_row]
//			ll_waste_code_uid		= This.Object.waste_code_uid[ll_row]
//			ls_short_waste_code 	= This.Object.ProfileWasteCode_waste_code[ll_row]
//			ll_default_sequence_id	= This.Object.default_sequence_id[ll_row]
//
//			This.Object.waste_code[ll_row] 						= This.Object.waste_code[ll_prev_row]
//			This.Object.waste_code_uid[ll_row] 					= This.Object.waste_code_uid[ll_prev_row]
//			This.Object.ProfileWasteCode_waste_code[ll_row] = This.Object.ProfileWasteCode_waste_code[ll_prev_row]	
//			This.Object.default_sequence_id[ll_row] 			= This.Object.default_sequence_id[ll_prev_row]
//			This.Object.include[ll_row] = This.Object.include[ll_prev_row]
//
//			// prev row values
//			This.Object.waste_code[ll_prev_row] 						= ls_waste_code
//			This.Object.waste_code_uid[ll_prev_row] 					= ll_waste_code_uid
//			This.Object.ProfileWasteCode_waste_code[ll_prev_row] 	= ls_short_waste_code	
//			This.Object.default_sequence_id[ll_prev_row] 			= ll_default_sequence_id
//			This.Object.include[ll_prev_row] = li_include
//
//			This.SelectRow(ll_row, FALSE)
//			This.SelectRow(ll_prev_row, TRUE)
//			ib_changed_waste_code = TRUE
//
//		END IF
		
//	CASE "b_move_down"
//		ll_rowcount = This.Rowcount()
//		FOR ll_row = 1 TO ll_rowcount
//			IF This.IsSelected(ll_row) = TRUE THEN
//				EXIT
//			END IF
//		NEXT
//		IF ll_row < ll_rowcount THEN
//			ll_next_row = ll_row + 1
//			
//			li_include 					= This.Object.include[ll_row]
//			ls_waste_code 				= This.Object.waste_code[ll_row]
//			ll_waste_code_uid			= This.Object.waste_code_uid[ll_row]
//			ls_short_waste_code 		= This.Object.ProfileWasteCode_waste_code[ll_row]
//			ll_default_sequence_id	= This.Object.default_sequence_id[ll_row]
//			
//			This.Object.waste_code[ll_row] 						= This.Object.waste_code[ll_next_row]
//			This.Object.waste_code_uid[ll_row] 					= This.Object.waste_code_uid[ll_next_row]
//			This.Object.ProfileWasteCode_waste_code[ll_row] = This.Object.ProfileWasteCode_waste_code[ll_next_row]	
//			This.Object.default_sequence_id[ll_row] 			= This.Object.default_sequence_id[ll_next_row]
//			This.Object.include[ll_row] 							= This.Object.include[ll_next_row]
//			
//			This.Object.waste_code[ll_next_row] 						= ls_waste_code
//			This.Object.waste_code_uid[ll_next_row] 					= ll_waste_code_uid
//			This.Object.ProfileWasteCode_waste_code[ll_next_row] 	= ls_short_waste_code	
//			This.Object.default_sequence_id[ll_next_row] 			= ll_default_sequence_id
//			This.Object.include[ll_next_row] 							= li_include
//
//			This.SelectRow(ll_row, FALSE)
//			This.SelectRow(ll_next_row, TRUE)
//			ib_changed_waste_code = TRUE
//			
//		END IF
		
	CASE ELSE
END CHOOSE

IF ib_changed_waste_code THEN
	POST wf_set_waste_code_sequence(This)
	POST wf_set_primary_waste_code()
END IF
end event

event itemchanged;integer	li_include, li_count, li_rc, li_null
long		ll_row_header, ll_row, ll_waste_code_uid
string	ls_find, ls_waste_code, ls_column, ls_status

IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 1

// Can user change waste code?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Waste Codes", "You do not have access to change waste codes.", Exclamation!)
	RETURN 2
END IF	

// Check for header line on Active approval
ll_row_header = idw_header.GetRow() 
IF ll_row_header <= 0 THEN 
	RETURN 1
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN 1
END IF

SetNull(li_null)

CHOOSE CASE Lower(dwo.name)
	CASE "include"
		li_include = Integer(data)
		IF li_include = 1 THEN
			li_count = 0
			FOR ll_row = 1 To This.RowCount()
				IF This.Object.include[ll_row] = 1 THEN
					ls_status = Upper(This.Object.status[row])
					IF ls_status = 'I' THEN
						MessageBox(gs_app_name+": Waste Codes available for Manifest Print", "Inactive waste code cannot be selected for manifest printing.", Exclamation!)
						RETURN 2
					END IF
					li_count ++
					IF li_count = ii_top6 THEN
						MessageBox(gs_app_name+": Waste Codes available for Manifest Print", "Please de-select a waste code to add a new waste code to the available codes for manifest printing.", Exclamation!)
						RETURN 2
					END IF
				END IF
			NEXT
		ELSE
			// Deselect
			This.Object.sequence_id[row] = li_null
		END IF
		POST wf_set_waste_code_sequence(This)
		
		CASE ELSE
END CHOOSE
end event

event clicked;// Row Higlight
//Long	ll_row, ll_rowcount
//
//IF row > 0 THEN
//	ll_rowcount = This.Rowcount()
//	IF ll_rowcount > 1 THEN
//		FOR ll_row = 1 TO ll_rowcount
//			IF ll_row <> row THEN
//				This.SelectRow(ll_row, FALSE)
//			END IF
//		NEXT
//	END IF
//	
//	This.SelectRow(row, TRUE)
//END IF
end event

type dw_waste_profilelab from datawindow within tabpage_waste
integer y = 84
integer width = 4407
integer height = 784
integer taborder = 190
string title = "none"
string dataobject = "d_profile_waste_code_profilelab_dragon"
boolean border = false
boolean livescroll = true
end type

event itemchanged;// dw_waste_other itemchanged

string	ls_null

SetNull(ls_null)

// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

CHOOSE CASE Lower(dwo.name)
	CASE "used_oil"
		If data <> "T" Then
			this.Object.wwa_halogen_gt_1000[row] = ls_null
			this.Object.halogen_source[row] = ls_null
			this.Object.halogen_source_desc[row] = ls_null
			this.Object.halogen_source_other[row] = ls_null
		End If
	
	CASE 'halogen_source'
		IF Upper(data) = 'U' THEN
			this.Object.halogen_source_desc[row] = ls_null
			this.Object.halogen_source_other[row] = ls_null
		END IF
		
	CASE ELSE
END CHOOSE

ib_changed_profile = TRUE
end event

type dw_waste_other from anc_dw within tabpage_waste
event ue_mouse_scroll pbm_vbxevent47
integer width = 4411
integer height = 968
integer taborder = 90
string dataobject = "d_profile_waste_code_other_dragon"
end type

event ue_mouse_scroll;// dw_waste_other_itemchanged
return 1
end event

event itemchanged;
string		ls_null

setnull(ls_null)
// dw_waste_other itemchanged
// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

IF lower(dwo.name) = "rcra_exempt_flag" THEN
	IF Upper(data) <> 'T'THEN
		This.object.rcra_exempt_reason[row] = ls_null
	END IF
END IF
ib_changed_profile = TRUE

POST wf_set_rcra_haz_flag()
end event

type tabpage_const from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Constituent"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_const dw_const
dw_wcr_const dw_wcr_const
ddlb_quick_fill_unit ddlb_quick_fill_unit
ddlb_quick_fill_test_method ddlb_quick_fill_test_method
end type

on tabpage_const.create
this.dw_const=create dw_const
this.dw_wcr_const=create dw_wcr_const
this.ddlb_quick_fill_unit=create ddlb_quick_fill_unit
this.ddlb_quick_fill_test_method=create ddlb_quick_fill_test_method
this.Control[]={this.dw_const,&
this.dw_wcr_const,&
this.ddlb_quick_fill_unit,&
this.ddlb_quick_fill_test_method}
end on

on tabpage_const.destroy
destroy(this.dw_const)
destroy(this.dw_wcr_const)
destroy(this.ddlb_quick_fill_unit)
destroy(this.ddlb_quick_fill_test_method)
end on

type dw_const from datawindow within tabpage_const
event ue_sync_uhc ( )
integer y = 4
integer width = 4425
integer height = 2008
integer taborder = 30
string title = "none"
string dataobject = "d_profile_const_dragon"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event ue_sync_uhc();Long	ll_row  
Char  lc_uhc
 


ll_row = This.find("uhc='T'", 1, This.RowCount() )
 

If ll_row = 0 Then
	lc_uhc = 'F'
Else
	lc_uhc = 'T'
End IF

ll_row = idw_technical.getRow()
If ll_row > 0 Then
	idw_technical.SetItem( ll_row, "underlying_haz_constituents", lc_uhc)
End IF
//DevOps 19039 info_gde 02/05/2021; UHC Mapping - Database Refresh Issuee



end event

event buttonclicked;boolean	lb_first = TRUE, lb_new_constituent_row_is_DHS
datetime ldt_today
double	ldb_concentration,ldb_min_concentration, ld_fm25d, ld_fm305, ld_molecular_weight, ld_vapor_pressure, ld_density, ld_uts_concentration,ld_null,ldb_typical
integer	li_idx, li_response, li_rc, il_response,i
long		ll_row_header, ll_rowcount, ll_i, ll_newrow, ll_const_id
long		ll_row, ll_rows, ll_profile_id, ll_found_row, ll_waste_code_uid
string	     ls_unit, ls_waste_code, ls_value, ls_where, ls_orig_filter, ls_ddvoc_flag, ls_voc_flag, ls_caavoc_flag, ls_status, ls_uts_unit, ls_const_is_uhc
string     ls_tri,ls_constituents_dhs,ls_air_permit
datastore ds_generic_adds, ds_metal_adds
str_pick	lstr
str_pass   lstr_pass

SetNull(ld_null)
IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN

// Can user change constituent?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Constituent", "You do not have access to change constituents.", Exclamation!)
	RETURN 
END IF	

idw_header.AcceptText()
ll_row_header = idw_header.GetRow() 
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
END IF

ll_profile_id = idw_header.Object.profile_id[ll_row_header]
ldt_today = DateTime(Today(), Now())

CHOOSE CASE Lower(dwo.name)
	CASE "b_assign"
		lstr.s_window_title			= "Constituent Select"
		//DevOps 15333 info_gde 06/02/2020; Constituent - Pop up selection too narrow and users can't get to other tabs
		lstr.i_window_width		= 2946 //DevOps 15907 info_gde 04/02/2021; EQAI - Add New Profile - Sec E6 Format	 
		//lstr.i_window_width		=  2000
		lstr.b_multipick				= TRUE
		lstr.i_tab_count				= 26
		lstr.s_retrieve_by[1]		= "const_alpha_desc"
		lstr.s_button_text[1]		= "Alphabetize by Name"
		lstr.i_return_column_count	= 25
		lstr.to_transaction			= itr_share
		
		// SK 07/12/2013 Commenting the below as it was requested that both constituent tabs should behave the same!!
//		if tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr then
//			ls_where = "LDR_id IS NOT NULL"
//		else
			ls_where = ""
//		end if

		// Set the 26 tabs' titles to "A", "B", "C", etc.
		FOR li_idx = 1 TO 26
			lstr.s_tab_title[li_idx]		= Char(li_idx + 64)
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_constituent"
			lstr.s_where[li_idx]				= ls_where
			lstr.s_new_reference[li_idx]	= "constituent"
		NEXT
		
		OpenWithParm(w_popup_quick_select, lstr)
		
		lstr = Message.PowerObjectParm
		IF IsValid(lstr) THEN
			IF lstr.i_return_record_count >= 1 THEN
//				ls_orig_filter = This.Describe ("DataWindow.Table.Filter")
//				IF ls_orig_filter = "?" THEN ls_orig_filter = ""
//				This.SetFilter ('')
//				This.Filter ()
				FOR ll_i = 1 TO lstr.i_return_record_count
					// This next IF prevents the insertion of duplicates
					ll_found_row = this.Find("const_id=" + String(lstr.return1[ll_i]), 1, this.RowCount() + 1)
					IF ll_found_row = 0 THEN
						ll_const_id = Long(lstr.return1[ll_i])
						ldb_concentration = lstr.return3[ll_i]
						ls_unit = lstr.return4[ll_i]
						ldb_min_concentration = lstr.return12[ll_i]
						ls_caavoc_flag =  lstr.return13[ll_i]  
					     ld_fm25d =  lstr.return14[ll_i]  
						ld_fm305 =  lstr.return15[ll_i]  
						ls_ddvoc_flag =  lstr.return16[ll_i]  
						ls_voc_flag =  lstr.return17[ll_i]  
                          ld_molecular_weight =  lstr.return18[ll_i]  
		  			    ld_density =  lstr.return19[ll_i]  
      				    ld_vapor_pressure = lstr.return20[ll_i]  
						ld_uts_concentration = lstr.return21[ll_i]  
						//DevOps:21297 -  TRI/DHS/Air Permit values showing as N/A 
						ls_uts_unit = lstr.return22[ll_i]  
							ls_tri =  lstr.return11[ll_i]
						IF ls_tri =  "Yes" THEN
							ls_tri = 'T' 
						ELSEIF ls_tri = "No" THEN 
							ls_tri = 'F' 
						ELSE 
							ls_tri = 'N/A'
						END IF						
						ls_constituents_dhs = lstr.return23[ll_i]
						IF ls_constituents_dhs =  "Yes" THEN
							ls_constituents_dhs = 'T' 
						ELSEIF ls_constituents_dhs = "No" THEN 
							ls_constituents_dhs = 'F' 
						ELSE 
							ls_constituents_dhs = 'N/A'
						END IF						
						ls_air_permit = lstr.return24[ll_i]
						IF ls_air_permit =  "Yes" THEN
							ls_air_permit = 'T' 
						ELSEIF ls_air_permit = "No" THEN 
							ls_air_permit = 'F' 
						ELSE 
							ls_air_permit = 'N/A'
						END IF						
						
						ll_newrow = This.InsertRow(0)
						ib_changed_const = TRUE
						
						This.Object.const_id[ll_newrow] = ll_const_id
						// SK 07/12/2013 Commented below
						// rb 07/11/2012 WPF uses ShareData, so if added from there, UHC=T
//						if tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr then
//							This.Object.UHC[ll_newrow] = "T"
//						else
							This.Object.UHC[ll_newrow] = "U"
							This.Object.cor_lock_flag[ll_newrow] = "T" // DevOps:38343 - AM
//						end if
							IF ldb_min_concentration = 0 then ldb_min_concentration = ld_null
							IF ldb_concentration = 0 then ldb_concentration = ld_null
							
						This.Object.concentration[ll_newrow] = ldb_concentration
						This.Object.min_concentration[ll_newrow] = ldb_min_concentration
						IF IsNull ( ls_unit ) THEN ls_unit = 'mg/kg'
						This.Object.unit[ll_newrow] = ls_unit
						This.Object.TRI[ll_newrow] = ls_tri// String(lstr.return11[ll_i]) 
					     This.Object.caavoc[ll_newrow] = ls_caavoc_flag
						This.Object.fm25d[ll_newrow] = ld_fm25d
				         This.Object.fm305[ll_newrow] = ld_fm305
						This.Object.ddvoc[ll_newrow] = ls_ddvoc_flag
						This.Object.voc[ll_newrow] = ls_voc_flag
						This.Object.molecular_weight[ll_newrow] = ld_molecular_weight
						This.Object.density[ll_newrow] = ld_density
						This.Object.vapor_pressure[ll_newrow] = ld_vapor_pressure	
						This.Object.univ_treatment_std_nww[ll_newrow] = ld_uts_concentration	
						This.Object.univ_treatment_std_nww_unit[ll_newrow] = ls_uts_unit	
						This.Object.added_by[ll_newrow] = gs_user_id
						This.Object.date_added[ll_newrow] = ldt_today
						This.Object.modified_by[ll_newrow] = gs_user_id
						This.Object.date_modified[ll_newrow] = ldt_today
						This.Object.constituents_dhs[ll_newrow] = ls_constituents_dhs //String(lstr.return23[ll_i]) 
						This.Object.air_permit_restricted[ll_newrow] = ls_air_permit //String(lstr.return24[ll_i]) 
						This.Object.const_is_uhc[ll_newrow] = String(lstr.return25[ll_i])
					ELSE
						// SK 07/2013 commented below
						// this constituent already exists, if we are assigning UHC constituents make sure this one is 
						// marked as UHC
//						IF tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr THEN
//							This.Object.UHC[ll_found_row] = 'T'
//						END IF
					END IF
				NEXT
//				This.SetFilter (ls_orig_filter)
//				This.Filter ()
//				This.Sort()
			END IF
		END IF
	CASE "b_assign_cas"
		lstr.s_window_title			= "Constituent Select by CAS"
		lstr.i_window_width			= 2946 //DevOps 15907 info_gde 04/02/2021; EQAI - Add New Profile - Sec E6 Format
		lstr.b_multipick				= TRUE
		lstr.i_tab_count				= 10
		lstr.s_retrieve_by[1]		= "cas_code"
		lstr.s_button_text[1]		= "Alphabetize by Name"
		lstr.i_return_column_count	= 25

		lstr.to_transaction			= itr_share
		
		// SK 07/12/2013 commented below
		// sk 09/12/2012
//		if tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr then
//			ls_where = "LDR_id IS NOT NULL"
//		else
			ls_where = ""
//		end if
		
		// Set the 10 tabs' titles to "0", "1", "2", etc.
		FOR li_idx = 1 TO 10
			lstr.s_tab_title[li_idx]		= char(li_idx + 47)
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_constituent"
			lstr.s_where[li_idx]				= ls_where
			lstr.s_new_reference[li_idx]	= "constituent" // if you want New button to display
		NEXT
		
		OpenWithParm(w_popup_quick_select, lstr)
		
		lstr = Message.PowerObjectParm
		IF IsValid(lstr) THEN
			IF lstr.i_return_record_count >= 1 THEN
//				ls_orig_filter = This.Describe ("DataWindow.Table.Filter")
//				IF ls_orig_filter = "?" THEN ls_orig_filter = ""
//				This.SetFilter ('')
//				This.Filter ()
				FOR ll_i = 1 TO lstr.i_return_record_count
					// This next IF prevents the insertion of duplicates
					ll_found_row = This.Find("const_id=" + String(lstr.return1[ll_i]), 1, This.RowCount()+1)
					IF ll_found_row = 0 THEN
						ldb_concentration = lstr.return3[ll_i]
						ldb_min_concentration = lstr.return12[ll_i]
						ls_caavoc_flag =  lstr.return13[ll_i]  
					     ld_fm25d =  lstr.return14[ll_i]  
						ld_fm305 =  lstr.return15[ll_i]  
						ls_ddvoc_flag =  lstr.return16[ll_i]  
						ls_voc_flag =  lstr.return17[ll_i]  
						ld_molecular_weight =  lstr.return18[ll_i]  
		  			    ld_density =  lstr.return19[ll_i]  
      				    ld_vapor_pressure = lstr.return20[ll_i] 
					    ld_uts_concentration = lstr.return21[ll_i]  
						ls_uts_unit = lstr.return22[ll_i]  
						ls_unit = lstr.return4[ll_i]
						//DevOps:21297 -  TRI/DHS/Air Permit values showing as N/A 
						ls_tri =  lstr.return11[ll_i]
						IF ls_tri =  "Yes" THEN
							ls_tri = 'T' 
						ELSEIF ls_tri = "No" THEN 
							ls_tri = 'F' 
						ELSE 
							ls_tri = 'N/A'
						END IF						
						ls_constituents_dhs = lstr.return23[ll_i]
						IF ls_constituents_dhs =  "Yes" THEN
							ls_constituents_dhs = 'T' 
						ELSEIF ls_constituents_dhs = "No" THEN 
							ls_constituents_dhs = 'F' 
						ELSE 
							ls_constituents_dhs = 'N/A'
						END IF						
						ls_air_permit = lstr.return24[ll_i]
						IF ls_air_permit =  "Yes" THEN
							ls_air_permit = 'T' 
						ELSEIF ls_air_permit = "No" THEN 
							ls_air_permit = 'F' 
						ELSE 
							ls_air_permit = 'N/A'
						END IF						
						ll_newrow = This.InsertRow(0)
						ib_changed_const = TRUE
						ll_const_id = Long(lstr.return1[ll_i])
						
						This.Object.const_id[ll_newrow] = ll_const_id
						// SK 07/12/2013 commented below
						// rb 07/11/2012 WPF uses ShareData, so if added from there, UHC=T
//						if tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr then
//							This.Object.UHC[ll_newrow] = "T"
//						else
							This.Object.UHC[ll_newrow] = "U"
							This.Object.cor_lock_flag[ll_newrow] = "T" // DevOps:38343 - AM
//						end if
							IF ldb_min_concentration = 0 then ldb_min_concentration = ld_null
							IF ldb_concentration = 0 then ldb_concentration = ld_null
						This.Object.TRI[ll_newrow] = ls_tri  //String(lstr.return11[ll_i])  	
						This.Object.concentration[ll_newrow] = ldb_concentration
						This.Object.min_concentration[ll_newrow] = ldb_min_concentration
						IF IsNull ( ls_unit ) THEN ls_unit = 'mg/kg'
						This.Object.unit[ll_newrow] = ls_unit
						This.Object.caavoc[ll_newrow] = ls_caavoc_flag
						This.Object.fm25d[ll_newrow] = ld_fm25d
				         This.Object.fm305[ll_newrow] = ld_fm305
						This.Object.ddvoc[ll_newrow] = ls_ddvoc_flag
						This.Object.voc[ll_newrow] = ls_voc_flag
						This.Object.molecular_weight[ll_newrow] = ld_molecular_weight
						This.Object.density[ll_newrow] = ld_density
						This.Object.vapor_pressure[ll_newrow] = ld_vapor_pressure		
						This.Object.univ_treatment_std_nww[ll_newrow] = ld_uts_concentration	
						This.Object.univ_treatment_std_nww_unit[ll_newrow] = ls_uts_unit	
						This.Object.added_by[ll_newrow] = gs_user_id
						This.Object.date_added[ll_newrow] = ldt_today
						This.Object.modified_by[ll_newrow] = gs_user_id
						This.Object.date_modified[ll_newrow] = ldt_today
						This.Object.constituents_dhs[ll_newrow] = ls_constituents_dhs // String(lstr.return23[ll_i]) 
						This.Object.air_permit_restricted[ll_newrow] = ls_air_permit // String(lstr.return24[ll_i]) 
						This.Object.const_is_uhc[ll_newrow] = String(lstr.return25[ll_i])
					ELSE
						// SK 07/2013 commented below
						// this constituent already exists, if we are assigning UHC constituents make sure this one is 
						// marked as UHC
//						IF tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr THEN
//							This.Object.UHC[ll_found_row] = 'T'
//						END IF
					END IF
				NEXT
//				This.SetFilter (ls_orig_filter)
//				This.Filter ()
//				This.Sort()
			END IF
		END IF
	CASE "b_default"
		ls_waste_code 		= idw_header.Object.waste_code[ll_row_header]
		ll_waste_code_uid = idw_header.Object.waste_code_uid[ll_row_header]
		
		//20200122 jcb #13583 While creating test data, discovered column c.uhc is renamed uhc_flag BUT profileConstituent column stays UHC
		//20200122 jcb #13583 repl			SELECT c.const_id, c.UHC   with  SELECT c.const_id, c.UHC_flag  NEVER GOT ERRORS 12/3/2019 
		DECLARE CAS_cursor CURSOR FOR  
			SELECT c.const_id, c.UHC_flag	
			FROM Constituents c, WasteCodeCAS w
			WHERE c.CAS_code = w.CAS_code
			AND w.waste_code_uid = :ll_waste_code_uid
		USING itr_share;
		
		OPEN CAS_cursor;
		
		DO WHILE itr_share.SQLCode = 0
			FETCH CAS_cursor INTO :ll_const_id, :ls_const_is_uhc;
			IF itr_share.SQLCode = 0 THEN
		
				// Delete any records already assigned
				IF lb_first THEN
					ll_rowcount = This.RowCount()
					FOR ll_row = ll_rowcount TO 1 STEP -1		
						wf_audit(idw_const, ll_profile_id, ll_row, TRUE)
						This.DeleteRow(ll_row)
					NEXT
					lb_first = FALSE
				END IF
		
				// Create a new record
				ll_newrow = This.InsertRow(0)
				This.Object.profile_id[ll_newrow] = ll_profile_id
				This.Object.const_id[ll_newrow] = ll_const_id
				This.Object.const_is_uhc[ll_newrow] = ls_const_is_uhc
				// SK 07/2013 Commented below
//				// rb 07/11/2012 WPF uses ShareData, so if added from there, UHC=T
//				if tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr then
//					This.Object.UHC[ll_newrow] = "T"
//				else
					This.Object.UHC[ll_newrow] = "U"
			     	This.Object.cor_lock_flag[ll_newrow] = "T" // DevOps:38343 - AM
//				end if
				This.Object.unit[ll_newrow] = ls_unit
				This.Object.added_by[ll_newrow] = gs_user_id
				This.Object.date_added[ll_newrow] = ldt_today
				This.Object.modified_by[ll_newrow] = gs_user_id
				This.Object.date_modified[ll_newrow] = ldt_today
						
				ib_changed_const = TRUE
				
			ELSEIF itr_share.SQLCode = -1 THEN
				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading CAS Constituents.", Exclamation!)
				CLOSE CAS_cursor;
				RETURN
			END IF
		LOOP
		
		CLOSE CAS_cursor;
		
		// No default constituent records
		IF lb_first THEN	
			MessageBox(gs_app_name + ":  Default", "There are no default constituents assigned to this profile.", Information!)
		END IF

	CASE "b_clear"
		// Make sure they want to delete all constituents
		li_response = MessageBox(gs_app_name + &
			": Delete ALL Constituents", + &
			"Are you sure you want to delete ALL constituents?  (To delete only one, click on the minus button next to the constituent you wish to delete.)", &
			Question!, YesNo!, 2)
						
		IF li_response = 1 THEN
			ll_rowcount = This.RowCount()
			FOR ll_i = ll_rowcount TO 1 STEP -1		
				wf_audit(idw_const, ll_profile_id, ll_i, TRUE)
				This.DeleteRow(ll_i)
			NEXT
			This.PostEvent("ue_sync_uhc")
		END IF
		IF ll_rowcount <> This.RowCount() THEN ib_changed_const = TRUE	
	CASE "b_delete"
		IF row > 0 THEN
			// Make sure they want to delete this row
			li_response = MessageBox(gs_app_name + ":  Delete Line", "Are you sure you want to delete constituents line # " + string(row), question!, YesNo!, 2)
			IF li_response = 1 THEN
				// Delete this constituent
				IF ib_new_record THEN
					This.RowsDiscard(row, row, Primary!)
				ELSE
					wf_audit(idw_const, ll_profile_id, row, TRUE)
					This.DeleteRow(row)
				END IF 
				ib_changed_const = TRUE
				This.PostEvent("ue_sync_uhc")
			END IF
		END IF
			// 06/12/2015
		wf_calculate_constituent ()
		wf_calculate_vapor_pressure_density()
		
		ls_status = idw_header.Object.tracking_type [ll_row_header]
		IF ls_status = "A" or ls_status = "APRC" THEN 
			// MPM - 2/16/17 - Pass a false value to function to indicate that we don't need an answer back
			wf_calculate_uts_constituent(FALSE) 
		END IF

	CASE "b_generics"
		ds_generic_adds = CREATE DATASTORE
		ds_generic_adds.dataobject = "d_profile_const_generic"
		ds_generic_adds.SetTransObject(itr_share)
		ll_rowcount = ds_generic_adds.Retrieve(ll_profile_id)
		ll_rows = This.RowCount()
		
//		ls_orig_filter = This.Describe ("DataWindow.Table.Filter")
//		IF ls_orig_filter = "?" THEN ls_orig_filter = ""
//		This.SetFilter ('')
//		This.Filter ()
		FOR ll_row = 1 TO ll_rowcount
			ll_const_id = ds_generic_adds.GetItemNumber(ll_row, "const_id")
			// This next IF prevents the insertion of duplicates
			ll_found_row = This.Find("const_id = " + String(ll_const_id), 1, ll_rows)
			IF ll_found_row = 0 THEN
				ll_newrow = InsertRow(0)
				This.Object.profile_id[ll_newrow] = ll_profile_id
				This.Object.const_id[ll_newrow] = ds_generic_adds.Object.const_id[ll_row]
				This.Object.concentration[ll_newrow] = ds_generic_adds.Object.generic_concentration[ll_row]
				This.Object.min_concentration[ll_newrow] = ds_generic_adds.Object.generic_concentration[ll_row]
				This.Object.unit[ll_newrow] = ds_generic_adds.Object.generic_unit[ll_row]
				This.Object.univ_treatment_std_nww[ll_newrow] = ds_generic_adds.Object.univ_treatment_std_nww[ll_row]
				This.Object.univ_treatment_std_nww_unit[ll_newrow] = ds_generic_adds.Object.univ_treatment_std_nww_unit[ll_row]
				This.Object.const_is_uhc[ll_newrow] = ds_generic_adds.Object.uhc_flag[ll_row]
				
				// MPM - 4/26/2021 - Commented out DevOps 19730 changes below, since they are being deployed after EQAI 7.4.84.
				//DevOps 19730 info_gde 04/22/2021; Constituent 'TRI', 'DHS', and 'Air Permit' Checkboxes
				This.Object.air_permit_restricted[ll_newrow] = ds_generic_adds.Object.air_permit_restricted[ll_row]
				This.Object.constituents_dhs[ll_newrow] = ds_generic_adds.Object.dhs[ll_row]
				This.Object.tri[ll_newrow] = ds_generic_adds.Object.tri[ll_row]
				
				
// 20191203 jcb 12647 repl				This.Object.UHC[ll_newrow] = "U" //DevOps 12647 changed from T to U
//				This.Object.UHC_flag[ll_newrow] = "U" //DevOps 12647 changed from T to U	; on 20191203 ren'd to uhc_flag
				This.Object.UHC[ll_newrow] = "U" //DevOps 12647 03/14/2020
				This.Object.cor_lock_flag[ll_newrow] = "T" // DevOps:38343 - AM
				This.Object.added_by[ll_newrow] = gs_user_id
				This.Object.date_added[ll_newrow] = ldt_today
				This.Object.modified_by[ll_newrow] = gs_user_id
				This.Object.date_modified[ll_newrow] = ldt_today
			ELSE
				// this constituent already exists, if we are assigning UHC constituents make sure this one is 
				// marked as UHC
				IF tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr THEN
//					This.Object.UHC[ll_found_row] = 'T' //DevOps 12647 commented out since user should always specify UHC
				END IF
			END IF
		NEXT
//		This.SetFilter (ls_orig_filter)
//		This.Filter ()
//		This.Sort()
		
		DESTROY ds_generic_adds
		ib_changed_const = TRUE
		
	CASE "b_metals"
		ds_metal_adds = CREATE DATASTORE
		ds_metal_adds.dataobject = "d_profile_const_ww_metal"
		ds_metal_adds.SetTransObject(itr_share)
		ll_rowcount = ds_metal_adds.Retrieve(ll_profile_id)
		ll_rows = This.RowCount()
		
//		ls_orig_filter = This.Describe ("DataWindow.Table.Filter")
//		IF ls_orig_filter = "?" THEN ls_orig_filter = ""
//		This.SetFilter ('')
//		This.Filter ()
		FOR ll_row = 1 TO ll_rowcount
			ll_const_id = ds_metal_adds.GetItemNumber(ll_row, "const_id")
			ll_found_row = This.Find("const_id = " + String(ll_const_id), 1, ll_rows)
			IF ll_found_row = 0 THEN
				ll_newrow = InsertRow(0)

				This.Object.profile_id[ll_newrow] = ll_profile_id
				This.Object.const_id[ll_newrow] = ds_metal_adds.Object.const_id[ll_row]
				This.Object.concentration[ll_newrow] = ds_metal_adds.Object.concentration[ll_row]
				This.Object.min_concentration[ll_newrow] = ds_metal_adds.Object.concentration[ll_row]
				This.Object.unit[ll_newrow] = ds_metal_adds.Object.unit[ll_row]
				This.Object.univ_treatment_std_nww[ll_newrow] = ds_metal_adds.Object.univ_treatment_std_nww[ll_row]
				This.Object.univ_treatment_std_nww_unit[ll_newrow] = ds_metal_adds.Object.univ_treatment_std_nww_unit[ll_row]
				// 20200122 #13583 REPL shoulda been caught in DEC:   This.Object.const_is_uhc[ll_newrow] = ds_metal_adds.Object.uhc[ll_row]
				This.Object.const_is_uhc[ll_newrow] = ds_metal_adds.Object.uhc_flag[ll_row]      // ren'd uhc to uhc_flag
				// MPM - 4/26/2021 - Commented out DevOps 19730 changes below, since they are being deployed after EQAI 7.4.84.
				//DevOps 19730 info_gde 04/22/2021; Constituent 'TRI', 'DHS', and 'Air Permit' Checkboxes
				This.Object.air_permit_restricted[ll_newrow] = ds_metal_adds.Object.air_permit_restricted[ll_row]
				This.Object.constituents_dhs[ll_newrow] = ds_metal_adds.Object.dhs[ll_row]
				This.Object.tri[ll_newrow] = ds_metal_adds.Object.tri[ll_row]
//				 20191203 jcb #12647 repl	This.Object.UHC[ll_newrow] = "U" //DevOps 12647 changed from T to U
				// 20200123 jcb #13583  this is was NOT renamed in this table with #12647 on 12/3/2019 so we REPL This.Object.UHC_flag[ll_newrow] = "U" //DevOps 12647 changed from T to U ; on 20191203 jcb ren'd to uhc_flag
				This.Object.UHC[ll_newrow] = "U" //DevOps 12647 changed from T to U            Reverted to UHC 20200123 with #13583
				This.Object.cor_lock_flag[ll_newrow] = "T" // DevOps:38343 - AM
				This.Object.added_by[ll_newrow] = gs_user_id
				This.Object.date_added[ll_newrow] = ldt_today
				This.Object.modified_by[ll_newrow] = gs_user_id
				This.Object.date_modified[ll_newrow] = ldt_today
			ELSE
				// this constituent already exists, if we are assigning UHC constituents make sure this one is 
				// marked as UHC
				IF tab_1.tabpage_view.tab_2.selectedtab = ii_tabpage_wcr THEN
//					This.Object.UHC[ll_found_row] = 'T' //DevOps 12647 commented out since user should always specify UHC
				END IF
			END IF
		NEXT
//		This.SetFilter (ls_orig_filter)
//		This.Filter ()
//		This.Sort()
//		
		DESTROY ds_metal_adds
		//DevOps:16251	
 CASE "b_typical"
		this.SetRow(1) //DevOps 18435 info_gde 02/12/2021; Constituent Tab - 'Assign Min/Max' Not Updating Bottom Constituent Row
	    FOR i = 1 to This.RowCount()
			ldb_concentration = This.Object.concentration[i] 
			ldb_min_concentration = This.Object.min_concentration[i]
			ldb_typical = This.Object.typical_concentration[i]
			IF  IsNull(ldb_concentration)  THEN 
				This.Object.concentration[i]  = ldb_typical
				wf_audit(This, ll_profile_id, i, TRUE)
				ib_changed_const = TRUE
			END IF
			IF IsNull(ldb_min_concentration) THEN
				This.Object.min_concentration[i] = ldb_typical
				wf_audit(This, ll_profile_id, i, TRUE)
				ib_changed_const = TRUE
			END IF
		NEXT
	
  CASE "b_report_info" // "b_information"
	  lstr_pass.d[1] = ll_profile_id
	  lstr_pass.po[2] = itr_share
	 // IF idw_const.GetItemStatus ( row , 0, Primary! ) = Datamodified! OR idw_const.GetItemStatus ( row , 0, Primary! ) = New! OR idw_const.GetItemStatus ( row , 0, Primary! ) = NewModified! THEN 	
	     IF ib_changed_const = TRUE  THEN
	        il_response = MessageBox ( gs_app_name + ": Information", "Please save the changes.", Question! , YesNo!, 2)
			 IF il_response = 1 THEN
				 IF wf_validate () =  gi_failure THEN
					RETURN
				 ELse
				    wf_save()
	                 OpenWithParm(w_popup_profile_constituent_report, lstr_pass)
				 END IF
		     END IF
		ELSE
			 OpenWithParm(w_popup_profile_constituent_report, lstr_pass)
		END IF
END CHOOSE
//DevOps:17007 - Added dw_technical.GetRow() to fix app termination
IF idw_technical.GetRow() > 0 THEN 
	IF ib_changed_const = TRUE THEN
		This.SetSort("const_id")
		This.Sort()
		This.SetColumn("concentration")
		This.ScrollToRow(0)
		This.SetFocus()
	
		// rb 07/16/2012 - Manage the "Underlying Haz Constituents" question
		if this.Find ("uhc='T'", 1, this.RowCount()) > 0 then		
			idw_technical.Object.underlying_haz_constituents[idw_technical.GetRow()] = "T"
			if tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_wcr and idw_wcr_display_1.dataobject = "d_profile_underlying_haz_const_form" then
				idw_wcr_display_1.Object.underlying_haz_constituents[idw_wcr_display_1.GetRow()] = "T"
			end if
		else
			if idw_technical.Object.underlying_haz_constituents[idw_technical.GetRow()] = "T" then
				idw_technical.Object.underlying_haz_constituents[idw_technical.GetRow()] = "F"
				if tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_wcr and idw_wcr_display_1.dataobject = "d_profile_underlying_haz_const_form" then
					idw_wcr_display_1.Object.underlying_haz_constituents[idw_wcr_display_1.GetRow()] = "F"
				end if
			end if
		end if
	END IF
END IF

// MPM 10/24/16 - GEM 39865 - DHS notification
for ll_row = 1 to this.rowcount()
	if This.Object.constituents_dhs[ll_row] = "T" and this.getitemstatus(ll_row, 0, Primary!) = NewModified! then
		lb_new_constituent_row_is_DHS = true
    end if
next

if lb_new_constituent_row_is_DHS then
	messagebox("Constituents","This waste contains a DHS constituent; contact EHS for approval.")
end if

end event

event itemchanged;double	ldb_concentration, ld_min_cons, ld_max_cons, ld_uts_concentration, ld_conversion_concentration
long		ll_const_id,ll_i,ll_rtn_count
string	ls_unit, ls_status,ls_uhc,ls_uts_unit,ls_const_desc,ls_cor_lock_flag
integer	li_rc
dwitemstatus idwitemstatus
datawindowchild ldwc

IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN

// Can user change constituent?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Constituent", "You do not have access to change constituents.", Exclamation!)
	RETURN 2
END IF	

This.AcceptText()
ls_unit = This.Object.unit[row]

CHOOSE CASE Lower(dwo.name)
	CASE "concentration"
		ls_unit = This.Object.unit[row]
		ll_const_id = This.Object.const_id[row]
		ld_max_cons =  This.Object.concentration[row]
		ld_min_cons =  This.Object.min_concentration[row]
		// MPM - COR2 - commenting out the following block, because constituent validation is now done in wf_validate() 
//	     IF ld_max_cons >  0 and ( isnull( ld_min_cons ) or ld_min_cons = 0 ) THEN
//		   //  This.Object.min_concentration[row] = ld_max_cons
//		ELSEIF ld_max_cons <=  0 OR isnull( ld_max_cons )THEN 
//			 Messagebox (gs_app_name + ": Max Concentration" , "Max Concentration can't be negative value or 0",  Exclamation! ) 
//			Return 2
//		ELSEIF ls_unit = "%" AND ld_max_cons > 100 THEN
//			 Messagebox (gs_app_name + ": Max Concentration" , "Max concentration cannot be greater than 100%",  Exclamation! ) 
//			Return 2
//	     END IF
		  wf_calculate_constituent ()
		  wf_calculate_vapor_pressure_density()
		 
		 ls_status = idw_header.Object.tracking_type [idw_header.GetRow()]
		IF ls_status = "A" or ls_status = "APRC" THEN 
			//wf_calculate_uts_constituent()
			idw_const.GetChild (  "const_id_2" ,ldwc )
			ll_i = ldwc.Find ("const_id=" + String(ll_const_id), 1, ldwc.RowCount())
			if ll_i > 0 then
				ls_const_desc = ldwc.GetItemString (ll_i, "const_desc")
			end if
			ld_uts_concentration = idw_const.GetItemNumber ( row, "univ_treatment_std_nww" )
			ls_uts_unit =  idw_const.GetItemString ( row, "univ_treatment_std_nww_unit" )
	         ls_uhc = idw_const.GetItemString ( row, "uhc" )
			IF ld_max_cons > ld_uts_concentration  AND  ( ls_uhc = 'F' OR  ls_uhc = 'U' )  THEN
				 ld_conversion_concentration =   f_concentration_exceeds ( ll_const_id,ls_uhc,ls_uts_unit,ls_unit,ld_max_cons, ld_uts_concentration )  
				 Messagebox (gs_app_name +" " + 'UTS Value Exceeded' ,  string ( ls_const_desc  ) + " maximum concentration " + "(" + string ( ld_max_cons ) + " " + ls_unit + ")" + " " + " exceeds the UTS concentration  " + "(" + string ( ld_uts_concentration ) + " " + ls_uts_unit + ")" +  ")"   )
		   END IF
		END IF
		
	// MPM - COR2 - commenting out the following CASE statement, because constituent validation is now done in wf_validate() 
//	CASE "min_concentration"
//		ld_max_cons =  This.Object.concentration[row]
//		ld_min_cons =  This.Object.min_concentration[row]
//	     IF ld_min_cons >  0 and ( isnull( ld_max_cons ) or ld_max_cons = 0 ) THEN
//		 //    This.Object.concentration[row] = ld_min_cons
//		ELSEIF ( ld_min_cons <=  0 OR isnull( ld_min_cons ) )  AND ( ld_max_cons <= 0 OR  isnull( ld_max_cons ) )THEN 
//			 Messagebox (gs_app_name + ": Min Concentration" , "Min Concentration can't be negative value or 0",  Exclamation! ) 
//			Return 2
//		ELSEIF ls_unit = "%" AND ld_min_cons > 100 THEN
//			 Messagebox (gs_app_name + ": Min Concentration" , "Min concentration cannot be greater than 100%",  Exclamation! ) 
//			Return 2
//	     END IF
		  
	CASE "unit"
		ls_unit = This.Object.unit[row]
		ll_const_id = This.Object.const_id[row]
		ld_max_cons =  This.Object.concentration[row]
		ldb_concentration = This.Object.concentration[row]
		wf_calculate_constituent () 
		wf_calculate_vapor_pressure_density()
		
		 ls_status = idw_header.Object.tracking_type [idw_header.GetRow()]
		IF ls_status = "A" or ls_status = "APRC" THEN 
			//wf_calculate_uts_constituent()
			idw_const.GetChild (  "const_id_2" ,ldwc )
			ll_i = ldwc.Find ("const_id=" + String(ll_const_id), 1, ldwc.RowCount())
			if ll_i > 0 then
				ls_const_desc = ldwc.GetItemString (ll_i, "const_desc")
			end if
			ld_uts_concentration = idw_const.GetItemNumber ( row, "univ_treatment_std_nww" )
			ls_uts_unit =  idw_const.GetItemString ( row, "univ_treatment_std_nww_unit" )
	         ls_uhc = idw_const.GetItemString ( row, "uhc" )
			IF ldb_concentration > ld_uts_concentration  AND  ( ls_uhc = 'F' OR  ls_uhc = 'U' )  THEN
				 ld_conversion_concentration =   f_concentration_exceeds ( ll_const_id,ls_uhc,ls_uts_unit,ls_unit,ldb_concentration, ld_uts_concentration )  
				 Messagebox (gs_app_name +" " + 'UTS Value Exceeded' ,  string ( ls_const_desc  ) + " maximum concentration " + "(" + string ( ld_max_cons ) + " " + ls_unit + ")" + " " + " exceeds the UTS concentration  " + "(" + string ( ld_uts_concentration ) + " " + ls_uts_unit + ")"    )
		   END IF
		END IF
		
        idwitemstatus =  idw_const.GetItemStatus(row ,0, Primary!)
	CASE "uhc"
		This.PostEvent("ue_sync_uhc")
		
	CASE "cor_lock_flag"
			//DevOps:38343 - AM - 
			ls_cor_lock_flag = idw_const.Object.cor_lock_flag[row]
		
		if isValid(idw_const) then
			if idw_const.getrow() > 0 then

				if (is_access = "A" or is_access = "S")  then
					this.Modify('cor_lock_flag.Protect=0')
				else 
					this.Modify('cor_lock_flag.Protect=1')
				     Return 2
				end if
			end if
		end if
END CHOOSE


ib_changed_const = TRUE
This.AcceptText()
end event

event itemfocuschanged;//double	ld_min_cons, ld_max_cons
//
//ld_max_cons =  This.Object.concentration[row]
//ld_min_cons =  This.Object.min_concentration[row]
//
//IF ld_max_cons >  0 and ( isnull( ld_min_cons ) or ld_min_cons = 0 ) THEN
//     This.Object.min_concentration[row] = ld_max_cons
//ELSEIF ( ld_max_cons =  0 or Isnull (ld_max_cons))  and ( Not IsNull( ld_min_cons ) or ld_min_cons >  0 ) THEN
//	 This.Object.concentration[row] = ld_min_cons
//END IF

 
//DevOps 17864 info_gde 11/05/2020; Profile - Constituents show highlight of the line being edited
if row < 1 then return

this.ScrollToRow (row)
this.SetRow (row)

this.SelectRow(0, false)

if this.GetSelectedRow(0) < 1 then
	if ib_edit = False Then
		this.SelectRow(row, true)
	End if
end if


end event

event constructor;// MPM - 8/18/2020 - DevOps 17011
SetRowFocusIndicator(Hand!)
end event

event clicked;//DevOps 17618 info_gde 10/26/2020; Profile - Constituents show highlight of the line being edited
if row < 1 then return
string ls_uhc
this.ScrollToRow (row)
this.SetRow (row)

this.SelectRow(0, false)

if this.GetSelectedRow(0) < 1 then
	if ib_edit = False Then
		this.SelectRow(row, true)
	End if
end if


end event

event rowfocuschanging;
//DevOps 18322 info_gde 12/19/2020; EQAI-Compare Profile is not pulling over constituents correctly
idw_const.SelectRow(0, false)
idw_const.SelectRow(newrow, true)





end event

event editchanged;String ls_data

// DevOps 19079 info_gde 12/06/2021 - TEST EQAI - SQL Error - Form Management - Create Profile (E6)
IF This.DataObject = 'd_profile_const_dragon' THEN
	CHOOSE CASE Lower(dwo.name)
		CASE "typical_concentration", "min_concentration", "concentration"
			ls_data = data
			IF Right(ls_data, 2) = '.0' THEN ls_data = Left(ls_data, Len(ls_data) - 2)
			IF (Pos(ls_data, '.') = 0 AND Len(ls_data) > 8) OR (Pos(ls_data, '.') > 0 AND Len(ls_data) > 8) OR (Pos(ls_data, '.') = 8 ) THEN
				MessageBox(gs_app_name + ":  Error", "You cannot enter a value containing more than 8 digits.", StopSign!)
				This.SetText(Left(This.GetText(), Len(This.GetText()) - 2))
			ELSEIF (Pos(ls_data, '.') = 1 AND Len(ls_data) > 7)  THEN
				MessageBox(gs_app_name + ":  Error", "Only 6 digits can be entered after the decimal.", StopSign!)
				This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
			END IF			
	END CHOOSE
END IF


end event

type dw_wcr_const from datawindow within tabpage_const
boolean visible = false
integer y = 1480
integer width = 4411
integer height = 504
integer taborder = 10
boolean enabled = false
string title = "none"
string dataobject = "d_profile_wcr_const"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type ddlb_quick_fill_unit from dropdownlistbox within tabpage_const
integer x = 3186
integer y = 128
integer width = 302
integer height = 600
integer taborder = 200
boolean bringtotop = true
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;// rb 07/12/2012 Offer quick-fill for Unit
long		ll_i, ll_count
string	ls_unit, ls_status

ll_count = idw_const.RowCount()
IF ll_count = 0 THEN
	MessageBox("Profile:  Constituents", "There are no constituents to update.")
ELSEIF ll_count > 0 THEN
	IF MessageBox ("Profile:  Constituents", "Do you want to replace the current unit on all constituent lines?", &
					Question!, YesNo!, 2) = 2 THEN RETURN
END IF

ls_unit = This.Text(index)

FOR ll_i = 1 TO idw_const.RowCount()
	idw_const.Object.unit[ll_i] = ls_unit
NEXT
wf_calculate_constituent () 
wf_calculate_vapor_pressure_density()

ls_status = idw_header.Object.tracking_type [idw_header.GetRow()]
IF ls_status = "A" or ls_status = "APRC" THEN 
	// MPM - 2/16/17 - Pass a false value to function to indicate that we don't need an answer back
	wf_calculate_uts_constituent(FALSE) 
END IF
end event

type ddlb_quick_fill_test_method from dropdownlistbox within tabpage_const
integer x = 2770
integer y = 128
integer width = 279
integer height = 600
integer taborder = 160
boolean bringtotop = true
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
boolean vscrollbar = true
string item[] = {"TCLP","Totals",""}
borderstyle borderstyle = stylelowered!
end type

event selectionchanged;// AM 06/29/2020 Offer quick-fill for TestMethod
long		ll_i, ll_count
string	ls_test_method, ls_status

ll_count = idw_const.RowCount()
IF ll_count = 0 THEN
	MessageBox("Profile:  Constituents", "There are no constituents to update.")
ELSEIF ll_count > 0 THEN
	IF MessageBox ("Profile:  Constituents", "Do you want to replace the current Test Method on all constituent lines?", &
					Question!, YesNo!, 2) = 2 THEN RETURN
END IF

ls_test_method = This.Text(index)

FOR ll_i = 1 TO idw_const.RowCount()
	idw_const.Object.tclp_flag[ll_i] = ls_test_method
NEXT
//wf_calculate_constituent () 
//wf_calculate_vapor_pressure_density()

//ls_status = idw_header.Object.tracking_type [idw_header.GetRow()]
//IF ls_status = "A" or ls_status = "APRC" THEN 
//	// MPM - 2/16/17 - Pass a false value to function to indicate that we don't need an answer back
//	wf_calculate_uts_constituent(FALSE) 
//END IF
end event

type tabpage_composition from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Composition"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_composition_other dw_composition_other
dw_composition_epa dw_composition_epa
dw_composition dw_composition
end type

on tabpage_composition.create
this.dw_composition_other=create dw_composition_other
this.dw_composition_epa=create dw_composition_epa
this.dw_composition=create dw_composition
this.Control[]={this.dw_composition_other,&
this.dw_composition_epa,&
this.dw_composition}
end on

on tabpage_composition.destroy
destroy(this.dw_composition_other)
destroy(this.dw_composition_epa)
destroy(this.dw_composition)
end on

type dw_composition_other from anc_dw within tabpage_composition
event ue_mouse_scroll pbm_vbxevent47
integer x = 5
integer y = 12
integer width = 4407
integer height = 1980
integer taborder = 70
string dataobject = "d_profile_composition_dragon"
end type

event ue_mouse_scroll;return 1
end event

event itemchanged;boolean	lb_adjoining_pcb = TRUE
int		li_rc 
string	ls_pcb_conc_none, ls_pcb_conc_0_49, ls_pcb_conc_50_499, ls_pcb_conc_500, ls_temp, ls_null
decimal	ld_null

SetNull(ld_null)
SetNull(ls_null)

// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

ls_pcb_conc_0_49 		= GetItemString(row,"pcb_concentration_0_49")
ls_pcb_conc_50_499 	= GetItemString(row,"pcb_concentration_50_499")
ls_pcb_conc_500 		= GetItemString(row,"pcb_concentration_500")
ls_pcb_conc_none 		= GetItemString(row,"pcb_concentration_none")
IF isNull(ls_pcb_conc_0_49) OR (ls_pcb_conc_0_49 = "") THEN ls_pcb_conc_0_49 = "F"
IF isNull(ls_pcb_conc_50_499) OR (ls_pcb_conc_50_499 = "") THEN ls_pcb_conc_50_499 = "F"
IF isNull(ls_pcb_conc_500) OR (ls_pcb_conc_500 = "") THEN ls_pcb_conc_500 = "F"

CHOOSE CASE Lower(dwo.name)
	CASE "waste_contains_spec_hand_none"
		If data = "T" Then
			// MPM - 4/10/2020 - DevOps 15016 - Changes to Composition tab checkboxes
			SetItem(row,"biohazard","F")
			SetItem(row,"ammonia_flag", "F")
			SetItem(row,"asbestos_flag", "F")
			SetItem(row,"shock_sensitive_waste","F")
			SetItem(row,"metal_fines","F")
			SetItem(row,"pyrophoric_waste","F")
			SetItem(row,"temp_ctrl_org_peroxide","F")
			SetItem(row,"asbestos_friable_flag","U")
			SetItem(row,"radioactive_waste","F")
			SetItem(row,"oxidizer", "F")
			SetItem(row,"used_oil", "F")
			SetItem(row,"dioxins_or_furans", "F")
			SetItem(row,"react_cyanide","F")
			SetItem(row,"react_cyanide_ppm", ld_null)
			SetItem(row,"thermally_unstable", "F")
			SetItem(row,"explosives","F")
			SetItem(row,"contains_pcb","F")
			SetItem(row,"organic_peroxide","F")
			SetItem(row,"react_sulfide","F")
			SetItem(row,"react_sulfide_ppm", ld_null)
			SetItem(row,"compressed_gas", "F")
			SetItem(row,"tires", "F")
			SetItem(row,"beryllium_present","F")
			SetItem(row,"biodegradable_sorbents","F")
			SetItem(row,"reactive_other", "F")
			SetItem(row,"reactive_other_description", ls_null)
			SetItem(row,"pfas_flag", "F") //DevOps 42864
		END IF
	CASE  "biohazard", "ammonia_flag", "asbestos_flag", "shock_sensitive_waste", "metal_fines", "pyrophoric_waste", &
				"temp_ctrl_org_peroxide", "asbestos_friable", "radioactive_waste", "oxidizer",  "used_oil", "dioxins_or_furans", &
				"react_cyanide", "thermally_unstable", "explosives", "contains_pcb", "organic_peroxide", &
				"react_sulfide", "compressed_gas", "tires", "beryllium_present", "biodegradable_sorbents", &
				"reactive_other","pfas_flag"
		If data = "T" Then
			SetItem(row,"waste_contains_spec_hand_none","F")
			SetItem(row,"section_f_none_apply_flag","F")
			IF Lower(dwo.name) = "asbestos_friable_flag" THEN SetItem(row, "asbestos_flag", "T")
		ELSEIF data = "F" THEN
			IF Lower(dwo.name) = "react_cyanide" THEN SetItem(row, "react_cyanide_ppm", ld_null)
			IF Lower(dwo.name) = "react_sulfide" THEN SetItem(row, "react_sulfide_ppm", ld_null)
			IF Lower(dwo.name) = "reactive_other" THEN SetItem(row, "reactive_other_description", ls_null)
			IF Lower(dwo.name) = "asbestos_flag" THEN SetItem(row, "asbestos_friable_flag", "U")
			IF Lower(dwo.name) = "asbestos_friable_flag" THEN 
				SetItem(row, "asbestos_flag", "T")
				SetItem(row,"waste_contains_spec_hand_none","F")
				SetItem(row,"section_f_none_apply_flag","F")
			END IF
		END IF	
	CASE "react_cyanide_ppm"
		IF Len(data) > 0 THEN
			SetItem(row,"waste_contains_spec_hand_none","F")
			SetItem(row,"section_f_none_apply_flag","F")
			SetItem(row,"react_cyanide","T")
		END IF
	CASE "react_sulfide_ppm"
		IF Len(data) > 0 THEN
			SetItem(row,"waste_contains_spec_hand_none","F")
			SetItem(row,"section_f_none_apply_flag","F")
			SetItem(row,"react_sulfide","T")
		END IF
	CASE "reactive_other_description"
		IF Len(data) > 0 THEN
			SetItem(row,"waste_contains_spec_hand_none","F")
			SetItem(row,"section_f_none_apply_flag","F")
			SetItem(row,"reactive_other","T")
		END IF
	CASE "pcb_concentration_0_49"
		ls_pcb_conc_0_49 = data
		ls_temp = ls_pcb_conc_0_49 +ls_pcb_conc_50_499 + ls_pcb_conc_500
		lb_adjoining_pcb = wf_validate_adjoining(ls_temp)
		this.object.pcb_concentration_none[row] = 'F'
	CASE "pcb_concentration_50_499"
		ls_pcb_conc_50_499 = data
		ls_temp = ls_pcb_conc_0_49 +ls_pcb_conc_50_499 + ls_pcb_conc_500
		lb_adjoining_pcb = wf_validate_adjoining(ls_temp)
		this.object.pcb_concentration_none[row] = 'F'
	CASE "pcb_concentration_500"
		ls_pcb_conc_500 = data
		ls_temp = ls_pcb_conc_0_49 +ls_pcb_conc_50_499 + ls_pcb_conc_500
		lb_adjoining_pcb = wf_validate_adjoining(ls_temp)
		this.object.pcb_concentration_none[row] = 'F'
	CASE 'pcb_concentration_none'
		IF upper(data) = 'T' THEN
			this.object.pcb_concentration_0_49[row] = 'F'
			this.object.pcb_concentration_50_499[row] = 'F'
			this.object.pcb_concentration_500[row] = 'F'
		END IF
	CASE ELSE
END CHOOSE

wf_wcr_profile_map_sync (this, dwo.Name, row, data)
IF NOT lb_adjoining_pcb THEN li_rc = 1	

ib_changed_technical = TRUE

Return li_rc
end event

event itemerror;call super::itemerror;// SK 08/23/2012 Show validation errors
string ls_col
decimal ld_null

SetNull(ld_null)

ls_col = dwo.name
choose case lower(ls_col)

	case 'pcb_concentration_0_49', 'pcb_concentration_50_499', 'pcb_concentration_500'
		MessageBox("Validation Error","Selected PCB concentration values must form a continuous range~r~nwith no breaks between selected items")
		post SetItem(row,ls_col,ld_null)
		return 1
	
end choose

return 0
end event

type dw_composition_epa from anc_dw within tabpage_composition
event ue_mouse_scroll pbm_vbxevent47
integer x = 14
integer y = 380
integer width = 4137
integer height = 740
integer taborder = 80
boolean bringtotop = true
string dataobject = "d_profile_epa_code_dragon"
end type

event ue_mouse_scroll;return 1
end event

event itemchanged;
// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

//CHOOSE CASE Lower(dwo.name)
//		
//	CASE ELSE
//END CHOOSE

ib_changed_profile = TRUE
wf_wcr_profile_map_sync (this, dwo.Name, row, data)
end event

event ue_lookup;call super::ue_lookup;integer	li_rc
long		ll_row
dwobject	ldwo

str_pick	lstr_pick

ll_row = GetRow()

This.AcceptText()

if ai_indicate  > 1 Then
	// Determine if this screen can be accessed by this user
	IF (is_access = "V") OR (is_access = "P") THEN RETURN 0
End If

li_rc = gi_success

CHOOSE CASE Lower(as_col_name)
	CASE "epa_source_code"
		If ai_indicate < 3 then
			return 1
		Else			
			// Setup quick select popup
			lstr_pick.s_window_title			= "EPA Source Code Select"
			lstr_pick.i_window_width			= 0
			lstr_pick.b_multipick				= FALSE
			lstr_pick.i_tab_count				= 1
			lstr_pick.i_return_column_count	= 1
			lstr_pick.to_transaction 			= itr_share
			lstr_pick.s_tab_title[1]			= "Source Codes"
			lstr_pick.i_tabpage_type[1]		= 1
			lstr_pick.s_dataobject[1]			= "d_quick_select_source_code"
			lstr_pick.s_where[1]				= ""
			lstr_pick.s_retrieve_by[1]		= ""
			lstr_pick.s_new_reference[1]		= ""
			
			OpenWithParm(w_popup_quick_select, lstr_pick)
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				IF lstr_pick.i_return_record_count = 1 THEN
					This.Object.epa_source_code[ll_row] = String(lstr_pick.return1[1])
					ib_changed_profile = TRUE
					// rb 12/03/2012 Need to trigger itemchanged
					ldwo = this.Object.epa_source_code
					this.Event itemchanged (this.GetRow(), ldwo, String(lstr_pick.return1[1]))
				END IF
			END IF
		End If
		
	// SK 07182012		
	CASE "epa_form_code"
		If ai_indicate < 3 then
			return 1
		Else			
			// Setup quick select popup
			lstr_pick.s_window_title			= "EPA Form Code Select"
			lstr_pick.i_window_width			= 0
			lstr_pick.b_multipick				= FALSE
			lstr_pick.i_tab_count				= 1
			lstr_pick.i_return_column_count	= 1
			lstr_pick.to_transaction 			= itr_share
			lstr_pick.s_tab_title[1]			= "EPA Form Codes"
			lstr_pick.i_tabpage_type[1]		= 1
			lstr_pick.s_dataobject[1]			= "d_quick_select_epa_form_code"
			lstr_pick.s_where[1]				= ""
			lstr_pick.s_retrieve_by[1]		= ""
			lstr_pick.s_new_reference[1]		= ""
			
			OpenWithParm(w_popup_quick_select, lstr_pick)
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				IF lstr_pick.i_return_record_count = 1 THEN
					This.Object.epa_form_code[ll_row] = String(lstr_pick.return1[1])
					ib_changed_profile = TRUE
					// rb 12/03/2012 Need to trigger itemchanged
					ldwo = this.Object.epa_form_code
					this.Event itemchanged (this.GetRow(), ldwo, String(lstr_pick.return1[1]))
				END IF
			END IF
		End If

	CASE ELSE	
END CHOOSE

RETURN 0
end event

event other;call super::other;//DevOps:38977 - 03/18/2022 - AM - Lock Scroll Wheel
if message.number = 522 then message.processed = true
end event

type dw_composition from anc_dw within tabpage_composition
event ue_mouse_scroll pbm_vbxevent47
integer x = 407
integer y = 528
integer width = 3022
integer height = 360
integer taborder = 60
boolean bringtotop = true
string dataobject = "d_profile_waste_composition_dragon"
boolean vscrollbar = true
boolean border = true
end type

event itemchanged;decimal	ld_null

SetNull (ld_null)

// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

//CHOOSE CASE Lower(dwo.name)
//		
//	CASE ELSE
//END CHOOSE

// MPM - 5/17/2020 - DevOps 15763
// MPM - 3/30/2021 - DevOps 19724 - Because I changed Profile tab, Section D to ShareData() with idw_composition, we
// no longer need to call the following mapping function to keep these two dw's in sync, so I commented it out.
//wf_wcr_profile_map_sync (this, dwo.Name, row, data)
ib_changed_profile = TRUE
end event

event buttonclicked;call super::buttonclicked;int				li_ans, li_max_seq_id
Long				ll_row, ll_header_row, ll_profile_id, ll_newrow
String			ls_curr_status_code
dwItemStatus	ldwItemStatus

ll_header_row = idw_header.getrow()
IF ll_header_row <= 0 THEN RETURN
ll_profile_id 			= idw_header.object.profile_id[ll_header_row]
ls_curr_status_code 	= idw_header.object.curr_status_code[ll_header_row]
This.AcceptText()

// Determine if this screen can be accessed by this user
IF (Upper(is_access) = "V") OR (Upper(is_access) = "P") OR (Upper(is_access) = "B") THEN RETURN gi_success

// SK 09242012 Lab access user cannot change data on approved Profile
IF Upper(is_access) = 'L' AND Upper(ls_curr_status_code) = 'A' THEN
	MessageBox(gs_app_name+": Composition", "You do not have access to change waste composition on an approved profile.", Exclamation!)
	RETURN 
END IF

CHOOSE CASE Lower(dwo.name)
	CASE "b_add_comp"
		//COR2 JXM 03/15/2019 Add + button action to RAD 3sub datawindow
		if idw_wcr_display_2.DataObject = "d_profile_radioactive_supplement_page_3sub" then
			ll_newrow = idw_wcr_display_2.InsertRow(0)
			if ll_newrow > 0 then
				idw_wcr_display_2.ScrollToRow(ll_newrow)
				idw_wcr_display_2.SetColumn('radionuclide') 
				// set default value for radionuclide
				//idw_wcr_display_2.object.radionuclide[ll_newrow] = 'First row' Testing Purpose
			end if
		else
			ll_newrow = This.InsertRow(0)
			IF ll_newrow > 0 then
				This.ScrollToRow(ll_newrow)
				This.SetColumn('comp_description')
				// set default value for unit
				this.object.unit[ll_newrow] = '%'
				//This.SetItem(ll_newrow,"profile_id", ll_profile_id)
				// ib_changed_comp = TRUE
			END IF
	end if

	CASE "b_del_comp"
		li_ans = MessageBox("Delete Waste Composition Line","Delete this waste composition line?",Question!,OKCancel!,2)
		if li_ans = 1 then
			ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
			IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
				This.RowsDiscard(row, row, Primary!)
			ELSE
				wf_audit(idw_composition, ll_profile_id, row, TRUE)
				This.DeleteRow(row)
			END IF 
			ib_changed_comp = TRUE
		end if
		
	CASE ELSE
END CHOOSE

//IF ib_changed_comp THEN wf_set_composition_sequence_id() 
end event

event editchanged;call super::editchanged;
////is_data
//string ls_data, ls_name
//ls_name=dwo.Name
//ls_data = data
//
//choose case ls_name
//	case 'comp_typical_pct'
//		if (trim(ls_data) ="" OR isNull(ls_data)) AND (Trim(string(this.object.comp_typical_pct[row]))="" OR Trim(string(this.object.comp_typical_pct[row]))='0.0') then
//			//this.Modify( "comp_typical_pct.Color = 0" ) //black
//			this.object.comp_typical_pct[row].backcolor =0
//			this.object.comp_typical_pct[row].textcolor =0
//		else
//			this.object.comp_typical_pct[row].backcolor =16777215  //white
//			this.object.comp_typical_pct[row].textcolor =16777215
//		end if
//	case 'comp_from_pct'
//		/*statementblock*/
//	case 'comp_to_pct'
//		/*statementblock*/
//end choose
//


end event

type tabpage_shipping from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Shipping"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_wcr_facility dw_wcr_facility
dw_ldr_subcategory dw_ldr_subcategory
dw_container_size dw_container_size
dw_shipping dw_shipping
end type

on tabpage_shipping.create
this.dw_wcr_facility=create dw_wcr_facility
this.dw_ldr_subcategory=create dw_ldr_subcategory
this.dw_container_size=create dw_container_size
this.dw_shipping=create dw_shipping
this.Control[]={this.dw_wcr_facility,&
this.dw_ldr_subcategory,&
this.dw_container_size,&
this.dw_shipping}
end on

on tabpage_shipping.destroy
destroy(this.dw_wcr_facility)
destroy(this.dw_ldr_subcategory)
destroy(this.dw_container_size)
destroy(this.dw_shipping)
end on

type dw_wcr_facility from datawindow within tabpage_shipping
boolean visible = false
integer x = 4014
integer y = 356
integer width = 686
integer height = 400
integer taborder = 90
string title = "none"
string dataobject = "d_profile_use_facility_dragon"
boolean border = false
boolean livescroll = true
end type

type dw_ldr_subcategory from anc_dw within tabpage_shipping
event ue_mouse_scroll pbm_vbxevent47
integer x = 2391
integer y = 1320
integer width = 2007
integer height = 292
integer taborder = 50
string dataobject = "d_profile_ldr_subcategory_dragon"
boolean vscrollbar = true
boolean border = true
end type

event buttonclicked;call super::buttonclicked;// assign multiple LDR subcategories
int		li_idx, li_subcategory_id, li_ans, li_rc
long		ll_row, ll_row_new, ll_profile_id, ll_row_header
string	ls_search, ls_filter, ls_curr_status_code
str_pick lstr_pick

This.AcceptText()
ll_row_header = il_curr_row
IF ll_row_header <= 0 THEN RETURN

ll_profile_id 			= idw_header.object.profile_id[ll_row_header]
ls_curr_status_code	= idw_header.object.curr_status_code[ll_row_header]

// Determine if this screen can be accessed by this user
IF (is_access = "V") OR (is_access = "P") THEN RETURN gi_success

// SK 09242012 Lab access user cannot change data on approved Profile
IF Upper(is_access) = 'L' AND Upper(ls_curr_status_code) = 'A' THEN
	MessageBox(gs_app_name+": LDR Sub Category", "You do not have access to change LDR Sub Category on an approved profile.", Exclamation!)
	RETURN 
END IF

CHOOSE CASE Lower(dwo.name)	
	CASE 'b_assign_ldr_subcat'
		// assign with quickselect
		lstr_pick.s_window_title			= "LDR Subcategories"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		lstr_pick.i_tab_count				= 1
		lstr_pick.i_return_column_count	= 2
		lstr_pick.to_transaction			= itr_share
		
		li_idx = 1
		lstr_pick.s_tab_title[li_idx]			= "LDR Subcategories"
		lstr_pick.i_tabpage_type[li_idx]		= 1
		lstr_pick.s_dataobject[li_idx]		= "d_quick_select_ldr_subcategory"
		lstr_pick.s_where[li_idx]				= ""
		lstr_pick.s_retrieve_by[li_idx]		= ""
		lstr_pick.s_new_reference[li_idx]	= ""

		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// assign selected categories
				// Get return values
				li_subcategory_id = Long(lstr_pick.return1[li_idx])
				
				// Add only new records
				ls_search = "ldr_subcategory_id = " + String(li_subcategory_id)
				ll_row = This.Find(ls_search, 1, This.RowCount() + 1)
				IF ll_row > 0 THEN
					CONTINUE
				ELSE
					ll_row_new = This.InsertRow(0)
					This.Object.ldr_subcategory_id[ll_row_new] 	= li_subcategory_id
					This.Object.profile_id[ll_row_new] 				= ll_profile_id
					IF Upper(lstr_pick.return2[li_idx]) = 'NONE' THEN
						// delete everything else
						ls_filter = "ldr_subcategory_id <> " + String(li_subcategory_id)
						This.SetFilter(ls_filter)
						This.Filter()
						FOR ll_row = This.RowCount() TO 1 STEP -1
							This.Deleterow(ll_row)
						NEXT
						This.SetFilter('')
						This.Filter()
						//exit, no need to add any further, as we added "none"
						EXIT
					END IF
					
				END IF
			NEXT
			
			// make sure previously selected None gets cleared, if we just added a diff set of subcats..
			ls_search = "Upper(LookUpDisplay(ldr_subcategory_id)) = 'NONE'"
			ll_row = This.Find(ls_search, 1, This.RowCount() + 1)
			IF ll_row > 0  AND This.Rowcount() > 1 THEN This.DeleteRow(ll_row)
		END IF
	
	CASE 'b_del'
		li_ans = MessageBox("Delete LDR Subcategory","Delete this LDR subcategory?",Question!,OKCancel!,2)
		if li_ans = 1 then
			IF ib_new_record THEN
				This.RowsDiscard(row, row, Primary!)
			ELSE
				wf_audit(idw_ldr_subcategory, ll_profile_id, row, TRUE)
				This.DeleteRow(row)
			END IF 
			ib_changed_comp = TRUE
		end if
		
	CASE ELSE
END CHOOSE
end event

type dw_container_size from anc_dw within tabpage_shipping
integer x = 2546
integer y = 1648
integer width = 1024
integer height = 292
integer taborder = 60
string dataobject = "d_profile_container_size_dragon"
boolean vscrollbar = true
boolean border = true
end type

event buttonclicked;call super::buttonclicked;//DevOps #15241 info_gde 05/01/2020; Add New Profile (Profile Tab) - Section C. (list box not showing container)

integer			li_response
long				ll_profile_id, ll_row_header, ll_row_find,ll_row_count,ll_find
Long				ll_new_row
string				ls_del_bill_unit_code,ls_find
DWItemStatus	ldwItemStatus
u_tabpage_profile_shipping ltabpage_profile_shipping 
// COR2-MPM
IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
END IF

CHOOSE CASE dwo.name
	CASE "b_add"//DevOps #15241 info_gde 05/01/2020
		// If either Totes or Drums is checked, then set the bill unit table lookup flag to T
		IF idw_header.Object.container_type_totes[ll_row_header] = 'T' OR idw_header.Object.container_type_drums[ll_row_header] = 'T' OR  &
			idw_header.Object.container_type_pallet[ll_row_header] = 'T' OR idw_header.Object.container_type_boxes[ll_row_header] = 'T' OR & 
			idw_header.Object.container_type_cylinder[ll_row_header] = 'T' THEN
		//THEN
				ll_row_find = This.Find("is_bill_unit_table_lookup='F'", 1, This.RowCount() + 1)
				// If there is already a manually entered bill unit, set the new container size row to be a selected bill unit
				IF ll_row_find > 0 THEN
					ll_new_row = This.InsertRow(0)
					This.ScrollToRow(ll_new_row)
					This.Object.is_bill_unit_table_lookup[ll_new_row] = 'T'
				ELSE
					IF idw_header.Object.container_type_bulk[ll_row_header] = 'T' THEN//DevOps #15241 info_gde 05/01/2020
					
//					OR idw_header.Object.container_type_pallet[ll_row_header] = 'T' OR &
//						idw_header.Object.container_type_boxes[ll_row_header] = 'T' OR idw_header.Object.container_type_cylinder[ll_row_header] = 'T' THEN
					 	// If Bulk/Pallet/Boxes or Cylinder is also checked, ask the user which kind of bill unit is being entered
						li_response = MessageBox(gs_app_name + ":  Add Container Size", "Please select 'Yes' to add a container size with a standard bill unit, or select 'No' to add a container size with a bill unit to be typed in, or select 'Cancel' to cancel adding a container size.", Question!, YesNoCancel!)
						IF li_response = 1 THEN
							ll_new_row = This.InsertRow(0)
							This.ScrollToRow(ll_new_row)
							This.Object.is_bill_unit_table_lookup[ll_new_row] = 'T'
						ELSEIF li_response = 2 THEN
							ll_new_row = This.InsertRow(0)
							This.ScrollToRow(ll_new_row)
							This.Object.is_bill_unit_table_lookup[ll_new_row] = 'F'
						ELSE
							RETURN
						END IF
					ELSE
					 	// None of Bulk/Pallet/Boxes/Cylinder are also checked, so just insert a new container size with a selected bill unit
						ll_new_row = This.InsertRow(0)
						This.ScrollToRow(ll_new_row)
						This.Object.is_bill_unit_table_lookup[ll_new_row] = 'T'
					END IF
				END IF
		ELSE
			// Neither Totes nor Drums is checked, so check if at least one of Bulk/Pallet/Boxes/Cylinder is checked
			IF idw_header.Object.container_type_bulk[ll_row_header] = 'T' THEN //DevOps #15241 info_gde 05/01/2020
			
//			OR idw_header.Object.container_type_pallet[ll_row_header] = 'T' OR &
//				idw_header.Object.container_type_boxes[ll_row_header] = 'T' OR idw_header.Object.container_type_cylinder[ll_row_header] = 'T' THEN
				// Check if there is already a container size with a typed-in bill unit
				ll_row_find = This.Find("is_bill_unit_table_lookup='F'", 1, This.RowCount() + 1)
				// DevOps:16153 - Add more than one bill unit code for bulk container 
//				IF ll_row_find > 0 THEN
//					MessageBox(gs_app_name + ":  Add Container Size", "A container size may not be added because there is already a container size with a typed-in bill unit.", StopSign!)
//					RETURN
//				ELSE
					ll_new_row = This.InsertRow(0)
					This.ScrollToRow(ll_new_row)
					This.Object.is_bill_unit_table_lookup[ll_new_row] = 'F'
//				END IF
			ELSE
				MessageBox(gs_app_name + ":  Add Container Size", "Please select a container type before adding a container size.", Exclamation!)
				RETURN
			END IF
		END IF
								
	CASE "b_del"
		li_response = MessageBox(gs_app_name + ":  Delete Container Size", "Are you sure you want to delete this row?", Question!, YesNo!, 2)
		IF li_response = 1 THEN
			// Delete this container size
			ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
			IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
				This.RowsDiscard(row, row, Primary!)
			ELSE
				wf_audit(idw_container_size, ll_profile_id, row, TRUE)
				ls_del_bill_unit_code = This.Object.bill_unit_code[row]
				This.DeleteRow(row)
				//DevOps:14710
				  IF Isvalid(itab_price) THEN
						ltabpage_profile_shipping = itab_price.control[1]
						IF Isvalid(ltabpage_profile_shipping) THEN 
					        ll_row_count =  ltabpage_profile_shipping.dw_shipping_unit.Rowcount()	
							  ls_find = "bill_unit_code =" + "'" + ls_del_bill_unit_code + "'"
							  ll_find = ltabpage_profile_shipping.dw_shipping_unit.Find(ls_find,1,ltabpage_profile_shipping.dw_shipping_unit.Rowcount())
							  ltabpage_profile_shipping.dw_shipping_unit.DeleteRow(ll_find)
						END IF
					END IF

			END IF 
		END IF
		
	CASE ELSE
END CHOOSE
end event

event itemchanged;call super::itemchanged;datawindowchild	ldwc
u_tabpage_profile_shipping ltabpage_profile_shipping
string ls_bill_unit_code,ls_find
long ll_find 

// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

CHOOSE CASE Lower(dwo.name)
	CASE "bill_unit_code"
		This.GetChild("bill_unit_code", ldwc)
		This.Object.bill_unit_desc[row] = ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
		 ls_bill_unit_code = This.Object.bill_unit_code[This.GetRow()]
		//DevOps:14710
		  IF Isvalid(itab_price) THEN
				ltabpage_profile_shipping = itab_price.control[1]
				IF Isvalid(ltabpage_profile_shipping) THEN 
					  ls_find = "bill_unit_code = " + "'" + ls_bill_unit_code + "'"
					  ll_find = ltabpage_profile_shipping.dw_shipping_unit.Find(ls_find,1,ltabpage_profile_shipping.dw_shipping_unit.Rowcount())
					  IF ll_find = 0 OR IsNull(ll_find) THEN
						  ltabpage_profile_shipping.dw_shipping_unit.InsertRow(row)
						  ltabpage_profile_shipping.dw_shipping_unit.object.bill_unit_code[row]= data
						 // ltabpage_profile_shipping.dw_shipping_unit.object.quantity[row]=  ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
						  ltabpage_profile_shipping.dw_shipping_unit.VScrollBar = TRUE 		
					  ELSE
						  ltabpage_profile_shipping.dw_shipping_unit.object.bill_unit_code[ll_find]= data
						  //ltabpage_profile_shipping.dw_shipping_unit.object.bill_unit_desc[ll_find]=  ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
						  //ltabpage_profile_shipping.dw_shipping_unit.object.quantity[row]=  ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
						  //ltabpage_profile_shipping.dw_shipping_unit.VScrollBar = TRUE 			
					END IF
				END IF			  
			END IF
	CASE ELSE
END CHOOSE

POST wf_build_dot_shipping_desc()
POST wf_wcr_profile_map_sync (this, dwo.Name, row, data)

ib_changed_profile = TRUE
end event

type dw_shipping from anc_dw within tabpage_shipping
event ue_mouse_scroll pbm_vbxevent47
integer width = 4411
integer height = 1984
integer taborder = 50
string dataobject = "d_profile_shipping_dragon"
end type

event ue_mouse_scroll;return 1

end event

event buttonclicked;//integer	li_idx, li_rc, li_current_form_version, li_connect
//long		ll_null
//string	ls_haz_class, ls_new_haz_class, ls_null
//datawindowchild	ldw_child
//str_pick	lstr
//str_pass	lstr_pass
//
//IF row <= 0 THEN RETURN
//
//This.AcceptText()
//
//// Determine if this screen can be accessed by this user
//IF (is_access = "V") OR (is_access = "P") THEN RETURN gi_success
//
//SetNull(ll_null)
//SetNull(ls_null)
//li_rc = gi_success
//
//CHOOSE CASE Lower(dwo.name)
//	CASE "b_dot_shipping"
//		
//		// Setup quick select popup
//		lstr.s_window_title			= "DOT Shipping Names Select"
//		lstr.i_window_width			= 0
//		lstr.b_multipick				= FALSE
//		lstr.i_return_column_count	= 8
//		lstr.to_transaction			= itr_share
//		
//		li_idx = 1
//		lstr.s_tab_title[li_idx]		= "EQ DOT Shipping Names"
//		lstr.i_tabpage_type[li_idx]	= 1
//		lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping"
//		lstr.s_where[li_idx]				= ""
//		lstr.s_retrieve_by[li_idx]		= ""
//		lstr.s_new_reference[li_idx]	= ""
//		
//		li_idx++
//		lstr.s_tab_title[li_idx]		= "Standard DOT Shipping Names"
//		lstr.i_tabpage_type[li_idx]	= 1
//		lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping_lookup"
//		lstr.s_where[li_idx]				= ""
//		lstr.s_retrieve_by[li_idx]		= ""
//		lstr.s_new_reference[li_idx]	= ""
//		
//		lstr.i_tab_count					= li_idx
//		
//		OpenWithParm(w_popup_quick_select, lstr)
//		
//		lstr = Message.PowerObjectParm
//		IF IsValid(lstr) THEN
//			FOR li_idx = 1 TO lstr.i_return_record_count
//				This.Object.DOT_shipping_name[row] = String(lstr.return1[li_idx])
//				This.Object.hazmat_class[row] = String(lstr.return2[li_idx])
//				This.Object.un_na_flag[row] = String(lstr.return3[li_idx])
//				This.Object.un_na_number[row] = Long(lstr.return4[li_idx])
//				This.Object.package_group[row] = String(lstr.return5[li_idx])
//				This.Object.erg_number[row] = Long(lstr.return6[li_idx])
//				This.Object.subsidiary_haz_mat_class[row] = String(lstr.return7[1])
//				This.Object.erg_suffix[row] = String(lstr.return8[1])
//
//				ib_changed_profile = TRUE
//			NEXT
//		END IF
//		
//	CASE "b_hazmat_class"
//		// Setup quick select popup
//		lstr.s_window_title			= "Hazard Class Select"
//		lstr.i_window_width			= 0
//		lstr.b_multipick				= FALSE
//		lstr.i_return_column_count	= 3
//		lstr.to_transaction			= itr_share
//		
//		li_idx = 1
//		lstr.s_tab_title[li_idx]		= "Haz Classes"
//		lstr.i_tabpage_type[li_idx]	= 1
//		lstr.s_dataobject[li_idx]		= "d_quick_select_hazmat_class"
//		lstr.s_where[li_idx]				= ""
//		lstr.s_retrieve_by[li_idx]		= ""
//		lstr.s_new_reference[li_idx]	= ""
//		
//		lstr.i_tab_count					= li_idx
//		
//		OpenWithParm(w_popup_quick_select, lstr)
//		
//		lstr = Message.PowerObjectParm
//		IF IsValid(lstr) THEN
//			FOR li_idx = 1 TO lstr.i_return_record_count
//				This.Object.hazmat_class[row] = String(lstr.return2[li_idx])
//				ib_changed_profile = TRUE
//			NEXT
//		END IF
//		
//	CASE "b_sub_hazmat_class"
//		ls_haz_class = This.Object.subsidiary_haz_mat_class[row]
//		IF IsNull(ls_haz_class) THEN ls_haz_class = ""
//		lstr_pass.s[1] = ls_haz_class
//		lstr_pass.s[2] = "HAZCLASS"
//		lstr_pass.tr_trans = itr_share
//
//		OpenWithParm(w_popup_color_consistency, lstr_pass)
//	
//		lstr_pass = Message.PowerObjectParm
//		IF IsValid(lstr_pass) THEN
//			IF lstr_pass.d[1] = 1 THEN
//				IF ls_haz_class <> lstr_pass.s[1] THEN
//					ls_new_haz_class = lstr_pass.s[1]
//					This.Object.subsidiary_haz_mat_class[row] = ls_new_haz_class
//					This.AcceptText()
//					This.SetColumn("package_group")
//					ib_changed_profile = TRUE
//				END IF
//			END IF
//		END IF
//		
//	CASE "b_erg"
//		// Setup quick select popup
//		lstr.s_window_title			= "ERG Number Select"
//		lstr.i_window_width			= 0
//		lstr.b_multipick				= FALSE
//		lstr.i_return_column_count	= 3
//		lstr.to_transaction			= itr_share
//		
//		li_idx = 1
//		lstr.s_tab_title[li_idx]		= "ERG Numbers"
//		lstr.i_tabpage_type[li_idx]	= 1
//		lstr.s_dataobject[li_idx]		= "d_quick_select_erg"
//		lstr.s_where[li_idx]				= ""
//		lstr.s_retrieve_by[li_idx]		= ""
//		lstr.s_new_reference[li_idx]	= ""
//		
//		lstr.i_tab_count					= li_idx
//		
//		OpenWithParm(w_popup_quick_select, lstr)
//		
//		lstr = Message.PowerObjectParm
//		IF IsValid(lstr) THEN
//			FOR li_idx = 1 TO lstr.i_return_record_count
//				IF String(lstr.return2[li_idx]) > "" THEN
//					This.Object.erg_number[row] = Long(Left(lstr.return2[li_idx], 3))
//				ELSE
//					This.Object.erg_number[row] = ll_null
//				END IF
//				IF Pos(String(lstr.return2[li_idx]), "P", 1) > 0 THEN
//					This.Object.erg_suffix[row] = "P"
//				ELSE
//					This.Object.erg_suffix[row] = ls_null
//				END IF
//				ib_changed_profile = TRUE
//			NEXT
//		END IF
//		
//	CASE "b_transporter_1", "b_transporter_2"
//		// Setup quick select popup
//		lstr.s_window_title			= "Transporter Select"
//		lstr.i_window_width			= 0
//		lstr.b_multipick				= FALSE
//		lstr.i_tab_count				= 1
//		lstr.i_return_column_count	= 2
//
//		lstr.to_transaction			= itr_share
//		
//		lstr.s_tab_title[1]			= "Transporters"
//		lstr.i_tabpage_type[1]		= 1
//		lstr.s_dataobject[1]			= "d_quick_select_transporter"
//		lstr.s_where[1]				= ""
//		lstr.s_retrieve_by[1]		= ""
//		lstr.s_new_reference[1]		= "transporter"
//
//		OpenWithParm(w_popup_quick_select, lstr)
//
//		lstr = Message.PowerObjectParm
//		IF IsValid(lstr) THEN
//			FOR li_idx = 1 TO lstr.i_return_record_count
//				IF row > 0 THEN
//					IF Lower(dwo.name) = "b_transporter_1" THEN
//						This.SetItem(row, "transporter_code_1", String(lstr.return1[li_idx]))
//						This.Object.txt_transport_1_name.Text = String(lstr.return2[li_idx])
//					ELSE
//						This.SetItem(row, "transporter_code_2", String(lstr.return1[li_idx]))
//						This.Object.txt_transport_2_name.Text = String(lstr.return2[li_idx])
//					END IF
//					ib_changed_profile = TRUE
//				END IF
//			NEXT
//		END IF
//		
//	CASE "b_waste_managed"	// On LDR form
//
//		IF ib_connected_forms THEN
//
//			SELECT current_form_version
//				INTO :li_current_form_version
//				FROM FormType
//				WHERE form_type = 'LDR'
//			USING itr_share;
//			
//			// Setup quick select popup
//			lstr_pass.i[1] = Integer(This.Object.waste_managed_id[row])
//			lstr_pass.i[2] = li_current_form_version
//			lstr_pass.tr_trans = itr_forms
//			
//			OpenWithParm(w_popup_get_ldr_waste_managed, lstr_pass)
//	
//			lstr_pass = Message.PowerObjectParm
//			IF IsValid(lstr_pass) THEN
//				IF lstr_pass.i[1] > 0 or IsNull(lstr_pass.i[1]) THEN
//					This.Object.waste_managed_id[row] = lstr_pass.i[1]
//					ib_changed_profile = TRUE
//				END IF
//			END IF
//		END IF
//		
//		idw_shipping.GetChild("waste_managed_id", ldw_child)
//		ldw_child.SetTransObject(itr_share)
//		ldw_child.Retrieve()
//		
//		idw_shipping.GetChild("waste_managed_id_1", ldw_child)
//		ldw_child.SetTransObject(itr_share)
//		ldw_child.Retrieve()
//		
//END CHOOSE
//
//RETURN li_rc
end event

event itemchanged;//DevOps #15241 info_gde 05/01/2020; Add New Profile (Profile Tab) - Section C. (list box not showing container)
long		ll_un_na, ll_erg_num, ll_find_row, ll_idx, ll_profile_id, ll_hdr_row
string	ls_transporter_name, ls_erg_suff, ls_man_dot_sp, ls_null
string	ls_un_na_flag, ls_dot_shipping_name, ls_haz_class, ls_sub_haz_class, ls_pg, ls_rq, ls_rq_reason
int			li_ans
dwItemStatus	ldwItemStatus

decimal	ld_null

SetNull (ld_null)
// COR2-MPM
SetNull(ls_null)

// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

// COR2-MPM
ll_hdr_row = idw_header.getrow()
IF ll_hdr_row > 0 THEN
	ll_profile_id		= idw_header.object.profile_id[ll_hdr_row]
ELSE
	RETURN 2
END IF

CHOOSE CASE Lower(dwo.name)
	CASE "transporter_code_1", "transporter_code_2"
		IF NOT IsNull(data) THEN
			SELECT transporter_name 
				INTO :ls_transporter_name 
				FROM Transporter 
				WHERE transporter_code = :data 
			USING itr_share;
			
			IF Lower(dwo.name) = "transporter_code_1" THEN
				idw_shipping.Object.txt_transport_1_name.Text = ls_transporter_name
			ELSE
				idw_shipping.Object.txt_transport_2_name.Text = ls_transporter_name
			END IF
		ELSE
			IF Lower(dwo.name) = "transporter_code_1" THEN
				idw_shipping.Object.txt_transport_1_name.Text = ""
			ELSE
				idw_shipping.Object.txt_transport_2_name.Text = ""
			END IF
		END IF

	// rb 04/26/2011
	CASE "reportable_quantity_flag"

		// 20200504 jcb #15392 repl if  data = "F" then  // sagar 26822  removed data = "T" or
		if  Upper(data) = "F" or Upper(data) = 'U' then // 20200504 jcb #15392 same action for U-clear		
			this.Object.profile_rq_threshold[row] = ld_null
		end if
	
		// rb 05/23/2012
	case "shipping_frequency"
		this.Object.shipping_frequency_other[row] = ""

	// If the user is unchecking either the Totes or Drums checkboxes, so that both will be unchecked, and if there are any standard bill unit container sizes entered,
	// ask the user if they want to proceed with unchecking the checkbox because, if they do, those container sizes will be deleted.
	//DevOps #15241 info_gde 05/01/2020; Add New Profile (Profile Tab) - Section C. (list box not showing container)
	CASE "container_type_totes", "container_type_drums", "container_type_pallet", "container_type_boxes", "container_type_cylinder"
		ll_find_row = idw_container_size.Find("is_bill_unit_table_lookup='T'", 1, idw_container_size.RowCount() + 1)
		IF ll_find_row > 0 THEN
			IF data = 'F' THEN
				IF lower(dwo.Name) = 'container_type_totes' AND This.Object.container_type_drums[row] = 'F' OR &
					lower(dwo.Name) = 'container_type_drums' AND This.Object.container_type_totes[row] = 'F' OR &
					lower(dwo.Name) = 'container_type_pallet' AND (This.Object.container_type_bulk[row] = 'F' OR &
					IsNull(This.Object.container_type_bulk[row])) AND (This.Object.container_type_boxes[row] = 'F' OR &
					IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_cylinder[row] = 'F' OR &
					IsNull(This.Object.container_type_cylinder[row]))OR	lower(dwo.Name) = 'container_type_boxes' AND &
					(This.Object.container_type_pallet[row] = 'F' OR IsNull(This.Object.container_type_pallet[row])) AND &
					(This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) AND &
					(This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row])) OR &
					lower(dwo.Name) = 'container_type_cylinder' AND (This.Object.container_type_pallet[row] = 'F'  OR &
					IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_boxes[row] = 'F' OR &
					IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_bulk[row] = 'F' OR &
					IsNull(This.Object.container_type_bulk[row])) THEN
						li_ans = MessageBox(gs_app_name + ": Warning","If you uncheck this box, standard bill unit container size(s) will be deleted.  Do you want to continue?",Question!,YesNo!)
						if li_ans = 1 then
							FOR ll_idx = idw_container_size.RowCount() TO 1 STEP -1
								IF idw_container_size.Object.is_bill_unit_table_lookup[ll_idx] = 'T' THEN
									ldwItemStatus = idw_container_size.GetItemStatus(ll_idx, 0, Primary!)
									IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
										idw_container_size.RowsDiscard(ll_idx, ll_idx, Primary!)
									ELSE
										wf_audit(idw_container_size, ll_profile_id, ll_idx, TRUE)
										idw_container_size.DeleteRow(ll_idx)
									END IF 
								END IF
							NEXT
						else
							RETURN 2
						end if
				END IF
			END IF
		END IF
//		wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		
	// If the user is unchecking either the Bulk, Pallet, Boxes or Cylinder checkboxes, so that all 4 will be unchecked, and if there is a typed-in bill unit container size entered,
	// ask the user if they want to proceed with unchecking the checkbox because, if they do, that container size will be deleted.
	//DevOps #15241 info_gde 05/01/2020; 
	CASE "container_type_bulk" //, "container_type_pallet", "container_type_boxes", "container_type_cylinder"
		ll_find_row = idw_container_size.Find("is_bill_unit_table_lookup='F'", 1, idw_container_size.RowCount() + 1)
		IF ll_find_row > 0 THEN
			IF data = 'F' THEN
				IF lower(dwo.Name) = 'container_type_bulk' AND (This.Object.container_type_pallet[row] = 'F' OR IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_boxes[row] = 'F' OR IsNull(This.Object.container_type_boxes[row]))AND (This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row])) THEN
				
//				OR &
//					lower(dwo.Name) = 'container_type_pallet' AND (This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) AND (This.Object.container_type_boxes[row] = 'F' OR IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row]))OR &
//					lower(dwo.Name) = 'container_type_boxes' AND (This.Object.container_type_pallet[row] = 'F' OR IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) AND (This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row])) OR &
//					lower(dwo.Name) = 'container_type_cylinder' AND (This.Object.container_type_pallet[row] = 'F'  OR IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_boxes[row] = 'F' OR IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) THEN
						li_ans = MessageBox(gs_app_name + ": Warning","If you uncheck this box, the container size with a typed-in bill unit will be deleted.  Do you want to continue?",Question!,YesNo!)
						if li_ans = 1 then
							FOR ll_idx = idw_container_size.RowCount() TO 1 STEP -1
								IF idw_container_size.Object.is_bill_unit_table_lookup[ll_idx] = 'F' THEN
									ldwItemStatus = idw_container_size.GetItemStatus(ll_idx, 0, Primary!)
									IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
										idw_container_size.RowsDiscard(ll_idx, ll_idx, Primary!)
									ELSE
										wf_audit(idw_container_size, ll_profile_id, ll_idx, TRUE)
										idw_container_size.DeleteRow(ll_idx)
									END IF 
								END IF
							NEXT
						else
							RETURN 2
						end if
				END IF
			END IF
		END IF
//		wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	CASE "container_type_combination"
		if  data = "F" then  
			this.Object.container_type_combination_desc[row] = ls_null
			POST wf_wcr_profile_map_sync (this, 'container_type_combination_desc', row, ls_null)
		end if
	CASE "container_type_other"
		if  data = "F" then  
			this.Object.container_type_other_desc[row] = ls_null
			POST wf_wcr_profile_map_sync (this, 'container_type_other_desc', row, ls_null)
		end if
		
	//JXM DevOps 11417 08.14.2019 Setup dot shipping name
	CASE "dot_waste_flag"
		// MPM - 4/6/2020 - DevOps 14844
		// MPM - 7/9/2020 - DevOps 16735
		wf_set_dot_shipping_name(data, row, idw_shipping)	
		ls_dot_shipping_name = this.object.dot_shipping_name[row]
		POST wf_wcr_profile_map_sync (this, 'dot_shipping_name', row, ls_dot_shipping_name)
	// MPM - 5/1/2020 - DevOps 15385
	// If "DOT Hazardous Materials" is changed to "No" or "Clear", warn the user that this will clear all Proper Shipping Name-related fields. 
	// MPM - 7/1/2020 - DevOps 16630 - Changed so that when the HM flag is unchecked, query the user to continue or not, and do not clear out
	// any DOT Shipping Description-related fields.
	CASE 'hazmat'
		IF data = 'F' THEN
//			li_ans = MessageBox(gs_app_name + ": Warning",'If "DOT Haz Mat" is unchecked, all DOT Shipping Description-related fields will be cleared.  Do you want to continue?',Question!,YesNo!)
			li_ans = MessageBox(gs_app_name + ": Warning",'The DOT Hazardous Materials checkbox may only be unchecked if the material does not require a hazardous materials ' + &
				'shipping paper.  EQAI will print information in the Shipping tab fields on manifests, bills of lading, and markings/labels.  If the DOT Hazardous Materials checkbox is unchecked, please ensure ' + &
				'nothing in the Shipping tab fields represents all or part of a DOT-regulated description.  Note - RCRA Hazardous Wastes always require the DOT Hazardous Materials checkbox ' + &
				'to be checked.  ~r~n~r~nDo you want to continue?',Question!,YesNo!)
			IF li_ans = 1 THEN 
//				wf_clear_proper_shipping_name_fields(idw_shipping, row)
			END IF
			IF li_ans = 2 THEN				
				// Don't allow the value to change
				RETURN 2
			END IF
		END IF
	CASE 'rq_reason'
		// DevOps 16671 - Parenthesis are not allowed FHC 7/6/2020
		 IF match(data, '[()]') = True THEN
			 MessageBox(gs_app_name + ': RQ Reason','Parentheses are not allowed.  Please re-enter a value without parentheses.')
			 Return 2    // Reject value
		 END IF
	// MPM - 1/13/2022 - DevOps 21647
	CASE "dot_shipping_name"
		IF (Upper(Left(LeftTrim(data), 6)) = "WASTE " OR Upper(Left(LeftTrim(data), 6)) = "WASTE,") AND (IsNull(This.object.dot_waste_flag[row]) OR This.object.dot_waste_flag[row] <> 'T') THEN
			li_ans = MessageBox(gs_app_name + ': DOT Waste','If you would like the DOT Shipping Name to begin with the word "Waste,", please use the Waste checkbox to denote this.  Do you want to set the Waste checkbox?', Question!, YesNo!)
			IF li_ans = 1 THEN
				This.Object.dot_waste_flag[row] = 'T'
				POST wf_wcr_profile_map_sync (this, 'dot_waste_flag', row, 'T')
			END IF
		END IF
END CHOOSE
ib_changed_profile = TRUE

// Set the DOT shipping Description
POST wf_build_dot_shipping_desc()
POST wf_set_other_billunit(idw_shipping)
// rb 04/24/2012
POST wf_wcr_profile_map_sync (this, dwo.Name, row, data)

end event

event rowfocuschanging;
long ll_row_header

ll_row_header = idw_header.getrow()
//return focus to the first column if the header row <> detail row
if ll_row_header <> newrow then
	setcolumn("manifest_waste_desc")
	return 1
end if

end event

event ue_lookup;call super::ue_lookup;integer	li_idx, li_rc, li_current_form_version, li_connect,li_hdr_row
long		ll_null, ll_row,ll_profile_id
string	ls_haz_class, ls_new_haz_class, ls_null, ls_config_flag
datawindowchild	ldw_child
str_pick	lstr
str_pass	lstr_pass

ll_row = GetRow()


This.AcceptText()

if ai_indicate  > 1 Then
	// Determine if this screen can be accessed by this user
	IF (is_access = "V") OR (is_access = "P") THEN RETURN 0
End If

SetNull(ll_null)
SetNull(ls_null)
li_rc = gi_success

li_hdr_row = idw_header.getrow()
IF li_hdr_row > 0 THEN
	ll_profile_id = idw_header.object.profile_id[li_hdr_row]
END IF

CHOOSE CASE Lower(as_col_name)
	CASE "dot_shipping_name"
		If ai_indicate < 3 Then
			return 1
		Else
		
			// Setup quick select popup
			lstr.s_window_title			= "DOT Shipping Names Select"
			lstr.i_window_width			= 0
			lstr.b_multipick				= FALSE
			lstr.i_return_column_count	= 9
			lstr.to_transaction			= itr_share
			
			li_idx = 1
			lstr.s_tab_title[li_idx]		= "Standard DOT Shipping Names"
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping_lookup"
			lstr.s_where[li_idx]				= ""
			lstr.s_retrieve_by[li_idx]		= ""
			lstr.s_new_reference[li_idx]	= ""
			
			li_idx++
			//Prakash - 05/08/2023 - Begin - Added for DevOps #64394
			ls_config_flag = f_get_config_value("rebranding_golive_flag") 
			IF ls_config_flag = "T" THEN
				lstr.s_tab_title[li_idx]			= "Republic Services DOT Shipping Names"
			ELSE
				lstr.s_tab_title[li_idx]			= "US Ecology DOT Shipping Names"
			END IF
			//Prakash - 05/08/2023 - End - Added for DevOps #64394
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping"
			lstr.s_where[li_idx]				= ""
			lstr.s_retrieve_by[li_idx]		= ""
			lstr.s_new_reference[li_idx]	= ""
			
			lstr.i_tab_count					= li_idx
			
			OpenWithParm(w_popup_quick_select, lstr)
			
			lstr = Message.PowerObjectParm
			IF IsValid(lstr) THEN
				FOR li_idx = 1 TO lstr.i_return_record_count
					//JXM DevOps 11417 08.01.2019 - Proper DOT Shipping Name (Description)
					//WHEN DOT waste flag is checked and dot_shipping_name does not contain the word 'waste, '
					//THEN prefix the dot_shipping_name with 'Waste, ' else Do not prefix the name
					//However if the DOT waste folag is unchecked do not add 'Waste, ' to the name from popup
					IF This.Object.dot_waste_flag[ll_row] = 'T' then
						IF POS(String(lstr.return1[li_idx]), 'waste, ',1) < 1 then
							This.Object.DOT_shipping_name[ll_row] = 'Waste, ' + String(lstr.return1[li_idx])
						ELSE
							//just set name as is
							This.Object.DOT_shipping_name[ll_row] = String(lstr.return1[li_idx])
						END IF
					ELSE
						This.Object.DOT_shipping_name[ll_row] = String(lstr.return1[li_idx])
					END IF
					//Comment out below and replace with above JXM DevOps 11417 08.14.2019
					//This.Object.DOT_shipping_name[ll_row] = String(lstr.return1[li_idx])
					This.Object.hazmat_class[ll_row] = String(lstr.return2[li_idx])
					This.Object.un_na_flag[ll_row] = String(lstr.return3[li_idx])
					This.Object.un_na_number[ll_row] = Long(lstr.return4[li_idx])
					This.Object.package_group[ll_row] = String(lstr.return5[li_idx])
					This.Object.erg_number[ll_row] = Long(lstr.return6[li_idx])
					This.Object.subsidiary_haz_mat_class[ll_row] = String(lstr.return7[1])
					This.Object.erg_suffix[ll_row] = String(lstr.return8[1])
					// MPM - 12/11/2023 - DevOps 42017
					This.Object.hazmat[ll_row] = String(lstr.return9[1])
	
					ib_changed_profile = TRUE
				NEXT
			END IF
		End If
		
	CASE "hazmat_class"
		If ai_indicate < 3 Then
			return 1
		Else
			// Setup quick select popup
			lstr.s_window_title			= "Hazard Class Select"
			lstr.i_window_width			= 0
			lstr.b_multipick				= FALSE
			lstr.i_return_column_count	= 3
			lstr.to_transaction			= itr_share
			
			li_idx = 1
			lstr.s_tab_title[li_idx]		= "Haz Classes"
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_hazmat_class"
			lstr.s_where[li_idx]				= ""
			lstr.s_retrieve_by[li_idx]		= ""
			lstr.s_new_reference[li_idx]	= ""
			
			lstr.i_tab_count					= li_idx
			
			OpenWithParm(w_popup_quick_select, lstr)
			
			lstr = Message.PowerObjectParm
			IF IsValid(lstr) THEN
				FOR li_idx = 1 TO lstr.i_return_record_count
					This.Object.hazmat_class[ll_row] = String(lstr.return2[li_idx])
					ib_changed_profile = TRUE
				NEXT
			END IF
		End If
		
	CASE "subsidiary_haz_mat_class"
		If ai_indicate < 3 Then
			return 1
		Else
			ls_haz_class = This.Object.subsidiary_haz_mat_class[ll_row]
			IF IsNull(ls_haz_class) THEN ls_haz_class = ""
			lstr_pass.s[1] = ls_haz_class
			lstr_pass.s[2] = "HAZCLASS"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_haz_class <> lstr_pass.s[1] THEN
						ls_new_haz_class = lstr_pass.s[1]
						This.Object.subsidiary_haz_mat_class[ll_row] = ls_new_haz_class
						This.AcceptText()
						This.SetColumn("package_group")
						ib_changed_profile = TRUE
					END IF
				END IF
			END IF
		End IF
		
	CASE "erg_number"
		If ai_indicate < 3 Then
			return 1
		Else
			// Setup quick select popup
			lstr.s_window_title			= "ERG Number Select"
			lstr.i_window_width			= 0
			lstr.b_multipick				= FALSE
			lstr.i_return_column_count	= 3
			lstr.to_transaction			= itr_share
			
			li_idx = 1
			lstr.s_tab_title[li_idx]		= "ERG Numbers"
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_erg"
			lstr.s_where[li_idx]				= ""
			lstr.s_retrieve_by[li_idx]		= ""
			lstr.s_new_reference[li_idx]	= ""
			
			lstr.i_tab_count					= li_idx
			
			OpenWithParm(w_popup_quick_select, lstr)
			
			lstr = Message.PowerObjectParm
			IF IsValid(lstr) THEN
				FOR li_idx = 1 TO lstr.i_return_record_count
					IF String(lstr.return2[li_idx]) > "" THEN
						This.Object.erg_number[ll_row] = Long(Left(lstr.return2[li_idx], 3))
					ELSE
						This.Object.erg_number[ll_row] = ll_null
					END IF
					IF Pos(String(lstr.return2[li_idx]), "P", 1) > 0 THEN
						This.Object.erg_suffix[ll_row] = "P"
					ELSE
						This.Object.erg_suffix[ll_row] = ls_null
					END IF
					ib_changed_profile = TRUE
				NEXT
			END IF
		End If
		
	CASE "transporter_code_1", "transporter_code_2"
		If ai_indicate < 3 Then
			return 1
		Else
			// Setup quick select popup
			lstr.s_window_title			= "Transporter Select"
			lstr.i_window_width			= 0
			lstr.b_multipick				= FALSE
			lstr.i_tab_count				= 1
			lstr.i_return_column_count	= 2
	
			lstr.to_transaction			= itr_share
			
			lstr.s_tab_title[1]			= "Transporters"
			lstr.i_tabpage_type[1]		= 1
			lstr.s_dataobject[1]			= "d_quick_select_transporter"
			lstr.s_where[1]				= ""
			lstr.s_retrieve_by[1]		= ""
			lstr.s_new_reference[1]		= "transporter"
	
			OpenWithParm(w_popup_quick_select, lstr)
	
			lstr = Message.PowerObjectParm
			IF IsValid(lstr) THEN
				FOR li_idx = 1 TO lstr.i_return_record_count
					IF ll_row > 0 THEN
						IF Lower(as_col_name) = "transporter_code_1" THEN
							This.SetItem(ll_row, "transporter_code_1", String(lstr.return1[li_idx]))
							This.Object.txt_transport_1_name.Text = String(lstr.return2[li_idx])
						ELSE
							This.SetItem(ll_row, "transporter_code_2", String(lstr.return1[li_idx]))
							This.Object.txt_transport_2_name.Text = String(lstr.return2[li_idx])
						END IF
						ib_changed_profile = TRUE
					END IF
				NEXT
			END IF
		End IF
		
	CASE "waste_managed_id"	// On LDR form
		If ai_indicate < 3 Then
			return 1
		Else

			IF ib_connected_forms THEN
	
				SELECT current_form_version
					INTO :li_current_form_version
					FROM FormType
					WHERE form_type = 'LDR'
				USING itr_share;
				
				lstr_pass.l[1] = ll_profile_id // Integer(This.Object.waste_managed_id[ll_row])
			//	lstr_pass.i[2] = li_current_form_version
			    lstr_pass.l[2] = Integer(This.Object.waste_managed_id[ll_row])                // 20200311 jcb #14395 pass the waste_managed_id 	
				lstr_pass.tr_trans = itr_forms		
				
				OpenWithParm(w_popup_get_ldr_waste_managed_dragon, lstr_pass)
		
				lstr_pass = Message.PowerObjectParm
				IF IsValid(lstr_pass) THEN
					IF lstr_pass.l[1] > 0 or IsNull(lstr_pass.l[1]) THEN
						This.Object.waste_managed_id[ll_row] = lstr_pass.l[1]
						This.Object.waste_managed_id_1[ll_row] = lstr_pass.l[1]
						ib_changed_profile = TRUE
					END IF
				END IF
			END IF
			
//			idw_shipping.GetChild("waste_managed_id", ldw_child)
//			ldw_child.SetTransObject(itr_share)
//			ldw_child.Retrieve()
//			
			idw_shipping.GetChild("waste_managed_id_1", ldw_child)
			ldw_child.SetTransObject(itr_share)
			ldw_child.Retrieve()
		End If
		
END CHOOSE

POST wf_build_dot_shipping_desc()

RETURN 0
end event

event doubleclicked;// rb 06/19/2012 OVERRIDE, a couple of lookup columns still aren't doubleclicking
choose case dwo.Name

	case "subsidiary_haz_mat_class"
		
		This.event ue_lookup (dwo.Name, 3, dwo.Name)

	case "waste_managed_id", "waste_managed_id_1"

		This.event ue_lookup ("waste_managed_id", 3, "waste_managed_id")
		
	case else
		
		call super::doubleclicked

end choose

end event

event itemerror;call super::itemerror;// MPM - 7/7/2020 - DevOps 16671 - Previously, the code in this event was simply "RETURN 2", which didn't trap any errors from the itemchanged
// event at all. I changed this so a "return 1" or "return 2" from itemchanged for rq_reason won't be lost.
IF Lower(dwo.name) = 'rq_reason' THEN 
	RETURN 1 // Reject the data value with no message box
ELSE
	RETURN 2 // Accept the data value
END IF
end event

event rowfocuschanged;call super::rowfocuschanged;long		ll_row_hdr
string	ls_profile_status
DWobject	ldwo
u_tabpage_profile_shipping ltabpage_profile_shipping

ll_row_hdr = idw_header.getrow()

IF Isvalid(itab_price) THEN
	ltabpage_profile_shipping = itab_price.control[1]
	IF Isvalid(ltabpage_profile_shipping) AND currentrow > 0 THEN
		// add access for approved profiles
		IF ll_row_hdr > 0 THEN
			ls_profile_status = idw_header.object.curr_status_code[ll_row_hdr]
			IF upper(ls_profile_status) = 'A' THEN
				ltabpage_profile_shipping.uof_access(is_access)
			END IF
		END IF
		
		ltabpage_profile_shipping.dw_shipping_frequency.scrollToRow( currentrow )
		CHOOSE CASE Upper(is_access) 
			CASE 'N', 'V', 'P', 'B', 'L'
				// don't try autopopulating blank rows
				
			CASE ELSE
				IF ltabpage_profile_shipping.dw_shipping_unit.RowCount() < 1 THEN
					ldwo = ltabpage_profile_shipping.dw_shipping_unit.Object.b_add_volume
					ltabpage_profile_shipping.dw_shipping_unit.Event buttonclicked (0, 0, ldwo)
				END IF
		END CHOOSE
		
	END IF
END IF
end event

event clicked;call super::clicked;IF Lower(dwo.name) = 'exceed_ldr_standards' THEN
	MessageBox(gs_app_name + " : Shipping Tab", 'The "Does this waste exceed LDR levels?" field is no longer editable.', Information!)
	Return 1
END IF
end event

event other;call super::other;//DevOps:38977 - 03/18/2022 - AM - Lock Scroll Wheel
if message.number = 522 then message.processed = true
end event

type tabpage_wcr from userobject within tab_2
event create ( )
event destroy ( )
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Profile"
long picturemaskcolor = 536870912
dw_profile_fuels_blending dw_profile_fuels_blending
st_2 st_2
p_1 p_1
dw_profile_wcr_sections dw_profile_wcr_sections
dw_wcr_display_3 dw_wcr_display_3
dw_wcr_display_4 dw_wcr_display_4
dw_wcr_display_2 dw_wcr_display_2
dw_wcr_display_1 dw_wcr_display_1
dw_wcr_display_5 dw_wcr_display_5
end type

on tabpage_wcr.create
this.dw_profile_fuels_blending=create dw_profile_fuels_blending
this.st_2=create st_2
this.p_1=create p_1
this.dw_profile_wcr_sections=create dw_profile_wcr_sections
this.dw_wcr_display_3=create dw_wcr_display_3
this.dw_wcr_display_4=create dw_wcr_display_4
this.dw_wcr_display_2=create dw_wcr_display_2
this.dw_wcr_display_1=create dw_wcr_display_1
this.dw_wcr_display_5=create dw_wcr_display_5
this.Control[]={this.dw_profile_fuels_blending,&
this.st_2,&
this.p_1,&
this.dw_profile_wcr_sections,&
this.dw_wcr_display_3,&
this.dw_wcr_display_4,&
this.dw_wcr_display_2,&
this.dw_wcr_display_1,&
this.dw_wcr_display_5}
end on

on tabpage_wcr.destroy
destroy(this.dw_profile_fuels_blending)
destroy(this.st_2)
destroy(this.p_1)
destroy(this.dw_profile_wcr_sections)
destroy(this.dw_wcr_display_3)
destroy(this.dw_wcr_display_4)
destroy(this.dw_wcr_display_2)
destroy(this.dw_wcr_display_1)
destroy(this.dw_wcr_display_5)
end on

type dw_profile_fuels_blending from datawindow within tabpage_wcr
boolean visible = false
integer x = 3909
integer y = 1720
integer width = 686
integer height = 400
integer taborder = 170
string title = "none"
string dataobject = "d_profile_fuels_blending_supplement"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;// Dipankar - 08/31/2023 - Added for #69393
idw_profile_fuels_blending = This
end event

type st_2 from statictext within tabpage_wcr
boolean visible = false
integer x = 82
integer y = 1868
integer width = 736
integer height = 64
integer textsize = -8
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long textcolor = 33554432
long backcolor = 67108864
string text = "- Locked field from template"
boolean focusrectangle = false
end type

type p_1 from picture within tabpage_wcr
boolean visible = false
integer y = 1868
integer width = 73
integer height = 60
boolean originalsize = true
string picturename = "C:\EQAI-Dev\Resources\template-lock-light.bmp"
boolean focusrectangle = false
end type

type dw_profile_wcr_sections from datawindow within tabpage_wcr
integer width = 768
integer height = 1848
integer taborder = 50
string title = "none"
string dataobject = "d_profile_wcr_sections_dragon"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event rowfocuschanged; //DevOps #15217 info_gde 04/20/2020; EQAI - View Format
long		ll_find_row, ll_row ,ll_count, i ,ll_row_header//, ll_display_row, ll_waste_managed_id
string 	ls_find
dwitemstatus ldwitemstatus

//ii_dw_height = ii_dw_height_main
// Set display window to wcr select height by default, hide the display2
//dw_display.Height = ii_dw_height
dw_wcr_display_2.Hide()
dw_wcr_display_1.VScrollBar = TRUE
dw_wcr_display_1.HScrollBar = FALSE
dw_wcr_display_1.AcceptText()
dw_wcr_display_2.AcceptText()

// MPM - COR 2
IF IsNull(ii_sort_order) OR ii_sort_order < 2 THEN
//	ii_sort_order = 2
	ll_find_row = This.Find("Pos(description, 'Generator/Customer') > 0", 1, RowCount() + 1)
	IF ll_find_row > 0 THEN This.SetRow(ll_find_row)
END IF

ii_sort_order = This.GetItemNumber(currentrow, "sort_order")

//DevOps 16224 info_gde 06/08/2020; EQAI - Profile Tracking - Sec E6
If currentrow=5 Then
	idw_wcr_display_2.width=3616
end if
//DevOps 16224 info_gde 06/08/2020; EQAI - Profile Tracking - Sec E6



// SET THE DISPLAY FOR THIS SECTION
// this function controls the display on right
wf_set_wcr_sect_display(ii_sort_order)

// rb 04/25/2012 Load data to it
// MPM - 2/1/2019 - Wrapped the "load" call below in an IF statement as a temporary kludge - will fix with next build
//if ii_sort_order < 8 then
	wf_wcr_profile_map_load_wcr_sect ()
//end if
//DevOps #15217 info_gde 04/20/2020 start
If ii_sort_order=4 Then
	idw_wcr_display_2.Width = 2500
End If

ll_row_header=idw_header.rowcount()
If ii_sort_order=6 Then
	if ll_row_header>0 then
//		is_rcra_waste_code_flag=idw_wcr_display_1.object.rcra_waste_code_flag[ll_row_header]
	end if
End If

//DevOps #15217 info_gde 04/20/2020 end
idw_benzene_waste_ops_supplemen.SetItemStatus (1 ,0 , Primary! , NotModified! )
//idw_profile_cylinder_supplement_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )  // DevOps:71697 - 11/08/2023 - AM
idw_profile_debris_certification_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_illinois_disposal_supplemen.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_ldr_form_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_pcb_supplement_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_radioactive_supplement_page_1.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_radioactive_supplement_page_2.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_radioactive_supplement_page_3.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_radioactive_supplement_3sub.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_thermal_supplement_form.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_profile_used_oil_supplement_dragon.SetItemStatus (1 ,0 , Primary! , NotModified! )
idw_gen_knowledge_supplement.SetItemStatus (1 ,0 , Primary! , NotModified! )
// idw_profile_fuels_blending.SetItemStatus (1 ,0 , Primary! , NotModified! ) // Dipankar - 09/08/2023 - Added for #69393


// IF norm is selected on this question
//ll_row = idw_technical.getrow()
//IF ll_row > 0 THEN
//	IF Upper((idw_technical.object.norm[ll_row])) = 'T' OR Upper((idw_technical.object.tenorm[ll_row])) = 'T' THEN
//		// Show supplemental form NORM
//		ls_find = ("lower(description) = 'mi norm/tenorm'")
//		ll_find_row = this.Find(ls_find, 1, this.Rowcount() + 1)
//		IF ll_find_row > 0 THEN this.Object.show_field[ll_find_row] = 'T'
//	END IF
//END IF
//

//// COR2 - AGC 
//if ll_display_row > 0 then
//	if idw_wcr_display_1.dataobject = 'd_profile_ldr_form_dragon' then
//		ll_display_row = idw_wcr_display_1.getrow()
//
//		if ll_display_row > 0 then
//			ll_waste_managed_id = idw_wcr_display_1.getitemnumber(ll_display_row,'waste_managed_id')
//		
//			this.setredraw(false)
//		
//			idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',0)
//			idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_2',0)
//			idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_3',0)
//			idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',0)
//			idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_5',0)
//			idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_6',0)
//			idw_wcr_display_1.setitem(ll_display_row,'rb_1','U')
//			idw_wcr_display_1.setitem(ll_display_row,'rb_2','U')
//			idw_wcr_display_1.setitem(ll_display_row,'rb_3','U')
//			idw_wcr_display_1.setitem(ll_display_row,'rb_4','U')
//		
//			choose case ll_waste_managed_id
//				case 1
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
//				case 2
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_2',2)
//				case 3
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',3)
//				case 4
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_5',4)
//				case 6
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_3',6)
//				case 10
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_1','T')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_2','T')
//				case 11
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',3)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_3','T')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_4','T')
//				case 12
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_1','T')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_2','F')
//				case 13
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',3)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_3','T')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_4','F')
//				case 14
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_1','F')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_2','T')
//				case 15
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',3)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_3','F')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_4','T')
//				case 16
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_1',1)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_1','F')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_2','F')
//				case 17
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_4',3)
//					idw_wcr_display_1.setitem(ll_display_row,'rb_3','F')
//					idw_wcr_display_1.setitem(ll_display_row,'rb_4','F')
//				case 18
//					idw_wcr_display_1.setitem(ll_display_row,'profile_waste_managed_id_6',18)
//				case else
//				
//			end choose
//		
//			this.setredraw(true)
//	
//		end if
//	end if
//
//end if



end event

event rowfocuschanging;


//DevOps 16152 info_gde 06/05/2020; EQAI Container Size Window Paint Issue
If newrow= 3 and currentrow = 4 then
	idw_wcr_display_1.object.handling_issue_desc.width=200
	 idw_wcr_display_5.BringToTop=TRUE
end if
end event

type dw_wcr_display_3 from anc_dw within tabpage_wcr
event ue_tabout pbm_dwntabout
integer x = 2546
integer y = 748
integer width = 1509
integer height = 380
integer taborder = 110
boolean bringtotop = true
string dataobject = "d_profile_inv_contact_form_dragon"
end type

event doubleclicked;// OVERRIDE SK 09/10/2012

CHOOSE CASE lower(dwo.Name)
	CASE "contact_name"
		This.event ue_lookup (dwo.Name, 3, dwo.Name)
	CASE ELSE
		call super::doubleclicked
END CHOOSE

end event

event itemerror;call super::itemerror; return 2
end event

event ue_lookup;call super::ue_lookup;integer	li_idx, li_rc
long		ll_null, ll_header_row, ll_generator_id, ll_customer_id, ll_row
string	ls_null, ls_where_customer, ls_where_generator, ls_curr_status_code

datawindowchild	ldw_child
str_pick	lstr_pick

ll_header_row = idw_header.GetRow()
IF ll_header_row > 0 THEN
	ll_row = this.getrow() // should always be 1
	This.AcceptText()
	ls_curr_status_code = Upper(idw_header.object.curr_status_code[ll_header_row])
	IF ai_indicate > 1 THEN
		//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
		IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 0
		
		IF is_access = 'L' AND ls_curr_status_code = 'A' THEN RETURN 0
	END IF
	
	SetNull(ll_null)
	SetNull(ls_null)
	li_rc = gi_success
	
	CHOOSE CASE Lower(as_col_name)
		CASE "contact_name"
			IF ai_indicate < 3 THEN
				RETURN 1
			ELSE
				ll_customer_id 	= idw_header.Object.customer_id[ll_header_row]
				ll_generator_id 	= idw_header.Object.generator_id[ll_header_row]
				IF IsNull(ll_customer_id) THEN
					ls_where_customer = ""
				ELSE
					ls_where_customer = "ContactXRef.customer_id = " + String(ll_customer_id) &
						+ " AND ContactXRef.status = 'A'"
				END IF
				IF IsNull(ll_generator_id) THEN
					ls_where_generator = ""
				ELSE
					ls_where_generator = "ContactXRef.generator_id = " + String(ll_generator_id) &
						+ " AND ContactXRef.status = 'A'"
				END IF
				
				lstr_pick.s_window_title			= "Select Invoicing Contact"
				lstr_pick.i_window_width			= 0
				lstr_pick.b_multipick				= FALSE
		
				li_idx++
				lstr_pick.s_tab_title[li_idx]		= "Customer Contacts"
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_customer"
				lstr_pick.s_where[li_idx]			= ls_where_customer
				lstr_pick.s_retrieve_by[li_idx]	= ""
				lstr_pick.s_new_reference[li_idx]= ""
				lstr_pick.i_return_column_count	= 13
				
				IF ls_where_generator <> "" AND ll_generator_id > 0 THEN
					li_idx++
					lstr_pick.s_tab_title[li_idx]		= "Generator Contacts"
					lstr_pick.i_tabpage_type[li_idx]	= 1
					lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_generator"
					lstr_pick.s_where[li_idx]			= ls_where_generator
					lstr_pick.s_retrieve_by[li_idx]	= ""
					lstr_pick.s_new_reference[li_idx]= ""
					lstr_pick.i_return_column_count	= 13
				END IF
				
				lstr_pick.i_tab_count				= li_idx
		
				OpenWithParm(w_popup_quick_select, lstr_pick)
				lstr_pick = Message.PowerObjectParm
				IF IsValid(lstr_pick) THEN
					FOR li_idx = 1 TO lstr_pick.i_return_record_count
		//				This.Object.contact_id[ll_row] = Long(lstr_pick.return1[li_idx])
						This.Object.contact_name[ll_row] 	= string(lstr_pick.return2[li_idx])
						This.Object.contact_phone[ll_row]	= string(lstr_pick.return10[li_idx])
//						This.Object.contact_fax[ll_row]		= string(lstr_pick.return11[li_idx])
						This.Object.contact_email[ll_row]		= string(lstr_pick.return6[li_idx])
					NEXT
				END IF
			END IF
	END CHOOSE
END IF

RETURN 0
end event

event ue_keypressed;call super::ue_keypressed;long  li_lastcol

IF Key=KeyTab!  THEN  //DevOps 13955 - 04/05/2022 - Add New Profile (Profile Tab) - All 
	
	li_lastcol =wf_get_first_last_tabcol(this)    
	
	IF li_lastcol > 0 THEN
		li_lastcol=wf_get_first_last_tabcol(idw_wcr_display_1)
		
	IF is_first_column <> "" THEN
		idw_wcr_display_1.POST setrow(long(idw_wcr_display_1.Object.DataWindow.LastRowOnPage))
		idw_wcr_display_1.POST setcolumn(is_first_column)
		idw_wcr_display_1.POST setfocus()
	END IF
   END IF
END IF




end event

type dw_wcr_display_4 from anc_dw within tabpage_wcr
event ue_tabout pbm_dwntabout
boolean visible = false
integer x = 2491
integer y = 1100
integer width = 1554
integer height = 656
integer taborder = 110
boolean bringtotop = true
string dataobject = "d_profile_tech_contact_form"
end type

event ue_tabout;long	ll_row

// rb 06/14/2012 - Autoscroll WCR sections if tabbing out
ll_row = dw_profile_wcr_sections.GetRow ()
if ll_row < 1 or ll_row = dw_profile_wcr_sections.RowCount() then return 0

ll_row++
dw_profile_wcr_sections.Post SetRow (ll_row)
dw_profile_wcr_sections.Post ScrollToRow (ll_row)




end event

event doubleclicked;// OVERRIDE SK 09/10/2012

CHOOSE CASE lower(dwo.Name)
	CASE "contact_name"
		This.event ue_lookup (dwo.Name, 3, dwo.Name)
	CASE ELSE
		call super::doubleclicked
END CHOOSE

end event

event itemchanged;call super::itemchanged;
// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

end event

event itemerror;call super::itemerror; return 2
end event

event ue_lookup;call super::ue_lookup;integer	li_idx, li_rc
long		ll_null, ll_header_row, ll_generator_id, ll_customer_id, ll_row
string	ls_null, ls_where_customer, ls_where_generator, ls_curr_status_code

datawindowchild	ldw_child
str_pick	lstr_pick

ll_header_row = idw_header.GetRow()
IF ll_header_row > 0 THEN
	ll_row = this.getrow() // should always be 1
	This.AcceptText()
	ls_curr_status_code = Upper(idw_header.object.curr_status_code[ll_header_row])
	IF ai_indicate > 1 THEN
		//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
		IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 0
		
		IF is_access = 'L' AND ls_curr_status_code = 'A' THEN RETURN 0
	END IF
	
	SetNull(ll_null)
	SetNull(ls_null)
	li_rc = gi_success
	
	CHOOSE CASE Lower(as_col_name)
		CASE "contact_name"
			IF ai_indicate < 3 THEN
				RETURN 1
			ELSE
				ll_customer_id 	= idw_header.Object.customer_id[ll_header_row]
				ll_generator_id 	= idw_header.Object.generator_id[ll_header_row]
				IF IsNull(ll_customer_id) THEN
					ls_where_customer = ""
				ELSE
					ls_where_customer = "ContactXRef.customer_id = " + String(ll_customer_id) &
						+ " AND ContactXRef.status = 'A'"
				END IF
				IF IsNull(ll_generator_id) THEN
					ls_where_generator = ""
				ELSE
					ls_where_generator = "ContactXRef.generator_id = " + String(ll_generator_id) &
						+ " AND ContactXRef.status = 'A'"
				END IF
				
				lstr_pick.s_window_title			= "Select Technical Contact"
				lstr_pick.i_window_width			= 0
				lstr_pick.b_multipick				= FALSE
		
				li_idx++
				lstr_pick.s_tab_title[li_idx]		= "Customer Contacts"
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_customer"
				lstr_pick.s_where[li_idx]			= ls_where_customer
				lstr_pick.s_retrieve_by[li_idx]	= ""
				lstr_pick.s_new_reference[li_idx]= ""
				lstr_pick.i_return_column_count	= 13
				
				IF ls_where_generator <> "" AND ll_generator_id > 0 THEN
					li_idx++
					lstr_pick.s_tab_title[li_idx]		= "Generator Contacts"
					lstr_pick.i_tabpage_type[li_idx]	= 1
					lstr_pick.s_dataobject[li_idx]	= "d_quick_select_contact_generator"
					lstr_pick.s_where[li_idx]			= ls_where_generator
					lstr_pick.s_retrieve_by[li_idx]	= ""
					lstr_pick.s_new_reference[li_idx]= ""
					lstr_pick.i_return_column_count	= 13
				END IF
					
				lstr_pick.i_tab_count				= li_idx
		
				OpenWithParm(w_popup_quick_select, lstr_pick)
				lstr_pick = Message.PowerObjectParm
				IF IsValid(lstr_pick) THEN
					FOR li_idx = 1 TO lstr_pick.i_return_record_count
		//				This.Object.contact_id[ll_row] = Long(lstr_pick.return1[li_idx])
						This.Object.contact_name[ll_row] 	= string(lstr_pick.return2[li_idx])
						This.Object.contact_phone[ll_row]	= string(lstr_pick.return10[li_idx])
						This.Object.contact_fax[ll_row]		= string(lstr_pick.return11[li_idx])
						This.Object.contact_mobile[ll_row]	= string(lstr_pick.return13[li_idx])
						This.Object.contact_email[ll_row]	= string(lstr_pick.return6[li_idx])
					NEXT
				END IF
			END IF
	END CHOOSE
END IF
RETURN 0
end event

type dw_wcr_display_2 from anc_dw within tabpage_wcr
event ue_tabout pbm_dwntabout
event ue_sync_uhc ( )
integer x = 818
integer y = 1176
integer width = 1723
integer height = 332
integer taborder = 100
boolean bringtotop = true
string dataobject = "d_profile_gen_contact_form_dragon"
end type

event ue_tabout;long	ll_row, ll_get_row,ll_row_count

ll_get_row=idw_wcr_display_2.GetRow()
ll_row_count = idw_wcr_display_2.RowCount()
// rb 06/14/2012 - Autoscroll WCR sections if tabbing out
IF ll_get_row<>ll_row_count THEN
	ll_row = dw_profile_wcr_sections.GetRow ()
	if ll_row < 1 or ll_row = dw_profile_wcr_sections.RowCount() then return 0

	ll_row++
	dw_profile_wcr_sections.Post SetRow (ll_row)
	dw_profile_wcr_sections.Post ScrollToRow (ll_row)
END IF

end event

event ue_sync_uhc();Long	ll_row 
Char  lc_uhc



ll_row = This.find("uhc='T'", 1, This.RowCount() )


If ll_row = 0 Then
	lc_uhc = 'F'
Else
	lc_uhc = 'T'
End IF

ll_row = idw_technical.getRow()
If ll_row > 0 Then
	idw_technical.SetItem( ll_row, "underlying_haz_constituents", lc_uhc)
End IF
//DevOps 19039 info_gde 02/05/2021; UHC Mapping - Database Refresh Issue

end event

event itemchanged;call super::itemchanged;decimal	ld_null, ld_uts_concentration,ld_conversion_concentration
long		ll_hdr_row, ll_template_form_id, ll_source_form_id, ll_i, ll_const_id,ll_find, ll_new,ll_profile_id,ll_rtn_count
string	ls_null, ls_lock_name, ls_lock_file, ls_err, ls_col_type, ls_status, ls_const_desc, ls_uts_unit,ls_uhc, ls_unit,ls_find,ls_qty,ls_bill_unit,ls_tab_bill_unit
string ls_cor_lock_flag
double ld_max_cons,ld_min_cons,ld_typical_concentration,ld_old_max_cons,ld_old_typical_concentration,ld_old_min_cons
datawindowchild ldwc
datetime ldt_date
u_tabpage_profile_shipping ltabpage_profile_shipping
dwitemstatus ls_dw_status

ldt_date = DateTime(Today(),Now())
SetNull(ld_null)
SetNull(ls_null)

ll_hdr_row = idw_header.getrow()
IF ll_hdr_row > 0 THEN
	ll_template_form_id 	= idw_header.object.template_form_id[ll_hdr_row]
	ll_source_form_id		= idw_header.object.source_form_id[ll_hdr_row]
	ll_profile_id =  idw_header.object.profile_id[ll_hdr_row]
END IF

// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

CHOOSE CASE Lower(dwo.name)
	// SK 08/30/2012
	CASE "reportable_quantity_flag"

		// 20200504 jcb repl if  Upper(data) = "F" then // sagar 26822 - removed Upper(data) = "T" or
		if  Upper(data) = "F" or Upper(data) = 'U' then // 20200504 jcb #15392 same action for U-clear
			this.Object.profile_rq_threshold[row] = ld_null
		end if
	
		// rb 05/23/2012
	case 'wcr_sign_date'
		
	case "shipping_frequency"
		this.Object.shipping_frequency_other[row] = ""
		IF Upper(data) = '1' THEN
			// 10/16 SK set the detail one-time to yes
			idw_detail.object.one_time_only[1] = 'T'
			idw_detail.Object.reapproval_allowed[1] = 'F'
		ELSE 
			IF (idw_detail.object.one_time_only[1] = 'T') THEN
				idw_detail.object.one_time_only[1] = 'F'
			END IF
		END IF
		
END CHOOSE
//DevOps:14710
if this.dataobject  = 'd_profile_ship_pkg_info_form_volume_dragon' then 
    CHOOSE CASE Lower(dwo.name)
	CASE "quantity"
//		  IF Isvalid(itab_price) THEN
//			ltabpage_profile_shipping = itab_price.control[1]
//			IF Isvalid(ltabpage_profile_shipping) THEN 
//				ls_qty = this.object.quantity[row]
//				ls_find = "quantity = " + "'" + ls_qty + "'"
//				ll_find =  ltabpage_profile_shipping.dw_shipping_unit.Find (ls_find, 1,ltabpage_profile_shipping.dw_shipping_unit.RowCount())
//				IF ll_find > 0 THEN 
//			        ltabpage_profile_shipping.dw_shipping_unit.object.quantity[ll_find]= data		
//				END IF
//			END IF
//		END IF
       ls_dw_status =   idw_ship_volume.GetItemStatus (row,0,Primary!) 
		   IF  ib_shipping_volume  = FALSE OR ib_new_record = TRUE THEN  
		         idw_ship_volume.SetItemStatus  (1,0,Primary!,NEW!) 
			ELSE
				  idw_ship_volume.SetItemStatus  (1,0,Primary!,DataModified!) 
//				    IF idw_ship_volume.object.profile_id[idw_ship_volume.GetRow()]  = 0 OR  IsNull (idw_ship_volume.object.profile_id[idw_ship_volume.GetRow()])  THEN 
//					 idw_ship_volume.SetItemStatus  (1,0,Primary!,NEW!) 
//				  END IF
			END IF
			idw_ship_volume.object.quantity[1]= data	
			idw_ship_volume.object.profile_id[1]= ll_profile_id	
			idw_ship_volume.object.added_by[1]= gs_user_id	
			idw_ship_volume.object.date_modified[1]= ldt_date	
			idw_ship_volume.object.date_added[1]= ldt_date	
			idw_ship_volume.object.modified_by[1]= gs_user_id	

	CASE "bill_unit_code"
  ls_dw_status =   idw_ship_volume.GetItemStatus (row,0,Primary!) 
               IF  ib_shipping_volume  = FALSE OR ib_new_record = TRUE THEN  
		         idw_ship_volume.SetItemStatus  (1,0,Primary!,NEW!) 
			ELSE
				  idw_ship_volume.SetItemStatus  (1,0,Primary!,DataModified!) 
//				  IF idw_ship_volume.object.profile_id[idw_ship_volume.GetRow()]  = 0 OR  IsNull (idw_ship_volume.object.profile_id[idw_ship_volume.GetRow()])  THEN 
//					 idw_ship_volume.SetItemStatus  (1,0,Primary!,NEW!) 
//				  END IF
			END IF
		       
		idw_ship_volume.object.bill_unit_code[1]= data
		idw_ship_volume.object.profile_id[1]= ll_profile_id	
		idw_ship_volume.object.added_by[1]= gs_user_id	
		idw_ship_volume.object.date_modified[1]= ldt_date	
		idw_ship_volume.object.date_added[1]= ldt_date	
		idw_ship_volume.object.modified_by[1]= gs_user_id	

//		  IF Isvalid(itab_price) THEN
//			ltabpage_profile_shipping = itab_price.control[1]
//			IF Isvalid(ltabpage_profile_shipping) THEN 
//			    ls_bill_unit = this.object.bill_unit_code[row]
//				 SELECT bill_unit_code
//				 INTO :ls_tab_bill_unit
//				 FROM BillUnit
//				 WHERE bill_unit_code = :ls_bill_unit
//				 Using  itr_share;
//				ls_find = "bill_unit_code = " + "'" + ls_tab_bill_unit + "'"
//				ll_find = ltabpage_profile_shipping.dw_shipping_unit.Find (ls_find , 1,ltabpage_profile_shipping.dw_shipping_unit.RowCount())
//				IF ll_find > 0 THEN 
//			         ltabpage_profile_shipping.dw_shipping_unit.object.bill_unit_code[ll_find]= data
//					wf_wcr_profile_map_sync (this, dwo.Name, ll_find, data)
//				ELSE
//					ll_new = ltabpage_profile_shipping.dw_shipping_unit.insertrow(0)
//					
//				END IF
				
//			END IF
//		END IF		
    END CHOOSE
end if

// rb 04/24/2012
//COR2 JXM 04/04/2019 add rad page 2 & 3sub to prevent copying of last row to 1st row
// MPM - 5/28/2020 - DevOps 16003 through 16009 - Added composition dw to the IF statement below to correct an earlier change
// made under DevOps 15417.
if this.dataobject <> "d_profile_const_form_dragon"  AND this.dataobject <> "d_profile_gen_contact_form_dragon" and &
	this.dataobject <> 'd_profile_ship_pkg_info_form_volume_dragon' and &
	this.dataobject <> 'd_profile_radioactive_supplement_page_3sub' and &
	this.dataobject <> 'd_profile_composition_form_dragon' then 
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	POST wf_build_dot_shipping_desc()
end if

//DevOps 16312 made these warnings instead of hard stops, check the data of the column being changed instead of existing values
//DevOps #15325 info_gde 04/29/2020; Add New Profile (Profile Tab) - Section D. limit char 50
IF lower(this.dataobject) = 'd_profile_composition_form_dragon' THEN
		//wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		ld_old_max_cons = This.GetItemNumber(row, "comp_to_pct", Primary!,true)
		ld_old_typical_concentration = This.GetItemNumber(row, "comp_typical_pct", Primary!,true)
		ld_old_min_cons = This.GetItemNumber(row, "comp_from_pct", Primary!,true)
		
//	    this.AcceptText()
		 ld_max_cons 	=  This.Object.comp_to_pct[row]
		ld_min_cons 	=  This.Object.comp_from_pct[row]
		ld_typical_concentration = This.Object.comp_typical_pct[row]

//		IF ld_max_cons <=  0 THEN 
	//	IF lower(dwo.Name) = 'comp_to_pct' and Dec(data) <= 0 and ld_typical_concentration <= 0 THEN
	//		This.Object.comp_to_pct[row] = ld_old_max_cons
		//	 Messagebox (gs_app_name + ": Max Concentration" , "A value greater than 0 must be present for either the Typical or the Min/Max fields per constituent line",  Exclamation! ) 
	//		 Return 2
	//	END IF
		
//		IF ld_typical_concentration <=  0  THEN 
		//IF lower(dwo.Name) = 'comp_typical_pct' and Dec(data) <= 0 and ld_max_cons <= 0 THEN
			// This.Object.comp_typical_pct[row] = ld_old_typical_concentration
			// Messagebox (gs_app_name + ": Typical Concentration" , "A value greater than 0 must be present for either the Typical or the Min/Max fields per constituent line",  Exclamation! ) 
			// Return 2
		//END IF
		
//		IF  ld_max_cons > 100 THEN
	//	IF lower(dwo.Name) = 'comp_to_pct' and Dec(data) > 100 THEN
	//		This.Object.comp_to_pct[row] = ld_old_max_cons
//			 Messagebox (gs_app_name + ": Max Concentration" , "Max concentration cannot be greater than 100%",  Exclamation! ) 
	//		 Return 1
//		END IF

//		IF  ld_min_cons > 100 THEN
		//IF lower(dwo.Name) = 'comp_from_pct' and Dec(data) > 100 THEN
			//This.Object.comp_from_pct[row] = ld_old_min_cons
			// Messagebox (gs_app_name + ": Min Concentration" , "Min concentration cannot be greater than 100%",  Exclamation! ) 
			// Return 1
		//END IF
		
//		IF  ld_typical_concentration > 100 THEN
	//	IF lower(dwo.Name) = 'comp_typical_pct' and Dec(data) > 100 THEN
			// This.Object.comp_typical_pct[row] = ld_old_typical_concentration
			// Messagebox (gs_app_name + ": Typical Concentration" , "Typical concentration cannot be greater than 100%",  Exclamation! ) 
			// Return 1
	//	END IF
	// MPM - 5/28/2020 - DevOps 16003 through 16009 - Added call to WPF sync function to correct an earlier change
	// made under DevOps 15417.
	// MPM - 3/30/2021 - DevOps 19724 - Because I changed Profile tab, Section D to ShareData() with idw_composition, we
	// no longer need to call the following mapping function to keep these two dw's in sync, so I commented it out.
	//wf_wcr_profile_map_sync (this, dwo.Name, row, data)
END IF
//
//IF lower(this.dataobject)   =  "d_profile_underlying_haz_const_form_cont"  THEN
IF lower(this.dataobject)   =  "d_profile_const_form_dragon"  THEN
	     This.AcceptText()
		ld_max_cons 	=  This.Object.concentration[row]
		ld_min_cons 	=  This.Object.min_concentration[row]
		ls_unit 			= This.Object.unit[row]
		
		//DevOps 19063 info_gde 02/05/2021; New issue after we added the validation on the constituents in EQAI
		If Lower(dwo.name)='uhc' Then	this.PostEvent("ue_sync_uhc")
		
// MPM - COR2 - commenting out the following block - constituent validation is now done in wf_validate() 
//		IF ld_max_cons >  0 and ( isnull( ld_min_cons ) or ld_min_cons = 0 ) THEN
//			//  This.Object.min_concentration[row] = ld_max_cons
//		ELSEIF ( ld_max_cons =  0 or Isnull (ld_max_cons))  and ( Not IsNull( ld_min_cons ) or ld_min_cons >  0 ) THEN
//			//  This.Object.concentration[row] = ld_min_cons
//		ELSEIF ld_max_cons <=  0 OR isnull( ld_max_cons )THEN 
//			 Messagebox (gs_app_name + ": Max Concentration" , "Max Concentration cannot be negative value or 0",  Exclamation! ) 
//			Return 2
//		ELSEIF ls_unit = "%" AND ld_max_cons > 100 THEN
//			 Messagebox (gs_app_name + ": Max Concentration" , "Max concentration cannot be greater than 100%",  Exclamation! ) 
//			Return 2
//		ELSEIF ld_min_cons <=  0 OR isnull( ld_min_cons )THEN 
//			 Messagebox (gs_app_name + ": Min Concentration" , "Min Concentration cannot be negative value or 0",  Exclamation! ) 
//			Return 2
//		ELSEIF ls_unit = "%" AND ld_min_cons > 100 THEN
//			 Messagebox (gs_app_name + ": Min Concentration" , "Min concentration cannot be greater than 100%",  Exclamation! ) 
//			Return 2
//		END IF
		
		 ls_status = idw_header.Object.tracking_type [idw_header.GetRow()]
			IF ls_status = "A" or ls_status = "APRC" THEN 
				ls_unit = This.Object.unit[row]
		         ll_const_id = This.Object.const_id[row]
				//wf_calculate_uts_constituent()
				idw_const.GetChild (  "const_id_2" ,ldwc )
				ll_i = ldwc.Find ("const_id=" + String(ll_const_id), 1, ldwc.RowCount())
				if ll_i > 0 then
					ls_const_desc = ldwc.GetItemString (ll_i, "const_desc")
				end if
				ld_uts_concentration = idw_const.GetItemNumber ( row, "univ_treatment_std_nww" )
				ls_uts_unit =  idw_const.GetItemString ( row, "univ_treatment_std_nww_unit" )
				ls_uhc = idw_const.GetItemString ( row, "uhc" )
				IF ld_max_cons > ld_uts_concentration AND  ( ls_uhc = 'F' OR  ls_uhc = 'U' )  THEN
					 ld_conversion_concentration =   f_concentration_exceeds ( ll_const_id,ls_uhc,ls_uts_unit,ls_unit,ld_max_cons, ld_uts_concentration )  
					 Messagebox (gs_app_name +" " + 'UTS Value Exceeded' ,   string ( ls_const_desc  ) + " maximum concentration " + "(" + string ( ld_max_cons ) + " " + ls_unit + ")" + " " + " exceeds the UTS concentration  " + "(" + string ( ld_uts_concentration ) + " " + ls_uts_unit + ")"   )
				END IF
		    END IF
			 
			 //DevOps:38343 - AM - Restrict the flag so that "Approvals group" can only edit the flag
		If Lower(dwo.name)= "cor_lock_flag" Then
			ls_cor_lock_flag = This.Object.cor_lock_flag[row]
		
				if (is_access = "A" or is_access = "S")  then
					this.Modify('cor_lock_flag.Protect=0')
				else 
					this.Modify('cor_lock_flag.Protect=1')
				     Return 2
				end if
		  end if
		
//   wf_calculate_constituent () 
//   wf_calculate_vapor_pressure_density()
	
	//idw_const.SetItemStatus(row, 0, Primary!, DataModified!)
end if

//// is this a template, if so is user changing locked field ?
//IF ll_template_form_id > 0 OR ll_source_form_id > 0 THEN
//	ls_col_type = this.describe(dwo.name + '.coltype')
//	IF NOT wf_match_to_template(FALSE, dwo.Name, ls_col_type, string(data)) THEN
//		ls_lock_name = this.Describe(dwo.name + '.tag')
//		IF len(ls_lock_name) > 0 THEN
//			// if the tag does not correctly specify the lock bmp on dw, correct it
//			IF Pos(ls_lock_name, '_lock') = 0 THEN ls_lock_name = ls_lock_name + '_lock'
//			ls_lock_file = Lower(this.Describe(ls_lock_name + '.FileName'))
//			IF ls_lock_file <> '"c:\eqai-dev\resources\unlock.bmp"' THEN 
//				ls_err = this.Modify(ls_lock_name + '.FileName="c:\eqai-dev\resources\unlock.bmp"')
//			END IF
//		END IF
//	END IF
//END IF



ib_changed_profile = TRUE


end event

event ue_lookup;call super::ue_lookup;integer	li_idx, li_rc, li_current_form_version, li_connect
long		ll_null, ll_row, ll_ship_row, ll_generator_id, ll_header_row, ll_customer_id
string	ls_haz_class, ls_new_haz_class, ls_null, ls_where_generator, ls_curr_status_code, ls_where_customer, ls_config_flag
string ls_where_contact                 // 20200603 jcb #16080 add
datawindowchild	ldw_child
str_pick	lstr
str_pass	lstr_pass
dwobject	ldwo

ll_row = GetRow()
ll_header_row = idw_header.GetRow()

IF ll_header_row > 0 THEN
	This.AcceptText()
	ls_curr_status_code = Upper(idw_header.object.curr_status_code[ll_header_row])
	IF ai_indicate > 1 THEN
		//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
		IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 0
		
		IF is_access = 'L' AND ls_curr_status_code = 'A' THEN RETURN 0
	END IF
		
	SetNull(ll_null)
	SetNull(ls_null)
	li_rc = gi_success
	
	CHOOSE CASE Lower(as_col_name)
		CASE "contact_name"
			IF ai_indicate < 3 THEN
				RETURN 1
			ELSE
				ll_generator_id 	= idw_header.Object.generator_id[ll_header_row]
				IF IsNull(ll_generator_id) THEN
					MessageBox(gs_app_name+": Select", "Please enter a Generator ID", information!)
					return 0
				ELSE
					ls_where_generator = "ContactXRef.generator_id = " + String(ll_generator_id) &
						+ " AND ContactXRef.status = 'A'"
				END IF
				// MPM - 6/11/2020 - DevOps 16080 - Only show contacts for the given generator or customer.
				ll_customer_id 	= idw_header.Object.customer_id[ll_header_row]
				IF IsNull(ll_customer_id) THEN
					MessageBox(gs_app_name+": Select", "Please enter a Customer ID", information!)
					return 0
				ELSE
					ls_where_customer = "ContactXRef.customer_id = " + String(ll_customer_id) &
						+ " AND ContactXRef.status = 'A'"
				END IF
				
				lstr.s_window_title			= "Select Technical Contact"
				lstr.i_window_width			= 0
				lstr.b_multipick				= FALSE
		
				li_idx++
				lstr.s_tab_title[li_idx]		= "Customer Contacts"
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]	= "d_quick_select_contact_customer"
				lstr.s_where[li_idx]			= ls_where_customer
				lstr.s_retrieve_by[li_idx]	= ""
				lstr.s_new_reference[li_idx]= ""
				lstr.i_return_column_count	= 13
				
				IF ls_where_generator <> "" AND ll_generator_id > 0 THEN
					li_idx++
					lstr.s_tab_title[li_idx]		= "Generator Contacts"
					lstr.i_tabpage_type[li_idx]	= 1
					lstr.s_dataobject[li_idx]	= "d_quick_select_contact_generator"
					lstr.s_where[li_idx]			= ls_where_generator
					lstr.s_retrieve_by[li_idx]	= ""
					lstr.s_new_reference[li_idx]= ""
					lstr.i_return_column_count	= 13
				END IF
				
				lstr.i_tab_count				= li_idx
		
				OpenWithParm(w_popup_quick_select, lstr)
				lstr = Message.PowerObjectParm
				IF IsValid(lstr) THEN
					FOR li_idx = 1 TO lstr.i_return_record_count
						This.Object.contact_name[ll_row] 	= string(lstr.return2[li_idx])
						This.Object.contact_phone[ll_row]	= string(lstr.return10[li_idx])
						This.Object.contact_email[ll_row]		= string(lstr.return6[li_idx])
					NEXT
				END IF
			END IF
	
		CASE "dot_shipping_name"
			If ai_indicate < 3 Then
				return 1
			Else
			
				// Setup quick select popup
				lstr.s_window_title			= "DOT Shipping Names Select"
				lstr.i_window_width			= 0
				lstr.b_multipick				= FALSE
				lstr.i_return_column_count	= 8
				lstr.to_transaction			= itr_share
				
				li_idx = 1
				lstr.s_tab_title[li_idx]		= "Standard DOT Shipping Names"
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping_lookup"
				lstr.s_where[li_idx]				= ""
				lstr.s_retrieve_by[li_idx]		= ""
				lstr.s_new_reference[li_idx]	= ""
				
				li_idx++
				//Prakash - 05/08/2023 - Begin - Added for DevOps #64394
				ls_config_flag = f_get_config_value("rebranding_golive_flag") 
				IF ls_config_flag = "T" THEN
					lstr.s_tab_title[li_idx]			= "Republic Services DOT Shipping Names"
				ELSE
					lstr.s_tab_title[li_idx]			= "US Ecology DOT Shipping Names"
				END IF
				//Prakash - 05/08/2023 - End - Added for DevOps #64394
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping"
				lstr.s_where[li_idx]				= ""
				lstr.s_retrieve_by[li_idx]		= ""
				lstr.s_new_reference[li_idx]	= ""
				
				lstr.i_tab_count					= li_idx
				
				OpenWithParm(w_popup_quick_select, lstr)
				
				lstr = Message.PowerObjectParm
				IF IsValid(lstr) THEN
					FOR li_idx = 1 TO lstr.i_return_record_count
						//ll_ship_row = idw_shipping.GetRow()
						This.Object.DOT_shipping_name[ll_row] = String(lstr.return1[li_idx])
						ldwo = this.Object.DOT_shipping_name
						this.Event itemchanged (ll_row, ldwo, String(lstr.return1[li_idx]))
	
						this.Object.hazmat_class[ll_row] = String(lstr.return2[li_idx])
						ldwo = this.Object.hazmat_class
						this.Event itemchanged (ll_row, ldwo, String(lstr.return2[li_idx]))
	
						this.Object.un_na_flag[ll_row] = String(lstr.return3[li_idx])
						ldwo = this.Object.un_na_flag
						this.Event itemchanged (ll_row, ldwo, String(lstr.return3[li_idx]))
	
						this.Object.un_na_number[ll_row] = Long(lstr.return4[li_idx])
						ldwo = this.Object.un_na_number
						this.Event itemchanged (ll_row, ldwo, String(lstr.return4[li_idx]))
	
						this.Object.package_group[ll_row] = String(lstr.return5[li_idx])
						ldwo = this.Object.package_group
						this.Event itemchanged (ll_row, ldwo, String(lstr.return5[li_idx]))
	
						this.Object.erg_number[ll_row] = Long(lstr.return6[li_idx])
						ldwo = this.Object.erg_number
						this.Event itemchanged (ll_row, ldwo, String(lstr.return6[li_idx]))
	
						this.Object.subsidiary_haz_mat_class[ll_row] = String(lstr.return7[1])
						ldwo = this.Object.subsidiary_haz_mat_class
						this.Event itemchanged (ll_row, ldwo, String(lstr.return7[li_idx]))
	
						this.Object.erg_suffix[ll_row] = String(lstr.return8[1])
						ldwo = this.Object.erg_suffix
						this.Event itemchanged (ll_row, ldwo, String(lstr.return8[li_idx]))
	
					NEXT
				END IF
			End If
			
		CASE "hazmat_class"
			If ai_indicate < 3 Then
				return 1
			Else
				// Setup quick select popup
				lstr.s_window_title			= "Hazard Class Select"
				lstr.i_window_width			= 0
				lstr.b_multipick				= FALSE
				lstr.i_return_column_count	= 3
				lstr.to_transaction			= itr_share
				
				li_idx = 1
				lstr.s_tab_title[li_idx]		= "Haz Classes"
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]		= "d_quick_select_hazmat_class"
				lstr.s_where[li_idx]				= ""
				lstr.s_retrieve_by[li_idx]		= ""
				lstr.s_new_reference[li_idx]	= ""
				
				lstr.i_tab_count					= li_idx
				
				OpenWithParm(w_popup_quick_select, lstr)
				
				lstr = Message.PowerObjectParm
				IF IsValid(lstr) THEN
					FOR li_idx = 1 TO lstr.i_return_record_count
						This.Object.hazmat_class[ll_row] = String(lstr.return2[li_idx])
						ib_changed_profile = TRUE
						ldwo = this.Object.hazmat_class
						this.Event itemchanged (ll_row, ldwo, String(lstr.return2[li_idx]))
					NEXT
				END IF
			End If
			
		CASE "subsidiary_haz_mat_class"
			If ai_indicate < 3 Then
				return 1
			Else
				ls_haz_class = This.Object.subsidiary_haz_mat_class[ll_row]
				IF IsNull(ls_haz_class) THEN ls_haz_class = ""
				lstr_pass.s[1] = ls_haz_class
				lstr_pass.s[2] = "HAZCLASS"
				lstr_pass.tr_trans = itr_share
		
				OpenWithParm(w_popup_color_consistency, lstr_pass)
			
				lstr_pass = Message.PowerObjectParm
				IF IsValid(lstr_pass) THEN
					IF lstr_pass.d[1] = 1 THEN
						IF ls_haz_class <> lstr_pass.s[1] THEN
							ls_new_haz_class = lstr_pass.s[1]
							This.Object.subsidiary_haz_mat_class[ll_row] = ls_new_haz_class
							This.AcceptText()
							This.SetColumn("package_group")
							ib_changed_profile = TRUE
							ldwo = this.Object.subsidiary_haz_mat_class
							this.Event itemchanged (ll_row, ldwo, ls_new_haz_class)
						END IF
					END IF
				END IF
			End IF
			
		CASE "erg_number"
			If ai_indicate < 3 Then
				return 1
			Else
				// Setup quick select popup
				lstr.s_window_title			= "ERG Number Select"
				lstr.i_window_width			= 0
				lstr.b_multipick				= FALSE
				lstr.i_return_column_count	= 3
				lstr.to_transaction			= itr_share
				
				li_idx = 1
				lstr.s_tab_title[li_idx]		= "ERG Numbers"
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]		= "d_quick_select_erg"
				lstr.s_where[li_idx]				= ""
				lstr.s_retrieve_by[li_idx]		= ""
				lstr.s_new_reference[li_idx]	= ""
				
				lstr.i_tab_count					= li_idx
				
				OpenWithParm(w_popup_quick_select, lstr)
				
				lstr = Message.PowerObjectParm
				IF IsValid(lstr) THEN
					FOR li_idx = 1 TO lstr.i_return_record_count
						IF String(lstr.return2[li_idx]) > "" THEN
							This.Object.erg_number[ll_row] = Long(Left(lstr.return2[li_idx], 3))
						ELSE
							This.Object.erg_number[ll_row] = ll_null
						END IF
						IF Pos(String(lstr.return2[li_idx]), "P", 1) > 0 THEN
							This.Object.erg_suffix[ll_row] = "P"
						ELSE
							This.Object.erg_suffix[ll_row] = ls_null
						END IF
						ldwo = this.Object.erg_number
						this.Event itemchanged (ll_row, ldwo, Left(lstr.return2[li_idx], 3))
						ib_changed_profile = TRUE
					NEXT
				END IF
			End If
			
	//	CASE "transporter_code_1", "transporter_code_2"
	//		If ai_indicate < 3 Then
	//			return 1
	//		Else
	//			// Setup quick select popup
	//			lstr.s_window_title			= "Transporter Select"
	//			lstr.i_window_width			= 0
	//			lstr.b_multipick				= FALSE
	//			lstr.i_tab_count				= 1
	//			lstr.i_return_column_count	= 2
	//	
	//			lstr.to_transaction			= itr_share
	//			
	//			lstr.s_tab_title[1]			= "Transporters"
	//			lstr.i_tabpage_type[1]		= 1
	//			lstr.s_dataobject[1]			= "d_quick_select_transporter"
	//			lstr.s_where[1]				= ""
	//			lstr.s_retrieve_by[1]		= ""
	//			lstr.s_new_reference[1]		= "transporter"
	//	
	//			OpenWithParm(w_popup_quick_select, lstr)
	//	
	//			lstr = Message.PowerObjectParm
	//			IF IsValid(lstr) THEN
	//				FOR li_idx = 1 TO lstr.i_return_record_count
	//					IF ll_row > 0 THEN
	//						IF Lower(as_col_name) = "transporter_code_1" THEN
	//							This.SetItem(ll_row, "transporter_code_1", String(lstr.return1[li_idx]))
	//							This.Object.txt_transport_1_name.Text = String(lstr.return2[li_idx])
	//						ELSE
	//							This.SetItem(ll_row, "transporter_code_2", String(lstr.return1[li_idx]))
	//							This.Object.txt_transport_2_name.Text = String(lstr.return2[li_idx])
	//						END IF
	//						ib_changed_profile = TRUE
	//					END IF
	//				NEXT
	//			END IF
	//		End IF
	//		
	//	CASE "waste_managed_id"	// On LDR form
	//		If ai_indicate < 3 Then
	//			return 1
	//		Else
	//
	//			IF ib_connected_forms THEN
	//	
	//				SELECT current_form_version
	//					INTO :li_current_form_version
	//					FROM FormType
	//					WHERE form_type = 'LDR'
	//				USING itr_share;
	//				
	//				// Setup quick select popup
	//				lstr_pass.i[1] = Integer(This.Object.waste_managed_id[ll_row])
	//				lstr_pass.i[2] = li_current_form_version
	//				lstr_pass.tr_trans = itr_forms
	//				
	//				OpenWithParm(w_popup_get_ldr_waste_managed, lstr_pass)
	//		
	//				lstr_pass = Message.PowerObjectParm
	//				IF IsValid(lstr_pass) THEN
	//					IF lstr_pass.i[1] > 0 or IsNull(lstr_pass.i[1]) THEN
	//						This.Object.waste_managed_id[ll_row] = lstr_pass.i[1]
	//						ib_changed_profile = TRUE
	//					END IF
	//				END IF
	//			END IF
	//			
	//			idw_shipping.GetChild("waste_managed_id", ldw_child)
	//			ldw_child.SetTransObject(itr_share)
	//			ldw_child.Retrieve()
	//			
	//			idw_shipping.GetChild("waste_managed_id_1", ldw_child)
	//			ldw_child.SetTransObject(itr_share)
	//			ldw_child.Retrieve()
	//		End If
			
	END CHOOSE
END IF

IF Lower(this.dataobject) = "d_profile_shipping_form_contd" THEN
	POST wf_build_dot_shipping_desc()
END IF

RETURN 0
end event

event buttonclicked;call super::buttonclicked;//************************************************************************************* 
//* 20190924 JCB bug 12484 Add check whether chkbox LDR form #10 is already checked before sending msg to check it 
//* 20200218 info_gde bug 13986 Add New Profile (Profile Tab) - Section G.; The LDR subcategory look-up is not working.  (It is working on the shipping tab.) 
//DevOps #14700 info_gde 03/25/2020; EQAI - Maintenance - COR  - Form Management - New Profile - Accept
//DevOps #15003 info_gde 04/04/2020; EQAI (Radioactive Supplement) Page 3 Issues
boolean lb_found
Int		li_idx, li_ans, li_co, li_pc, li_response,i,li_rc, li_line_id = 0
Long		ll_rc,ll_ship_row, ll_profile_id, ll_row_header, ll_row_facility, ll_row_wcr_display_1, ll_i, ll_found_row, ll_const_id,ll_ldr_sub_cat_id
Long     ll_ldr_count,ll_rcra_waste_codes_for_g4,ll_ldr_sub_cat, ll_row
string ls_rcra_waste_codes_for_g4
String		ls_wcr_facility_name, ls_find, ls_ldr_const_flag, ls_where, ls_config_flag
String		ls_const_flag, ls_null								// 20190924 jcb bug 12424  ADD
Long 		ll_line_id, ll_profile, ll_rows, ll_ldr_const_filter_count
long		ll_header_row	,ll_len	,ll_const_ldr_count					// 20190924 jcb bug 12424  ADD
string ls_uhc
setNull(ls_null)
str_pick	lstr
dwobject	ldwo
dwItemStatus	ldwItemStatus
datastore  ds_ldr_sub_cat 

IF (Upper(is_access) = "V") OR (Upper(is_access) = "P") OR (Upper(is_access) = "B") THEN RETURN

// COR2-MPM
// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSE
	ll_profile_id = idw_header.object.profile_id[ll_row_header]
END IF

CHOOSE CASE lower(dwo.name)
	CASE 'b_dot_shipping'
		// Setup quick select popup
		lstr.s_window_title			= "DOT Shipping Names Select"
		lstr.i_window_width			= 0
		lstr.b_multipick				= FALSE
		lstr.i_return_column_count	= 8
		lstr.to_transaction			= itr_share
		
		li_idx = 1
		lstr.s_tab_title[li_idx]		= "Standard DOT Shipping Names"
		lstr.i_tabpage_type[li_idx]	= 1
		lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping_lookup"
		lstr.s_where[li_idx]				= ""
		lstr.s_retrieve_by[li_idx]		= ""
		lstr.s_new_reference[li_idx]	= ""
		
		li_idx++
		//Prakash - 05/08/2023 - Begin - Added for DevOps #64394
		ls_config_flag = f_get_config_value("rebranding_golive_flag") 
		IF ls_config_flag = "T" THEN
			lstr.s_tab_title[li_idx]			= "Republic Services DOT Shipping Names"
		ELSE
			lstr.s_tab_title[li_idx]			= "US Ecology DOT Shipping Names"
		END IF
		//Prakash - 05/08/2023 - End - Added for DevOps #64394
		lstr.i_tabpage_type[li_idx]	= 1
		lstr.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping"
		lstr.s_where[li_idx]				= ""
		lstr.s_retrieve_by[li_idx]		= ""
		lstr.s_new_reference[li_idx]	= ""
		
		lstr.i_tab_count					= li_idx
		
		OpenWithParm(w_popup_quick_select, lstr)
		
		lstr = Message.PowerObjectParm
		IF IsValid(lstr) THEN
			FOR li_idx = 1 TO lstr.i_return_record_count
				ll_ship_row = idw_shipping.GetRow()
				This.Object.DOT_shipping_name[row] = String(lstr.return1[li_idx])
				idw_shipping.Object.hazmat_class[ll_ship_row] = String(lstr.return2[li_idx])
				idw_shipping.Object.un_na_flag[ll_ship_row] = String(lstr.return3[li_idx])
				idw_shipping.Object.un_na_number[ll_ship_row] = Long(lstr.return4[li_idx])
				
				idw_shipping.Object.package_group[ll_ship_row] = String(lstr.return5[li_idx])
				//DevOps #14700 info_gde 03/25/2020 - start
				if  String(lstr.return5[li_idx])='N/A' then 
					lstr.return5[li_idx]=ls_null
					idw_shipping.Object.package_group[ll_ship_row] = String(lstr.return5[li_idx])
				end if
				//DevOps #14700 info_gde 03/25/2020 - end
				
				idw_shipping.Object.erg_number[ll_ship_row] = Long(lstr.return6[li_idx])
				idw_shipping.Object.subsidiary_haz_mat_class[ll_ship_row] = String(lstr.return7[1])
				idw_shipping.Object.erg_suffix[ll_ship_row] = String(lstr.return8[1])

				ldwo = this.Object.DOT_shipping_name
				this.Event itemchanged (row, ldwo, String(lstr.return1[li_idx]))
			NEXT
		END IF
		
	case "b_add_volume"
		this.InsertRow (0)
		this.SetRow (this.RowCount())
		this.ScrollToRow (this.RowCount())
//		this.height += 80
//		dw_wcr_display_2.height -= 80
//		dw_wcr_display_2.y += 80

	case "b_del_volume"
		this.DeleteRow (row)
//		this.height -= 80
//		dw_wcr_display_2.y -= 80
//		dw_wcr_display_2.height += 80
	case "b_add_comp"
		//DevOps #15003 info_gde 04/04/2020 - start
		if this.DataObject="d_profile_radioactive_supplement_page_3sub" then 
              //DevOps #15003 info_gde 04/04/2020 - start
			ll_rc=this.InsertRow (0)
			this.SetRow (ll_rc)
			this.ScrollToRow (ll_rc)
			// MPM - 4/19/2020 - DevOps 15205
			// Determine what the new line's line_id should be.  We can't just use RowCount(), because
			// it's possible that a row had been added and then deleted, so RowCount() might end up
			// being a duplicate line_id.  So, find the max line_id, then add one to it.
			FOR ll_row = 1 TO This.RowCount()
				IF This.Object.line_id[ll_row] > li_line_id THEN li_line_id = This.Object.line_id[ll_row]
			NEXT
			This.SetItem(ll_rc,'line_id',li_line_id + 1)
			This.SetItem(ll_rc,'profile_id',ll_profile_id)
			This.SetItemStatus(ll_rc, 0, Primary!, DataModified!) 
			This.SetItemStatus(ll_rc, 0, Primary!, NotModified!) 
		end if
		//DevOps #15003 info_gde 04/04/2020 - end
		
		// MPM - 4/19/2020 - DevOps 15205
		//COR2 JXM 04/03/2019 Add invisible columns on RAD 3sub dw
		if this.DataObject="d_profile_radioactive_supplement_page_3sub" then 
//			this.SetItem(ll_rc,'profile_id',ll_profile_id)
//			this.SetItem (ll_rc, "date_added", DateTime(Today(),Now()))
//			this.SetItem (ll_rc, "added_by", gs_user_id)
//			this.SetItem (ll_rc, "date_modified", DateTime(Today(),Now()))
//			this.SetItem (ll_rc, "modified_by", gs_user_id)
		// MPM - 5/15/2020 - DevOps 15763
		elseif this.DataObject="d_profile_composition_form_dragon" then 
			ldwo = idw_composition.Object.b_add_comp
			idw_composition.Event buttonclicked (row, actionreturncode, ldwo)
			// MPM - 3/31/2021 - DevOps 19724 - Because I changed the composition dw on Section D of the Profile tab to ShareData() with idw_composition, I 
			// commented out the next 3 lines, since these are no longer needed.			
//			ll_rc=this.InsertRow (0)
//			this.SetRow (ll_rc)
//			this.ScrollToRow (ll_rc)
			//		this.height += 80
			//		dw_wcr_display_2.y += 80
		end if
		
//		if this.DataObject="d_profile_composition_form_dragon" then 
//			ll_rc=this.InsertRow (0)
//			this.SetRow (ll_rc)
//			this.ScrollToRow (ll_rc)
//		end if
	case "b_del_comp"
		// MPM - 4/19/2020 - DevOps 15205
		if this.DataObject="d_profile_radioactive_supplement_page_3sub" then 
			li_ans = MessageBox("Delete Line","Delete this line?",Question!,OKCancel!,2)
		ELSE
			li_ans = MessageBox("Delete Waste Composition Line","Delete this waste composition line?",Question!,OKCancel!,2)
		END IF
		if li_ans = 1 then
			//ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
			//IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN 	
			IF ib_new_record THEN
				This.RowsDiscard(row, row, Primary!)
				// MPM - 3/31/2021 - DevOps 19724 - Because I changed the composition dw on Section D of the Profile tab to ShareData() with idw_composition, I 
				// commented out the following IF block, since it's no longer needed.			
//				if this.DataObject="d_profile_composition_form_dragon" then //DevOps #15412 info_gde 04/30/2020;
//					idw_composition.RowsDiscard(row, row, Primary!)
//				end if
			ELSE
				if this.DataObject="d_profile_composition_form_dragon" then //DevOps #15412 info_gde 04/30/2020;
				     wf_audit(idw_composition, ll_profile_id, row, TRUE)
				     idw_composition.DeleteRow(row)
					 ////DevOps:16339 -delete both dw rows
					// MPM - 3/31/2021 - DevOps 19724 - Because I changed the composition dw on Section D of the Profile tab to ShareData() with idw_composition, I 
					// commented out the following line, since it's no longer needed.			
					// This.DeleteRow(row)
				elseif this.DataObject="d_profile_radioactive_supplement_page_3sub" then 
					//wf_audit(idw_profile_radioactive_supplement_3sub, ll_profile_id, row, TRUE)
					idw_profile_radioactive_supplement_3sub.DeleteRow(row)
					idw_profile_radioactive_supplement_3sub.Update()
					COMMIT USING gtr_share;
				end if
			END IF 
			ib_changed_comp = TRUE
//			dw_wcr_display_2.y -= 80
//			dw_wcr_display_2.height += 80
		end if

	// COR2 - MPM
	CASE "b_add_facility"
		lstr.s_window_title			= "Requested USE Facility Select"
		lstr.i_window_width			= 0
		lstr.b_multipick				= TRUE
		lstr.i_tab_count				= 1
		lstr.i_return_column_count	= 3
		lstr.to_transaction			= itr_share
		
		lstr.s_tab_title[1]	= 'Facility'
		lstr.i_tabpage_type[1]	= 1
		lstr.s_dataobject[1] = "d_quick_select_wcr_facility"
		lstr.s_where[1]				= ""
		lstr.s_retrieve_by[1]		= ""
		lstr.s_new_reference[1]	= ""

		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr)
		
		// Get the return values
		lstr = Message.PowerObjectParm
		IF IsValid(lstr) THEN
			SetPointer(HourGlass!)
			
			FOR li_idx = 1 TO lstr.i_return_record_count
				// Get return values
				li_co = Int(lstr.return1[li_idx])
				li_pc = Int(lstr.return2[li_idx])
				ls_wcr_facility_name = String(lstr.return3[li_idx])
				
				// Add only new facilities
				ls_find = "company_id=" + String(li_co) + " and profit_ctr_id=" + String(li_pc)
				ll_row_facility = This.Find(ls_find, 1, This.RowCount()+1)
				IF ll_row_facility > 0 THEN
					CONTINUE
				ELSE
					ll_row_facility = This.InsertRow(0)
					This.Object.profile_id[ll_row_facility] = ll_profile_id
					This.Object.company_id[ll_row_facility] = li_co
					This.Object.profit_ctr_id[ll_row_facility] = li_pc
					This.Object.wcr_facility_name[ll_row_facility] = ls_wcr_facility_name
				END IF
			NEXT
			//This.Sort()
		END IF
				
	CASE "b_delete_facility"
		li_response = MessageBox(gs_app_name + ":  Delete Requested USE Facility", "Are you sure you want to delete this row?", Question!, YesNo!, 2)
		IF li_response = 1 THEN
			// Delete this facility
			ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
			IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
				This.RowsDiscard(row, row, Primary!)
			ELSE
				// MPM - 2/4/2020 - DevOps 13987 - corrected audit error
				wf_audit(idw_wcr_facility, ll_profile_id, row, TRUE)
				This.DeleteRow(row)
			END IF 
		END IF
	
	//COR2 JXM 04/08/2019 Delete QuickSelect for Subcategories on Section H, Q4	
	CASE 'b_del_ldr_subcat','b_del'
		li_ans = MessageBox("Delete LDR Subcategory","Delete this LDR subcategory?",Question!,OKCancel!,2)
		if li_ans = 1 then
			IF ib_new_record THEN
				This.RowsDiscard(row, row, Primary!)
			ELSE
				wf_audit(idw_ldr_subcategory, ll_profile_id, row, TRUE)
				This.DeleteRow(row)
			END IF 
			ib_changed_comp = TRUE
		end if	
		
	//COR2 JXM 04/08/2019 Add QuickSelect for Subcategories on Section H, Q4	
	case 'b_assign_ldr_subcat'
		
		// MPM - 5/11/2020 - DevOps 15675 - Filter the LDR Subcategories quick select based on the RCRA waste codes on the profile
		// FHC - 8/7/2020  - DevOps 17077 - NONE has been excluded as an option.
		ll_rc = idw_waste_code_fed.RowCount()
		IF ll_rc = 0 THEN
			ls_where = " (short_desc <> 'None') "
		ELSE	
			FOR li_idx = 1 TO ll_rc
				IF idw_waste_code_fed.Object.include[li_idx] = 1  THEN
					IF ll_rc = 1 THEN
						ls_where += " (short_desc LIKE '" + idw_waste_code_fed.Object.waste_code[li_idx] + "%'  "
					ELSEIF ll_rc > 1 and ls_where= "" THEN
						ls_where += " (short_desc LIKE '" + idw_waste_code_fed.Object.waste_code[li_idx] + "%'  "
					ELSE 
						ls_where += " OR short_desc LIKE '" + idw_waste_code_fed.Object.waste_code[li_idx] + "%'"
					END IF
				END IF
			NEXT
			ls_where += " ) "
		END IF
		
//		ls_where = " (short_desc = 'None' "
//		FOR li_idx = 1 TO idw_waste_code_fed.RowCount()
//			IF idw_waste_code_fed.Object.include[li_idx] = 1 THEN
//				ls_where += " OR short_desc LIKE '" + idw_waste_code_fed.Object.waste_code[li_idx] + "%' "
//			END IF
//		NEXT
//		ls_where += " ) "
		
		//* 20200218 info_gde bug 13986 -- start
		// assign with quickselect
		lstr.s_window_title			= "LDR Subcategories"
		lstr.i_window_width			= 0
		lstr.b_multipick				= TRUE
		lstr.i_tab_count				= 1
		lstr.i_return_column_count	= 2
		lstr.to_transaction			= itr_share
		
		li_idx = 1
		lstr.s_tab_title[li_idx]			= "LDR Subcategories"
		lstr.i_tabpage_type[li_idx]		= 1
		lstr.s_dataobject[li_idx]		=    "d_quick_select_ldr_subcategory" 
		lstr.s_where[li_idx]				= ls_where
		lstr.s_retrieve_by[li_idx]		= ""
		lstr.s_new_reference[li_idx]	= ""

		OpenWithParm(w_popup_quick_select, lstr)
		
		lstr = Message.PowerObjectParm
		IF IsValid(lstr) THEN
			FOR li_idx = 1 TO lstr.i_return_record_count
				// assign selected categories
				// Get return values
				ll_ldr_sub_cat = Long(lstr.return1[li_idx])
				
				string ls_search, ls_filter
				long ll_row_new
				// Add only new records
				ls_search = "ldr_subcategory_id = " + String(ll_ldr_sub_cat)
				ll_row = This.Find(ls_search, 1, This.RowCount() + 1)
				IF ll_row > 0 THEN
					CONTINUE
				ELSE
					ll_row_new = This.InsertRow(0)
					This.Object.ldr_subcategory_id[ll_row_new] 	= ll_ldr_sub_cat
					This.Object.profile_id[ll_row_new] 				= ll_profile_id
					
// DevOps 17077 - NONE has been taken out as an option from the Datawindow.  This logic is obsolete. fhc 8/6/20				
//					IF Upper(lstr.return2[li_idx]) = 'NONE' THEN
//						// delete everything else
//						ls_filter = "ldr_subcategory_id <> " + String(ll_ldr_sub_cat)
//						This.SetFilter(ls_filter)
//						This.Filter()
//						FOR ll_row = This.RowCount() TO 1 STEP -1
//							This.Deleterow(ll_row)
//						NEXT
//						This.SetFilter('')
//						This.Filter()
//						//exit, no need to add any further, as we added "none"
//						EXIT
//					END IF
					
				END IF
			NEXT

// DevOps 17077 - NONE has been taken out as an option from the Datawindow.  This logic is obsolete. fhc 8/6/20
//			// make sure previously selected None gets cleared, if we just added a diff set of subcats..
//			ls_search = "Upper(LookUpDisplay(ldr_subcategory_id)) = 'NONE'"
//			ll_row = This.Find(ls_search, 1, This.RowCount() + 1)
//			IF ll_row > 0  AND This.Rowcount() > 1 THEN This.DeleteRow(ll_row)
			
		END IF
//		//  assign with quickselect
//		lstr.s_window_title			= "LDR Subcategories"
//		lstr.i_window_width			= 0
//		lstr.b_multipick				= TRUE
//		lstr.i_tab_count				= 1
//		lstr.i_return_column_count	= 2
//		lstr.to_transaction			= itr_share
//		
//		li_idx = 1
//		lstr.s_tab_title[li_idx]		= "LDR Subcategories"
//		lstr.i_tabpage_type[li_idx]	= 1
//		lstr.s_dataobject[li_idx]		= "d_quick_select_ldr_subcategory"
//
//         ds_ldr_sub_cat = CREATE DATASTORE
//		ds_ldr_sub_cat.dataobject = "d_profile_subcategeroy_arry"
//		ds_ldr_sub_cat.Settransobject(gtr_share)
//		ll_ldr_count = ds_ldr_sub_cat.retrieve (is_rcra_waste_codes_for_g4[])
////		 ll_len = len(is_rcra_waste_codes_for_g4) - 1 
////		 ls_rcra_waste_codes_for_g4_dummy =  '(' +  LEFT (is_rcra_waste_codes_for_g4 , ll_len)  + ')'
////		 
////		DECLARE ldr_sub_cat CURSOR FOR  
////			 SELECT subcategory_id
////			 FROM LDRSubcategory
////			 WHERE status = 'A'
////			 and LEFT (short_desc , 4 ) IN (:ls_rcra_waste_codes_for_g4 )
////			 Using gtr_share;
////		
////		 OPEN ldr_sub_cat;
////		
////		 DO WHILE gtr_share.SQLCode = 0
////			FETCH ldr_sub_cat INTO :ll_rcra_waste_codes_for_g4 ;
////			IF gtr_share.SQLCode = 0 THEN
////				IF ls_rcra_waste_codes_for_g4 = "" OR IsNull(ls_rcra_waste_codes_for_g4) THEN 
////				   ls_rcra_waste_codes_for_g4 =  string ( ll_rcra_waste_codes_for_g4 )  
////			     ELSE				
////				   ls_rcra_waste_codes_for_g4 +=  ','  + string ( ll_rcra_waste_codes_for_g4 )  
////				END IF
////			ELSEIF gtr_share.SQLCode = -1 THEN
////				MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading Subcategory ID.", Exclamation!)
////				CLOSE ldr_sub_cat;
////				RETURN
////			END IF
////		LOOP
////		
////		CLOSE ldr_sub_cat;
//   IF ll_ldr_count > 0 THEN 
//         FOR i = 1 to ll_ldr_count
//			ll_ldr_sub_cat = ds_ldr_sub_cat.Object.subcategory_id[i]
//			IF i = 1 THEN 
//			    ls_rcra_waste_codes_for_g4 =	String (ll_ldr_sub_cat)
//			ELSE
//				ls_rcra_waste_codes_for_g4 +=  ','  + string ( ll_ldr_sub_cat )  
//			END IF
//		NEXT 
//		ls_where = 'subcategory_id in (' + ls_rcra_waste_codes_for_g4 + ')'
//				
//		lstr.s_where[li_idx]	= ls_where 		
//		lstr.s_retrieve_by[li_idx]	= ""
//		lstr.s_new_reference[li_idx]	= ""
//			OpenWithParm(w_popup_quick_select, lstr)
//			lstr = Message.PowerObjectParm
//			long li_subcategory_id, ll_row, ll_row_new
//			string ls_search, ls_filter, ls_short_desc
//			
//			if isValid(lstr) then
//				for li_idx = 1 to lstr.i_return_record_count
//					li_subcategory_id = Long(lstr.return1[li_idx])
//					ls_search = "ldr_subcategory_id = " + string(li_subcategory_id)
//					ll_row = This.Find(ls_search, 1, This.RowCount() + 1)
//					if ll_row > 0 Then
//						Continue
//					else
//						ll_row_new = This.InsertRow(0)
//						This.Object.ldr_subcategory_id[ll_row_new] = li_subcategory_id
//						This.Object.profile_id[ll_row_new] = ll_profile_id
//						If upper(lstr.return2[li_idx]) = 'NONE' Then
//							ls_filter = "ldr_subcategory_id <> " + String(li_subcategory_id)
//							This.SetFilter(ls_filter)
//							This.Filter()
//							For ll_row = This.RowCount() to 1 Step -1
//								This.DeleteRow(ll_row)			
//							next
//							This.SetFilter("")
//							This.Filter()
//							exit
//						end if
//					end if
//					
//				next 
//				ls_search = "Upper(LookUpDisplay(ldr_subcategory_id)) = 'NONE'"
//				ll_row = This.Find(ls_search, 1, This.RowCount() + 1)
//				if ll_row > 0  AND This.Rowcount() > 1 Then This.DeleteRow(ll_row)
//			end if
//		end if 
//* 20200218 info_gde bug 13986 -- start
	CASE 'b_add_ldr_const'
		// Task 9649 AGC 04/25/2019
		ll_row_wcr_display_1 = idw_wcr_display_1.getrow()
		if ll_row_wcr_display_1 > 0 then
			ls_ldr_const_flag = idw_wcr_display_1.getitemstring(1,'constituents_requiring_treatment_flag')
		end if
		if ls_ldr_const_flag = 'T' then
			ll_ldr_const_filter_count = idw_wcr_display_2.filteredcount()
			if ll_ldr_const_filter_count > 0 then
				lstr.s_window_title			= "Constituent Select"
				lstr.i_window_width		= 2000
				lstr.b_multipick				= TRUE
				lstr.i_tab_count				= 26
				lstr.s_retrieve_by[1]		= "const_alpha_desc"
				lstr.s_button_text[1]		= "Alphabetize by Name"
				lstr.i_return_column_count	= 24
				lstr.to_transaction			= itr_share

				lb_found = false
				ls_where = 'const_id in ('
				for ll_i = 1 to ll_ldr_const_filter_count
					ll_const_id = idw_wcr_display_2.getitemnumber(ll_i,'const_id',Filter!,false)
					if lb_found then
						ls_where = ls_where + ', ' + string(ll_const_id)
					else
						lb_found = true
						ls_where = ls_where + string(ll_const_id)
					end if
				next
				ls_where = ls_where + ')'

				// Set the 26 tabs' titles to "A", "B", "C", etc.
				FOR li_idx = 1 TO 26
					lstr.s_tab_title[li_idx]		= Char(li_idx + 64)
					lstr.i_tabpage_type[li_idx]	= 1
					lstr.s_dataobject[li_idx]		= "d_quick_select_constituent"
					lstr.s_where[li_idx]				= ls_where
					lstr.s_new_reference[li_idx]	= "constituent"
				NEXT
		
				OpenWithParm(w_popup_quick_select, lstr)
		
				lstr = Message.PowerObjectParm
				IF IsValid(lstr) THEN
					IF lstr.i_return_record_count >= 1 THEN
						idw_wcr_display_2.SetRedraw(false)
						idw_wcr_display_2.SetFilter('')
						idw_wcr_display_2.Filter()
						FOR ll_i = 1 TO lstr.i_return_record_count
							ll_found_row = idw_wcr_display_2.Find("const_id=" + String(lstr.return1[ll_i]), 1, idw_wcr_display_2.RowCount() + 1)
							IF ll_found_row > 0 THEN
								idw_wcr_display_2.setitem(ll_found_row,'requiring_treatment_flag','T')
							END IF
						NEXT
						idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
						idw_wcr_display_2.Filter()
						idw_wcr_display_2.SetRedraw(true)
					END IF
				END IF
			else
				messagebox('LDR Constituents Add','All LDR Constituents Requiring Treatment for this profile have already been added')
			end if
		else
			// 20190924 jcb bug 12424 check if LDR#10 is already YES before telling user to select YES
			//   bug 12424    repl         messagebox('LDR Constituents Add','Please select YES for Constituents Requiring Treatment before adding LDR Constituents')
			 ll_header_row  = idw_header.getrow()
			 ls_const_flag    =  idw_header.getitemstring(ll_header_row,'constituents_requiring_treatment_flag')
              IF IsNull(ls_const_flag)            or                 &
				 ls_const_flag                     = 'F'  then
				 messagebox('LDR Constituents Add','Please select YES for Constituents Requiring Treatment before adding LDR Constituents')
			END IF			
		end if
		
		//DevOps:19087 - Commented below code and added below 
	CASE 'b_delete_ldr_const'
		ll_row_wcr_display_1 = idw_wcr_display_2.getrow()
		if ll_row_wcr_display_1 > 0 then
			ls_ldr_const_flag = idw_wcr_display_1.getitemstring(1,'constituents_requiring_treatment_flag')
		end if
		if row > 0 and row <= idw_wcr_display_2.rowcount() and ls_ldr_const_flag = 'T' then
			idw_wcr_display_2.SetRedraw(false)
			idw_wcr_display_2.setitem(row,'requiring_treatment_flag','F')
			ll_const_id =idw_wcr_display_2.object.const_id[row]
			ll_const_ldr_count = idw_const.RowCount ()
			ls_find = "const_id = " + string(ll_const_id)
			ll_i = idw_const.Find(ls_find,1,idw_const.rowcount() ) 
			IF ll_i > 0 THEN 
				idw_const.setitem(ll_i,'requiring_treatment_flag','F')
				ib_LDR_setFilter = FALSE
			END IF
			 idw_wcr_display_2.rowcount()
			idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
			idw_wcr_display_2.Filter()
			idw_wcr_display_2.SetRedraw(true)
		end if



END CHOOSE

// rb 07/11/2012 Pass on buttonclicks to Constituent tab
// COR2-MPM
//if this.dataobject = "d_profile_underlying_haz_const_form_cont" then
if this.dataobject = "d_profile_const_form_dragon" then

	CHOOSE CASE Lower(dwo.name)
		CASE "b_assign"
			ldwo = idw_const.Object.b_assign
		CASE "b_assign_cas"
			ldwo = idw_const.Object.b_assign_cas
		CASE "b_default"
			ldwo = idw_const.Object.b_default
		CASE "b_clear"
			ldwo = idw_const.Object.b_clear
		CASE "b_delete"
			ldwo = idw_const.Object.b_delete
		CASE "b_generics"
			ldwo = idw_const.Object.b_generics
		CASE "b_metals"
			ldwo = idw_const.Object.b_metals
		CASE "b_report_info"
			ldwo = idw_const.Object.b_report_info
		CASE "b_typical"
			ldwo = idw_const.Object.b_typical
	END CHOOSE

	idw_const.Event buttonclicked (row, actionreturncode, ldwo)
end if

end event

event doubleclicked;// OVERRIDE rb 07/10/2012

choose case dwo.Name

	case "subsidiary_haz_mat_class"

		This.event ue_lookup (dwo.Name, 3, dwo.Name)

	case "cf_erg"

		This.event ue_lookup ("erg_number", 3, "erg_number")

	case else
		
		call super::doubleclicked
	
end choose

end event

event itemerror;call super::itemerror; return 2
end event

event itemfocuschanged;call super::itemfocuschanged;//double	ld_min_cons, ld_max_cons
//
//if this.dataobject  =  "d_profile_underlying_haz_const_form_cont"   THEN
//	ld_max_cons =  This.Object.concentration[row]
//	ld_min_cons =  This.Object.min_concentration[row]
//	
//	IF ld_max_cons >  0 and ( isnull( ld_min_cons ) or ld_min_cons = 0 ) THEN
//		  This.Object.min_concentration[row] = ld_max_cons
//	ELSEIF ( ld_max_cons =  0 or Isnull (ld_max_cons))  and ( Not IsNull( ld_min_cons ) or ld_min_cons >  0 ) THEN
//		 This.Object.concentration[row] = ld_min_cons
//	END IF
//END IF
end event

event editchanged;call super::editchanged;String ls_data

// DevOps 19079 info_gde 12/06/2021 - TEST EQAI - SQL Error - Form Management - Create Profile (E6)
IF This.DataObject = 'd_profile_const_form_dragon' THEN
	CHOOSE CASE Lower(dwo.name)
		CASE "typical_concentration", "min_concentration", "concentration"
			ls_data = data
			IF Right(ls_data, 2) = '.0' THEN ls_data = Left(ls_data, Len(ls_data) - 2)
			IF (Pos(ls_data, '.') = 0 AND Len(ls_data) > 8) OR (Pos(ls_data, '.') > 0 AND Len(ls_data) > 8) OR (Pos(ls_data, '.') = 8 )  THEN
				MessageBox(gs_app_name + ":  Error", "You cannot enter a value containing more than 8 digits.", StopSign!)
				This.SetText(Left(This.GetText(), Len(This.GetText()) - 2))
			ELSEIF (Pos(ls_data, '.') = 1 AND Len(ls_data) > 7)  THEN
				MessageBox(gs_app_name + ":  Error", "Only 6 digits can be entered after the decimal.", StopSign!)
				This.SetText(Left(This.GetText(), Len(This.GetText()) -1))
			END IF					
	END CHOOSE
END IF


end event

event ue_keypressed;call super::ue_keypressed;long li_lastcol
long ll_pos, ll_x, ll_y, ll_tab
long ll_curr_x, ll_curr_y
string ls_list, ls_piece, ls_last_column, ls_setting

//DevOps 13955 info_gde 04/14/2022; Add New Profile (Profile Tab) - All 
IF Key=KeyTab!  THEN
	li_lastcol = wf_get_first_last_tabcol(this)   
	If li_lastcol>0 Then
	// objects on datawindow
	ls_list = idw_wcr_display_1.object.datawindow.objects + '~t'
	DO WHILE ls_list <> ''
		ll_pos = POS(ls_list, '~t')
		IF ll_pos > 0 THEN
			ls_piece = MID(ls_list, 1, ll_pos - 1)
			ls_list = TRIM(MID(ls_list, ll_pos + 1))
			If TRIM(ls_piece) <> '' Then
				ls_setting = idw_wcr_display_1.Describe(ls_piece + '.Type')
				IF UPPER(ls_setting) = 'COLUMN' THEN // only look at columns
					ls_setting = idw_wcr_display_1.Describe(ls_piece + '.Visible')
					//check for visible only	
					If ls_setting = "1"	Then			
						ls_setting = idw_wcr_display_1.Describe(ls_piece + '.X')
						ll_x = long(ls_setting)
						ls_setting = idw_wcr_display_1.Describe(ls_piece + '.Y')
						ll_y = long(ls_setting)
						ls_setting = idw_wcr_display_1.Describe(ls_piece + '.TabSequence')
						ll_tab = long(ls_setting) //check tab sequence
						if ll_tab > 0 AND ((ll_y = ll_curr_y AND ll_x > ll_curr_x) OR (ll_y > ll_curr_y)) then
							ll_curr_x = ll_x
							ll_curr_y = ll_y
							ls_last_column = ls_piece
						end if
					  End If
				    END IF
				End If
			END IF
	LOOP
	choose case This.DataObject
	case 'd_profile_composition_form_dragon'
		IF TRIM(is_first_column) <> '' THEN
			If this.rowcount()=this.getrow() Then
				li_lastcol =wf_get_first_last_tabcol(idw_wcr_display_1)  
				idw_wcr_display_1.POST setfocus()
				idw_wcr_display_1.POST setcolumn(is_first_column)
			End If
		END IF
	case 'd_profile_const_form_dragon'
			IF this.RowCount()=this.GetRow() THEN
				wf_get_first_last_tabcol(idw_wcr_display_1) 
				idw_wcr_display_1.POST setcolumn(is_first_column)
				idw_wcr_display_1.POST setfocus()
			END IF
	case else
		IF TRIM(ls_last_column) <> '' THEN
			idw_wcr_display_1.POST setfocus()
			idw_wcr_display_1.POST setcolumn(ls_last_column)
		END IF
	end choose
	End If
END IF


end event

type dw_wcr_display_1 from anc_dw within tabpage_wcr
event ue_tabout pbm_dwntabout
event ue_backtabout pbm_dwnbacktabout
event ue_getfocus ( )
integer x = 809
integer y = 8
integer width = 3799
integer height = 1980
integer taborder = 90
string dataobject = "d_profile_generator_form_dragon"
end type

event ue_tabout;long	ll_row, ll_row_cnt, ll_cur_row


ll_cur_row=idw_wcr_display_3.GetRow()
ll_row_cnt=idw_wcr_display_3.RowCount()

// rb 06/14/2012 - Autoscroll WCR sections if tabbing out
if not idw_wcr_display_2.visible then
	IF ll_cur_row<>ll_row_cnt THEN //DevOps 13955 - Add New Profile (Profile Tab) - All 
	ll_row = dw_profile_wcr_sections.GetRow ()
	if ll_row < 1 or ll_row = dw_profile_wcr_sections.RowCount() then return 0

	ll_row++
	dw_profile_wcr_sections.Post SetRow (ll_row)
	dw_profile_wcr_sections.Post ScrollToRow (ll_row)
	END IF
end if

end event

event ue_backtabout;long	ll_row

// rb 06/14/2012 - Autoscroll WCR sections if tabbing out
ll_row = dw_profile_wcr_sections.GetRow ()
if ll_row <= 1 then return 0

ll_row -= 1
dw_profile_wcr_sections.Post SetRow (ll_row)
dw_profile_wcr_sections.Post ScrollToRow (ll_row)

end event

event ue_getfocus();////DevOps #14709 info_gde 03/19/2020; Add New Profile - Section A. (Add New Generator)
//
//String ls_null
//Any la_string, la_string2
//
//SetNull(ls_null)
//
////DevOps #14709 info_gde 03/19/2020 - start
//If idw_wcr_display_1.dataobject="d_profile_generator_form_dragon" then
//If isValid(idw_header) Then
//	la_string=LEFT ( idw_header.Object.gen_mail_addr1[1], 1 )
//	la_string2=LEFT ( idw_header.Object.gen_mail_addr2[1], 1 )
//	If  isNull(la_string) OR isNull(la_string2) Then  RETURN
//		
//		If IsNumber(la_string) AND Match(idw_header.Object.gen_mail_addr1[1],"[A-Za-z]")  then 
//		           idw_header.Object.gen_mail_addr2[1] = ls_null	
//			elseif Len(trim(la_string))=0 then
//				  idw_header.Object.gen_mail_addr1[1] = ls_null	
//			elseif Not isNumber(la_string) then
//				  idw_header.Object.gen_mail_addr1[1] = ls_null	
//			else
//			      idw_header.Object.gen_mail_addr2[1] =  idw_header.Object.gen_mail_addr1[1] +' '+ idw_header.Object.gen_mail_addr2[1] 
//		          idw_header.Object.gen_mail_addr1[1] = ls_null	
//		    end if
//		end if
//	End If
//	//DevOps #14709 info_gde 03/19/2020 - end
end event

event buttonclicked;call super::buttonclicked;// DevOps #13045; info_GDE 02/05/20 Add New Profile - Section E.; Constraint on state_waste_codes field to accept ONLY TX state waste codes

Int				li_idx, li_ans, li_line_id = 0
Long				ll_rowcount, ll_row, ll_row_header, ll_default_seq_id, ll_profile_id, ll_row_insert
String			ls_data, ls_temp, ls_null, ls_signing_name, ls_signing_title, ls_signing_comoany
string 			ls_code, ls_name, ls_find
long 				ll_row_disposal
str_pick			lstr
dwobject			ldwo
dwitemstatus	ldwItemStatus
str_wcr_waste_code_list_params	lstr_waste_code_params
str_waste_code	lstr_waste_code

Long ll_customer_id
Integer li_gen
Long ll_generator_id

			
IF (Upper(is_access) = "V") OR (Upper(is_access) = "P") OR (Upper(is_access) = "B") THEN RETURN

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
	//ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	//	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	//	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	//	RETURN
ELSE
	ll_profile_id = idw_header.object.profile_id[ll_row_header]
END IF

// JAG 02102019

IF  ( &
		 (this.dataObject = 'd_profile_waste_import_supplement') or &
		 (this.dataObject = 'd_profile_thermal_supplement_form') or &
		 (this.dataObject = 'd_profile_benzene_waste_ops_supplement') &
	)  and (row > 0) then
	
	IF (dwo.Name = 'b_generator') or (dwo.Name = 'b_generator1') then
		
			lstr.s_window_title			= "Generator Select"
			lstr.i_window_width			= 0
			lstr.b_multipick				= FALSE
			
			lstr.s_retrieve_by[1]		= "generator_name"

			lstr.s_retrieve_by[2]		= "generator_address_1"
			lstr.s_retrieve_by[3]		= "generator_state"
			lstr.s_retrieve_by[4]		= "generator_zip_code"
			lstr.s_retrieve_by[5]		= "generator_country"
			
			lstr.s_button_text[1]		= "Alphabetize by Name"
			lstr.s_button_text[2]		= "Alphabetize by ID"
			
			lstr.i_return_column_count	= 19
			lstr.to_transaction			= gtr_share
			
			li_idx = 0

			IF NOT IsNull(ll_customer_id) AND ll_customer_id > 0 THEN
				li_idx++
				lstr.s_tab_title[li_idx]		= "Cust " + String(ll_customer_id) + " Generators"
				lstr.i_tabpage_type[li_idx]	= 1
	
				lstr.s_dataobject[li_idx]		= "d_quick_select_generator_with_address_extra"
				lstr.s_where[li_idx]				= "Generator.status = 'A' AND Generator.generator_id IN (SELECT generator_id FROM CustomerGenerator WHERE customer_id = " + string(ll_customer_id) + ")"
				lstr.s_new_reference[li_idx]	= "generator"
			END IF
			FOR li_gen = 1 TO 26
				li_idx++
				lstr.s_tab_title[li_idx]		= Char(li_gen + 64)
	
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]		= "d_quick_select_generator_with_address_extra"
				lstr.s_where[li_idx]				= "generator.status = 'A'"
				lstr.s_new_reference[li_idx]	= "generator"
			NEXT
			
			li_idx++
			lstr.s_tab_title[li_idx]		= "0-19"
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_generator_with_address_extra"
			lstr.s_where[li_idx]				= "generator.status = 'A'"
			lstr.s_new_reference[li_idx]	= "generator"
	
			lstr.i_tab_count				= li_idx
			OpenWithParm(w_popup_quick_select, lstr)
	
			lstr = Message.PowerObjectParm
			IF IsValid(lstr) THEN
					
				IF UpperBound(lstr.return1[]) > 0 THEN
					
					choose case this.dataObject
					case 'd_profile_waste_import_supplement'

						ll_generator_id = lstr.return1[1]
						This.Object.importing_generator_id[row] = ll_generator_id
						
						This.Object.importing_generator_name[row] = String(lstr.return3[1])
						This.Object.importing_generator_address[row] = String(lstr.return10[1])
						This.Object.importing_generator_city[row] = String(lstr.return15[1])

						This.Object.importing_generator_mail_code[row] = String(lstr.return17[1])
						This.Object.country_name[row] = String(lstr.return16[1])
						
					case 'd_profile_thermal_supplement_form' 
						
						ll_generator_id = lstr.return1[1]
						This.Object.generator_id[row] = ll_generator_id
						
						if (dwo.Name = 'b_generator') then
					
							This.Object.generator_name[row] = String(lstr.return3[1])
							This.Object.generator_epa_id[row] = String(lstr.return2[1])
						
						elseif (dwo.Name = 'b_generator1') then
							
							This.Object.profilethermal_originating_generator_name[row] = String(lstr.return3[1])
							This.Object.profilethermal_originating_generator_epa_id[row] = String(lstr.return2[1])
							
						end if
						
					case 'd_profile_benzene_waste_ops_supplement' 
						
						ll_generator_id = lstr.return1[1]
						This.Object.generator_id[row] = ll_generator_id
						
						if (dwo.Name = 'b_generator') then
					
							This.Object.generator_name[row] = String(lstr.return3[1])
							This.Object.generator_epa_id[row] = String(lstr.return2[1])
						
						elseif (dwo.Name = 'b_generator1') then
							
							This.Object.originating_generator_name[row] = String(lstr.return3[1])
							This.Object.originating_generator_epa_id[row] = String(lstr.return2[1])
							
						end if
						
					end choose


				END IF
				
			END IF


		end if

end if

// JAG 02102019

// rb 04/24/2012		
		string ls_buttonname													// jcb test
		ls_buttonname = lower(dwo.Name)								// jcb test

choose case lower(dwo.Name)
			
	case "b_add_volume"
		this.InsertRow (0)
		this.SetRow (this.RowCount())
		this.ScrollToRow (this.RowCount())
// COR2-MPM
//		this.height += 80
//		dw_wcr_display_2.height -= 80
//		dw_wcr_display_2.y += 80

	case "b_del_volume"
		this.DeleteRow (row)
//		this.height -= 80
// COR2-MPM
//		dw_wcr_display_2.y -= 80
//		dw_wcr_display_2.height += 80

	// rb 07/12/2012 Allow assignment of waste codes on Haz and Non Haz tabs
	// COR2-MPM
	/*
	case "b_assign_waste_codes"
		ldwo = idw_waste.Object.b_assign
		idw_waste.Event buttonclicked (row, actionreturncode, ldwo)
		choose case this.dataobject
			case "d_profile_hazardous_wastes_form"
				wf_wcr_set_waste_code_answers ()
				Post wf_set_wcr_sect_display (6)
			case "d_profile_non_hazardous_wastes_form"
				wf_wcr_set_waste_code_answers ()
				Post wf_set_wcr_sect_display (8)
		end choose
		
	case "b_rcra_listed_codes"
		// just try quick select
		is_listed_characteristic = 'listed'
		ldwo = idw_waste_code_fed.Object.b_assign
		idw_waste_code_fed.Event buttonclicked (row, actionreturncode, ldwo)
		is_listed_characteristic = ''
		Post wf_set_wcr_sect_display (6)
		
	case "b_rcra_characteristic_codes"
		is_listed_characteristic = 'characteristic'
		ldwo = idw_waste_code_fed.Object.b_assign
		idw_waste_code_fed.Event buttonclicked (row, actionreturncode, ldwo)
		is_listed_characteristic = ''
		Post wf_set_wcr_sect_display (6)
		
	case "b_state_haz_codes"
		ldwo = idw_waste_code_state.Object.b_add_state_wc
		idw_waste_code_state.Event buttonclicked (row, actionreturncode, ldwo)
		Post wf_set_wcr_sect_display (6)
		
	case "b_state_non_haz_codes"
		ldwo = idw_waste_code_state.Object.b_add_state_wc
		idw_waste_code_state.Event buttonclicked (row, actionreturncode, ldwo)
		Post wf_set_wcr_sect_display (8)
	*/
	// COR2-MPM
	case "b_pa_state_waste_codes"
		is_waste_code_state = 'PA'
		ldwo = idw_waste_code_state.Object.b_add_state_wc
		idw_waste_code_state.Event buttonclicked (row, actionreturncode, ldwo)
		is_waste_code_state = ''
		wf_wcr_set_waste_code_answers ()
		Post wf_set_wcr_sect_display (6)
	
	case "b_state_waste_codes"
//		// DevOps #13045  --  Start
//    20200211 jcb #13045 DLET new code
//		If this.dataobject = 'd_profile_characterization_form_dragon' Then
//			is_waste_code_state = 'TX'
//			ldwo = idw_waste_code_state.Object.b_add_state_wc
//		    idw_waste_code_state.Event buttonclicked (row, actionreturncode, ldwo)
//		    wf_wcr_set_waste_code_answers ()
//		    Post wf_set_wcr_sect_display (6)
//		Else
//		    is_waste_code_state = 'not PA'
//			 
//			ldwo = idw_waste_code_state.Object.b_add_state_wc
//		    idw_waste_code_state.Event buttonclicked (row, actionreturncode, ldwo)
//		    is_waste_code_state = ''
//		    wf_wcr_set_waste_code_answers ()
//		    Post wf_set_wcr_sect_display (6)
//		End if
//	 DevOps #13045  --  End case "b_rcra_waste_codes"  end of GDEs DLETs for not PA code  <-- 20200211 JCB this too is incorrect, it disabled this button
//   end of GDEs DLETs for not PA code
//		jcb 20200211 #13045 reinstate old 'not PA' code
			is_waste_code_state = 'not PA'
			ldwo = idw_waste_code_state.Object.b_add_state_wc
			idw_waste_code_state.Event buttonclicked (row, actionreturncode, ldwo)
			is_waste_code_state = ''
			wf_wcr_set_waste_code_answers ()
			Post wf_set_wcr_sect_display (6)

// jcb 20200211 #13045 fix: reinstated the orig case for b_rcra_waste_codes
     case "b_rcra_waste_codes"  
		is_listed_characteristic = 'both'
		ldwo = idw_waste_code_fed.Object.b_assign
		idw_waste_code_fed.Event buttonclicked (row, actionreturncode, ldwo)
		is_listed_characteristic = ''
		wf_wcr_set_waste_code_answers ()
		Post wf_set_wcr_sect_display (6)
		
	case  "b_tx_waste_code"  
		is_waste_code_state = 'TX'
		ldwo = idw_waste_code_state.Object.b_add_state_wc
		idw_waste_code_state.Event buttonclicked (row, actionreturncode, ldwo)
		is_waste_code_state = ''
		wf_wcr_set_waste_code_answers ()
		Post wf_set_wcr_sect_display (6)
			
	case "b_clear_tab"		
		ldwo = idw_technical.Object.b_clear_tab
		idw_technical.Event buttonclicked (row, actionreturncode, ldwo)
		// COR2 - JAG
		Post wf_set_wcr_sect_display (16)
		
	case "b_gen_contact"
		ls_signing_name 	= idw_profile_gen_contact_form.object.contact_name[1]
		ls_signing_title 		= idw_profile_gen_contact_form.object.contact_title[1]
		this.object.signing_name[row] 		= ls_signing_name
		this.object.signing_title[row] 		= ls_signing_title
		this.object.signing_company[row] = ls_null
		wf_wcr_profile_map_sync (this, "signing_name", row, ls_signing_name)
		wf_wcr_profile_map_sync (this, "signing_title", row, ls_signing_title)
		wf_wcr_profile_map_sync (this, "signing_company", row, ls_null)

		
		
//	case "b_tech_contact"
//		ls_signing_name 	= idw_wcr_display_4.object.contact_name[1]
//		this.object.signing_name[row] 		= ls_signing_name 
//		this.object.signing_title[row] 		= ls_null
//		this.object.signing_company[row] = ls_null
//		wf_wcr_profile_map_sync (this, "signing_name", row, ls_signing_name)
//		wf_wcr_profile_map_sync (this, "signing_title", row, ls_null)
//		wf_wcr_profile_map_sync (this, "signing_company", row, ls_null)
		
//COR JXM 03/15/2019 Add button
	case "b_add_comp"
		// MPM - 4/19/2020 - DevOps 15205
		ll_row_insert = this.InsertRow (0)
		this.SetRow (ll_row_insert)
		this.ScrollToRow (ll_row_insert)
		if this.DataObject="d_profile_radioactive_supplement_page_2" then 

			long ll_row2, ll_profile
			
			// Determine what the new line's line_id should be.  We can't just use RowCount(), because
			// it's possible that a row had been added and then deleted, so RowCount() might end up
			// being a duplicate line_id.  So, find the max line_id, then add one to it.
			FOR ll_row = 1 TO This.RowCount()
				IF This.Object.line_id[ll_row] > li_line_id THEN li_line_id = This.Object.line_id[ll_row]
			NEXT
			ll_row2 = this.SetItem(ll_row_insert, 'line_id', li_line_id + 1)
			This.SetItemStatus(ll_row_insert, 0, Primary!, DataModified!) 
			This.SetItemStatus(ll_row_insert, 0, Primary!, NotModified!) 
			
			//COR2 JXM 9870 RAD Validation
			long ll_rad2_row
			integer i
			string ls_attached_inventory
			ll_rad2_row = this.rowcount()
			ls_attached_inventory = this.Object.additional_inventory_flag[1]
			for i = 1 to ll_rad2_row
				if i >= 2 then this.Object.additional_inventory_flag[i] = ls_attached_inventory
			next

		end if
      		
	//COR JXM 03/15/2019 Del button
	// MPM - 4/19/2020 - DevOps 15205	
	case "b_del_comp"
		if this.DataObject="d_profile_radioactive_supplement_page_2" then 
			li_ans = MessageBox("Delete Line","Delete this line?",Question!,OKCancel!,2)
		ELSE
			li_ans = MessageBox("Delete Waste Composition Line","Delete this waste composition line?",Question!,OKCancel!,2)
		END IF
		if li_ans = 1 then this.DeleteRow (row) 

	//COR2 JXM 04/04/2019 Add Disposal Site fillpopup window	
	case "b_add_disposal_site"
		lstr.s_window_title			= "Requested Disposal Site Select"
		lstr.i_window_width			= 0
		lstr.b_multipick				= TRUE
		lstr.i_tab_count				= 1
		lstr.i_return_column_count= 1
		lstr.to_transaction			= itr_share
			
		lstr.s_tab_title[1]			= 'Disposal'
		lstr.i_tabpage_type[1]	= 1
		lstr.s_dataobject[1] 		= "d_profile_tsdf_disposal_site_dragon"
		lstr.s_where[1]			= ""
		lstr.s_retrieve_by[1]		= ""
		lstr.s_new_reference[1]	= ""
			
		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr)
			
		// Get the return values
		lstr = Message.PowerObjectParm
		
		IF IsValid(lstr) THEN
			SetPointer(HourGlass!)
				
			FOR li_idx = 1 TO lstr.i_return_record_count
				
				// Get return values
				ls_code = lstr.return1[li_idx]
						
				// Add only new Disposal Sites
				ls_find = "disposal_site_tsdf_code= '" + String(ls_code) + "'"
				ll_row_disposal = This.Find(ls_find, 1, This.RowCount()+1)
				
				IF ll_row_disposal > 0 THEN
					CONTINUE
				ELSE
					//ll_row_disposal = This.InsertRow(0) NOT SURE IF NEEDED!!!!
					This.Object.profile_id[row] = wf_get_profile_id() //ll_profile_id
					
					//This.Object.disposal_site_tsdf_code[ll_row_disposal] = ls_code
					This.Object.disposal_site_tsdf_code[row] = ls_code
					This.Object.added_by[row] =  gs_user_id
					This.Object.date_added[row] =  DateTime(Today(), Now())
					This.Object.modified_by[row] = gs_user_id
					This.Object.date_modified[row] =  DateTime(Today(), Now())
				END IF
				
			NEXT
		END IF
		
end choose

end event

event itemchanged;call super::itemchanged;//DevOps #13673 info_gde 02/04/20; Add New Profile (Profile Tab) - Section F. (PCB Supplement); modification on Q5 message and Return value
//DevOps #15003 info_gde 04/04/2020; EQAI (Radioactive Supplement) Page 3 Issues
//DevOps #14940 info_gde 04/09/2020; EQAI- PO from Profile tab not on price tab
//DevOps #15241 info_gde 05/01/2020; Add New Profile (Profile Tab) - Section C. (list box not showing container)

boolean	lb_adjoining_ph = TRUE, lb_adjoining_pcb = TRUE, lb_adjoining_ignitability = TRUE, lb_right = false, lb_flag
integer	li_rc, li_ans, li_pos,i
long		ll_i, ll_find_row, ll_null, ll_idx, ll_rowcount, ll_row,ll_len_consistency,ll_rad2_row, ll_selectedNumConv = 0, ll_rc, ll_return
long      ll_hdr_row, ll_template_form_id, ll_source_form_id, ll_profile_id
string	   ls_ph1, ls_ph2, ls_ph3, ls_ph4, ls_ph5, ls_temp, ls_data, ls_find, ls_col_type,ls_attached_inventory
string    ls_pcb_conc_none, ls_pcb_conc_0_49, ls_pcb_conc_50_499, ls_pcb_conc_500
string    ls_ignitability_lt_90, ls_ignitability_90_139, ls_ignitability_140_199, ls_ignitability_gte_200, ls_ignitability_na
string    ls_null, ls_lock_name, ls_lock_file, ls_err,ls_checkBoxSelected, ls_all_F
string    ls_rcra_listed, ls_rcra_characteristic, ls_state_haz, ls_consistency, ls_pcb_con_0_9, ls_pcb_con_10_49, ls_pcb_con_50_499, ls_pcb_con_500
string    ls_consistency_solid, ls_consistency_dust, ls_consistency_debris, ls_consistency_sludge, ls_consistency_liquid
string	   ls_consistency_gas_aerosol, ls_waste_managed_id, ls_rb_1, ls_rb_2, ls_requires_treatment_flag,ls_pa_waste_code, ls_generator_epa_id, ls_generator_name
double   ld_max_cons, ld_min_cons, ldbl_null
decimal	ld_null, ldc_null
dwItemStatus	ldwItemStatus
string	ls_waste_water_flag, ls_meets_alt_soil_treatment_stds, ls_more_than_50_pct_debris, ls_debris_separated, ls_debris_not_mixed_or_diluted
string	     ls_exceed_ldr_standards, ls_g3_none_of_the_above, ls_hazmat, ls_dot_shipping_name, ls_flag, ls_rec
Decimal{2} ldc_rec
dwobject	ldwo
Datawindowchild ldwc

SetNull(ldc_null)                     				// 20200331 jcb #14993 add
SetNull(ls_null)
SetNull(ll_null)
SetNull(ld_null)
SetNull(ldbl_null)

ll_hdr_row = idw_header.getrow()
IF ll_hdr_row > 0 THEN
	ll_template_form_id 	= idw_header.object.template_form_id[ll_hdr_row]
	ll_source_form_id		= idw_header.object.source_form_id[ll_hdr_row]
	// COR2-MPM
	ll_profile_id		= idw_header.object.profile_id[ll_hdr_row]
END IF

//IF ib_new_record = TRUE THEN 
//	ll_hdr_row = il_newrow
//END IF
// JAG 5518
if (this.dataobject = 'd_profile_waste_import_supplement' ) then
	choose case dwo.Name
	case  'same_as_foreign_generator'
		wf_profile_waste_import_supplement (data,row,this)
	end choose
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0
end if

//DevOps #14940 info_gde 04/09/2020 - start
if (this.dataobject = 'd_profile_generator_form_dragon') then
	choose case dwo.Name
	case  'purchase_order_from_form'
		idw_wcr_display_1.Object.purchase_order_from_form[idw_wcr_display_1.getrow()] = string(data)
		idw_header.Object.purchase_order_from_form[idw_header.getrow()] = string(data)
		  is_po=string(data)
	case 'wcr_sign_date'
		
	end choose
	 
	// MPM - 5/1/2020 - DevOps 15360
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	 
	// MPM - 6/2/2020 - DevOps 16122 - Commented out the return statement below - don't know why it's here
	//return 0
end if
//DevOps #14940 info_gde 04/09/2020 - end

//COMMET out JORGE code JXM 03/01/2019
//// JAG 5513
//if (this.dataobject = 'd_profile_benzene_waste_ops_supplement') then
//	
//	choose case dwo.Name
//			
//	case  'same_as_above'
//		
//		this.SetItem(row, 'originating_generator_name', this.getitemstring(row, 'generator_name', primary!,  false ) )
//		this.SetItem(row, 'originating_generator_epa_id', this.getitemstring(row, 'generator_epa_id', primary!, false) )
//		
//	case 'generator_name'
//		
//		if (this.Getchild('generator_name', ldwc) = 1 )then
//			this.setitem(row, 'generator_epa_id', ldwc.getitemstring(ldwc.getrow(), 'epa_id') )
//		end if
//		
//		this.setitem(row, 'same_as_above', '')
//		
//	end choose
//	
//	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//	
//	return 0
//
//end if

// JAG 5513
//COR2 jxm 03/01/2019 Add Validation to Benzene Waste
if (this.dataobject = 'd_profile_benzene_waste_ops_supplement') then
	choose case dwo.Name
		case  'same_as_above'
			if ( data = 'N' ) then //unchecked
				Messagebox (gs_app_name+": Warning Message","The Originating Generator & EPA ID # must be provided if the Originating Generator differs from the Generator that will be listed on the profile/manifest.  ~r~rIf the Generator information does not differ  please check ~"Same as above~" box.",Information!)
				this.Modify('originating_generator_name.Protect=0')
				this.Modify('originating_generator_epa_id.Protect=0')
				this.SetItem(row,'originating_generator_name','')
				this.SetItem(row,'originating_generator_epa_id','')
				this.SetColumn('originating_generator_name')
				Return 0
			end if
			if ( data = 'Y' ) then //checked
				this.SetItem(row, 'originating_generator_name',idw_header.Object.generator_name[ll_hdr_row] )
				this.SetItem(row, 'originating_generator_epa_id',idw_header.Object.generator_epa_id[ll_hdr_row] )
				this.Modify('originating_generator_name.Protect=1')
				this.Modify('originating_generator_epa_id.Protect=1')
				Return 0
			end if
						//COR2 JXM comment out JORGE code
						//if (this.Getchild('generator_name', ldwc) = 1 )then
						//	this.setitem(row, 'generator_epa_id', ldwc.getitemstring(ldwc.getrow(), 'epa_id') )
						//end if
						//			
						//this.setitem(row, 'same_as_above', '')
			//DevOps:15313
		case  'none_of_the_three'
			if ( data = 'T' ) then //checked
				this.SetItem(row, 'classified_as_process_wastewater_stream','F' )
				this.SetItem(row, 'classified_as_landfill_leachate','F' )
				this.SetItem(row, 'classified_as_product_tank_drawdown','F' )
			     Return 0
			end if		
		case 'waste_common_name'
			if ( ( IsNull(trim(data)) or Len(data) > 0 ) and (trim(data) <> trim(idw_header.Object.approval_desc[ll_hdr_row]) ) ) then
				messagebox(gs_app_name+": Warning Message","This field is display only and populated from Section B.1 of the Waste/Material Profile.  ~r~rIf there is a discrepancy with the information please adjust it at the Waste/Material Profile.",Information!)
				//this.Object.waste_common_name[row] = idw_header.Object.approval_desc[ll_hdr_row]
				this.SetItem(row,'waste_common_name','')
				this.SetItem(row, 'waste_common_name',idw_header.Object.approval_desc[ll_hdr_row])
				this.Modify('waste_common_name.Protect=1')
				Return 2
			end if
		case 'gen_process_brief_desc' //gen_process_brief_desc
			if (( IsNull(trim(data)) or Len(data) > 0 ) and (data <> idw_header.Object.gen_process[ll_hdr_row]) ) then
				messagebox(gs_app_name+": Warning Message","Th-is field is display only and populated from Section B.2 of the Waste/Material Profile.  ~r~rIf there is a discrepancy with the information please adjust it at the Waste/Material Profile. ",Information!)
				//this.Object.gen_process_brief_desc[row] = idw_header.Object.gen_process[ll_hdr_row]
				this.SetItem(row,'gen_process_brief_desc','')
				this.SetItem(row, 'gen_process_brief_desc',idw_header.Object.gen_process[ll_hdr_row])
				this.Modify('gen_process_brief_desc.Protect=1')
				Return 2
			end if	
		case 'type_of_facility'
			choose case data
				case 'C', 'K', 'P','U'
					//One seclected continue
				case else 
					//Not selected, or Never Selected
					messagebox(gs_app_name+": Warning Message","Required Field, please make a selection.",Information!)
				Return 1
			end choose
		case 'group_radiobuttons' //for following columns tab_lt_1_megagram', 'tab_gte_1_and_lt_10_megagram', 'tab_gte_10_megagram'
			choose case data
				case '1'
					this.SetItem(row,'tab_lt_1_megagram','T')
					this.SetItem(row,'tab_gte_1_and_lt_10_megagram','F')
					this.SetItem(row,'tab_gte_10_megagram','F')
				case '2'
					this.SetItem(row,'tab_lt_1_megagram','F')
					this.SetItem(row,'tab_gte_1_and_lt_10_megagram','T')
					this.SetItem(row,'tab_gte_10_megagram','F')
				case '3'
					this.SetItem(row,'tab_lt_1_megagram','F')
					this.SetItem(row,'tab_gte_1_and_lt_10_megagram','F')
					this.SetItem(row,'tab_gte_10_megagram','T')
				case else //Not selected
					messagebox(gs_app_name+": Warning Message","Required Field, please make a selection.",Information!)
					Return 1
			end choose
//I THINK THIS CASE ABOVE AND CASE BELOW SHOULD BE COMBINDED IN SAVE PROCESS - JXM 3.4.2019			
		case 'usecology_transfer_40cfr', 'flow_weighted_annual_average_benzene', 'weighted_average_water_content', 'is_process_unit_turnaround'
			if ((dwo.Name = 'usecology_transfer_40cfr' or dwo.Name = 'flow_weighted_annual_average_benzene' &
			     or dwo.Name = 'weighted_average_water_content' or dwo.Name = 'is_process_unit_turnaround')  &
					and IsNull(trim(data))) then
						messagebox(gs_app_name+": Warning Message","Required Field, please make a selection.",Information!)
						Return 1
			end if
			If dwo.Name = 'usecology_transfer_40cfr' and data = 'T' then //and offsite treatment
				if( IsNull(this.GetItemNumber(row,'benzene_range_from')) or IsNull(this.GetItemNumber(row,'benzene_range_to')) ) then
					messagebox(gs_app_name+": Warning Message","You have indicated that the waste/material is being transferred to US Ecology for offsite treatment compliance with 40 CFR part 61.342(f).  ~r~rAs such the additional information of this field is required." ,Information!)
					if (IsNull(this.GetItemNumber(row,'benzene_range_from')) or (this.GetItemNumber(row,'benzene_range_from') < 1.00) ) then 
						this.SetColumn('benzene_range_from')	
						Return 1
					end if
					if ( IsNull(this.GetItemNumber(row,'benzene_range_to')) or (this.GetItemNumber(row,'benzene_range_to') < 1.00)) then 
						this.SetColumn('benzene_range_to')				
						Return 2
					end if
				end if
			end if //I THINK THIS CASE ABOVE AND CASE BELOW SHOULD BE COMBINDED IN SAVE PROCESS - JXM 3.4.2019
		// MPM - 2/14/2020 - DevOps 14242 - Corrected the column name (changed 'waste_material_classified_as' to 'profilelab_benzene_onsite_mgmt') in the CASE statement below:
		case 'classified_as_process_wastewater_stream','classified_as_landfill_leachate', 'classified_as_product_tank_drawdown','profilelab_benzene_onsite_mgmt'
			if (dwo.Name = 'profilelab_benzene_onsite_mgmt' and data = 'T') then
				this.SetItem(row,'classified_as_process_wastewater_stream','F')
				this.SetItem(row,'classified_as_landfill_leachate','F')
				this.SetItem(row,'classified_as_product_tank_drawdown','F')
			end if
			if ( (data = 'T' ) and (dwo.Name = 'classified_as_process_wastewater_stream' &
			                              or dwo.Name='classified_as_landfill_leachate' & 
										  or dwo.Name='classified_as_product_tank_drawdown') ) then
				this.SetItem(row,'benzene_onsite_mgmt','F')
				this.SetItem(row,'none_of_the_three','F') 
			end if
//I THINK THIS CASE ABOVE AND CASE BELOW SHOULD BE COMBINDED IN SAVE PROCESS - JXM 3.4.2019			
		case else //No column changed
		end choose
  	
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0

end if

// JAG 5516
if (this.dataobject = 'd_profile_thermal_supplement_form') then
	
	choose case dwo.Name
			
	case  'same_as_above'
		wf_item_changed_profile_thermal(data,row,this)
			
	case 'generator_name'
		if (this.Getchild('generator_name', ldwc) = 1 )then
			this.setitem(row, 'generator_epa_id', ldwc.getitemstring(ldwc.getrow(), 'epa_id') )
		end if
		this.setitem(row, 'same_as_above', '')
	end choose
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0
end if

// Dipankar - 8/31/2023 - Added for #69393
IF (THIS.dataobject = 'd_profile_fuels_blending_supplement') THEN	
	ll_return = wf_item_changed_fuels_blending (row, dwo.name, data, THIS) // Dipankar - 10/26/2023 - Added for #73666
	wf_wcr_profile_map_sync (THIS, dwo.Name, row, data)
	RETURN ll_return
END IF

// COR2 JXM 9870 05/07/2019
if (this.dataobject = 'd_profile_radioactive_supplement_page_2') then 
	ll_rad2_row = this.RowCount()

//	choose case dwo.Name
//		case  'additional_inventory_flag'
//				if (data = 'T') then
//					this.Object.line_id[row]=0
//					this.Object.item_name[row]=''
//					this.Object.total_number_in_shipment[row]=0
//					this.Object.radionuclide_contained[row]=''
//					this.Object.activity[row]=0
//					this.Object.disposal_site_tsdf_code[row]=''
//					this.Object.cited_regulatory_exemption[row]=''
//				end if
//	end choose
      // 20200328 if additional_inventory_flag changed, apply to all rows)
	IF dwo.Name = 'additional_inventory_flag' then
  		ls_attached_inventory = data //trim(this.Object.additional_inventory_flag[1])
	 	for i = 1 to ll_rad2_row
			if i >= 2 then this.Object.additional_inventory_flag[i]= ls_attached_inventory
	 	next
	END IF
	// 20200328 jcb #14871 add
	if (this.dataobject = 'd_profile_radioactive_supplement_page_2') then
		choose case dwo.Name
			case  'additional_inventory_flag'
				li_rc =  0                       // accept the data  
			case else
		end choose			
	end if
	
//DevOps 17790 info_gde 02/24/2021; EQAI - RAD Supplement (2) Format Updates
	if (this.dataobject = 'd_profile_radioactive_supplement_page_2') then
		choose case dwo.Name
			case  'activity'
				 If pos(data,'.')>0 AND len(data) < 10 AND isNumber(RIGHT (data , pos(data,'.') - 3 )) Then
					ldc_rec= truncate(dec(data),2)
					ls_rec = string(ldc_rec)
	 				this.object.activity[row]=ls_rec
					 RETURN 2
				elseif  len(data)=10 AND pos(data,'.')=10 then
					ls_rec = Left(data,9)
					this.object.activity[row]=ls_rec
					 RETURN 2
				elseif  len(data)=10 AND pos(data,'.')<>10 AND pos(data,'.')<>8 AND NOT isNumber(RIGHT (data , 1))  then
					ldc_rec= truncate(dec(data),2)
					ls_rec = string(ldc_rec)
	 				this.object.activity[row]=ls_rec
					 RETURN 2
				else
					//ldc_rec= truncate(dec(data),2)
					//this.object.activity[row]=string(ldc_rec)
					RETURN 0
				End If
			case else
		end choose			
	end if	
                           
	// 20200321 jcb #14993/995/996 further manipultion here ciz maximum_script_exceeded
	if (this.dataobject = 'd_profile_radioactive_supplement_page_1') then	
		 li_rc = wf_set_rad_supplements_2 (dwo.Name, row, data )
	end if
	
	return 0	
end if

// COR2 - AGC 
//Task 9649 AGC 04/05/2019
if (this.dataobject = 'd_profile_ldr_form_dragon' ) then
	choose case dwo.Name
		case 'epa_waste_codes'
			RETURN 2
			
		//Task 9816 JXM 04/10/2019	
		case 'waste_water_flag'
			if ( data = 'W' ) then idw_profile_ldr_form_dragon.SetItem(idw_profile_ldr_form_dragon.GetRow(),'waste_rb',data)
			if ( data = 'N' ) then idw_profile_ldr_form_dragon.SetItem(idw_profile_ldr_form_dragon.GetRow(),'waste_rb',data)
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		case 'more_than_50_pct_debris'
			if ( data = 'T' ) then idw_profile_ldr_form_dragon.SetItem(idw_profile_ldr_form_dragon.GetRow(),'more_than_50_pct_debris',data)// waste_rb to more_than_50_pct_debris 
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		case 	'ldr_notification_frequency' 
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			is_ldr_value=data//DevOps 23447 info_gde 07/20/2021; Profile Tracking - LDR Supplemental Form Q6 Bug
			idw_profile_ldr_form_dragon.object.ldr_notification_frequency[row] = is_ldr_value
			
			//DevOps:18652 AM - No need this validation anymore since we added clear option.
			//if Not (data = 'T' or data = 'F') then messagebox("Error Message:","A selection of either ~"One Time~" or ~"Required with Each Shipment~" is required.")
		//Task 9816 JXM 04/10/2019	
		case 'rb_1'
			ls_rb_1 = data
			ls_rb_2 = this.getitemstring(row,'rb_2')
			choose case ls_rb_1
				case 'T'
					choose case ls_rb_2
						case 'T'
							ls_waste_managed_id = '10'
						case 'F'
							ls_waste_managed_id = '12'
						case else
							ls_waste_managed_id = '1'
					end choose
				case 'F'
					choose case ls_rb_2
						case 'T'
							ls_waste_managed_id = '14'
						case 'F'
							ls_waste_managed_id = '16'
						case else
							ls_waste_managed_id = '1'
					end choose
				case else
					ls_waste_managed_id = '1'
			end choose
				
			this.setitem(row,'profile_waste_managed_id_1',1)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',0)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, ls_waste_managed_id)
		case 'rb_2'
			ls_rb_1 = this.getitemstring(row,'rb_1')
			ls_rb_2 = data
			choose case ls_rb_1
				case 'T'
					choose case ls_rb_2
						case 'T'
							ls_waste_managed_id = '10'
						case 'F'
							ls_waste_managed_id = '12'
						case else
							ls_waste_managed_id = '1'
					end choose
				case 'F'
					choose case ls_rb_2
						case 'T'
							ls_waste_managed_id = '14'
						case 'F'
							ls_waste_managed_id = '16'
						case else
							ls_waste_managed_id = '1'
					end choose
				case else
					ls_waste_managed_id = '1'
			end choose
				
			this.setitem(row,'profile_waste_managed_id_1',1)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',0)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, ls_waste_managed_id)
	case 'rb_3'
			is_rb_3 = data
			is_rb_4 = this.getitemstring(row,'rb_4')
			choose case is_rb_3
				case 'T'
					choose case is_rb_4
						case 'T'
							ls_waste_managed_id = '11' 
						case 'F'
							ls_waste_managed_id = '13'
						case else
							ls_waste_managed_id = '17'
					end choose
				case 'F'
					choose case is_rb_4
						case 'T'
							ls_waste_managed_id = '15'
						case 'F'
							ls_waste_managed_id = '17'
						case else
							ls_waste_managed_id = '17'
					end choose
				case else
					ls_waste_managed_id = '17'
			end choose
				
			this.setitem(row,'profile_waste_managed_id_1',0)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',4)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3',is_rb_3)
			this.setitem(row,'rb_4',is_rb_4)
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, ls_waste_managed_id)
		case 'rb_4'
			is_rb_3 = this.getitemstring(row,'rb_3')
			is_rb_4 = data
			choose case is_rb_3
				case 'T'
					choose case is_rb_4
						case 'T'
							ls_waste_managed_id = '11' 
						case 'F'
							ls_waste_managed_id = '13'
						case else
							ls_waste_managed_id = '17'
					end choose
				case 'F'
					choose case is_rb_4
						case 'T'
							ls_waste_managed_id = '15'
						case 'F'
							ls_waste_managed_id = '17'
						case else
							ls_waste_managed_id = '17'
					end choose
				case else
					ls_waste_managed_id = '17'
			end choose
				
			this.setitem(row,'profile_waste_managed_id_1',0)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',4)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3',is_rb_3)
			this.setitem(row,'rb_4',is_rb_3)
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, ls_waste_managed_id)
		case 'profile_waste_managed_id_1'
			if data = '1' then
				ls_rb_1 = this.getitemstring(row,'rb_1')
				ls_rb_2 = this.getitemstring(row,'rb_2')
				choose case ls_rb_1
					case 'T'
						choose case ls_rb_2
							case 'T'
								ls_waste_managed_id = '10'
							case 'F'
								ls_waste_managed_id = '12'
							case else
								ls_waste_managed_id = data
						end choose
					case 'F'
						choose case ls_rb_2
							case 'T'
								ls_waste_managed_id = '14'
							case 'F'
								ls_waste_managed_id = '16'
							case else
								ls_waste_managed_id = data
						end choose
					case else
						ls_waste_managed_id = data
				end choose
			else
				setnull(ls_waste_managed_id)
			end if

			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',0)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, ls_waste_managed_id)
		case 'profile_waste_managed_id_2'
			this.setitem(row,'profile_waste_managed_id_1',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',0)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, data)
		case 'profile_waste_managed_id_3'
			this.setitem(row,'profile_waste_managed_id_1',0)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_4',0)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, data)
		case 'profile_waste_managed_id_4'
			if data = '4' then
				is_rb_3 = this.getitemstring(row,'rb_3')
				is_rb_4 = this.getitemstring(row,'rb_4')
				choose case is_rb_3
					case 'T'
						choose case is_rb_4
							case 'T'
								ls_waste_managed_id = '17'
							case 'F'
								ls_waste_managed_id = '13'
							case else
								ls_waste_managed_id = data
						end choose
					case 'F'
						choose case is_rb_4
							case 'T'
								ls_waste_managed_id = '15'
							case 'F'
								ls_waste_managed_id = '17'
							case else
								ls_waste_managed_id = data
						end choose
					case else
						ls_waste_managed_id = data
				end choose
			else
				setnull(ls_waste_managed_id)
			end if
			
			this.setitem(row,'profile_waste_managed_id_1',0)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, ls_waste_managed_id)
		case 'profile_waste_managed_id_5'
			this.setitem(row,'profile_waste_managed_id_1',0)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',0)
			this.setitem(row,'profile_waste_managed_id_6',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, data)
		case 'profile_waste_managed_id_6'
			this.setitem(row,'profile_waste_managed_id_1',0)
			this.setitem(row,'profile_waste_managed_id_2',0)
			this.setitem(row,'profile_waste_managed_id_3',0)
			this.setitem(row,'profile_waste_managed_id_4',0)
			this.setitem(row,'profile_waste_managed_id_5',0)
			this.setitem(row,'rb_1','U')
			this.setitem(row,'rb_2','U')
			this.setitem(row,'rb_3','U')
			this.setitem(row,'rb_4','U')
			
			wf_wcr_profile_map_sync (this, 'waste_managed_id', row, data)
		case 'constituents_requiring_treatment_flag'
			choose case data
				case 'T'
					idw_wcr_display_2.SetRedraw(false)
					idw_wcr_display_2.SetFilter('')
					idw_wcr_display_2.Filter()
					ll_rowcount = idw_wcr_display_2.rowcount()
					for ll_row = 1 to ll_rowcount
						if isnull(idw_wcr_display_2.getitemstring(ll_row,'requiring_treatment_flag')) then
							idw_wcr_display_2.setitem(ll_row,'requiring_treatment_flag','T')
						end if
					next
					idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
					idw_wcr_display_2.Filter()
					idw_wcr_display_2.SetRedraw(true)
				case 'F'
					ll_rowcount = idw_wcr_display_2.rowcount()
					if ll_rowcount > 0 then
						if messagebox('Warning','Changing this value to No will remove the constituents listed below.',Information!,OKCancel!,2) = 2 then
							return 1
						end if
					end if
					setnull(ls_requires_treatment_flag)
					idw_wcr_display_2.SetRedraw(false)
					idw_wcr_display_2.SetFilter('')
					idw_wcr_display_2.Filter()
					ll_rowcount = idw_wcr_display_2.rowcount()
					for ll_row = ll_rowcount to 1 step -1
						idw_wcr_display_2.setitem(ll_row,'requiring_treatment_flag',ls_requires_treatment_flag)
					next
					idw_wcr_display_2.SetFilter("requiring_treatment_flag = 'T'")
					idw_wcr_display_2.Filter()
					idw_wcr_display_2.SetRedraw(true)
			end choose
			
			// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		case else
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	end choose
	
	return 0

end if

//// COR2 - JXM 
////if (this.dataobject = 'd_profile_pcb_supplement_dragon' ) then
////	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
////	return 0
////end if
//REPLACED with the following JXM 2/28/2019
if (this.dataobject = 'd_profile_pcb_supplement_dragon' ) then 	
	 ls_pcb_con_0_9 = this.GetItemString(row, 'pcb_concentration_0_9')
	 ls_pcb_con_10_49 = this.GetItemString(row, 'pcb_concentration_10_49')
	 ls_pcb_con_50_499 = this.GetItemString(row, 'pcb_concentration_50_499')
	 ls_pcb_con_500 = this.GetItemString(row, 'pcb_concentration_500')
	 
	//COR2 JXM 02/27/2019 Add Validation to PCB Supplement
	Choose Case dwo.Name
		//Q1
		Case lower('pcb_concentration_0_9'), lower('pcb_concentration_10_49'), lower('pcb_concentration_50_499'), lower('pcb_concentration_500')
			if ( ls_pcb_con_0_9 = 'T' or (dwo.Name = 'pcb_concentration_0_9' and data='T')) then 
				ls_checkBoxSelected = ls_checkBoxSelected + '1'
			else //data = null or data = 'F' then
				this.SetItem(row,'pcb_concentration_0_9','F') 
				ls_all_F += '1'
			end if
			if ( ls_pcb_con_10_49 = 'T'  or (dwo.Name = 'pcb_concentration_10_49' and data='T')) then 
				ls_checkBoxSelected = ls_checkBoxSelected + '2'
			else //data = null or data = 'F' then
				this.SetItem(row,'pcb_concentration_10_49','F')
				ls_all_F += '2'
			end if
			if ( ls_pcb_con_50_499 = 'T' or (dwo.Name = 'pcb_concentration_50_499' and data='T')) then 
				ls_checkBoxSelected = ls_checkBoxSelected + '3'
			else //data = null or data = 'F' then
				this.SetItem(row,'pcb_concentration_50_499','F')
				ls_all_F += '3'
			end if
			if ( ls_pcb_con_500 = 'T' or (dwo.Name = 'pcb_concentration_500' and data='T')) then 
				ls_checkBoxSelected = ls_checkBoxSelected + '4'
			else //data = null or data = 'F' then
				this.SetItem(row,'pcb_concentration_500','F')
				ls_all_F += '4'
			end if
			
			//Convert CheckBoxSelected
			ll_selectedNumConv = Long( ls_checkBoxSelected )
			//Required Field check
			If isNull( ll_selectedNumConv ) or ll_selectedNumConv < 1 or ls_all_F = '1234' Then 
				MessageBox(gs_app_name+": Warning Message", "Required Field",Information!)
				Return 1
			End if
			//Check if checkboxes are checked/adjacent ea. other
			Choose Case ll_selectedNumConv
				Case 1, 2, 3, 4 	//1 selected continue
				Case 12, 23, 34 	//2 selected continue
				Case 123, 234 	//3 selected continue
				Case 1234 			//4 selected continue
				Case Else			//None of checkbox selected are adjacent to each other so display message
					MessageBox(gs_app_name+": Warning Message", "Selectable options must be adjacent to each other.", Information!)
					Return 1
			End Choose
		//Q2		
		Case lower('pcb_concentration_gr_50')
			string ls_pcb_src_con_gr_50
			if ( IsNull(trim(data)) or (data <> 'T' and data <> 'F' and data <> 'U') ) then
				MessageBox(gs_app_name+": Warning Message", "Required Field",Information!)
				Return 1
			end if
		//Q3
		//15815 - Changed form F to T
		Case lower('pcb_regulated_for_disposal_under_TSCA')
			if  IsNull(trim(data)) then
				MessageBox(gs_app_name+": Warning Message", "Required Field",Information!)
				Return 1
			elseif (data = 'T')  then
				MessageBox(gs_app_name+": Warning Message", "A continuation/control sheet is required to be sent with ~rthe shipment paperwork per 40 CFR Part 761.207." ,Information!)
			end if	
		//Q4a
		Case lower('processed_into_non_liquid')
			if  IsNull(trim(data)) then
				MessageBox(gs_app_name+": Warning Message", "Required Field",Information!)
				Return 1
			end if
			If (data = 'T') then
				this.Modify('processed_into_nonlqd_prior_pcb.Protect=0')
			else //data = F or data = U
				this.Modify('processed_into_nonlqd_prior_pcb.Protect=1')
			end if
		//Q4b
		Case lower('processed_into_nonlqd_prior_pcb')
			if  (this.Object.processed_into_non_liquid[row]='T') and Not IsNull(trim(data)) then //Required if processed_into_non_liquid = T
				MessageBox(gs_app_name+": Warning Message", "You have indicated that this waste has been processed into a non-liquid form.~rA selection of PCB concentration prior to processing is required.",Information!)
				Return 1
			end if
		//Q5	
		Case lower('pcb_manufacturer')
			if  ( (this.GetItemString(row,'pcb_concentration_0_9') = 'T' &
			            or this.GetItemString(row, 'pcb_concentration_10_49') = 'T')  & 
			        and (this.GetItemString(row, 'pcb_source_concentration_gr_50') = 'F')  ) then 
				this.Setitem(row,'pcb_manufacturer','')	  
				this.Modify('pcb_manufacturer.Protect=1')
			end if
			if ( this.GetItemString(row,'pcb_concentration_0_9') = 'F' &
				      and (this.GetItemString(row,'pcb_concentration_10_49') = 'T' &
					         or this.GetItemString(row,'pcb_concentration_50_499') = 'T' &
						     or this.GetItemString(row,'pcb_concentration_500') = 'T')  &
					   or this.GetItemString(row,'pcb_concentration_10_49') = 'T') then
				this.Modify('pcb_manufacturer.Protect=0')	
				//DevOps #13673 -- Start
				//MessageBox(gs_app_name+": Warning Message", "You have indicated that the concentration of PCB's in the waste is >=50 ppm and/or ~rthat the material was derived from a PCB source >=50 ppm.  ~rAs such questions 6 and 7 of the supplement are required.",Information!)
				//Return 1
				//MessageBox(gs_app_name+": Warning Message", "You have indicated that the concentration of PCB's in the waste is >=50 ppm and/or ~rthat the material was derived from a PCB source >=50 ppm.  ~rAs such questions 5 and 6 of the supplement are required.",Information!)
				//Return 0
				//DevOps #13673 -- End
			end if	
			if ( this.GetItemString(row,'pcb_source_concentration_gr_50') = 'T' &
			     or this.GetItemString(row,'pcb_source_concentration_gr_50') = 'T' ) then 
				this.Modify('pcb_manufacturer.Protect=0')	
				//MessageBox(gs_app_name+": Warning Message", "You have indicated that the concentration of PCB's in the waste is >=50 ppm and/or ~rthat the material was derived from a PCB source >=50 ppm.  ~rAs such questions 6 and 7 of the supplement are required.",Information!)
				this.Modify('pcb_manufacturer.Protect=0')	
				//Return 1
			end if
		//Q6a
		Case 'pcb_article_for_TSCA_landfill'
			if  ( (this.GetItemString(row,'pcb_concentration_0_9') = 'T' &
			            or this.GetItemString(row, 'pcb_concentration_10_49') = 'T')  & 
			        and (this.GetItemString(row, 'pcb_source_concentration_gr_50') = 'F')  ) then 
				this.Setitem(row,'pcb_article_for_TSCA_landfill','')	  
				this.Modify('pcb_article_for_TSCA_landfill.Protect=1')
			end if
			if ( this.GetItemString(row,'pcb_concentration_0_9') = 'F' &
				      and (this.GetItemString(row,'pcb_concentration_10_49') = 'T' &
					         or this.GetItemString(row,'pcb_concentration_50_499') = 'T' &
						     or this.GetItemString(row,'pcb_concentration_500') = 'T')  &
					   or this.GetItemString(row,'pcb_concentration_10_49') = 'T') then
				this.Modify('pcb_article_for_TSCA_landfill.Protect=0')		
//				MessageBox(gs_app_name+": Warning Message", "You have indicated that the concentration of PCB's in the waste is >=50 ppm and/or ~rthat the material was derived from a PCB source >=50 ppm.  ~rAs such questions 6 and 7 of the supplement are required.",Information!)
			//	Return 1
			end if	
			if ( this.GetItemString(row,'pcb_source_concentration_gr_50') = 'T' &
			     or this.GetItemString(row,'pcb_source_concentration_gr_50') = 'T' ) then 
				this.Modify('pcb_article_for_TSCA_landfill.Protect=0')	
				//MessageBox(gs_app_name+": Warning Message", "You have indicated that the concentration of PCB's in the waste is >=50 ppm and/or ~rthat the material was derived from a PCB source >=50 ppm.  ~rAs such questions 6 and 7 of the supplement are required.",Information!)
				this.Modify('pcb_article_for_TSCA_landfill.Protect=0')	
				//Return 1
			end if
		//Q6b
	    Case 'pcb_article_decontaminated'
			if ( this.GetItemString(row,'pcb_article_for_TSCA_landfill') = 'T' ) then
				MessageBox(gs_app_name+": Warning Message", "You have indicated that this waste is defined as a PCB Article per (40 CFR Part 761.3) ~rand is intended for disposal in a TSCA chemical waste landfill.  ~rAs such a selection must be made here." ,Information!)
				this.Modify('pcb_article_decontaminated.Protect=0')
				Return 0
			end if
		Case Else
			//Unknown issue
	End Choose
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0
end if
//JXM 5520 02/18/2018 Protect/Unprotect the following fields
//DOT not Shippable Reason, Hazard Zone, & Corrosion Color
//COR2 JXM 02/27/2019 Add Validation to Cylinder Supplement
if (this.dataobject = 'd_profile_cylinder_supplement_dragon') then
	choose case lower(dwo.Name)
		//Q1
		case lower('cylinder_quantity')	
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ":  Warning Message","You have indicated that the waste contains Compressed Gas in Section F.15 of the Waste/Profile form. " +&
																	"~r~rPlease provide the quantity of cylinder(s) to be shipped under this Waste/Profile", Exclamation!)
				return 1 //Reject data - do not lose focus
			else
				return 0 //Accept data - lose focus
			end if
		//Q2	
		case lower('CGA_number')	 //varchar(10)
			if IsNull( trim( data ) ) then
				MessageBox(gs_app_name + ":  Warning Message","Please provide the CGA Number located on the valve for cylinder(s) to be shipped ~runder this Waste/Profile.", Exclamation!)
				return 1 //Reject data - do not lose focus
			else
				return 0 //Accept data - lose focus
			end if	
		//Q3
		case lower('original_label_visible_flag') //char(1)	
			if IsNull( data ) then
				MessageBox(gs_app_name + ":  Warning Message","Required Field.", Exclamation!)
				return 1 //Reject data - do not lose focus
			else
				return 0 //Accept data - lose focus
			end if	
		//Q4
		case lower('manufacturer') 
			//Validation not required
		//Q5
		case lower('markings_warnings_comments')
			//Validation not required
		//Q6	
		case lower('DOT_shippable_flag')
			//Selection must be made
			if IsNull(trim(data)) then 
				MessageBox(gs_app_name + ":  Warning Message","Required Field.", Exclamation!)
				return 1 //Reject data - do not lose focus
			end if
			//If 'F' then DOT not shippable reason is Required
			if trim(upper(data)) = 'F' then
				MessageBox(gs_app_name + ":  Warning Message","You have indicated that the cylinder(s) are not DOT shippable.  A description is required.", Exclamation!)
				this.SetColumn('DOT_not_shippable_reason')
				this.modify("DOT_not_shippable_reason.Protect=0") //UnProtected column
			else //'T' then DOT not shippable reason <> Required
				this.SetItem(row, 'DOT_not_shippable_reason','')
				this.Modify("DOT_not_shippable_reason.Protect=1") //Protected column
			end if
		//Q7	
		case lower('poisonous_inhalation_flag')
			//Selection must be made
			if IsNull(trim(data)) then
				MessageBox(gs_app_name + ": Warning Message","Required Field.", Exclamation!)
				Return 1
			end if
			if trim(upper(data)) = 'T' then
				this.Modify("hazard_zone.Protect=0")  //UnProtected column - required
				MessageBox(gs_app_name + ": Warning Message","You have indicated that the cylinder(s) contain a poisonous inhalation hazard (PIH).  ~rA hazard zone selection is required.", Exclamation!)
			else
				this.SetItem(row, 'hazard_zone','')
				this.Modify("hazard_zone.Protect=1") //Protected column - not required
			end if
		//Q8
		case lower('DOT_ICC_number')
			//Validation not required
		//Q9
		case lower('valve_condition')
			if IsNull(trim(data)) then
				MessageBox(gs_app_name + ": Warning Message", "Please provide the type and size of cylinder(s) to be shipped under this Waste/Profile.", Exclamation!)
				Return 1
			end if
			// MPM - 4/29/2020 - DevOps 15428 - Moved the logic below to the cylinder supplement datawindow
			//			if trim(upper(data)) = 'C' then
			//				this.Modify("corrosion_color.Protect=0")  //UnProtected column
			//			else
			//				this.SetItem(row, 'corrosion_color','')
			//				this.Modify("corrosion_color.Protect=1") //Protected column
			//			end if	

		//Q10
		case lower('heaviest_gross_weight') //validation not working - JXM
//			if ( Len(trim( string(data) ) ) > 0 ) then
//				this.Modify("heaviest_gross_weight_unit.Protect=0") //required
//				MessageBox(gs_app_name + ": Warning Message", "A selection of either Pounds or Kilograms is required if a weight is entered.  ~rPlease make a selection.", Exclamation!)
//				Return 1
//			else 
//				this.Modify("heaviest_gross_weight_unit.Protect=1") //not required
//			end if
		//Q11
		case lower('external_condition')
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ": Warning Message", "Required Field", Exclamation!)
				Return 1
			end if
		//Q12
 		case lower('pressure_relief_device') 
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ": Warning Message", "Required Field", Exclamation!)
				Return 1
			end if
			//Q13
		case lower('workable_valve_flag') 
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ": Warning Message", "Required Field", Exclamation!)
				Return 1
			end if
		//Q14
		case lower('threads_impaired_flag') 
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ": Warning Message", "Required Field", Exclamation!)
				Return 1
			end if
		//Q15	
		case lower('cylinder_pressure') 
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ": Warning Message", "Required Field", Exclamation!)
				Return 1
			end if
		//Q16
		case lower('protective_cover_flag')
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ": Warning Message", "Required Field", Exclamation!)
				Return 1
			end if
		//Q17a
		case lower('valve_condition') 
			if IsNull( trim(data) ) then
				MessageBox(gs_app_name + ": Warning Message", "Required Field", Exclamation!)
				Return 1
			end if
			// MPM - 4/29/2020 - DevOps 15428 - Moved the logic below to the cylinder supplement datawindow
//			if ( trim(data) = 'C' ) then
//				this.Modify("corrosion_color.Protect=0")
//			else
//				this.Modify("corrosion_color.Protect=1")
//			end if

		//Q17b
		case lower('corrosion_color')
			if ( this.GetItemString(row,'valve_condition') = 'C' and IsNull( trim(data)) ) then
				MessageBox(gs_app_name + ": Warning Message", "You have indicated that the valve condition is corroded.  ~rAn entry is required for the color of the corrosion.", Exclamation!)
				Return 1
			end if
	case else   
		//unknown problem
    end Choose
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0
end if
// COR2 JXM 02/27/2019 Add Vaildation to Illinois Disposal Supplement
//COR2 JXM 02/28/2019 Completed Validation, Removed I Certify/Signture
//Updates and Saves
if (this.dataobject = 'd_profile_illinois_disposal_supplement_dragon') then
	choose case lower(dwo.Name)
		case lower('none_apply_flag')
			if ( data = 'T' ) then
				wf_item_changed_profile_illinois_disposa(row,this)
				this.Modify("other_specify.Protect=1") 
				this.SetItem( row, 'sulfide_10_250_flag', 'F' )
				MessageBox(gs_app_name+": Warning Message", "You have indicated that none of the additional properties listed in Section F apply to this material. You can update individual lines to ~r~"Yes~" as needed." , Information!)
			end if
		case lower('incecticides_flag'), lower('pesticides_flag'), lower('herbicides_flag'), lower('household_waste_flag'), lower('carcinogen_flag'), lower('sulfide_10_250_flag')
			if  IsNull(trim(data)) then
				MessageBox(gs_app_name+": Warning Message", "Required Field",Information!)
				Return 1
			else
				if ( data = 'T' or data = 'C' ) then this.SetItem( row, 'none_apply_flag','F' ) 
			end if
		case lower('other_flag')
			if ( data = 'T' ) then
				this.Modify("other_specify.Protect=0") //required
			else //data = 'F' or 'U'
				this.SetItem(row, 'other_specify','')
				this.Modify("other_specify.Protect=1") //not required
			end if
		case lower('other_specify')
			if ( IsNull( trim(data) ) and this.GetItemString(row, 'other_flag')='T' ) then
				MessageBox(gs_app_name+": Warning Message", "You have indicated ~"Other~" under Section F. (Additional Properties).  ~rA description is required.",Information!)
				Return 1
			end if
		case lower('universal_waste_flag'), lower('characteristic_sludge_flag'), lower('virgin_unused_product_flag'), lower('spent_material_flag'), lower('cyanide_plating_on_site_flag'), &
			   lower('substitute_commercial_product_flag'), lower('by_product_flag'), lower('rx_lime_flammable_gas_flag'), lower('pollution_control_waste_IL_flag'), & 
			   lower('industrial_process_waste_IL_flag'),  lower('phenol_gt_1000_flag'), lower('generator_certification_flag')
			   //ALL Fields are NOT REQUIRED - Continue
		// MPM - DevOps 15816 - Commented out the CASE below and moved this validation to wf_validate_wcr().
//		case lower('d004_above_PQL'), lower('d005_above_PQL'), lower('d006_above_PQL'), lower('d007_above_PQL'), lower('d008_above_PQL'), lower('d009_above_PQL'), &
//			   lower('d010_above_PQL'), lower('d011_above_PQL'), lower('d012_above_PQL'), lower('d013_above_PQL'), lower('d014_above_PQL'), lower('d015_above_PQL'), &
//			   lower('d016_above_PQL'), lower('d017_above_PQL'), lower('d018_above_PQL'), lower('d019_above_PQL'), lower('d020_above_PQL'), lower('d021_above_PQL'), &
//			   lower('d022_above_PQL'), lower('d023_above_PQL'), lower('d024_above_PQL'), lower('d025_above_PQL'), lower('d026_above_PQL'), lower('d027_above_PQL'), &
//			   lower('d028_above_PQL'), lower('d029_above_PQL'), lower('d030_above_PQL'), lower('d031_above_PQL'), lower('d032_above_PQL'), lower('d033_above_PQL'), &
//			   lower('d034_above_PQL'), lower('d035_above_PQL'), lower('d036_above_PQL'), lower('d037_above_PQL'), lower('d038_above_PQL'), lower('d039_above_PQL'), &
//			   lower('d040_above_PQL'), lower('d041_above_PQL '), lower('d042_above_PQL'), lower('d043_above_PQL')
//			  //ALL Fields are REQUIRED - Display Message
//			 if ( data = 'U' ) then
//				MessageBox(gs_app_name+": Warning Message", "A selection of either yes or no is required ~rfor each constituent listed in this section.",Information!)
//				Return 1
//			 end if
 	case else
	end choose
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0
end if
//DevOps:16515 - When copy profile header has 2 records is casuing the problem. so using ll_hdr_row instead of row
// MPM - 3/10/2021 - DevOps 19724 - Commented out the IF block below, since this change is causing changes to be made to the wrong profile!
//if (this.dataobject = 'd_profile_waste_material_stream_form_dragon') then	
//    wf_wcr_profile_map_sync  (this, dwo.Name, ll_hdr_row, data)
//end if

//COR2 JXM 02/28/2019 Add Validation to Debris Certification
if (this.dataobject = 'd_profile_debris_certification_dragon') then
	choose case lower('dwo.Name')
		case lower('debris_certification_flag')
			if ( Not (data = 'T') ) then
				MessageBox(gs_app_name+": Warning Message", "A completed Debris Certification is required prior to final profile approval into the requested US Ecology Facility. ~rPlease ensure that the appropriate parties are notified and that a certified form is sent to the requested facility prior to shipment.",Information!)
				Return 1
			end if
		case else
	end choose
	//DevOps:16515 - When copy profile header has 2 records is casuing the problem. so using ll_hdr_row instead of row
	// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0
end if

// COR2 JXM 02/28/2019 Add Vaildation to Used Oil Supplement
if (this.dataobject = 'd_profile_used_oil_supplement_dragon') then
	choose case lower(dwo.Name)
		case lower('wwa_halogen_gt_1000')
			if  IsNull(trim(data)) then
				MessageBox(gs_app_name+": Warning Message", "Required Field",Information!)
				Return 1
			end if
			if ( data = 'T' ) then
				this.Modify('halogen_source.Protect=0')
			elseif ( data = 'F' ) then
				this.SetItem(row, 'halogen_source','')
				this.Modify('halogen_source.Protect=1')
			end if
		case lower('halogen_source')
			if  IsNull(trim(data)) then
				MessageBox(gs_app_name+": Warning Message", "You have indicated in Q1 of this supplement that the used oil contains a total halogen content >1,000 ppm.  As such the source of the halogen content is required.",Information!)
				Return 1
			end if
			if ( data = 'F' ) then 
				MessageBox(gs_app_name+": Warning Message", "You have indicated in Q1 of this supplement that the used oil does NOT contain a total halogen content >1,000 ppm.  As such this section is not required.",Information!)
				this.SetItem(row,'halogen_source','')
				this.Modify('halogen_source.Protect=1')
				Return 1
			end if
			//COR2 JXM - 04/02/2019 Used Oil, if Halegon Source 3 or 4 checkbox Allow that text box to be edited
			//if neither checkbox is selected but 1 or 2 is clear both text boxes
			choose case data
				case 'Metalwork', 'Chloroflu'
					this.SetItem(row,'halogen_source_desc','')
					this.SetItem(row,'halogen_source_other','')
				case 'Halogen'
					this.SetItem(row,'halogen_source_other','')
				case 'Other'
					this.SetItem(row,'halogen_source_desc','')
			end choose
		case else
	end choose
	wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	return 0
end if

// COR2-MPM
if this.dataobject <> "d_profile_shipping_form_dragon" and &
	this.dataobject <> "d_profile_composition_form_dragon" then
	
	IF lower(this.dataobject) = 'd_profile_special_properties_form_dragon' THEN
		ls_ph1 = GetItemString(row,"ph_lte_2")
		ls_ph2 = GetItemString(row,"ph_gt_2_lt_5")
		ls_ph3 = GetItemString(row,"ph_gte_5_lte_10")
		ls_ph4 = GetItemString(row,"ph_gt_10_lt_12_5")
		ls_ph5 = GetItemString(row,"ph_gte_12_5")
		IF isNull(ls_ph1) OR (ls_ph1 = "") THEN ls_ph1 = "F"
		IF isNull(ls_ph2) OR (ls_ph2 = "") THEN ls_ph2 = "F"
		IF isNull(ls_ph3) OR (ls_ph3 = "") THEN ls_ph3 = "F"
		IF isNull(ls_ph4) OR (ls_ph4 = "") THEN ls_ph4 = "F"
		IF isNull(ls_ph5) OR (ls_ph5 = "") THEN ls_ph5 = "F"
		
		// SK 07242012
//		ls_ignitability_lt_90 	= GetItemString(row,"ignitability_lt_90")
//		ls_ignitability_90_139 	= GetItemString(row,"ignitability_90_139")
//		ls_ignitability_140_199 = GetItemString(row,"ignitability_140_199")
//		ls_ignitability_gte_200 = GetItemString(row,"ignitability_gte_200")
//		ls_ignitability_na 		= GetItemString(row,"ignitability_na")
//		IF isNull(ls_ignitability_lt_90) OR (ls_ignitability_lt_90 = "") THEN ls_ignitability_lt_90 = "F"
//		IF isNull(ls_ignitability_90_139) OR (ls_ignitability_90_139 = "") THEN ls_ignitability_90_139 = "F"
//		IF isNull(ls_ignitability_140_199) OR (ls_ignitability_140_199 = "") THEN ls_ignitability_140_199 = "F"
//		IF isNull(ls_ignitability_gte_200) OR (ls_ignitability_gte_200 = "") THEN ls_ignitability_gte_200 = "F"

		// COR2-MPM
		ls_consistency = Trim(This.Object.consistency[row])
		// MPM - 2/26/2021 - DevOps 19177 - After investigation, I found that sometimes the consistency will incorrectly have a colon (':') at its end, 
		// e.g., "SOLID:", or "SLUDGE:LIQUID:", so I'm removing it the final colon if it exists.  This seems to be caused, at least in part, by how the 
		// consistency string was being built in wf_copy_wcr_dragon, and I've corrected that in that function.
		IF Right(ls_consistency, 1) = ':' THEN ls_consistency = Left(ls_consistency, Len(ls_consistency) - 1)
		
		//IF ls_consistency = "" THEN SetNull(ls_consistency)
		IF IsNull(ls_consistency) THEN ls_consistency = ""
		ls_consistency_solid = This.Object.consistency_solid[row]
		ls_consistency_dust = This.Object.consistency_dust[row]
		ls_consistency_debris = This.Object.consistency_debris[row]
		ls_consistency_sludge = This.Object.consistency_sludge[row]
		ls_consistency_liquid = This.Object.consistency_liquid[row]
		ls_consistency_gas_aerosol = This.Object.consistency_gas_aerosol[row]

	END IF
	

		
	IF lower(this.dataobject) = 'd_profile_tsca_form' THEN
		ls_pcb_conc_0_49 		= GetItemString(row,"pcb_concentration_0_49")
		ls_pcb_conc_50_499 	= GetItemString(row,"pcb_concentration_50_499")
		ls_pcb_conc_500 		= GetItemString(row,"pcb_concentration_500")
		ls_pcb_conc_none 		= GetItemString(row,"pcb_concentration_none")
		IF isNull(ls_pcb_conc_0_49) OR (ls_pcb_conc_0_49 = "") THEN ls_pcb_conc_0_49 = "F"
		IF isNull(ls_pcb_conc_50_499) OR (ls_pcb_conc_50_499 = "") THEN ls_pcb_conc_50_499 = "F"
		IF isNull(ls_pcb_conc_500) OR (ls_pcb_conc_500 = "") THEN ls_pcb_conc_500 = "F"
	END IF

// COR2-MPM
/*
	Up to 2 of the following 7 "consistency" checkboxes can be selected. 
	This should allow for the selection of one or two checkboxes. 
	If a third checkbox is selected then remove all selections and populate the "Varies" checkbox. 
	If "Varies" is selected, remove any other selection. 
*/
	// rb 05/08/2012 
	choose case lower(dwo.Name)
		CASE "consistency_solid"
			IF data = 'T' THEN
//				IF ls_consistency_liquid = 'T' THEN
//					// Remove LIQUID from consistency
//					IF Pos(ls_consistency, ':') > 0 THEN
//						// LIQUID plus some other consistency is currently selected, so replace LIQUID with SOLID and sync
//						MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Solid will be selected and Liquid will be unselected.")
//						ls_consistency = Replace (ls_consistency, Pos(ls_consistency, "LIQUID"), 6, "SOLID")
//					ELSE
//						// Just set the consistency to SOLID and sync
//						MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Solid will be selected and Liquid will be unselected.")
//						ls_consistency = 'SOLID'
//					END IF
//					This.Object.consistency[row] = ls_consistency
//					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
//					This.Object.consistency_liquid[row] = 'F'
//					wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
//					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//				ELSE
				IF Pos(ls_consistency, ':') > 0 THEN
					// If there are already 2 consistencies selected, set the consistency to "Varies"
					MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
					This.Object.consistency_varies[row] = 'T'
					This.Object.consistency[row] = 'VARIES'
					wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
					IF ls_consistency_dust = 'T' THEN
						This.Object.consistency_dust[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
					END IF
					IF ls_consistency_debris = 'T' THEN
						This.Object.consistency_debris[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
					END IF
					IF ls_consistency_sludge = 'T' THEN
						This.Object.consistency_sludge[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
					END IF
					IF ls_consistency_liquid = 'T' THEN
						This.Object.consistency_liquid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
					END IF
					IF ls_consistency_gas_aerosol = 'T' THEN
						This.Object.consistency_gas_aerosol[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
					END IF
					// Don't allow the value to change
					RETURN 2
				// If there is no consistency already selected, then set consistency to SOLID and sync 
				ELSEIF IsNull(ls_consistency) OR ls_consistency="" THEN
					This.Object.consistency[row] = 'SOLID'
					wf_wcr_profile_map_sync (this, "consistency", row, 'SOLID')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					IF ls_consistency = 'VARIES' THEN
						// Replace 'VARIES' with 'SOLID' and sync
						This.Object.consistency[row] = 'SOLID'
						wf_wcr_profile_map_sync (this, "consistency", row, 'SOLID')
						This.Object.consistency_varies[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					ELSE
						// There is already one consistency selected, so append :SOLID to consistency and sync 
						ls_consistency = ls_consistency + ':SOLID'
						This.Object.consistency[row] = ls_consistency
						wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					END IF
				END IF
			ELSEIF data = 'F' THEN
				// Remove :SOLID from consistency and sync 
				li_pos = Pos(ls_consistency, ':SOLID')
				IF li_pos = 0 THEN 
				    li_pos = Pos(ls_consistency, ':')
					 ll_len_consistency =  Len(ls_consistency)
					 lb_right = true
				END IF
				IF li_pos > 0 THEN
					IF lb_right = TRUE THEN
					   ls_consistency = RIGHT(ls_consistency, ll_len_consistency - li_pos )
					ELSE
					   ls_consistency = LEFT(ls_consistency, li_pos - 1)
					END IF
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// Consistency must be "SOLID", so set the consistency to null and sync
					This.Object.consistency[row] = ""
					wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		CASE "consistency_dust"
			IF data = 'T' THEN
				// If there are already 2 consistencies selected, set the consistency to "Varies"
				IF Pos(ls_consistency, ':') > 0 THEN
					MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
					This.Object.consistency_varies[row] = 'T'
					This.Object.consistency[row] = 'VARIES'
					wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
					IF ls_consistency_solid = 'T' THEN
						This.Object.consistency_solid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
					END IF
					IF ls_consistency_debris = 'T' THEN
						This.Object.consistency_debris[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
					END IF
					IF ls_consistency_sludge = 'T' THEN
						This.Object.consistency_sludge[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
					END IF
					IF ls_consistency_liquid = 'T' THEN
						This.Object.consistency_liquid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
					END IF
					IF ls_consistency_gas_aerosol = 'T' THEN
						This.Object.consistency_gas_aerosol[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
					END IF
					// Don't allow the value to change
					RETURN 2
				// If there is no consistency already selected, then set consistency to DUST/POWDER and sync 
				ELSEIF IsNull(ls_consistency) OR ls_consistency="" THEN
					This.Object.consistency[row] = 'DUST/POWDER'
					wf_wcr_profile_map_sync (this, "consistency", row, 'DUST/POWDER')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					IF ls_consistency = 'VARIES' THEN
						// Replace 'VARIES' with 'DUST/POWDER' and sync
						This.Object.consistency[row] = 'DUST/POWDER'
						wf_wcr_profile_map_sync (this, "consistency", row, 'DUST/POWDER')
						This.Object.consistency_varies[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					ELSE
						// There is already one consistency selected, so append :DUST/POWDER to consistency and sync 
						ls_consistency = ls_consistency + ':DUST/POWDER'
						This.Object.consistency[row] = ls_consistency
						wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					END IF
				END IF
			ELSEIF data = 'F' THEN
				// Remove DUST/POWDER from consistency and sync 
				li_pos = Pos(ls_consistency, ':DUST/POWDER')
				IF li_pos = 0 THEN 
				    li_pos = Pos(ls_consistency, ':')
					 ll_len_consistency =  Len(ls_consistency)
					 lb_right = true
				END IF
				IF li_pos > 0 THEN
					IF lb_right = TRUE THEN
					   ls_consistency = RIGHT(ls_consistency, ll_len_consistency - li_pos )
					ELSE
					   ls_consistency = LEFT(ls_consistency, li_pos - 1)
					END IF
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// Consistency must be "DUST/POWDER", so set the consistency to null and sync
					This.Object.consistency[row] = ""
					wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		CASE "consistency_debris"
			IF data = 'T' THEN
				// If there are already 2 consistencies selected, set the consistency to "Varies"
				IF Pos(ls_consistency, ':') > 0 THEN
					MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
					This.Object.consistency_varies[row] = 'T'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
					This.Object.consistency[row] = 'VARIES'
					wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
					IF ls_consistency_dust = 'T' THEN
						This.Object.consistency_dust[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
					END IF
					IF ls_consistency_solid = 'T' THEN
						This.Object.consistency_solid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
					END IF
					IF ls_consistency_sludge = 'T' THEN
						This.Object.consistency_sludge[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
					END IF
					IF ls_consistency_liquid = 'T' THEN
						This.Object.consistency_liquid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
					END IF
					IF ls_consistency_gas_aerosol = 'T' THEN
						This.Object.consistency_gas_aerosol[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
					END IF
					// Don't allow the value to change
					RETURN 2
				// If there is no consistency already selected, then set consistency to DEBRIS and sync 
				ELSEIF IsNull(ls_consistency)  OR ls_consistency="" THEN
					This.Object.consistency[row] = 'DEBRIS'
					wf_wcr_profile_map_sync (this, "consistency", row, 'DEBRIS')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					IF ls_consistency = 'VARIES' THEN
						// Replace 'VARIES' with 'DEBRIS' and sync
						This.Object.consistency[row] = 'DEBRIS'
						wf_wcr_profile_map_sync (this, "consistency", row, 'DEBRIS')
						This.Object.consistency_varies[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					ELSE
						// There is already one consistency selected, so append :DEBRIS to consistency and sync 
						ls_consistency = ls_consistency + ':DEBRIS'
						This.Object.consistency[row] = ls_consistency
						wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					END IF
				END IF
			ELSEIF data = 'F' THEN
				// Remove DEBRIS from consistency and sync 
				li_pos = Pos(ls_consistency, ':DEBRIS')
				IF li_pos = 0 THEN 
				    li_pos = Pos(ls_consistency, ':')
					 ll_len_consistency =  Len(ls_consistency)
					 lb_right = true
				END IF
				IF li_pos > 0 THEN
					IF lb_right = TRUE THEN
					   ls_consistency = RIGHT(ls_consistency, ll_len_consistency - li_pos )
					ELSE
					   ls_consistency = LEFT(ls_consistency, li_pos - 1)
					END IF
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// Consistency must be "DEBRIS", so set the consistency to null and sync
					This.Object.consistency[row] = ""
					wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		CASE "consistency_sludge"
			IF data = 'T' THEN
				// If there are already 2 consistencies selected, then set the consistency to "Varies"
				IF Pos(ls_consistency, ':') > 0 THEN
					MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
					This.Object.consistency_varies[row] = 'T'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
					This.Object.consistency[row] = 'VARIES'
					wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
					IF ls_consistency_dust = 'T' THEN
						This.Object.consistency_dust[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
					END IF
					IF ls_consistency_debris = 'T' THEN
						This.Object.consistency_debris[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
					END IF
					IF ls_consistency_solid = 'T' THEN
						This.Object.consistency_solid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
					END IF
					IF ls_consistency_liquid = 'T' THEN
						This.Object.consistency_liquid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
					END IF
					IF ls_consistency_gas_aerosol = 'T' THEN
						This.Object.consistency_gas_aerosol[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
					END IF
					// Don't allow the value to change
					RETURN 2
				// If there is no consistency already selected, then set consistency to SLUDGE and sync 
				ELSEIF IsNull(ls_consistency) OR ls_consistency="" THEN
					This.Object.consistency[row] = 'SLUDGE'
					wf_wcr_profile_map_sync (this, "consistency", row, 'SLUDGE')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					IF ls_consistency = 'VARIES' THEN
						// Replace 'VARIES' with 'SLUDGE' and sync
						This.Object.consistency[row] = 'SLUDGE'
						wf_wcr_profile_map_sync (this, "consistency", row, 'SLUDGE')
						This.Object.consistency_varies[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					ELSE
						// There is already one consistency selected, so append :SLUDGE to consistency and sync 
						ls_consistency = ls_consistency + ':SLUDGE'
						This.Object.consistency[row] = ls_consistency
						wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					END IF
				END IF
			ELSEIF data = 'F' THEN
				// Remove SLUDGE from consistency and sync 
				li_pos = Pos(ls_consistency, ':SLUDGE')
				IF li_pos = 0 THEN 
				    li_pos = Pos(ls_consistency, ':')
					 ll_len_consistency =  Len(ls_consistency)
					 lb_right = true
				END IF
				IF li_pos > 0 THEN
					IF lb_right = TRUE THEN
					   ls_consistency = RIGHT(ls_consistency, ll_len_consistency - li_pos )
					ELSE
					   ls_consistency = LEFT(ls_consistency, li_pos - 1)
					END IF
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// Consistency must be "SLUDGE", so set the consistency to null and sync
					This.Object.consistency[row] = ""
					wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		CASE "consistency_liquid"
			IF data = 'T' THEN
//				IF ls_consistency_solid = 'T' THEN
//					// Remove SOLID from consistency
//					IF Pos(ls_consistency, ':') > 0 THEN
//						// SOLID plus some other consistency is currently selected, so replace SOLID with LIQUID and sync
//						MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Liquid will be selected and Solid will be unselected.")
//						ls_consistency = Replace (ls_consistency, Pos(ls_consistency, "SOLID"), 5, "LIQUID")
//					ELSE
//						// Just set the consistency to LIQUID and sync
//						MessageBox(gs_app_name + ": Information","Both Solid and Liquid may not be selected, so Liquid will be selected and Solid will be unselected.")
//						ls_consistency = 'LIQUID'
//					END IF
//					This.Object.consistency[row] = ls_consistency
//					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
//					This.Object.consistency_solid[row] = 'F'
//					wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
//					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//				ELSE
				IF Pos(ls_consistency, ':') > 0 THEN
					// If there are already 2 consistencies selected, then set the consistency to "Varies"
					MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
					This.Object.consistency_varies[row] = 'T'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
					This.Object.consistency[row] = 'VARIES'
					wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
					IF ls_consistency_dust = 'T' THEN
						This.Object.consistency_dust[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
					END IF
					IF ls_consistency_debris = 'T' THEN
						This.Object.consistency_debris[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
					END IF
					IF ls_consistency_sludge = 'T' THEN
						This.Object.consistency_sludge[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
					END IF
					IF ls_consistency_solid = 'T' THEN
						This.Object.consistency_solid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
					END IF
					IF ls_consistency_gas_aerosol = 'T' THEN
						This.Object.consistency_gas_aerosol[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
					END IF
					// Don't allow the value to change
					RETURN 2
				// If there is no consistency already selected, then set consistency to LIQUID and sync 
				ELSEIF IsNull(ls_consistency) OR ls_consistency="" THEN
					This.Object.consistency[row] = 'LIQUID'
					wf_wcr_profile_map_sync (this, "consistency", row, 'LIQUID')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					IF ls_consistency = 'VARIES' THEN
						// Replace 'VARIES' with 'LIQUID' and sync
						This.Object.consistency[row] = 'LIQUID'
						wf_wcr_profile_map_sync (this, "consistency", row, 'LIQUID')
						This.Object.consistency_varies[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					ELSE
						// There is already one consistency selected, so append :LIQUID to consistency and sync 
						ls_consistency = ls_consistency + ':LIQUID'
						This.Object.consistency[row] = ls_consistency
						wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					END IF
				END IF
			ELSEIF data = 'F' THEN
				// Remove LIQUID from consistency and sync 
				li_pos = Pos(ls_consistency, ':LIQUID')
				IF li_pos = 0 THEN 
				    li_pos = Pos(ls_consistency, ':')
					 ll_len_consistency =  Len(ls_consistency)
					 lb_right = true
				END IF
				IF li_pos > 0 THEN
					IF lb_right = TRUE THEN
					   ls_consistency = RIGHT(ls_consistency, ll_len_consistency - li_pos )
					ELSE
					   ls_consistency = LEFT(ls_consistency, li_pos - 1)
					END IF
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// Consistency must be "LIQUID", so set the consistency to null and sync
					This.Object.consistency[row] = ""
					wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF
		CASE "consistency_gas_aerosol"
			IF data = 'T' THEN
				// If there are already 2 consistencies selected, set the consistency to "Varies"
				IF Pos(ls_consistency, ':') > 0 THEN
					MessageBox(gs_app_name + ": Information","Only one or two consistencies may be selected, so all currently selected consistencies will be unselected and 'Varies' will be selected.")
					This.Object.consistency_varies[row] = 'T'
					wf_wcr_profile_map_sync (this, "consistency_varies", row, 'T')
					This.Object.consistency[row] = 'VARIES'
					wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
					IF ls_consistency_dust = 'T' THEN
						This.Object.consistency_dust[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
					END IF
					IF ls_consistency_debris = 'T' THEN
						This.Object.consistency_debris[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
					END IF
					IF ls_consistency_sludge = 'T' THEN
						This.Object.consistency_sludge[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
					END IF
					IF ls_consistency_liquid = 'T' THEN
						This.Object.consistency_liquid[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
					END IF
					IF ls_consistency_solid = 'T' THEN
						This.Object.consistency_gas_aerosol[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
					END IF
					// Don't allow the value to change
					RETURN 2
				// If there is no consistency already selected, then set consistency to GAS/AEROSOL and sync 
				ELSEIF IsNull(ls_consistency) OR ls_consistency="" THEN
					This.Object.consistency[row] = 'GAS/AEROSOL'
					wf_wcr_profile_map_sync (this, "consistency", row, 'GAS/AEROSOL')
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					IF ls_consistency = 'VARIES' THEN
						// Replace 'VARIES' with 'GAS/AEROSOL' and sync
						This.Object.consistency[row] = 'GAS/AEROSOL'
						wf_wcr_profile_map_sync (this, "consistency", row, 'GAS/AEROSOL')
						This.Object.consistency_varies[row] = 'F'
						wf_wcr_profile_map_sync (this, "consistency_varies", row, 'F')
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					ELSE
						// There is already one consistency selected, so append :GAS/AEROSOL to consistency and sync 
						ls_consistency = ls_consistency + ':GAS/AEROSOL'
						This.Object.consistency[row] = ls_consistency
						wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
						wf_wcr_profile_map_sync (this, dwo.Name, row, data)
					END IF
				END IF
			ELSEIF data = 'F' THEN
				// Remove GAS/AEROSOL from consistency and sync 
				li_pos = Pos(ls_consistency, ':GAS/AEROSOL')
				IF li_pos = 0 THEN 
				    li_pos = Pos(ls_consistency, ':')
					 ll_len_consistency =  Len(ls_consistency)
					 lb_right = true
				END IF
				IF li_pos > 0 THEN
					IF lb_right = TRUE THEN
					   ls_consistency = RIGHT(ls_consistency, ll_len_consistency - li_pos )
					ELSE
					   ls_consistency = LEFT(ls_consistency, li_pos - 1)
					END IF
					This.Object.consistency[row] = ls_consistency
					wf_wcr_profile_map_sync (this, "consistency", row, ls_consistency)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				ELSE
					// Consistency must be "GAS/AEROSOL", so set the consistency to null and sync
					This.Object.consistency[row] = ""
					wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
					wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				END IF
			END IF

		CASE "consistency_varies"
			IF data = 'T' THEN
				// Uncheck any other consistencies and sync
				IF ls_consistency_solid = 'T' THEN
					This.Object.consistency_solid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_solid", row, 'F')
				END IF
				IF ls_consistency_dust = 'T' THEN
					This.Object.consistency_dust[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_dust", row, 'F')
				END IF
				IF ls_consistency_debris = 'T' THEN
					This.Object.consistency_debris[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_debris", row, 'F')
				END IF
				IF ls_consistency_sludge = 'T' THEN
					This.Object.consistency_sludge[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_sludge", row, 'F')
				END IF
				IF ls_consistency_liquid = 'T' THEN
					This.Object.consistency_liquid[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_liquid", row, 'F')
				END IF
				IF ls_consistency_gas_aerosol = 'T' THEN
					This.Object.consistency_gas_aerosol[row] = 'F'
					wf_wcr_profile_map_sync (this, "consistency_gas_aerosol", row, 'F')
				END IF
				This.Object.consistency[row] = 'VARIES'
				wf_wcr_profile_map_sync (this, "consistency", row, 'VARIES')
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ELSE
				// Set consistency to null and sync
				This.Object.consistency[row] = ""
				wf_wcr_profile_map_sync (this, "consistency", row, ls_null)
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			END IF

		// SK 07/16/2013 Added for Benzene_unit
		CASE "benzene_unit"
			IF upper(data) = 'U' THEN
				this.object.benzene[row] = ll_null
				wf_wcr_profile_map_sync (this, "benzene", row, ls_null)
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			
		case "customer_id"
			ll_i = idw_header.GetRow ()
			ldwo = idw_header.Object.customer_id
			
			idw_header.object.customer_id[ll_i] = Long(data)
			idw_header.Event itemchanged (ll_i, ldwo, data)

		case "generator_id"
			ll_i = idw_header.GetRow ()
			ldwo = idw_header.Object.generator_id

			idw_header.object.generator_id[ll_i] = Long(data)
			idw_header.Event itemchanged (ll_i, ldwo, data)
		
		// dz 07/11/2012 added "epa_id"
		case "epa_id"
			ll_i = idw_header.GetRow ()
			ldwo = idw_header.Object.generator_epa_id

			idw_header.object.generator_epa_id[ll_i] = data
			idw_header.Event itemchanged (ll_i, ldwo, data)
			
		case "halogen_source"
			this.Object.halogen_source_desc[row] = ""
			ldwo = this.Object.halogen_source_desc
			this.Event itemchanged (row, ldwo, "")
			
			this.Object.halogen_source_other[row] = ""
			ldwo = this.Object.halogen_source_other
			this.Event itemchanged (row, ldwo, "")

			wf_wcr_profile_map_sync (this, dwo.Name, row, data)   //dz
			
		// rb 05/23/2012
		case "frequency"
			this.Object.frequency_other[row] = ""
			
		CASE "ph_lte_2"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_ph1 = data
			ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
			lb_adjoining_ph = wf_validate_adjoining(ls_temp)
			this.object.ph_na[row] = 'F'
			wf_wcr_profile_map_sync (this, "ph_na", row, "F")
			IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
			
		CASE "ph_gt_2_lt_5"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_ph2 = data
			ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
			lb_adjoining_ph = wf_validate_adjoining(ls_temp)
			this.object.ph_na[row] = 'F'
			wf_wcr_profile_map_sync (this, "ph_na", row, "F")
			IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
			
		CASE "ph_gte_5_lte_10"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_ph3 = data
			ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
			lb_adjoining_ph = wf_validate_adjoining(ls_temp)
			this.object.ph_na[row] = 'F'
			wf_wcr_profile_map_sync (this, "ph_na", row, "F")
			IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
			
		CASE "ph_gt_10_lt_12_5"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_ph4 = data
			ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
			lb_adjoining_ph = wf_validate_adjoining(ls_temp)
			this.object.ph_na[row] = 'F'
			wf_wcr_profile_map_sync (this, "ph_na", row, "F")
			IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
			
		CASE "ph_gte_12_5"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_ph5 = data
			ls_temp = ls_ph1 + ls_ph2 + ls_ph3 + ls_ph4 + ls_ph5
			lb_adjoining_ph = wf_validate_adjoining(ls_temp)
			this.object.ph_na[row] = 'F'
			wf_wcr_profile_map_sync (this, "ph_na", row, "F")
			IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
			
		CASE "ph_na"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			IF upper(data) = 'T' THEN
				this.object.ph_lte_2[row] = 'F'
				wf_wcr_profile_map_sync (this, "ph_lte_2", row, "F")
				this.object.ph_gt_2_lt_5[row] = 'F'
				wf_wcr_profile_map_sync (this, "ph_gt_2_lt_5", row, "F")
				this.object.ph_gte_5_lte_10[row] = 'F'
				wf_wcr_profile_map_sync (this, "ph_gte_5_lte_10", row, "F")
				this.object.ph_gt_10_lt_12_5[row] = 'F'
				wf_wcr_profile_map_sync (this, "ph_gt_10_lt_12_5", row, "F")
				this.object.ph_gte_12_5[row] = 'F'
				wf_wcr_profile_map_sync (this, "ph_gte_12_5", row, "F")
			END IF
			IF lb_adjoining_ph THEN POST wf_set_ph_from_to()
		
		// MPM - 6/13/2020 - DevOps 16233
		CASE "ignitability_lt_90", "ignitability_90_139", "ignitability_140_199", "ignitability_gte_200", 'ignitability_na', "ignitability_does_not_flash", &
				"ignitability_flammable_solid", "ignitability_compare_temperature"
			IF idw_technical.Trigger Event ItemChanged (row, dwo, data) = 0 THEN
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
				li_rc = 0
			ELSE
				li_rc = 1
			END IF
		
//		//SK 07242012
//		CASE "ignitability_lt_90"
//			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			ls_ignitability_lt_90 = data
//			ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
//			lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
//			this.object.ignitability_na[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_na", row, "F")
//			this.object.ignitability_does_not_flash[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")		
//
//		CASE "ignitability_90_139"
//			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			ls_ignitability_90_139 = data
//			ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
//			lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
//			this.object.ignitability_na[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_na", row, "F")
//			this.object.ignitability_does_not_flash[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")		
//			
//		CASE "ignitability_140_199"
//			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			ls_ignitability_140_199 = data
//			ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
//			lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
//			this.object.ignitability_na[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_na", row, "F")
//			this.object.ignitability_does_not_flash[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")		
//			this.object.ignitability_does_not_flash[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")		
//			
//		CASE "ignitability_gte_200"
//			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			ls_ignitability_gte_200 = data
//			ls_temp = ls_ignitability_lt_90 +ls_ignitability_90_139 + ls_ignitability_140_199 + ls_ignitability_gte_200
//			lb_adjoining_ignitability = wf_validate_adjoining(ls_temp)
//			this.object.ignitability_na[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_na", row, "F")
//			this.object.ignitability_does_not_flash[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")		
//			
//		CASE 'ignitability_na'
//			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			IF upper(data) = 'T' THEN
//				this.object.ignitability_lt_90[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_lt_90", row, "F")
//				this.object.ignitability_90_139[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "F")
//				this.object.ignitability_140_199[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "F")
//				this.object.ignitability_gte_200[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_gte_200", row, "F")
//				this.object.ignitability_compare_temperature[row] = ll_null
//				wf_wcr_profile_map_sync (this, "ignitability_compare_temperature", row, ls_null)
//			END IF
//						//DevOps:13984
//		CASE 'ignitability_compare_temperature'
//			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			this.object.ignitability_does_not_flash[row] = 'F'
//			wf_wcr_profile_map_sync (this, "ignitability_does_not_flash", row, "F")
//
//		CASE "ignitability_does_not_flash"
//			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
//			if data = 'T' then
//				this.object.ignitability_compare_temperature[row] = ll_null
//				wf_wcr_profile_map_sync (this, 'ignitability_compare_temperature', row, ls_null)
//				this.object.ignitability_lt_90[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_lt_90", row, "F")
//				this.object.ignitability_90_139[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_90_139", row, "F")
//				this.object.ignitability_140_199[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_140_199", row, "F")
//				this.object.ignitability_gte_200[row] = 'F'
//				wf_wcr_profile_map_sync (this, "ignitability_gte_200", row, "F")
//			end if
//			
		CASE "pcb_concentration_0_49"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_pcb_conc_0_49 = data
			ls_temp = ls_pcb_conc_0_49 +ls_pcb_conc_50_499 + ls_pcb_conc_500
			lb_adjoining_pcb = wf_validate_adjoining(ls_temp)
			this.object.pcb_concentration_none[row] = 'F'
			wf_wcr_profile_map_sync (this, "pcb_concentration_none", row, "F")
			
		CASE "pcb_concentration_50_499"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_pcb_conc_50_499 = data
			ls_temp = ls_pcb_conc_0_49 +ls_pcb_conc_50_499 + ls_pcb_conc_500
			lb_adjoining_pcb = wf_validate_adjoining(ls_temp)
			this.object.pcb_concentration_none[row] = 'F'
			wf_wcr_profile_map_sync (this, "pcb_concentration_none", row, "F")
			
		CASE "pcb_concentration_500"
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			ls_pcb_conc_500 = data
			ls_temp = ls_pcb_conc_0_49 +ls_pcb_conc_50_499 + ls_pcb_conc_500
			lb_adjoining_pcb = wf_validate_adjoining(ls_temp)
			this.object.pcb_concentration_none[row] = 'F'
			wf_wcr_profile_map_sync (this, "pcb_concentration_none", row, "F")
			
		CASE 'pcb_concentration_none'
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			IF upper(data) = 'T' THEN
				this.object.pcb_concentration_0_49[row] = 'F'
				wf_wcr_profile_map_sync (this, "pcb_concentration_0_49", row, "F")
				this.object.pcb_concentration_50_499[row] = 'F'
				wf_wcr_profile_map_sync (this, "pcb_concentration_50_499", row, "F")
				this.object.pcb_concentration_500[row] = 'F'
				wf_wcr_profile_map_sync (this, "pcb_concentration_500", row, "F")
			END IF
		
		CASE "exempt_id"
			for ll_i = 1 to idw_approval.RowCount()
				if idw_approval.object.screen_access[ll_i] <> "N" and &
					idw_approval.object.profitcenter_surcharge_flag[ll_i] = "T" and &
					idw_approval.object.sr_type_code[ll_i] = "E" then
			
					idw_approval.object.srec_exempt_id[ll_i] = Long(data)
				end if
			next

		CASE "waste_contains_spec_hand_none"
			IF data = "T" THEN
				// rb 06/20/2012 Need to sync data to other Profile tab(s)
				//DevOps:13984 - Broke code to separate function since max since exceed the code
                    wf_waste_contains_spec_hand_none(this, row)
				
				ls_find = ("lower(description) = 'mi norm/tenorm'")
				ll_find_row = idw_section_select.Find(ls_find, 1, idw_section_select.Rowcount() + 1)
				IF ll_find_row > 0 THEN idw_section_select.Object.show_field[ll_find_row] = 'F'
			ELSE
				SetItem(row,"section_f_none_apply_flag","F")
				wf_wcr_profile_map_sync (this, "section_f_none_apply_flag", row, "F")
				wf_wcr_profile_map_sync (this, "waste_contains_spec_hand_none", row, "F")
			END IF		
		CASE "asbestos_flag"
			IF data = 'F' THEN
				SetItem(row,"asbestos_friable_flag","U")
				wf_wcr_profile_map_sync (this, "asbestos_friable_flag", row, "U")
			END IF
		CASE "react_sulfide_ppm"
			IF Len(data) > 0 THEN
				SetItem(row,"react_sulfide","T")
				wf_wcr_profile_map_sync (this, "react_sulfide", row, "T")
			END IF
		CASE "reactcyanide_ppm"
			IF Len(data) > 0 THEN
				SetItem(row,"reactcyanide","T")
				wf_wcr_profile_map_sync (this, "reactcyanide", row, "T")
			END IF
		CASE "reactive_other_description"
			IF Len(data) > 0 THEN
				SetItem(row,"reactive_other","T")
				wf_wcr_profile_map_sync (this, "reactive_other", row, "T")
			END IF
		CASE "react_sulfide"
			IF data = 'F' THEN
				SetItem(row,"react_sulfide_ppm", ld_null)
				wf_wcr_profile_map_sync (this, "react_sulfide_ppm", row, ls_null)
			END IF
		CASE "reactcyanide"
			IF data = 'F' THEN
				SetItem(row,"reactcyanide_ppm", ld_null)
				wf_wcr_profile_map_sync (this, "reactcyanide_ppm", row, ls_null)
			END IF

		//COR2-MPM - 1/31/2019 - Commenting out the following 2 CASE statements - they will later be updated
		/*
		CASE "free_liquid", "metal_fines", "water_reactive", "biohazard", "shock_sensitive_waste", "oily_residue" &
				, "dioxins", "furans", "aluminum", "asbestos_non_friable", "asbestos_friable", "radioactive_waste", &
				"air_reactive", "isocyanates", "biodegradable_sorbents", "pyrophoric_waste", "react_sulfide", "react_cyanide" &
				, "explosives", "temp_ctrl_org_peroxide", "norm", "tenorm"
	
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			IF data = "T" THEN
				SetItem(row,"waste_contains_spec_hand_none","F")
				wf_wcr_profile_map_sync (this, "waste_contains_spec_hand_none", row, "F")
//				IF (lower(dwo.name) = 'norm') OR (lower(dwo.name) = 'tenorm') THEN 
//					// Show supplemental form NORM
//					ls_find = ("lower(description) = 'mi norm/tenorm'")
//					ll_find_row = idw_section_select.Find(ls_find, 1, idw_section_select.Rowcount() + 1)
//					IF ll_find_row > 0 THEN idw_section_select.Object.show_field[ll_find_row] = 'T'
//				END IF
//			ELSE
//				IF ((lower(dwo.name) = 'norm') AND this.object.Tenorm[row] = 'F') &
//				OR ((lower(dwo.name) = 'tenorm') AND this.object.norm[row] = 'F') THEN 
//					// Show supplemental form NORM
//					ls_find = ("lower(description) = 'mi norm/tenorm'")
//					ll_find_row = idw_section_select.Find(ls_find, 1, idw_section_select.Rowcount() + 1)
//					IF ll_find_row > 0 THEN idw_section_select.Object.show_field[ll_find_row] = 'F'
//				END IF
			END IF
		CASE "used_oil"
			If data <> "T" Then
				dw_wcr_display_1.Object.wwa_halogen_gt_1000[row] = ls_null
				wf_wcr_profile_map_sync (this, "wwa_halogen_gt_1000", row, ls_null)
				dw_wcr_display_1.Object.halogen_source[row] = ls_null
				wf_wcr_profile_map_sync (this, "halogen_source", row, ls_null)
				dw_wcr_display_1.Object.halogen_source_desc[row] = ls_null
				wf_wcr_profile_map_sync (this, "halogen_source_desc", row, ls_null)
				dw_wcr_display_1.Object.halogen_source_other[row] = ls_null
				wf_wcr_profile_map_sync (this, "halogen_source_other", row, ls_null)
			End If
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		*/
		// COR2 - MPM - Need to fix the following CASE statement later - commenting it out for now
		/*
		CASE 'subject_to_mact_neshap'
			IF upper(data) = 'F' OR upper(data) = 'U' THEN
				dw_wcr_display_1.object.neshap_chem_1[row] = ls_null
				wf_wcr_profile_map_sync (this, "neshap_chem_1", row, ls_null)
				dw_wcr_display_1.object.neshap_chem_2[row] = ls_null
				wf_wcr_profile_map_sync (this, "neshap_chem_2", row, ls_null)
				dw_wcr_display_1.object.neshap_standards_part[row] = ll_null
				wf_wcr_profile_map_sync (this, "neshap_standards_part", row, ls_null)
				dw_wcr_display_1.object.neshap_subpart[row] = ls_null
				wf_wcr_profile_map_sync (this, "neshap_subpart", row, ls_null)
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		*/
		CASE 	'processed_into_non_liquid'
			IF Upper(data) = 'U' THEN
				dw_wcr_display_1.object.processd_into_nonlqd_prior_pcb[row] = 'U'
				wf_wcr_profile_map_sync (this, "processd_into_nonlqd_prior_pcb", row, 'U')
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			
		CASE 'rcra_exempt_flag'	
//			IF upper(data) = 'F' THEN
//				// if listed, characteristic or state_code is set then Haz, else Non-haz
//				ls_rcra_listed	= Upper(this.object.rcra_listed[row])
//				ls_rcra_characteristic = Upper(this.object.rcra_characteristic[row])
//				ls_state_haz = Upper(this.object.state_waste_code_flag[row])
//				
//				IF (ls_rcra_listed = 'T' OR ls_rcra_characteristic = 'T' OR ls_state_haz = 'T') THEN
//					data = 'H' // haz
//				ELSE
//					data = 'N'	// non-haz
//				END IF
//			END IF

// DevOps 17190 - Use ll_hdr_row instead of (row) for this column fhc.8/25/2020
			IF Upper(data) <> 'T'THEN
				This.object.rcra_exempt_reason[row] = ls_null
				// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
				wf_wcr_profile_map_sync (this, "rcra_exempt_reason", row, ls_null)
			END IF
			
			// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			POST wf_set_rcra_haz_flag()
			
		// SK 07/11/2014
		CASE 'odor_desc'
			IF lower(data) <> 'other' THEN
				This.object.odor_other_desc[row] = ls_null
				wf_wcr_profile_map_sync (this, "odor_other_desc", row, ls_null)
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)

		// COR2-MPM			
		CASE "container_type_combination"
			if  data = "F" then  
				this.Object.container_type_combination_desc[row] = ls_null
				wf_wcr_profile_map_sync (this, 'container_type_combination_desc', row, ls_null)
			end if
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		CASE "container_type_other"
			if  data = "F" then  
				this.Object.container_type_other_desc[row] = ls_null
				wf_wcr_profile_map_sync (this, 'container_type_other_desc', row, ls_null)
			end if
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		CASE "handling_issue"
			if data <> 'T' then
				this.Object.handling_issue_desc[row] = ls_null
				wf_wcr_profile_map_sync (this, 'handling_issue_desc', row, ls_null)
			end if
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		// COR2 - MPM
		CASE 'section_f_none_apply_flag'
			// COR2 - MPM - Need clear out fields and/or set radio buttons to "No" and sync data to other Profile tab(s)
			// DevOps:16821 - instead of empty string passing ls_null to react_sulfide_ppm and react_sulfide_ppm
			IF data = 'T' THEN
				SetItem(row,"explosives","F")
				wf_wcr_profile_map_sync (this, "explosives", row, "F")
				SetItem(row,"react_sulfide","F")
				wf_wcr_profile_map_sync (this, "react_sulfide", row, "F")
				SetItem(row,"react_sulfide_ppm", ld_null)
				wf_wcr_profile_map_sync (this, "react_sulfide_ppm", row, ls_null)
				SetItem(row,"shock_sensitive_waste","F")
				wf_wcr_profile_map_sync (this, "shock_sensitive_waste", row, "F")
				SetItem(row,"reactcyanide","F")
				wf_wcr_profile_map_sync (this, "reactcyanide", row, "F")
				SetItem(row,"reactcyanide_ppm", ld_null)
				wf_wcr_profile_map_sync (this, "reactcyanide_ppm", row, ls_null)
				SetItem(row,"radioactive","F")
				wf_wcr_profile_map_sync (this, "radioactive", row, "F")
				SetItem(row,"reactive_other","F")
				wf_wcr_profile_map_sync (this, "reactive_other", row, "F")
				SetItem(row,"reactive_other_description","")
				wf_wcr_profile_map_sync (this, "reactive_other_description", row, "")
				SetItem(row,"biohazard","F")
				wf_wcr_profile_map_sync (this, "biohazard", row, "F")
				SetItem(row,"contains_pcb","F")
				wf_wcr_profile_map_sync (this, "contains_pcb", row, "F")
				SetItem(row,"dioxins_or_furans","F")
				wf_wcr_profile_map_sync (this, "dioxins_or_furans", row, "F")
				SetItem(row,"metal_fines_powder_paste","F")
				wf_wcr_profile_map_sync (this, "metal_fines_powder_paste", row, "F")
				SetItem(row,"pyrophoric_waste","F")
				wf_wcr_profile_map_sync (this, "pyrophoric_waste", row, "F")
				SetItem(row,"temp_ctrl_org_peroxide","F")
				wf_wcr_profile_map_sync (this, "temp_ctrl_org_peroxide", row, "F")
				SetItem(row,"thermally_unstable","F")
				wf_wcr_profile_map_sync (this, "thermally_unstable", row, "F")
				SetItem(row,"biodegradable_sorbents","F")
				wf_wcr_profile_map_sync (this, "biodegradable_sorbents", row, "F")
				SetItem(row,"compressed_gas","F")
				wf_wcr_profile_map_sync (this, "compressed_gas", row, "F")
				SetItem(row,"used_oil","F")
				wf_wcr_profile_map_sync (this, "used_oil", row, "F")
				SetItem(row,"oxidizer","F")
				wf_wcr_profile_map_sync (this, "oxidizer", row, "F")
				SetItem(row,"tires","F")
				wf_wcr_profile_map_sync (this, "tires", row, "F")
				SetItem(row,"organic_peroxide","F")
				wf_wcr_profile_map_sync (this, "organic_peroxide", row, "F")
				SetItem(row,"beryllium_present","F")
				wf_wcr_profile_map_sync (this, "beryllium_present", row, "F")
				SetItem(row,"asbestos_flag","F")
				wf_wcr_profile_map_sync (this, "asbestos_flag", row, "F")
				SetItem(row,"asbestos_friable_flag","U")
				wf_wcr_profile_map_sync (this, "asbestos_friable_flag", row, "U")
				SetItem(row,"ammonia_flag","F")
				wf_wcr_profile_map_sync (this, "ammonia_flag", row, "F")
				SetItem(row,"hazardous_secondary_material","F")
				// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
				wf_wcr_profile_map_sync (this, "hazardous_secondary_material", row, "F")
				SetItem(row,"hazardous_secondary_material_cert","F")
				// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
				wf_wcr_profile_map_sync (this, "hazardous_secondary_material_cert", row, "F")
				
				//COR2 JXM 04/09/2019 ISSUE 10104 set Pharmaecuticla wastes prefill rb to 'U' = N/A instead of 'N' = No
				//SetItem(row,"pharma_waste_subject_to_prescription","F")
				//wf_wcr_profile_map_sync (this, "pharma_waste_subject_to_prescription", row, "F")
				//DevOps:16758
				SetItem(row,"pharma_waste_subject_to_prescription","U")
				// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
				wf_wcr_profile_map_sync (this, "pharma_waste_subject_to_prescription", row, "U")
				
				SetItem(row,"waste_contains_spec_hand_none","T")
				wf_wcr_profile_map_sync (this, "waste_contains_spec_hand_none", row, "T")
				wf_wcr_profile_map_sync (this, "section_f_none_apply_flag", row, "T")
				SetItem(row,"pfas_flag","F")
				wf_wcr_profile_map_sync (this, "pfas_flag", row, "F")

			ELSE
				SetItem(row,"waste_contains_spec_hand_none","F")
				wf_wcr_profile_map_sync (this, "waste_contains_spec_hand_none", row, "F")
				wf_wcr_profile_map_sync (this, "section_f_none_apply_flag", row, "F")
			END IF			// DON'T call wf_wcr_profile_map_sync when a change is made to this column
		CASE 'state_waste_code_flag'
			// If the None checkbox is checked for state waste codes, query the user, then remove all state waste codes
			IF data = 'F' AND idw_waste_code_state.RowCount() > 0 THEN
				li_ans = MessageBox(gs_app_name + ": Warning","If you check this box, all state waste codes will be deleted.  Do you want to continue?",Question!,YesNo!)
				if li_ans = 2 then				
					// Don't allow the value to change
					RETURN 2
				end if
				FOR ll_idx = idw_waste_code_state.RowCount() TO 1 STEP -1
					ldwItemStatus = idw_waste_code_state.GetItemStatus(ll_idx, 0, Primary!)
					//DevOps:19187 - Don't remove PA wastecodes when removing state waste codes and set tx wastecode field to empty string
					ls_pa_waste_code =  idw_waste_code_state.object.state[ll_idx]
					IF ls_pa_waste_code <> 'PA' AND ls_pa_waste_code <> 'TX' THEN 
						IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
							idw_waste_code_state.RowsDiscard(ll_idx, ll_idx, Primary!)
						ELSE
							wf_audit(idw_waste_code_state, ll_profile_id, ll_idx, TRUE)
							idw_waste_code_state.DeleteRow(ll_idx)
						END IF 
						ib_changed_waste_code = TRUE
						This.object.state_waste_codes.text = ''
						is_state_waste_codes = ''
						//This.Object.texas_state_waste_code.text = ''
						//is_tx_state_waste_codes = ''
					END IF
//					This.Object.pa_state_waste_codes.text = ''
//					is_pa_state_waste_codes = ''
				NEXT
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		CASE 'rcra_waste_code_flag'
			// If the None checkbox is checked for RCRA waste codes, query the user, then remove all RCRA waste codes
			IF data = 'F' AND idw_waste_code_fed.RowCount() > 0 THEN
				li_ans = MessageBox(gs_app_name + ": Warning","If you check this box, all RCRA waste codes will be deleted.  Do you want to continue?",Question!,YesNo!)
				 if li_ans = 1 THEN 
					 FOR i = 1 TO UpperBound(is_rcra_waste_codes_for_g4[] )
						IF is_rcra_waste_codes_for_g4[i]  <> ''  THEN
							 is_rcra_waste_codes_for_g4[i] = ''
						END IF
				      NEXT
				 end if
				if li_ans = 2 then				
					// Don't allow the value to change
					RETURN 2
				end if
				FOR ll_idx = idw_waste_code_fed.RowCount() TO 1 STEP -1
					ldwItemStatus = idw_waste_code_fed.GetItemStatus(ll_idx, 0, Primary!)
					IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
						idw_waste_code_fed.RowsDiscard(ll_idx, ll_idx, Primary!)
					ELSE
						wf_audit(idw_waste_code_fed, ll_profile_id, ll_idx, TRUE)
						idw_waste_code_fed.DeleteRow(ll_idx)
					END IF 
					ib_changed_waste_code = TRUE
				NEXT
				This.object.rcra_waste_codes[row] = ''
				is_rcra_waste_codes = ''
			END IF
			// DevOps 17190 Use ll_hdr_row instead of (row) for this column. Multiple Profile issue. fhc.
			// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			
		CASE 'pa_residual_waste_flag'
			// If No or Clear was selected AND there is at least one PA waste code on the profile, query the user, then remove all PA waste codes
			IF (data = 'F' OR data = 'U') AND idw_waste_code_state.Find("state='PA'", 1, idw_waste_code_state.RowCount() + 1) > 0 THEN
				li_ans = MessageBox(gs_app_name + ": Warning","If you check this box, all PA state waste codes will be deleted.  Do you want to continue?",Question!,YesNo!)
				if li_ans = 2 then				
					// Don't allow the value to change
					RETURN 2
				end if
				FOR ll_idx = idw_waste_code_state.RowCount() TO 1 STEP -1
					IF idw_waste_code_state.Object.state[ll_idx] = 'PA' THEN
						ldwItemStatus = idw_waste_code_state.GetItemStatus(ll_idx, 0, Primary!)
						IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
							idw_waste_code_state.RowsDiscard(ll_idx, ll_idx, Primary!)
						ELSE
							wf_audit(idw_waste_code_state, ll_profile_id, ll_idx, TRUE)
							idw_waste_code_state.DeleteRow(ll_idx)
						END IF 
					END IF
					ib_changed_waste_code = TRUE
				NEXT
				This.object.pa_state_waste_codes.text = ''
				is_pa_state_waste_codes = ''
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		CASE 'rq_reason'
			// DevOps 16671 - Parenthesis are not allowed FHC 7/6/2020
			 IF match(data, '[()]') = True THEN
				 MessageBox(gs_app_name + ': RQ Reason','Parentheses are not allowed.  Please re-enter a value without parentheses.')
				 Return 2    // Reject value
			ELSE
				 wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			 END IF
		CASE else
			//COR2 JXM 04/04/2019 do not allow radioactive page 2 to enter map sync due to multiple rows issue
			//DevOps 17190 FHC    do not allow additional properties to enter map sync due to multiple rows issue
			if this.dataobject <> 'd_profile_radioactive_supplement_page_2' and this.dataobject <> 'd_profile_additional_properties_form_dragon' then
				wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			end if
	END CHOOSE
END IF

// MPM - 2/27/19 - Task 9303 - Profile form validation
if this.dataobject = "d_profile_ship_pkg_info_form_dragon_2" THEN 
	choose case lower(dwo.Name)
		//JXM - DevOps 11417 07/09/2019 - Remove Waste text from from DOT Shipping	Desc and add to DOT Shipping Name
	    CASE "dot_waste_flag"
			// MPM - 4/6/2020 - DevOps 14844
			// MPM - 7/9/2020 - DevOps 16735
			// MPM - 7/23/2020 - DevOps 16885 - Replaced ll_hdr_row with row in the next 2 lines
			wf_set_DOT_shipping_name(data, row, idw_wcr_display_1)
			ls_dot_shipping_name = this.object.dot_shipping_name[row]
			// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
			POST wf_wcr_profile_map_sync (this, 'dot_shipping_name', row, ls_dot_shipping_name)
		CASE "reportable_quantity_flag"
			// 20200504 jcb #15392 repl if  Upper(data) = "F" then // sagar 26822 - removed Upper(data) = "T" or
			if  Upper(data) = "F" or Upper(data) = 'U' then // 20200504 jcb #15392 same action for U-clear
				this.Object.profile_rq_threshold[row] = ld_null
			end if
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		
			// rb 05/23/2012
		case "shipping_frequency"
			this.Object.shipping_frequency_other[row] = ""
			IF Upper(data) = '1' THEN
				// 10/16 SK set the detail one-time to yes
				idw_detail.object.one_time_only[1] = 'T'
				idw_detail.Object.reapproval_allowed[1] = 'F'
			ELSE 
				IF (idw_detail.object.one_time_only[1] = 'T') THEN
					idw_detail.object.one_time_only[1] = 'F'
				END IF
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			wf_wcr_profile_map_sync (this, 'shipping_frequency_other', row, '')
			
		// If the user is unchecking either the Totes or Drums checkboxes, so that both will be unchecked, and if there are any standard bill unit container sizes entered,
		// ask the user if they want to proceed with unchecking the checkbox because, if they do, those container sizes will be deleted.
		CASE "container_type_totes", "container_type_drums", "container_type_pallet", "container_type_boxes", "container_type_cylinder"
			ll_find_row = idw_container_size.Find("is_bill_unit_table_lookup='T'", 1, idw_container_size.RowCount() + 1)
			IF ll_find_row > 0 THEN
				IF data = 'F' THEN //DevOps #15241 info_gde 05/01/2020; Add New Profile (Profile Tab) - Section C. (list box not showing container)
					IF lower(dwo.Name) = 'container_type_totes' AND This.Object.container_type_drums[row] = 'F' OR &  
						lower(dwo.Name) = 'container_type_drums' AND This.Object.container_type_totes[row] = 'F'  OR &    
						lower(dwo.Name) = 'container_type_pallet' AND (This.Object.container_type_bulk[row] = 'F' OR &
						IsNull(This.Object.container_type_bulk[row])) AND (This.Object.container_type_boxes[row] = 'F' OR &
						IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_cylinder[row] = 'F' OR &
						IsNull(This.Object.container_type_cylinder[row])) OR lower(dwo.Name) = 'container_type_boxes' AND &
						(This.Object.container_type_pallet[row] = 'F' OR IsNull(This.Object.container_type_pallet[row])) AND &
						(This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) AND &
						(This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row])) OR &
						lower(dwo.Name) = 'container_type_cylinder' AND (This.Object.container_type_pallet[row] = 'F'  OR &
						IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_boxes[row] = 'F' OR &
						IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_bulk[row] = 'F' OR &
						IsNull(This.Object.container_type_bulk[row]))THEN
							
							li_ans = MessageBox(gs_app_name + ": Warning","If you uncheck this box, standard bill unit container size(s) will be deleted.  Do you want to continue?",Question!,YesNo!)
							if li_ans = 1 then
								FOR ll_idx = idw_container_size.RowCount() TO 1 STEP -1
									IF idw_container_size.Object.is_bill_unit_table_lookup[ll_idx] = 'T' THEN
										ldwItemStatus = idw_container_size.GetItemStatus(ll_idx, 0, Primary!)
										IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
											idw_container_size.RowsDiscard(ll_idx, ll_idx, Primary!)
										ELSE
											wf_audit(idw_container_size, ll_profile_id, ll_idx, TRUE)
											idw_container_size.DeleteRow(ll_idx)
										END IF 
									END IF
								NEXT
								
							else
								RETURN 2
							end if
					END IF
				END IF
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
			
		// If the user is unchecking either the Bulk, Pallet, Boxes or Cylinder checkboxes, so that all 4 will be unchecked, and if there is a typed-in bill unit container size entered,
		// ask the user if they want to proceed with unchecking the checkbox because, if they do, that container size will be deleted.
		//DevOps #15241 info_gde 05/01/2020; Add New Profile (Profile Tab) - Section C. (list box not showing container)

		CASE "container_type_bulk" //, "container_type_pallet", "container_type_boxes", "container_type_cylinder"
			ll_find_row = idw_container_size.Find("is_bill_unit_table_lookup='F'", 1, idw_container_size.RowCount() + 1)
			IF ll_find_row > 0 THEN
				IF data = 'F' THEN//DevOps #15241 info_gde 05/01/2020; 
					IF lower(dwo.Name) = 'container_type_bulk' THEN //AND (This.Object.container_type_pallet[row] = 'F' OR IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_boxes[row] = 'F' OR IsNull(This.Object.container_type_boxes[row]))AND (This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row])) THEN
//					
//					OR &
//						lower(dwo.Name) = 'container_type_pallet' AND (This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) AND (This.Object.container_type_boxes[row] = 'F' OR IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row]))OR &
//						lower(dwo.Name) = 'container_type_boxes' AND (This.Object.container_type_pallet[row] = 'F' OR IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) AND (This.Object.container_type_cylinder[row] = 'F' OR IsNull(This.Object.container_type_cylinder[row])) OR &
//						lower(dwo.Name) = 'container_type_cylinder' AND (This.Object.container_type_pallet[row] = 'F'  OR IsNull(This.Object.container_type_pallet[row])) AND (This.Object.container_type_boxes[row] = 'F' OR IsNull(This.Object.container_type_boxes[row])) AND (This.Object.container_type_bulk[row] = 'F' OR IsNull(This.Object.container_type_bulk[row])) THEN
							//DevOps #15241 info_gde 05/01/2020
							li_ans = MessageBox(gs_app_name + ": Warning","If you uncheck this box, the container size with a typed-in bill unit will be deleted.  Do you want to continue?",Question!,YesNo!)
							if li_ans = 1 then
								FOR ll_idx = idw_container_size.RowCount() TO 1 STEP -1
									IF idw_container_size.Object.is_bill_unit_table_lookup[ll_idx] = 'F' THEN
										ldwItemStatus = idw_container_size.GetItemStatus(ll_idx, 0, Primary!)
										IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
											idw_container_size.RowsDiscard(ll_idx, ll_idx, Primary!)
										ELSE
											wf_audit(idw_container_size, ll_profile_id, ll_idx, TRUE)
											idw_container_size.DeleteRow(ll_idx)
										END IF 
									END IF
								NEXT
							else
								RETURN 2
							end if
					END IF
				END IF
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		// MPM - COR2 - 2/27/19 - Task 9303 - Profile form validation
		// Reject the value if it isn't "" or isn't 10 numbers long
		CASE 'emergency_phone_number'
			IF Len(Trim(data)) <> 10 AND Len(Trim(data)) <> 0 THEN
				// Don't allow the value to change
				RETURN 2
			END IF
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		// MPM - 5/1/2020 - DevOps 15385
		// If "DOT Hazardous Materials" is changed to "No" or "Clear", warn the user that this will clear all Proper Shipping Name-related fields. 
		// MPM - 7/1/2020 - DevOps 16630 - Changed so that when the HM flag is unchecked, query the user to continue or not, and do not clear out
		// any DOT Shipping Description-related fields.
		CASE 'hazmat'
			IF data = 'F' OR data = 'U' THEN
				IF data = 'F' THEN ls_hazmat = 'No'
				IF data = 'U' THEN ls_hazmat = 'Clear'
//				li_ans = MessageBox(gs_app_name + ": Warning",'If C1 - "DOT Hazardous Materials" is changed to "' + ls_hazmat + '", all Proper Shipping Name-related fields will be cleared.  Do you want to continue?',Question!,YesNo!)
				li_ans = MessageBox(gs_app_name + ": Warning",'The DOT Hazardous Materials value may only be "No" or "Clear" if the material does not require a hazardous materials ' + &
					'shipping paper.  EQAI will print information in Section C on manifests, bills of lading, and markings/labels.  If the DOT Hazardous Materials value is changed to "No" or "Clear", please ensure ' + &
					'nothing in Section C represents all or part of a DOT-regulated description.  Note - RCRA Hazardous Wastes always require the DOT Hazardous Materials value ' + &
					'to be "Yes".  ~r~n~r~nDo you want to continue?',Question!,YesNo!)
				IF li_ans = 1 THEN 
//					wf_clear_proper_shipping_name_fields(idw_wcr_display_1, row)
				END IF
				IF li_ans = 2 THEN				
					// Don't allow the value to change
					RETURN 2
				END IF
			END IF
		// MPM - 1/13/2022 - DevOps 21647
		CASE "dot_shipping_name"
			IF (Upper(Left(LeftTrim(data), 6)) = "WASTE " OR Upper(Left(LeftTrim(data), 6)) = "WASTE,") AND (IsNull(This.object.dot_waste_flag[row]) OR This.object.dot_waste_flag[row] <> 'T') THEN
				li_ans = MessageBox(gs_app_name + ': DOT Waste','If you would like the DOT Shipping Name to begin with the word "Waste,", please use the Waste checkbox to denote this.  Do you want to set the Waste checkbox?', Question!, YesNo!)
				IF li_ans = 1 THEN
					This.Object.dot_waste_flag[row] = 'T'
					POST wf_wcr_profile_map_sync (this, 'dot_waste_flag', row, 'T')
				END IF
			END IF
		CASE else
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	END CHOOSE
END IF

IF NOT lb_adjoining_ph THEN li_rc = 1	
IF NOT lb_adjoining_pcb THEN li_rc = 1	
IF NOT lb_adjoining_ignitability THEN li_rc = 1	

//IF li_rc = 0 THEN
//	// is this a template, if so is user changing locked field ?
//	IF ll_template_form_id > 0 OR ll_source_form_id > 0 THEN
//		ls_col_type = this.describe(dwo.name + '.coltype')
//		IF NOT wf_match_to_template(FALSE, dwo.Name, ls_col_type, string(data)) THEN
//			ls_lock_name = this.Describe(dwo.name + '.tag')
//			IF len(ls_lock_name) > 0 THEN
//				// if the tag does not correctly specify the lock bmp on dw, correct it
//				IF Pos(ls_lock_name, '_lock') = 0 THEN ls_lock_name = ls_lock_name + '_lock'
//				ls_lock_file = Lower(this.Describe(ls_lock_name + '.FileName'))
//				IF ls_lock_file <> '"c:\eqai-dev\resources\unlock.bmp"' THEN 
//					ls_err = this.Modify(ls_lock_name + '.FileName="c:\eqai-dev\resources\unlock.bmp"')
//				END IF
//			END IF
//		END IF
//	END IF
//END IF

// MPM - COR2
//DevOps:16515 - When copy profile header has 2 records is casuing the problem. so using ll_hdr_row instead of row
if this.dataobject = "d_profile_ship_pkg_info_form_dragon_2"  then
	POST wf_build_dot_shipping_desc()
	// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
	POST wf_wcr_profile_map_sync (this, dwo.Name, row, data)
end if

// MPM - COR2
IF This.Dataobject = "d_profile_additional_properties_form_dragon" AND dwo.Name <> 'section_f_none_apply_flag' THEN
	//wf_wcr_profile_map_sync (this, dwo.Name, row, data)
	
	// Uncheck "None Apply" checkbox based on other Section F values, if needed
	CHOOSE CASE Lower(dwo.Name)
		CASE "explosives", "react_sulfide", "shock_sensitive_waste", "reactcyanide", "radioactive", "reactive_other", "biohazard", "contains_pcb", "dioxins_or_furans", &
				"metal_fines_powder_paste", "pyrophoric_waste", "temp_ctrl_org_peroxide", "thermally_unstable", "biodegradable_sorbents", "compressed_gas", &
				"used_oil", "oxidizer", "tires", "organic_peroxide", "beryllium_present", "asbestos_flag", "ammonia_flag", "hazardous_secondary_material", &
				"hazardous_secondary_material_cert", "pharma_waste_subject_to_prescription" , "pfas_flag"
			IF data = 'T' OR data = 'U' THEN
				wf_wcr_profile_map_sync (this, "section_f_none_apply_flag", row, "F")
				This.Object.section_f_none_apply_flag[row] = 'F'
				wf_wcr_profile_map_sync (this, "waste_contains_spec_hand_none", row, "F")
				This.Object.waste_contains_spec_hand_none[row]= 'F'
			END IF
			// MPM - 7/2/2020 - DevOps 16649 - The two lines below were added under DevOps 16515.  I don't know why, and they're
			// causing F23 and F24 to be incorrectly updated following any change to F1 through F22, so I'm commenting them out.
//			wf_wcr_profile_map_sync (this, "hazardous_secondary_material", ll_hdr_row, data)
//			IF ib_new_record = TRUE THEN 
//			     wf_wcr_profile_map_sync (this, "pharma_waste_subject_to_prescription", 1, data)
//			ELSE
//				 wf_wcr_profile_map_sync (this, "pharma_waste_subject_to_prescription", ll_hdr_row, data)
//			END IF
		CASE "asbestos_friable_flag"
			IF data = 'F' OR data = 'N' THEN
				wf_wcr_profile_map_sync (this, "section_f_none_apply_flag", row, "F")
				This.Object.section_f_none_apply_flag[row] = 'F'
				wf_wcr_profile_map_sync (this, "waste_contains_spec_hand_none", row, "F")
				This.Object.waste_contains_spec_hand_none[row]= 'F'
			END IF
		CASE "react_sulfide_ppm", "reactcyanide_ppm", "reactive_other_description"
			IF Len(data) > 0 THEN
				wf_wcr_profile_map_sync (this, "section_f_none_apply_flag", row, "F")
				This.Object.section_f_none_apply_flag[row] = 'F'
				wf_wcr_profile_map_sync (this, "waste_contains_spec_hand_none", row, "F")
				This.Object.waste_contains_spec_hand_none[row]= 'F'
			END IF
	END CHOOSE
	
	CHOOSE CASE Lower(dwo.Name)
	// DevOps 17190 - Set the row variable correctly depending on the header row being updated. fhc.8/25/2020
		CASE "hazardous_secondary_material", "hazardous_secondary_material_cert", "pharma_waste_subject_to_prescription"
			// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)
		CASE ELSE
			wf_wcr_profile_map_sync (this, dwo.Name, row, data)		
	END CHOOSE
END IF

// MPM - 2/21/2020 - DevOps 13959
// Set Section G question 3 values, based upon other Section G question 3 values
IF This.Dataobject = "d_profile_regulatory_information_dragon_g" THEN
	wf_wcr_section_g3_modify(idw_wcr_display_1, dwo.Name, row, data)
	// MPM - 3/17/2021 - DevOps 19724 - Changed ll_hdr_row in the line below back to row
	wf_wcr_profile_map_sync (this,dwo.Name, row, data)
	//wf_wcr_profile_map_sync (this, "waste_water_flag", ll_hdr_row, data)
END IF

// DevOps:16515
IF This.Dataobject = "d_profile_characterization_form_dragon" THEN
	choose case dwo.Name
		case  'texas_waste_material_type'
				//DevOps:37411 - AM - 02/24/2022
			// If No or Clear was selected AND there is at least one TX waste code on the profile, query the user, then remove all TX waste codes
			IF (data = 'C') AND idw_waste_code_state.Find("state='TX'", 1, idw_waste_code_state.RowCount() + 1) > 0 THEN
				li_ans = MessageBox(gs_app_name + ": Warning","If you check this box, All TX state waste codes will be deleted. Do you want to continue?",Question!,YesNo!)
				if li_ans = 2 then				
					// Don't allow the value to change
					RETURN 2
				end if
				FOR ll_idx = idw_waste_code_state.RowCount() TO 1 STEP -1
					IF idw_waste_code_state.Object.state[ll_idx] = 'TX' THEN
						ldwItemStatus = idw_waste_code_state.GetItemStatus(ll_idx, 0, Primary!)
						IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
							idw_waste_code_state.RowsDiscard(ll_idx, ll_idx, Primary!)
						ELSE
							//wf_audit(idw_waste_code_state, ll_profile_id, ll_idx, TRUE)
							idw_waste_code_state.DeleteRow(ll_idx)
						END IF 
					END IF
					ib_changed_waste_code = TRUE
				NEXT
				This.object.texas_state_waste_code.text = ''
				is_tx_state_waste_codes = ''
			END IF
			
			// MPM - 3/10/2021 - DevOps 19724 - Changed ll_hdr_row in the row below back to row
            wf_wcr_profile_map_sync (this, "texas_waste_material_type", row, data)
		case "pa_residual_waste_flag"
			// MPM - 3/10/2021 - DevOps 19724 - Changed ll_hdr_row in the row below back to row
		   wf_wcr_profile_map_sync (this, "pa_residual_waste_flag", row, data)				
		case else
	end choose		
END IF 

if (this.dataobject = 'd_profile_radioactive_supplement_page_2') then
	choose case dwo.Name
		case  'additional_inventory_flag'
             li_rc =  0                       // accept the data  
		case else
	end choose			 
end if

// MPM - 4/28/2020 - DevOps 15422 - Commented out the line below, since this function is already called earlier in this script
// 20200331 jcb #14993 further manipultion here ciz maximum_script_exceeded
//li_rc = wf_set_rad_supplements_2 (dwo.Name, row, data )

// MPM - 4/19/2020 - DevOps 15205 - Commenting out block below
////DevOps #15003 info_gde - start
//if (this.dataobject = 'd_profile_radioactive_supplement_page_3') then	
//    li_rc = wf_set_rad_supplements_3 (dwo.Name, row, data )
//end if
////DevOps #15003 info_gde - end

// 20200429 jcb #15424 add
//DevOps:16515 - When copy profile header has 2 records is casuing the problem. so using ll_hdr_row instead of row
if (this.dataobject = 'd_profile_generator_certification_dragon_h') then
	wf_specific_tech_requested(dwo.name, row , data)
	// MPM - 3/10/2021 - DevOps 19724 - Changed ll_hdr_row in the row below back to row
	wf_wcr_profile_map_sync (this, dwo.Name, row, data) 
end if

//DevOps 16797 Clear out values if Checkbox are False FHC
IF This.Dataobject = "d_profile_radioactive_supplement_page_1" THEN
CHOOSE CASE dwo.Name
	CASE 'profileradioactive_uranium_thorium_flag'
		ls_flag   = this.GetItemString( row,'profileradioactive_uranium_thorium_flag')
		IF ls_flag = 'F' THEN
			this.SetItem(row,'profileradioactive_uranium_concentration',ls_null)
		END IF
	
	CASE 'profileradioactive_radium_226_flag'
		ls_flag   = this.GetItemString( row,'profileradioactive_radium_226_flag')
		IF ls_flag = 'F' THEN
			this.SetItem( row,'profileradioactive_radium_226_concentration',ldbl_null)
		END IF
		
	CASE 'profileradioactive_radium_228_flag'
		ls_flag   = this.GetItemString( row,'profileradioactive_radium_228_flag')
		IF ls_flag = 'F' THEN
			this.SetItem(row,'profileradioactive_radium_228_concentration',ldbl_null)
		END IF
		
	CASE 'profileradioactive_lead_210_flag'
		ls_flag   = this.GetItemString( row,'profileradioactive_lead_210_flag')
		IF ls_flag = 'F' THEN
			this.SetItem(row,'profileradioactive_lead_210_concentration',ldbl_null)
		END IF
		
	CASE 'profileradioactive_potassium_40_flag'
		ls_flag   = this.GetItemString( row,'profileradioactive_potassium_40_flag')
		IF ls_flag = 'F' THEN
			this.SetItem( row,'profileradioactive_potassium_40_concentration',ldbl_null)
		END IF
END CHOOSE
END IF

RETURN li_rc
end event

event ue_lookup;int		li_current_form_version, li_hdr_row
long		ll_row, ll_customer_id, ll_contact_id, ll_Generator_id, ll_null,ll_profile_id
long       ll_waste_managed_id, ll_waste_managed_id_to_see                                  // 20200312 jcb #14395 add
string	ls_color, ls_consistency, ls_new_color, ls_new_consistency, ls_where, ls_curr_status_code
string	ls_haz_class, ls_new_haz_class, ls_null, ls_config_flag
str_pass	lstr_pass
dwobject ldwo
str_pick	lstr_pick
str_customer_new lstr_cust
int		li_idx

wf_accepttext()
li_hdr_row = idw_header.getrow()
IF li_hdr_row > 0 THEN 
	ls_curr_status_code = Upper(idw_header.object.curr_status_code[li_hdr_row])
	ll_profile_id = idw_header.object.profile_id[li_hdr_row]
END IF
IF ai_indicate > 1 THEN
	//IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' OR is_access = 'L' THEN RETURN 0
	IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN RETURN 0
	
	IF is_access = 'L' AND ls_curr_status_code = 'A' THEN RETURN 0
END IF

ll_row = GetRow()

CHOOSE CASE Lower(as_col_name)
	
	// rb 06/14/2012 remove these
	// rb 07/10/2012 added "contact_id" so technical contact ID does not offer rightclickify
	CASE "profile_id", "contact_id"
		RETURN -1

	// rb 06/15/2012 pass these on to the header dw
	// dz 07/11/2012 added "epa_id"
	CASE "customer_id", "generator_id", "epa_id"
		IF ai_indicate < 3 THEN
			RETURN 1
		ELSE
			//ldwo = idw_header.object.customer_id
			idw_header.event dynamic ue_lookup (as_col_name, ai_indicate, as_col_name)
		END IF
		
	CASE "color"
		IF ai_indicate < 3 THEN
			RETURN 1
		ELSE
			ls_color = This.Object.color[ll_row]
			IF IsNull(ls_color) THEN ls_color = ""
			lstr_pass.s[1] = ls_color
			lstr_pass.s[2] = "COLOR"
			lstr_pass.tr_trans = itr_share
	
			OpenWithParm(w_popup_color_consistency, lstr_pass)
		
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.d[1] = 1 THEN
					IF ls_color <> lstr_pass.s[1] THEN
						ls_new_color = lstr_pass.s[1]
						This.Object.color[ll_row] = ls_new_color
						This.AcceptText()
						This.SetColumn("color")
						ib_changed_technical = TRUE

						ldwo = this.Object.color
						this.Event itemchanged (ll_row, ldwo, ls_new_color)
					END IF
				END IF
			END IF
		End IF
	
//	CASE "consistency"
//		IF ai_indicate < 3 THEN
//			return 1
//		ELSE
//			ls_consistency = This.Object.consistency[ll_row]
//			IF IsNull(ls_consistency) THEN ls_consistency = ""
//			lstr_pass.s[1] = ls_consistency
//			lstr_pass.s[2] = "CONSISTENCY"
//			lstr_pass.tr_trans = itr_share
//	
//			OpenWithParm(w_popup_color_consistency, lstr_pass)
//		
//			lstr_pass = Message.PowerObjectParm
//			IF IsValid(lstr_pass) THEN
//				IF lstr_pass.d[1] = 1 THEN
//					IF ls_consistency <> lstr_pass.s[1] THEN
//						ls_new_consistency = lstr_pass.s[1]
//						This.Object.consistency[ll_row] = ls_new_consistency
//						This.AcceptText()
//						This.SetColumn("consistency")
//						ib_changed_technical = TRUE
//
//						ldwo = this.Object.consistency
//						this.Event itemchanged (ll_row, ldwo, ls_new_consistency)
//					END IF
//				END IF
//			END IF	
//		END IF

	CASE "epa_source_code"
		If ai_indicate < 3 then
			return 1
		Else			
			// Setup quick select popup
			lstr_pick.s_window_title			= "EPA Source Code Select"
			lstr_pick.i_window_width			= 0
			lstr_pick.b_multipick				= FALSE
			lstr_pick.i_tab_count				= 1
			lstr_pick.i_return_column_count	= 1
			
			lstr_pick.s_tab_title[1]			= "Source Codes"
			lstr_pick.i_tabpage_type[1]		= 1
			lstr_pick.s_dataobject[1]			= "d_quick_select_source_code"
			lstr_pick.s_where[1]				= ""
			lstr_pick.s_retrieve_by[1]		= ""
			lstr_pick.s_new_reference[1]		= ""
			
			OpenWithParm(w_popup_quick_select, lstr_pick)
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				IF lstr_pick.i_return_record_count = 1 THEN
					This.Object.epa_source_code[this.GetRow()] = String(lstr_pick.return1[1])
					ib_changed_profile = TRUE

					ldwo = this.Object.epa_source_code
					this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return1[1]))
				END IF
			END IF
		End If
	
	// SK 07182012		
	CASE "epa_form_code"
		If ai_indicate < 3 then
			return 1
		Else			
			// Setup quick select popup
			lstr_pick.s_window_title			= "EPA Form Code Select"
			lstr_pick.i_window_width			= 0
			lstr_pick.b_multipick				= FALSE
			lstr_pick.i_tab_count				= 1
			lstr_pick.i_return_column_count	= 1
			lstr_pick.to_transaction 			= itr_share
			lstr_pick.s_tab_title[1]			= "EPA Form Codes"
			lstr_pick.i_tabpage_type[1]		= 1
			lstr_pick.s_dataobject[1]			= "d_quick_select_epa_form_code"
			lstr_pick.s_where[1]				= ""
			lstr_pick.s_retrieve_by[1]		= ""
			lstr_pick.s_new_reference[1]		= ""
			
			OpenWithParm(w_popup_quick_select, lstr_pick)
			lstr_pick = Message.PowerObjectParm
			IF IsValid(lstr_pick) THEN
				IF lstr_pick.i_return_record_count = 1 THEN
					This.Object.epa_form_code[this.GetRow()] = String(lstr_pick.return1[1])
					ib_changed_profile = TRUE
					
					ldwo = this.Object.epa_form_code
					this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return1[1]))
				END IF
			END IF
		End If
	
//	CASE "contact_name", "generator_contact_id"
//		if ai_indicate  < 3 Then
//			return 1
//		Else
//			// Setup where clause to retrieve for this customer
//			ll_generator_id = idW_header.Object.generator_id[idw_header.GetRow()]
//			if IsNull(ll_generator_id) then 
//				MessageBox(gs_app_name+": Select", "Please enter a Generator ID", information!)
//				return 0
//			end if
//			ls_where = "ContactXRef.generator_id = " + string(ll_generator_id) + " and ContactXRef.type = 'G'" &
//				+ " AND ContactXRef.status = 'A'"
//	
//			// Setup quick select popup
//			lstr_pick.s_window_title			= "Contact Select"
//			lstr_pick.i_window_width			= 0
//			lstr_pick.b_multipick				= FALSE
//			lstr_pick.i_tab_count				= 1
//			lstr_pick.i_return_column_count	= 12
//			lstr_pick.to_transaction			= itr_share
//			
//			lstr_pick.s_tab_title[1]			= "Contacts for Generator:  " + String(ll_generator_id)
//			lstr_pick.i_tabpage_type[1]		= 1
//			lstr_pick.s_dataobject[1]			= "d_quick_select_contact_generator"
//			lstr_pick.s_where[1]					= ls_where
//			lstr_pick.s_retrieve_by[1]			= ""
//			lstr_pick.s_new_reference[1]		= "contact"
//	
//			OpenWithParm(w_popup_quick_select, lstr_pick)
//			// rb 06/08/2012  Discovered that when "New" button is pressed, a
//			//						different structure type is returned (str_customer_new)
//			if IsNull (Message.PowerObjectParm) or not IsValid (Message.PowerObjectParm) then return 0
//			choose case ClassName (Message.PowerObjectParm)
//					
//				case "str_pick"
//					lstr_pick = Message.PowerObjectParm
//					if IsValid(lstr_pick) then
//						for li_idx = 1 to lstr_pick.i_return_record_count
//
//							ll_contact_id = long(lstr_pick.return1[li_idx])
//							IF ll_contact_id = 0 THEN SetNull(ll_contact_id)
//
//							This.Object.generator_contact_id[ll_row]	= ll_contact_id
//							This.Object.contact_name[ll_row]				= string(lstr_pick.return2[li_idx])
//							This.Object.contact_title[ll_row]			= string(lstr_pick.return3[li_idx])
//							This.Object.contact_phone[ll_row]			= string(lstr_pick.return7[li_idx])
//							This.Object.contact_fax[ll_row]				= string(lstr_pick.return8[li_idx])
//							This.Object.tech_cont_email[ll_row]			= string(lstr_pick.return6[li_idx])
//
//							ll_row = idw_header.GetRow()
//							idw_header.Object.generator_contact_id[ll_row]		= ll_contact_id
//							idw_header.Object.generator_contact_name[ll_row]	= string(lstr_pick.return2[li_idx])
//							idw_header.Object.generator_contact_title[ll_row]	= string(lstr_pick.return3[li_idx])
//							idw_header.Object.generator_contact_phone[ll_row]	= string(lstr_pick.return7[li_idx])
//							idw_header.Object.generator_contact_fax[ll_row]		= string(lstr_pick.return8[li_idx])
//							idw_header.Object.generator_cont_email[ll_row]		= string(lstr_pick.return6[li_idx])
//
//						next
//					end if
//
//				case "str_customer_new"
//					lstr_cust = Message.PowerObjectParm
//					if IsValid(lstr_cust) then
//
//						ll_contact_id = long(lstr_cust.new_id)
//						IF ll_contact_id = 0 THEN SetNull(ll_contact_id)
//					
//						This.Object.generator_contact_id[ll_row]	= ll_contact_id
//						This.Object.contact_name[ll_row]				= lstr_cust.name
//
//						ll_row = idw_header.GetRow()
//						idw_header.Object.generator_contact_id[ll_row]	= ll_contact_id
//						idw_header.Object.contact_name[ll_row]				= lstr_cust.name
//					end if
//			end choose
//		End IF

//	CASE "inv_contact_name", "inv_contact_id"
//		if ai_indicate  < 3 Then
//			return 1
//		Else
//			// Setup where clause to retrieve for this customer
//			ll_customer_id = this.Object.customer_id[ll_row]
//			if IsNull(ll_customer_id) then 
//				MessageBox(gs_app_name+": Select", "Please enter a Customer ID", information!)
//				return 0
//			end if
//			ls_where = "ContactXRef.customer_id = " + string(ll_customer_id) + " and ContactXRef.type = 'C'" &
//				+ " AND ContactXRef.status = 'A'"
//	
//			// Setup quick select popup
//			lstr_pick.s_window_title			= "Contact Select"
//			lstr_pick.i_window_width			= 0
//			lstr_pick.b_multipick				= FALSE
//			lstr_pick.i_tab_count				= 1
//			lstr_pick.i_return_column_count	= 12
//			lstr_pick.to_transaction			= itr_share
//			
//			lstr_pick.s_tab_title[1]			= "Contacts for Customer:  " + String(ll_customer_id)
//			lstr_pick.i_tabpage_type[1]		= 1
//			lstr_pick.s_dataobject[1]			= "d_quick_select_contact"
//			lstr_pick.s_where[1]					= ls_where
//			lstr_pick.s_retrieve_by[1]			= ""
//			lstr_pick.s_new_reference[1]		= "contact"
//	
//			OpenWithParm(w_popup_quick_select, lstr_pick)
//			// rb 06/08/2012  Discovered that when "New" button is pressed, a
//			//						different structure type is returned (str_customer_new)
//			if IsNull (Message.PowerObjectParm) or not IsValid (Message.PowerObjectParm) then return 0
//			choose case ClassName (Message.PowerObjectParm)
//					
//				case "str_pick"
//					lstr_pick = Message.PowerObjectParm
//					if IsValid(lstr_pick) then
//						for li_idx = 1 to lstr_pick.i_return_record_count
//
//							ll_contact_id = long(lstr_pick.return1[li_idx])
//							IF ll_contact_id = 0 THEN SetNull(ll_contact_id)
//
//							This.Object.inv_contact_id[ll_row]		= ll_contact_id
//							This.Object.inv_contact_name[ll_row]	= string(lstr_pick.return2[li_idx])
//							This.Object.inv_contact_phone[ll_row]	= string(lstr_pick.return8[li_idx])
//							This.Object.inv_contact_fax[ll_row]		= string(lstr_pick.return9[li_idx])
//
//							ll_row = idw_header.GetRow()
//							idw_header.Object.inv_contact_id[ll_row]		= ll_contact_id
//							idw_header.Object.inv_contact_name[ll_row]	= string(lstr_pick.return2[li_idx])
//							idw_header.Object.inv_contact_phone[ll_row]	= string(lstr_pick.return8[li_idx])
//							idw_header.Object.inv_contact_fax[ll_row]		= string(lstr_pick.return9[li_idx])
//						next
//					end if
//					
//				case "str_customer_new"
//					lstr_cust = Message.PowerObjectParm
//					if IsValid(lstr_cust) then
//
//						ll_contact_id = long(lstr_cust.new_id)
//						IF ll_contact_id = 0 THEN SetNull(ll_contact_id)
//					
//						This.Object.inv_contact_id[ll_row]		= ll_contact_id
//						This.Object.inv_contact_name[ll_row]	= lstr_cust.name
//
//						ll_row = idw_header.GetRow()
//						idw_header.Object.inv_contact_id[ll_row]		= ll_contact_id
//						idw_header.Object.inv_contact_name[ll_row]	= lstr_cust.name
//					end if
//					
//			end choose
//		End IF

	CASE 'manage_id'
		IF ai_indicate  < 3 THEN
			return 1
		ELSE
			// set up lookup
			SELECT current_form_version
			INTO :li_current_form_version
			FROM FormType
			WHERE form_type = 'LDR'
			USING itr_share;
		
			// Setup quick select popup
			lstr_pass.l[1] = ll_profile_id //Integer(This.Object.waste_managed_id[ll_row])
			//lstr_pass.i[2] = li_current_form_version
			lstr_pass.tr_trans = itr_forms
			ll_waste_managed_id =  Integer(This.Object.waste_managed_id[ll_row])         // 20200312 jcb #14395 add 
			lstr_pass.l[2] =    ll_waste_managed_id                                                         // 20200312 jcb #14395 add pass TO the popup 	
			
			OpenWithParm(w_popup_get_ldr_waste_managed_dragon, lstr_pass)
	
			lstr_pass = Message.PowerObjectParm
			IF IsValid(lstr_pass) THEN
				IF lstr_pass.l[1] > 0 or IsNull(lstr_pass.l[1]) THEN
					This.Object.manage_id[ll_row] = lstr_pass.l[1]
					
					//ll_row = idw_shipping.GetRow()
						idw_shipping.object.waste_managed_id[ll_row] = lstr_pass.l[1]
						idw_shipping.object.waste_managed_id_1[ll_row] = lstr_pass.l[1]
					
					ib_changed_profile = TRUE
				END IF
			END IF
		END IF
	
//	CASE "tech_contact_name", "tech_contact_id"
//		if ai_indicate  < 3 Then
//			return 1
//		Else
//			// Setup where clause to retrieve for this customer
//			ll_customer_id = this.Object.customer_id[ll_row]
//			if IsNull(ll_customer_id) then 
//				MessageBox(gs_app_name+": Select", "Please enter a Customer ID", information!)
//				return 0
//			end if
//			ls_where = "ContactXRef.customer_id = " + string(ll_customer_id) + " and ContactXRef.type = 'C'" &
//				+ " AND ContactXRef.status = 'A'"
//	
//			// Setup quick select popup
//			lstr_pick.s_window_title			= "Contact Select"
//			lstr_pick.i_window_width			= 0
//			lstr_pick.b_multipick				= FALSE
//			lstr_pick.i_tab_count				= 1
//			lstr_pick.i_return_column_count	= 12
//			lstr_pick.to_transaction			= itr_share
//			
//			lstr_pick.s_tab_title[1]			= "Contacts for Customer:  " + String(ll_customer_id)
//			lstr_pick.i_tabpage_type[1]		= 1
//			lstr_pick.s_dataobject[1]			= "d_quick_select_contact"
//			lstr_pick.s_where[1]					= ls_where
//			lstr_pick.s_retrieve_by[1]			= ""
//			lstr_pick.s_new_reference[1]		= "contact"
//	
//			OpenWithParm(w_popup_quick_select, lstr_pick)
//			// rb 06/08/2012  Discovered that when "New" button is pressed, a
//			//						different structure type is returned (str_customer_new)
//			if IsNull (Message.PowerObjectParm) or not IsValid (Message.PowerObjectParm) then return 0
//			choose case ClassName (Message.PowerObjectParm)
//					
//				case "str_pick"
//					lstr_pick = Message.PowerObjectParm
//					if IsValid(lstr_pick) then
//						for li_idx = 1 to lstr_pick.i_return_record_count
//
//							ll_contact_id = long(lstr_pick.return1[li_idx])
//							IF ll_contact_id = 0 THEN SetNull(ll_contact_id)
//
//							This.Object.tech_contact_id[ll_row]			= ll_contact_id
//							This.Object.tech_contact_name[ll_row]		= string(lstr_pick.return2[li_idx])
//							This.Object.tech_contact_phone[ll_row]		= string(lstr_pick.return8[li_idx])
//							This.Object.tech_contact_fax[ll_row]		= string(lstr_pick.return9[li_idx])
//							This.Object.tech_contact_mobile[ll_row]	= string(lstr_pick.return10[li_idx])
//							This.Object.tech_contact_pager[ll_row]		= string(lstr_pick.return11[li_idx])
//							This.Object.tech_cont_email[ll_row]			= string(lstr_pick.return12[li_idx])
//
//							ll_row = idw_header.GetRow()
//							idw_header.Object.contact_id[ll_row]				= ll_contact_id
//							idw_header.Object.contact_name[ll_row]				= string(lstr_pick.return2[li_idx])
//							idw_header.Object.tech_contact_name[ll_row]		= string(lstr_pick.return2[li_idx])
//							idw_header.Object.tech_contact_phone[ll_row]		= string(lstr_pick.return8[li_idx])
//							idw_header.Object.tech_contact_fax[ll_row]		= string(lstr_pick.return9[li_idx])
//							idw_header.Object.tech_contact_mobile[ll_row]	= string(lstr_pick.return10[li_idx])
//							idw_header.Object.tech_contact_pager[ll_row]		= string(lstr_pick.return11[li_idx])
//							idw_header.Object.tech_cont_email[ll_row]			= string(lstr_pick.return12[li_idx])
//
//						next
//					end if
//
//				case "str_customer_new"
//					lstr_cust = Message.PowerObjectParm
//					if IsValid(lstr_cust) then
//
//						ll_contact_id = long(lstr_cust.new_id)
//						IF ll_contact_id = 0 THEN SetNull(ll_contact_id)
//					
//						This.Object.tech_contact_id[ll_row]		= ll_contact_id
//						This.Object.tech_contact_name[ll_row]	= lstr_cust.name
//
//						ll_row = idw_header.GetRow()
//						idw_header.Object.contact_id[ll_row]			= ll_contact_id
//						idw_header.Object.contact_name[ll_row]			= lstr_cust.name
//						idw_header.Object.tech_contact_name[ll_row]	= lstr_cust.name
//					end if
//			end choose
//		End IF

		// COR2-MPM
		CASE "dot_shipping_name"
			If ai_indicate < 3 Then
				return 1
			Else
			
				// Setup quick select popup
				lstr_pick.s_window_title			= "DOT Shipping Names Select"
				lstr_pick.i_window_width			= 0
				lstr_pick.b_multipick				= FALSE
				lstr_pick.i_return_column_count	= 9
				lstr_pick.to_transaction			= itr_share
				
				li_idx = 1
				lstr_pick.s_tab_title[li_idx]		= "Standard DOT Shipping Names"
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping_lookup"
				lstr_pick.s_where[li_idx]				= ""
				lstr_pick.s_retrieve_by[li_idx]		= ""
				lstr_pick.s_new_reference[li_idx]	= ""
				
				li_idx++
				//Prakash - 05/08/2023 - Begin - Added for DevOps #64394
				ls_config_flag = f_get_config_value("rebranding_golive_flag") 
				IF ls_config_flag = "T" THEN
					lstr_pick.s_tab_title[li_idx]			= "Republic Services DOT Shipping Names"
				ELSE
					lstr_pick.s_tab_title[li_idx]			= "US Ecology DOT Shipping Names"
				END IF
				//Prakash - 05/08/2023 - End - Added for DevOps #64394
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx]		= "d_quick_select_DOT_shipping"
				lstr_pick.s_where[li_idx]				= ""
				lstr_pick.s_retrieve_by[li_idx]		= ""
				lstr_pick.s_new_reference[li_idx]	= ""
				
				lstr_pick.i_tab_count					= li_idx
				
				OpenWithParm(w_popup_quick_select, lstr_pick)
				
				lstr_pick = Message.PowerObjectParm
				IF IsValid(lstr_pick) THEN
					FOR li_idx = 1 TO lstr_pick.i_return_record_count
						//ll_ship_row = idw_shipping.GetRow()
						//JXM DevOps 11417 08.14.2019 - Proper DOT Shipping Name (Description)
						//When DOT waste flag is checked and dot_shipping_name does not contain the word 'waste, '
						//THEN prefix the dot_shipping_name with 'Waste, ' else Do not prefix the name
						//However if the DOT waste flag is unchecked do not add 'Waste, ' to the name from popup
						IF This.Object.dot_waste_flag[this.GetRow()] = 'T' then
							IF POS( String(lstr_pick.return1[li_idx]),'waste, ',1) < 1 then 
								This.Object.DOT_shipping_name[ll_row] = 'Waste, ' + String(lstr_pick.return1[li_idx])
							ELSE
								//just set name as is
								This.Object.DOT_shipping_name[ll_row] = String(lstr_pick.return1[li_idx])
							END IF
						ELSE
								This.Object.DOT_shipping_name[ll_row] = String(lstr_pick.return1[li_idx])
						END IF
						//Comment out and replace with above JXM 08.14.2019 DevOps 11417
						//This.Object.DOT_shipping_name[ll_row] = String(lstr_pick.return1[li_idx])
						ldwo = this.Object.DOT_shipping_name
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return1[li_idx]))
	
						this.Object.hazmat_class[ll_row] = String(lstr_pick.return2[li_idx])
						ldwo = this.Object.hazmat_class
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return2[li_idx]))
	
						this.Object.un_na_flag[ll_row] = String(lstr_pick.return3[li_idx])
						ldwo = this.Object.un_na_flag
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return3[li_idx]))
	
						this.Object.un_na_number[ll_row] = Long(lstr_pick.return4[li_idx])
						ldwo = this.Object.un_na_number
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return4[li_idx]))
	
						this.Object.package_group[ll_row] = String(lstr_pick.return5[li_idx])
						ldwo = this.Object.package_group
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return5[li_idx]))
	
						this.Object.erg_number[ll_row] = Long(lstr_pick.return6[li_idx])
						ldwo = this.Object.erg_number
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return6[li_idx]))
	
						this.Object.subsidiary_haz_mat_class[ll_row] = String(lstr_pick.return7[1])
						ldwo = this.Object.subsidiary_haz_mat_class
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return7[li_idx]))
	
						this.Object.erg_suffix[ll_row] = String(lstr_pick.return8[1])
						ldwo = this.Object.erg_suffix
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return8[li_idx]))

						// MPM - 12/11/2023 - DevOps 42017
						This.Object.hazmat[ll_row] = String(lstr_pick.return9[1])
						ldwo = this.Object.hazmat
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return9[li_idx]))
	
					NEXT
				END IF
			End If
			
		CASE "hazmat_class"
			If ai_indicate < 3 Then
				return 1
			Else
				// Setup quick select popup
				lstr_pick.s_window_title			= "Hazard Class Select"
				lstr_pick.i_window_width			= 0
				lstr_pick.b_multipick				= FALSE
				lstr_pick.i_return_column_count	= 3
				lstr_pick.to_transaction			= itr_share
				
				li_idx = 1
				lstr_pick.s_tab_title[li_idx]		= "Haz Classes"
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx]		= "d_quick_select_hazmat_class"
				lstr_pick.s_where[li_idx]				= ""
				lstr_pick.s_retrieve_by[li_idx]		= ""
				lstr_pick.s_new_reference[li_idx]	= ""
				
				lstr_pick.i_tab_count					= li_idx
				
				OpenWithParm(w_popup_quick_select, lstr_pick)
				
				lstr_pick = Message.PowerObjectParm
				IF IsValid(lstr_pick) THEN
					FOR li_idx = 1 TO lstr_pick.i_return_record_count
						This.Object.hazmat_class[ll_row] = String(lstr_pick.return2[li_idx])
						ib_changed_profile = TRUE
						ldwo = this.Object.hazmat_class
						this.Event itemchanged (ll_row, ldwo, String(lstr_pick.return2[li_idx]))
					NEXT
				END IF
			End If
			
		CASE "subsidiary_haz_mat_class"
			If ai_indicate < 3 Then
				return 1
			Else
				ls_haz_class = This.Object.subsidiary_haz_mat_class[ll_row]
				IF IsNull(ls_haz_class) THEN ls_haz_class = ""
				lstr_pass.s[1] = ls_haz_class
				lstr_pass.s[2] = "HAZCLASS"
				lstr_pass.tr_trans = itr_share
		
				OpenWithParm(w_popup_color_consistency, lstr_pass)
			
				lstr_pass = Message.PowerObjectParm
				IF IsValid(lstr_pass) THEN
					IF lstr_pass.d[1] = 1 THEN
						IF ls_haz_class <> lstr_pass.s[1] THEN
							ls_new_haz_class = lstr_pass.s[1]
							This.Object.subsidiary_haz_mat_class[ll_row] = ls_new_haz_class
							This.AcceptText()
							This.SetColumn("package_group")
							ib_changed_profile = TRUE
							ldwo = this.Object.subsidiary_haz_mat_class
							this.Event itemchanged (ll_row, ldwo, ls_new_haz_class)
						END IF
					END IF
				END IF
			End IF
			
		CASE "erg_number"
			If ai_indicate < 3 Then
				return 1
			Else
				// Setup quick select popup
				lstr_pick.s_window_title			= "ERG Number Select"
				lstr_pick.i_window_width			= 0
				lstr_pick.b_multipick				= FALSE
				lstr_pick.i_return_column_count	= 3
				lstr_pick.to_transaction			= itr_share
				
				li_idx = 1
				lstr_pick.s_tab_title[li_idx]		= "ERG Numbers"
				lstr_pick.i_tabpage_type[li_idx]	= 1
				lstr_pick.s_dataobject[li_idx]		= "d_quick_select_erg"
				lstr_pick.s_where[li_idx]				= ""
				lstr_pick.s_retrieve_by[li_idx]		= ""
				lstr_pick.s_new_reference[li_idx]	= ""
				
				lstr_pick.i_tab_count					= li_idx
				
				OpenWithParm(w_popup_quick_select, lstr_pick)
				
				lstr_pick = Message.PowerObjectParm
				IF IsValid(lstr_pick) THEN
					FOR li_idx = 1 TO lstr_pick.i_return_record_count
						IF String(lstr_pick.return2[li_idx]) > "" THEN
							This.Object.erg_number[ll_row] = Long(Left(lstr_pick.return2[li_idx], 3))
						ELSE
							This.Object.erg_number[ll_row] = ll_null
						END IF
						IF Pos(String(lstr_pick.return2[li_idx]), "P", 1) > 0 THEN
							This.Object.erg_suffix[ll_row] = "P"
						ELSE
							This.Object.erg_suffix[ll_row] = ls_null
						END IF
						ldwo = this.Object.erg_number
						this.Event itemchanged (ll_row, ldwo, Left(lstr_pick.return2[li_idx], 3))
						ib_changed_profile = TRUE
					NEXT
				END IF
			End If
	case else
		call super::ue_lookup
		return AncestorReturnValue
		
END CHOOSE

// COR2-MPM
IF Lower(this.dataobject) = "d_profile_ship_pkg_info_form_dragon_2" THEN
	POST wf_build_dot_shipping_desc()
END IF

RETURN 0
end event

event doubleclicked;// OVERRIDE rb 06/14/2012

choose case dwo.Name
	// COR2-MPM	
	case "generator_contact_id", "contact_name", "inv_contact_id", "inv_contact_name", "tech_contact_id", "tech_contact_name", "manage_id", "subsidiary_haz_mat_class"

		This.event ue_lookup (dwo.Name, 3, dwo.Name)

	// COR2-MPM
	case "cf_erg"

		This.event ue_lookup ("erg_number", 3, "erg_number")

	case else
		
		call super::doubleclicked
	
end choose

end event

event itemerror;call super::itemerror;// rb 06/19/2012 taken from WCR Maintenace, blanking out these fields was giving dw error
string ls_col, ls_null
date ldt_null
decimal ld_null
SetNull(ldt_null)
SetNull(ld_null)
SetNull(ls_null)

ls_col = dwo.name
if (lower(right(ls_col,13)) = "concentration") or &
		(lower(right(ls_col,6)) = "actual") or &
		(lower(right(ls_col,3)) = "pct") or &
		(lower(right(ls_col,8)) = "sic_code") or &
		(lower(right(ls_col,8)) = "quantity") or &
		(lower(right(ls_col,3)) = "tab") or &
		(lower(right(ls_col,6)) = "weight")	then //sailaja - Devops # 74581 - EQAI - Profile Tracking - Cylinder Supplement - 1/22/2024 - Added weight
	if data <> "" then
		MessageBox("Validation Error","Numeric value required")
	end if
	post SetItem(row,ls_col,ld_null)
	return 1
end if

choose case lower(ls_col)
	case 'ph_lte_2', 'ph_gt_2_lt_5', 'ph_gte_5_lte_10', 'ph_gt_10_lt_12_5', 'ph_gte_12_5'
		MessageBox("Validation Error","Selected ph values must form a continuous range~r~nwith no breaks between selected items")
		post SetItem(row,ls_col,ld_null)
		return 1
	case 'pcb_concentration_0_49', 'pcb_concentration_50_499', 'pcb_concentration_500'
		MessageBox("Validation Error","Selected PCB concentration values must form a continuous range~r~nwith no breaks between selected items")
		post SetItem(row,ls_col,ld_null)
		return 1
	case 'ignitability_lt_90', 'ignitability_90_139', 'ignitability_140_199', 'ignitability_gte_200'
		MessageBox("Validation Error","Selected Ignitability values must form a continuous range~r~nwith no breaks between selected items")
		post SetItem(row,ls_col,ld_null)
		return 1
	// MPM - COR2
	case 'un_na_number'
		return 2
	// MPM - 7/7/2020 - DevOps 16671 - Added rq_reason so that if 1 or 2 is returned for a change to it from itemchanged, it isn't accepted.
	case 'rq_reason'
		return 1
	case 'wcr_sign_date' //DevOps 18174 info_gde 02/18/2021; New Profile - Section H Data Window Error
		If isDate(data) then
			Return 1
		else
			MessageBox("Validation Error","Please enter a valid signature date.") 
			this.object.wcr_sign_date[row]=ldt_null
		 	Return 3
		end if
	// Dipankar - 9/12/2023 - Begin - Added for #69393
	case 'fluorine_low', 'fluorine_high', 'chlorine_low', 'chlorine_high', 'bromine_low', 'bromine_high', 'iodine_low', 'iodine_high'  // Dipankar - 10/31/2023 - Added Total Solids Low/ High for #73666
		POST SetItem(row,ls_col,ld_null)
		RETURN 1
	// Dipankar - 03/15/2024 - Separate case added for total_solids_low/ total_solids_high for #78522
	case  'total_solids_low', 'total_solids_high' 
		IF NOT IsNumber(data) THEN
			POST SetItem(row, ls_col, ls_null) 
		ELSEIF Double(data) < 0 OR Double(data) > 100 THEN
			POST SetItem(row, ls_col, ls_null) 
		ELSE			 
			POST SetItem(row, ls_col, Left(String(Round(Double(data),2)), 5)) // Taking 5 Chars as per the field width
		END IF

		RETURN 3
	// Dipankar - 9/12/2023 - End - Added for #69393
end choose

return 0
end event

event scrollvertical;call super::scrollvertical;//DevOps #15003 info_gde 04/07/2020; EQAI (Radioactive Supplement) Page 3 Issues
//Task 9649 AGC 04/04/2019
//DevOps #15003 info_gde 04/07/2020 start

choose case lower(idw_wcr_display_2.dataobject)		
	case "d_profile_radioactive_supplement_page_3sub","d_profile_ldr_const_dragon" 
		idw_wcr_display_2.y = il_current_wcr_display_2_pos + (il_old_scrollpos - scrollpos)
		il_current_wcr_display_2_pos = il_current_wcr_display_2_pos + (il_old_scrollpos - scrollpos)
		il_old_scrollpos = scrollpos
end choose

end event

event itemfocuschanged;call super::itemfocuschanged;//DevOps 13955 info_gde 04/14/2022; Add New Profile (Profile Tab) - All 
IF  lower(idw_wcr_display_1.dataobject) = 'd_profile_generator_form_dragon' THEN	 
choose case GetColumnName()
	case "epa_id"
		IF not ib_epa_id THEN
			idw_wcr_display_2.POST SetColumn(1)
			idw_wcr_display_2.POST SetFocus()
		ELSE
			idw_wcr_display_3.POST SetColumn(1)
			idw_wcr_display_3.POST SetFocus()
			ib_epa_id=FALSE
		END IF
end choose
END IF

IF  lower(idw_wcr_display_1.dataobject)  = 'd_profile_ship_pkg_info_form_dragon_2' THEN
	IF this.GetColumnName()='shipping_frequency' THEN
		idw_wcr_display_2.POST setrow(long(idw_wcr_display_2.Object.DataWindow.LastRowOnPage))
		idw_wcr_display_2.POST setcolumn(2)
		idw_wcr_display_2.POST setFocus()
	END IF
END IF

IF  lower(idw_wcr_display_1.dataobject) = 'd_profile_special_properties_form_dragon' THEN
	IF this.GetColumnName()='odor_strength' THEN
		IF idw_wcr_display_2.DataObject='d_profile_composition_form_dragon' AND idw_wcr_display_2.RowCount() >0  THEN
			idw_wcr_display_2.POST setrow(long(idw_wcr_display_2.Object.DataWindow.LastRowOnPage))
			idw_wcr_display_2.POST setcolumn(1)
			idw_wcr_display_2.POST setrow(1)
			idw_wcr_display_2.POST setFocus()
		END IF
	END IF
END IF

//Task 9649 AGC 04/04/2019
long ll_scrollpos
choose case lower(idw_wcr_display_2.dataobject)
	case "d_profile_ldr_const_dragon", "d_profile_radioactive_supplement_page_3sub"
		ll_scrollpos = long(idw_wcr_display_1.Describe("DataWindow.VerticalScrollPosition"))
		if ll_scrollpos <> il_old_scrollpos then
			idw_wcr_display_1.Event scrollvertical(ll_scrollpos)
		end if
end choose


end event

event losefocus;call super::losefocus;//DevOps 13955 info_gde 04/14/2022; Add New Profile (Profile Tab) - All 
choose case GetColumnName()
	case "epa_id"
		IF not ib_epa_id THEN
			ib_epa_id=TRUE
		ELSE
			idw_wcr_display_3.POST SetColumn(1)
			idw_wcr_display_3.POST SetFocus()
			ib_epa_id=FALSE
		END IF
end choose

//DevOps #14709 info_gde 03/19/2020; Add New Profile - Section A. (Add New Generator)

//any la_string
//string ls_null, ls_current_pg
//SetNull(ls_null)
//
////DevOps #14709 info_gde 03/19/2020 - start
//ls_current_pg=itab.control[itab.SelectedTab].Text
//
//IF ls_current_pg='Profile' THEN
//	PostEvent('ue_getfocus')
//END IF
////DevOps #14709 info_gde 03/19/2020 - end
end event

event clicked;call super::clicked;//DevOps #15000 info_gde 04/01/2020; EQAI (Radioactive Supplement) Page 2 Issues
//DevOps #14940 info_gde 04/09/2020; EQAI- PO from Profile tab not on price tab

string  ls_object, ls_return, ls_flag, ls_type, ls_null, ls_data
long	ll_row, ll_rc, ll_rad2_row,ll_null
int i
SetNull(ls_null)
SetNull(ll_null)

ls_object = dwo.name
ls_return = ''
ll_row     = row


CHOOSE CASE lower(ls_object)
	CASE 'compute_usei_criteria'
		f_get_waste_acceptance_url('USEI', ls_return)
		IF ls_return <> '' THEN
			Messagebox('Error lauching USEI',ls_return)
			Return -1
		END IF
		CASE 'compute_usem_criteria'
		f_get_waste_acceptance_url('USEM', ls_return)
		IF ls_return <> '' THEN
			Messagebox('Error lauching USEM',ls_return)
			Return -1
		END IF
		CASE 'compute_usen_criteria'
		f_get_waste_acceptance_url('USEN', ls_return)
		IF ls_return <> '' THEN
			Messagebox('Error lauching USEN',ls_return)
			Return -1
		END IF
		CASE 'compute_uset_criteria'
		f_get_waste_acceptance_url('USET', ls_return)
		IF ls_return <> '' THEN
			Messagebox('Error lauching USET',ls_return)
			Return -1
		END IF	
		CASE 'additional_inventory_flag'
			ll_row = row
		     IF row = 0 THEN
//				idw_profile_radioactive_supplement_page_2.Object.item_name.protect = 1
//				//this.Object.item_name[0].Protect=1
//				This.Insertrow(0)
				ll_row = 1                // is mystery why 0: maybe cuz in the header and not detail ?
//				ls_flag = 'F'
			END IF
			//DevOps #15000 info_gde 04/01/2020 - start
			ls_flag   = this.GetItemString( ll_row,'additional_inventory_flag' )
			IF  IsNull(ls_flag) or ls_flag = "" then
				ls_flag = 'T'
				ll_rad2_row = this.rowcount()
			
				for i = ll_rad2_row to 1 STEP -1  
					if i = 1 then 
						CONTINUE
					else
						this.DeleteRow(i)
					end if
				next	
				
				i = this.Rowcount()
				IF i > 0 THEN 
					 this.Object.item_name[i] = ls_null
					 this.Object.total_number_in_shipment[i] = ls_null
					 this.Object.radionuclide_contained[i] = ls_null
					 this.Object.activity[i] = ls_null
					 this.Object.disposal_site_tsdf_code[i] = ls_null
					 this.Object.cited_regulatory_exemption[i] = ls_null  
				END IF
				this.SetItem(ll_row,"additional_inventory_flag",'T')
				
			elseif ls_flag='T' then
				
				this.SetItem(ll_row,"additional_inventory_flag",'F')
			elseif ls_flag='F' then
				ll_rad2_row = this.rowcount()
			
				for i = ll_rad2_row to 1 STEP -1  
					if i = 1 then 
						CONTINUE
					else
						this.DeleteRow(i)
					end if
				next	
				
				i=this.rowcount()
				
				this.Object.item_name[i] = ls_null
			    this.Object.total_number_in_shipment[i] = ls_null
			    this.Object.radionuclide_contained[i] = ls_null
			    this.Object.activity[i] = ls_null
			    this.Object.disposal_site_tsdf_code[i] = ls_null
			    this.Object.cited_regulatory_exemption[i] = ls_null  

				
				this.SetItem(ll_row,"additional_inventory_flag",'T')
				
			END IF
         //DevOps #15000 info_gde 04/01/2020 - end
			
//              // toggle the checked: Note the protect setting work as desired BUT are opposite what pb_help says
//			IF ls_flag = 'T'  THEN
//				idw_profile_radioactive_supplement_page_2.Object.item_name.protect = 1
//				ll_rc = this.SetItem( ll_row,'additional_inventory_flag', 'F')  
//				ll_rc = this.SetItem( ll_row, 'additional_inventory_flag_1','F') 
//			ELSE
//				idw_profile_radioactive_supplement_page_2.Object.item_name.protect = 0
//				ll_rc = this.SetItem( ll_row, 'additional_inventory_flag_1','T') 
//				ll_rc = this.SetItem( ll_row, 'additional_inventory_flag','T')      	
//				ll_rc = this.SetItem( ll_row, 'item_name','') 
//				ll_rc = this.SetItem( ll_row, 'radionuclide_contained','')
//				ll_rc = this.SetItem( ll_row, 'total_number_in_shipment',0)
//				ll_rc = this.SetItem( ll_row, 'activity','')
//				ll_rc = this.SetItem( ll_row, 'cited_regulatory_exemption','')
//				
//			END IF
//DevOps #14940 info_gde 04/09/2020 start
Case 'po_required_from_form'
				
	 MessageBox("Information!","Please add PO number.")
	 this.Object.purchase_order_from_form.Protect=0
	 this.SetColumn('purchase_order_from_form')
	 
//				ls_data=dw_wcr_display_1.Object.po_required_from_form[row]
//				If ls_data='T' Then
//						
//							this.Object.purchase_order_from_form[row] = ls_null
//							this.Object.purchase_order_from_form.Protect=1
//		
//				else
//						
//							
//							MessageBox("Warning!","P.O. Number is Required.  Please enter.")
//							this.Object.purchase_order_from_form.Protect=0
//							this.SetColumn('purchase_order_from_form')
//		
//				end if
				//DevOps #14940 info_gde 04/09/2020 end	
Case 'rcra_waste_code_flag'
//		ll_row = row
//		IF row = 0 THEN
//		    ll_row = 1               
//		END IF
//		
//			ls_flag   = this.GetItemString( ll_row,'rcra_waste_code_flag' )
//		IF  IsNull(ls_flag) or ls_flag = "" then
//				ls_flag = 'T'
//				//this.SetItem(ll_row,"rcra_waste_code_flag",'T')
//				is_rcra_waste_code_flag='T'
//		elseif ls_flag='T' then
//				//this.SetItem(ll_row,"rcra_waste_code_flag",'F')
//				is_rcra_waste_code_flag='F'
//		elseif ls_flag='F' then
//				//this.SetItem(ll_row,"additional_inventory_flag",'T')
//				is_rcra_waste_code_flag='T'
//		END IF
	CASE ELSE
END CHOOSE

Return 0
end event

event ue_keypressed;call super::ue_keypressed;long   li_lastcol
// DevOps 38978 info_gde 04/14/2022; Profit Center - Flag for what type of receiving a site does
IF Key=KeyTab!  THEN
	li_lastcol =wf_get_first_last_tabcol(this)   
	If li_lastcol>0 Then
		choose case this.Dataobject
		case 'd_profile_radioactive_supplement_page_2'
		   if this.rowcount()>0 AND this.rowcount()=this.GetRow() then
				wf_get_first_last_tabcol(this)
				this.POST setrow(long(this.Object.DataWindow.LastRowOnPage))
				this.POST setcolumn(is_first_column)
				this.POST SetRow(1)
				this.POST SetFocus()
			end if
		case 'd_profile_characterization_form_dragon'
			if idw_wcr_display_2.dataobject='d_profile_const_form_dragon' AND idw_wcr_display_2.rowcount()>0 then
				wf_get_first_last_tabcol(idw_wcr_display_2)
				idw_wcr_display_2.POST setrow(long(idw_wcr_display_2.Object.DataWindow.LastRowOnPage))
				idw_wcr_display_2.POST setcolumn(is_first_column)
				idw_wcr_display_2.POST SetRow(1)
				idw_wcr_display_2.POST SetFocus()
			else
				this.POST setrow(long(this.Object.DataWindow.LastRowOnPage))
				this.POST setcolumn(is_first_column)
				this.POST SetFocus()
			end if
		case else
			if TRIM(is_first_column) <> '' then
				this.POST setrow(long(this.Object.DataWindow.LastRowOnPage))
				this.POST setcolumn(is_first_column)
				this.POST SetFocus()
			end if
		end choose
	End If
	 
	IF this.DataObject = 'd_profile_ship_pkg_info_form_dragon_2' THEN
		If (this.GetColumnName()='shipping_frequency'  OR this.GetColumnName()='shipping_frequency_other') Then
	 		if	this.Object.shipping_frequency[this.RowCount()] = '-99' then  //column is visible
				this.POST setrow(long(this.Object.DataWindow.LastRowOnPage))
				this.POST setcolumn(15) //shipping_frequency_other
				this.POST setFocus()
			elseif idw_wcr_display_5.RowCount() > 0 then //Bulk is checked and container size has rows
				 wf_get_first_last_tabcol(idw_wcr_display_5)
				 if is_first_column<>"" then
					idw_wcr_display_5.POST setrow(long(idw_wcr_display_5.Object.DataWindow.LastRowOnPage))
					idw_wcr_display_5.POST SetRow(1)
					idw_wcr_display_5.POST SetFocus()
				end if
			else
				 wf_get_first_last_tabcol(this) 
				 IF is_first_column<>"" then   
					//this.POST setcolumn(33) //dot_waste_flag
					this.POST setrow(long(this.Object.DataWindow.LastRowOnPage)) //End of the line; return focus to the top of dw_wcr_display_1
					this.POST setcolumn(is_first_column)
					this.POST setFocus()
				end if
			end if
		End If
	END IF
END IF


end event

type dw_wcr_display_5 from datawindow within tabpage_wcr
event ue_keypressed pbm_dwnkey
boolean visible = false
integer x = 3296
integer y = 964
integer width = 1024
integer height = 664
integer taborder = 280
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_container_size_dragon"
boolean vscrollbar = true
borderstyle borderstyle = stylelowered!
end type

event ue_keypressed;//DevOps 13955 info_gde 04/14/2022; Add New Profile (Profile Tab) - All 
IF Key=KeyTab!  THEN
	IF this.GetRow()=this.RowCount() THEN
	IF TRIM(is_first_column) <> '' THEN
		wf_get_first_last_tabcol(idw_wcr_display_1)   
		idw_wcr_display_1.POST setrow(long(idw_wcr_display_1.Object.DataWindow.LastRowOnPage))
		idw_wcr_display_1.POST setcolumn(is_first_column)
		idw_wcr_display_1.POST setfocus()
	END IF
   END IF
END IF





end event

event itemchanged;datawindowchild	ldwc
u_tabpage_profile_shipping ltabpage_profile_shipping
string ls_bill_unit_code,ls_find
long ll_find 

// Don't allow any changes 
IF is_access = "V" OR is_access = "P" THEN
	RETURN 2
END IF

CHOOSE CASE Lower(dwo.name)
	CASE "bill_unit_code"
		This.GetChild("bill_unit_code", ldwc)
		This.Object.bill_unit_desc[row] = ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
		 ls_bill_unit_code = This.Object.bill_unit_code[This.GetRow()]
		//DevOps:14710
		  IF Isvalid(itab_price) THEN
				ltabpage_profile_shipping = itab_price.control[1]
				IF Isvalid(ltabpage_profile_shipping) THEN 
					  ls_find = "bill_unit_code = " + "'" + ls_bill_unit_code + "'"
					  ll_find = ltabpage_profile_shipping.dw_shipping_unit.Find(ls_find,1,ltabpage_profile_shipping.dw_shipping_unit.Rowcount())
					  IF ll_find = 0 OR IsNull(ll_find) THEN
						  ltabpage_profile_shipping.dw_shipping_unit.InsertRow(row)
						  ltabpage_profile_shipping.dw_shipping_unit.object.bill_unit_code[row]= data
						 // ltabpage_profile_shipping.dw_shipping_unit.object.quantity[row]=  ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
						  ltabpage_profile_shipping.dw_shipping_unit.VScrollBar = TRUE 		
					  ELSE
						  ltabpage_profile_shipping.dw_shipping_unit.object.bill_unit_code[ll_find]= data
						  //ltabpage_profile_shipping.dw_shipping_unit.object.bill_unit_desc[ll_find]=  ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
						  //ltabpage_profile_shipping.dw_shipping_unit.object.quantity[row]=  ldwc.GetItemString(ldwc.GetRow(), "bill_unit_desc")
						  //ltabpage_profile_shipping.dw_shipping_unit.VScrollBar = TRUE 			
					END IF
				END IF			  
			END IF
	CASE ELSE
END CHOOSE

POST wf_build_dot_shipping_desc()
POST wf_wcr_profile_map_sync (this, dwo.Name, row, data)

ib_changed_profile = TRUE
end event

event buttonclicked;//DevOps #15389 info_gde 04/27/2020; EQAI - New Profile - Sec C8 - Format 
//DevOps #15241 info_gde 05/01/2020; Add New Profile (Profile Tab) - Section C. (list box not showing container)

integer			li_response
string ls_del_bill_unit_code,ls_find
long				ll_profile_id, ll_row_header, ll_row_find,ll_find
Long				ll_new_row,ll_row_count,ll_rowcount
DWItemStatus	ldwItemStatus
u_tabpage_profile_shipping ltabpage_profile_shipping

IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
ELSE
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
END IF

CHOOSE CASE dwo.name
	CASE "b_add" //DevOps #15241 info_gde 05/01/2020;
		// DevOPs:16153
	//	li_response = MessageBox(gs_app_name + ":  Add Container Size", "Please select NO to add Container size or YES to add Bulk Unit", Question!, YesNoCancel!)
//	IF li_response = 2 THEN
		// If either Totes or Drums is checked, then set the bill unit table lookup flag to T //DevOps #15241 info_gde 05/01/2020;
		IF idw_header.Object.container_type_totes[ll_row_header] = 'T' OR idw_header.Object.container_type_drums[ll_row_header] = 'T' OR & 
			idw_header.Object.container_type_pallet[ll_row_header] = 'T' OR idw_header.Object.container_type_boxes[ll_row_header] = 'T' OR &
			idw_header.Object.container_type_cylinder[ll_row_header] = 'T' THEN
		//THEN
				ll_row_find = This.Find("is_bill_unit_table_lookup='F'", 1, This.RowCount() + 1)
				// If there is already a manually entered bill unit, set the new container size row to be a selected bill unit
				IF ll_row_find > 0 THEN
					if this.rowcount()>=7 then//DevOps #15389 info_gde 04/27/2020
					else
					ll_new_row = This.InsertRow(0)
					This.ScrollToRow(ll_new_row)
					This.Object.is_bill_unit_table_lookup[ll_new_row] = 'T'
					This.SetItemStatus(ll_new_row,0,Primary!,NotModified!)
					end if
				ELSE
					IF idw_header.Object.container_type_bulk[ll_row_header] = 'T' THEN //DevOps #15241 info_gde 05/01/2020;
					
//					OR idw_header.Object.container_type_pallet[ll_row_header] = 'T' OR &
//						idw_header.Object.container_type_boxes[ll_row_header] = 'T' OR idw_header.Object.container_type_cylinder[ll_row_header] = 'T' THEN
					 	// If Bulk/Pallet/Boxes or Cylinder is also checked, ask the user which kind of bill unit is being entered
						li_response = MessageBox(gs_app_name + ":  Add Container Size", "Please select 'Yes' to add a container size with a standard bill unit, or select 'No' to add a container size with a bill unit to be typed in, or select 'Cancel' to cancel adding a container size.", Question!, YesNoCancel!)
						IF li_response = 1 THEN
							if this.rowcount()>=7 then//DevOps #15389 info_gde 04/27/2020
							else
							ll_new_row = This.InsertRow(0)
							This.ScrollToRow(ll_new_row)
							This.Object.is_bill_unit_table_lookup[ll_new_row] = 'T'
							end if
						ELSEIF li_response = 2 THEN
							if this.rowcount()>=7 then//DevOps #15389 info_gde 04/27/2020
							else
							ll_new_row = This.InsertRow(0)
							This.ScrollToRow(ll_new_row)
							This.Object.is_bill_unit_table_lookup[ll_new_row] = 'F'
							end if
						ELSE
							RETURN
						END IF
					ELSE
					 	// None of Bulk/Pallet/Boxes/Cylinder are also checked, so just insert a new container size with a selected bill unit
						if this.rowcount()>=7 then//DevOps #15389 info_gde 04/27/2020
						else
						ll_new_row = This.InsertRow(0)
						This.ScrollToRow(ll_new_row)
						This.Object.is_bill_unit_table_lookup[ll_new_row] = 'T'
						end if
					END IF
				END IF
				//DevOps:16153 - Commented else code and added b_bulk 
	//	ELSE
			// Neither Totes nor Drums is checked, so check if at least one of Bulk/Pallet/Boxes/Cylinder is checked
	//		IF idw_header.Object.container_type_bulk[ll_row_header] = 'T' THEN //DevOps #15241 info_gde 05/01/2020;
			
//			OR idw_header.Object.container_type_pallet[ll_row_header] = 'T' OR &
//				idw_header.Object.container_type_boxes[ll_row_header] = 'T' OR idw_header.Object.container_type_cylinder[ll_row_header] = 'T' THEN
				// Check if there is already a container size with a typed-in bill unit
					//DevOps:16153 - EQAI Container Size Bulk Size Issue
//				ll_row_find = This.Find("is_bill_unit_table_lookup='F'", 1, This.RowCount() + 1)
//				IF ll_row_find > 0 THEN
//					MessageBox(gs_app_name + ":  Add Container Size", "A container size may not be added because there is already a container size with a typed-in bill unit.", StopSign!)
//					RETURN
//				ELSE
//					if this.rowcount()>=7 then//DevOps #15389 info_gde 04/27/2020
//					 else
//					ll_new_row = This.InsertRow(0)
//					This.ScrollToRow(ll_new_row)
//					This.Object.is_bill_unit_table_lookup[ll_new_row] = 'F'
//					end if
//				END IF
			ELSE
				MessageBox(gs_app_name + ":  Add Container Size", "Please select a container type before adding a container size.", Exclamation!)
				RETURN
			END IF
//		END IF
//	ELSE  
//		IF idw_header.Object.container_type_bulk[ll_row_header] = 'T' THEN 
//			ll_new_row = This.InsertRow(0)
//			This.ScrollToRow(ll_new_row)
//			This.Object.is_bill_unit_table_lookup[ll_new_row] = 'F'
//		END IF
//  END IF
		//Devops:16153	
CASE "b_bulk"			
		IF idw_header.Object.container_type_bulk[ll_row_header] = 'T' THEN 
			ll_rowcount = This.RowCount()
			//DevOps:16692
			This.Accepttext()
			ll_new_row = This.InsertRow(0)
			This.ScrollToRow(ll_new_row)
			This.Object.is_bill_unit_table_lookup[ll_new_row] = 'F'
		ELSE
			MessageBox(gs_app_name + ":  Add Container Size", "Please select a Bulk container type before adding a container size.", Exclamation!)
			RETURN
		END IF
CASE "b_del"
		li_response = MessageBox(gs_app_name + ":  Delete Container Size", "Are you sure you want to delete this row?", Question!, YesNo!, 2)
		IF li_response = 1 THEN
			// Delete this container size
			ldwItemStatus = This.GetItemStatus(row, 0, Primary!)
			IF ldwItemStatus = New! OR ldwItemStatus = NewModified! THEN
				 ls_del_bill_unit_code = This.Object.bill_unit_code[row]
				This.RowsDiscard(row, row, Primary!)
				
				  IF Isvalid(itab_price) THEN
						ltabpage_profile_shipping = itab_price.control[1]
						IF Isvalid(ltabpage_profile_shipping) THEN 
					        ll_row_count =  ltabpage_profile_shipping.dw_shipping_unit.Rowcount()	
							  ls_find = "bill_unit_code =" + "'" + ls_del_bill_unit_code + "'"
							  ll_find = ltabpage_profile_shipping.dw_shipping_unit.Find(ls_find,1,ltabpage_profile_shipping.dw_shipping_unit.Rowcount())
							  ltabpage_profile_shipping.dw_shipping_unit.DeleteRow(ll_find)
						END IF
					END IF
					
			ELSE
				wf_audit(idw_container_size, ll_profile_id, row, TRUE)
				ls_del_bill_unit_code = This.Object.bill_unit_code[row]
				This.DeleteRow(row)
					//DevOps:14710
				  IF Isvalid(itab_price) THEN
						ltabpage_profile_shipping = itab_price.control[1]
						IF Isvalid(ltabpage_profile_shipping) THEN 
					        ll_row_count =  ltabpage_profile_shipping.dw_shipping_unit.Rowcount()	
							  ls_find = "bill_unit_code =" + "'" + ls_del_bill_unit_code + "'"
							  ll_find = ltabpage_profile_shipping.dw_shipping_unit.Find(ls_find,1,ltabpage_profile_shipping.dw_shipping_unit.Rowcount())
							  ltabpage_profile_shipping.dw_shipping_unit.DeleteRow(ll_find)
						END IF
					END IF
			END IF 
		END IF
		
	CASE ELSE
END CHOOSE
end event

type tabpage_price from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Price"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
tab_price tab_price
end type

on tabpage_price.create
this.tab_price=create tab_price
this.Control[]={this.tab_price}
end on

on tabpage_price.destroy
destroy(this.tab_price)
end on

type tab_price from tab within tabpage_price
integer width = 4658
integer height = 2068
integer taborder = 20
integer textsize = -9
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 67108864
boolean raggedright = true
boolean focusonbuttondown = true
boolean boldselectedtext = true
integer selectedtab = 1
end type

event selectionchanging;//Devops 21596,58318 & 58155-Added By Venu for lazy load implementation. (When user selects the approver/facility tab then respective transporters will get retrived) - Start	
/* 
Function/Event: selectionchanging
Purpose       : When user selects the approver/facility tab then respective transporters will get retrived                    
			       Previously selected approver transporter pages will get closed if no modification, if any modification in quotes and load sections then promt for save changes.

 ---------------------- Revision History ------------------------------------------------
Version  created by   Date      Description of change
-------    -------------  -------- ---------------------------------------------------------
   01         Venu         11/2022  Devops# 21596,58318,58155             

*/

Integer li_idx,li_save_req_ret,li_pre_sel_tab_newindex
Long ll_index,ll_disposal_count,ll_profile_id
Integer li_last_tab,li_company_id_bund_ret,li_profit_ctr_id_bund_ret,ll_quote_id_bund_ret
u_tabpage_profile_price ltabpage_profile_price
u_tabpage_profile_price ltabpage_profile_price_cnt

ll_index = UpperBound(itabpage_profile_price)
li_last_tab = upperbound(itab_price.control)

If oldindex < 0 Or newindex < 0 Then Return 0

li_pre_sel_tab_newindex=ii_pre_sel_tab_newindex

If ii_pre_sel_tab_newindex = newindex Then Return 0
If oldindex=newindex Then Return 0

if newindex=1 Then 
   ii_pre_sel_tab_index=oldindex
   Return 0
End If	

	
If newindex > 1 Then ii_pre_sel_tab_newindex=newindex

If (newindex > 1 and  oldindex > 1) OR (oldindex=1  and newindex=2 and ib_copy ) Then
	     If  oldindex =1 and ib_copy Then oldindex=2
	     li_save_req_ret=0
		 ib_save_facility_change=False
		 ltabpage_profile_price = itab_price.control[oldindex]
		 IF IsValid(ltabpage_profile_price) THEN
			IF ltabpage_profile_price.visible = true THEN														
				li_save_req_ret=ltabpage_profile_price.uof_bundle_transport_save_req(oldindex)							
				If li_save_req_ret > 0 Then
					ib_save_facility_change=True 					
					IF wf_check_changes() < 0 THEN
						ii_pre_sel_tab_newindex=li_pre_sel_tab_newindex
						RETURN 1						
					END IF
					 IF ltabpage_profile_price.visible = True THEN	 ltabpage_profile_price.ib_trans_bund_tab_add_delete=False	
				End If
				SetMicroHelp("Closing faciltiy transporters page...")				
				ltabpage_profile_price.uof_bundle_tp_destroy(oldindex,newindex,'T')
			End IF			
		End If				
		ltabpage_profile_price_cnt=itab_price.control[newindex]
		ll_disposal_count=ltabpage_profile_price_cnt.idw_disposal.rowcount()
		If ll_disposal_count > 0 Then
			SetMicroHelp("Retrieving selected faciltiy transporters page...")
			ll_profile_id=ltabpage_profile_price_cnt.idw_disposal.object.profile_id[ll_disposal_count]
			li_company_id_bund_ret=ltabpage_profile_price_cnt.idw_disposal.object.company_id[ll_disposal_count]
			li_profit_ctr_id_bund_ret=ltabpage_profile_price_cnt.idw_disposal.object.profit_ctr_id[ll_disposal_count]
			ll_quote_id_bund_ret=ltabpage_profile_price_cnt.idw_disposal.object.quote_id[ll_disposal_count]								
			If Not ib_copy Then
				ltabpage_profile_price_cnt.uof_bundle_transport_retrieve(ll_profile_id,li_company_id_bund_ret,li_profit_ctr_id_bund_ret,ll_quote_id_bund_ret,'A','RETRIVAL') 									
			Elseif ib_copy Then		
				ltabpage_profile_price_cnt.uof_bundle_transport_retrieve(ll_profile_id,li_company_id_bund_ret,li_profit_ctr_id_bund_ret,ll_quote_id_bund_ret,'A','COPY') 										
			End If	
		End If	
		SetMicroHelp("Ready")
 Elseif   newindex > 1 and oldindex=1 and ii_pre_sel_tab_index <> newindex and ii_pre_sel_tab_index > 0 Then
        	     ib_save_facility_change=False
			 li_save_req_ret=0
			 ltabpage_profile_price = itab_price.control[ii_pre_sel_tab_index]
			 IF IsValid(ltabpage_profile_price) THEN
				IF ltabpage_profile_price.visible = true THEN																
						li_save_req_ret=ltabpage_profile_price.uof_bundle_transport_save_req(ii_pre_sel_tab_index)				
						If li_save_req_ret > 0 Then
							ib_save_facility_change=True
							IF wf_check_changes() < 0 THEN
								ii_pre_sel_tab_newindex=li_pre_sel_tab_newindex
								RETURN 1
							END IF
						IF ltabpage_profile_price.visible = True THEN	 ltabpage_profile_price.ib_trans_bund_tab_add_delete=False	
						End If	
						SetMicroHelp("Closing faciltiy transporters page...")	
						ltabpage_profile_price.uof_bundle_tp_destroy(ii_pre_sel_tab_index,newindex,'T')
				End IF
			End If
			ii_pre_sel_tab_index=0			
			ltabpage_profile_price_cnt=itab_price.control[newindex]
			ll_disposal_count=ltabpage_profile_price_cnt.idw_disposal.rowcount()
			If ll_disposal_count > 0 Then
				SetMicroHelp("Retrieving selected faciltiy transporters page...")
				ll_profile_id=ltabpage_profile_price_cnt.idw_disposal.object.profile_id[ll_disposal_count]
				li_company_id_bund_ret=ltabpage_profile_price_cnt.idw_disposal.object.company_id[ll_disposal_count]
				li_profit_ctr_id_bund_ret=ltabpage_profile_price_cnt.idw_disposal.object.profit_ctr_id[ll_disposal_count]
				ll_quote_id_bund_ret=ltabpage_profile_price_cnt.idw_disposal.object.quote_id[ll_disposal_count]										
				If Not ib_copy Then
					ltabpage_profile_price_cnt.uof_bundle_transport_retrieve(ll_profile_id,li_company_id_bund_ret,li_profit_ctr_id_bund_ret,ll_quote_id_bund_ret,'A','RETRIVAL') 											
			     Elseif ib_copy Then		
					ltabpage_profile_price_cnt.uof_bundle_transport_retrieve(ll_profile_id,li_company_id_bund_ret,li_profit_ctr_id_bund_ret,ll_quote_id_bund_ret,'A','COPY') 												
				End If	
			End if		
			SetMicroHelp("Ready")
  End If
//Devops 21596,58318 & 58155-Added By Venu for lazy load implementation. (When user selects the approver/facility tab then respective transporters will get retrived) - End

end event

type tabpage_rules from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Rules"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_rules dw_rules
end type

on tabpage_rules.create
this.dw_rules=create dw_rules
this.Control[]={this.dw_rules}
end on

on tabpage_rules.destroy
destroy(this.dw_rules)
end on

type dw_rules from datawindow within tabpage_rules
integer width = 4411
integer height = 2068
integer taborder = 50
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_regulatory_rule"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;long		ll_row_header, ll_row_new, ll_reg_rule_id
long		ll_quote_id, ll_profile_id, ll_customer_id, ll_rule_id
string	ls_rule_name, ls_rule_desc
string	ls_access
int li_rc
datetime	ldt_today
int li_idx
str_pick lstr_pick
str_pass	lstr_pass

////////////////////////////////////
IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change merchandise rules?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Rules", "You do not have access to change regulatory rules.", Exclamation!)
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
END IF
////////////////////////////////////

// Set row to the button clicked row
IF this.GetRow() <> row THEN
	this.ScrolltoRow(row)
END IF
ll_quote_id = idw_header.Object.quote_id[ll_row_header]
ll_profile_id = idw_header.Object.profile_id[ll_row_header]
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
ldt_today = DateTime(Today(), Now())

CHOOSE CASE Lower(dwo.name)		
		
	CASE "b_insert"
		
		lstr_pick.s_window_title			= "Rule Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		lstr_pick.i_tab_count				= 2
		lstr_pick.s_button_text[1]			= "Select"
		lstr_pick.s_button_text[2]			= "All"
		lstr_pick.s_button_text[3]			= "All (This Tab Only)"
		lstr_pick.i_return_column_count	= 3
		lstr_pick.to_transaction			= itr_share
		
		FOR li_idx = 1 to 2
			CHOOSE CASE li_idx
				CASE 1
					lstr_pick.s_tab_title[li_idx]	= 'Rules for this Profile'
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_regulatory_rule_profile"
					lstr_pick.s_where[li_idx] = " ProfileXMerchandiseCategory.profile_id = " + string(ll_profile_id)
				CASE 2
					lstr_pick.s_tab_title[li_idx]	= 'All Rules'
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_regulatory_rule_assigned"
					lstr_pick.s_where[li_idx] = ""
			END CHOOSE
			lstr_pick.i_tabpage_type[li_idx]	= 1
			lstr_pick.s_new_reference[li_idx] = ""
		NEXT
		
		for li_idx = 1 to this.RowCount()
			ll_rule_id = this.Object.rule_id[li_idx]
			if not IsNull(ll_rule_id) then
				ll_row_new = UpperBound(lstr_pick.s_assigned) + 1
				lstr_pick.s_assigned[ll_row_new] = "rule_id=" + string(ll_rule_id)
			end if
		next
		lstr_pick.s_initial_modify = "rule_id.Height.AutoSize='Yes' rule_name.Height.AutoSize='Yes' rule_description.Height.AutoSize='Yes'"

		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
			
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// Get return values
				ll_rule_id = lstr_pick.return1[li_idx]
				ls_rule_name = lstr_pick.return2[li_idx]
				ls_rule_desc = lstr_pick.return3[li_idx]
				
				if idw_rules.Find ("rule_id=" + string(ll_rule_id), &
										1, idw_rules.RowCount()) < 1 then
					ll_row_new = idw_rules.InsertRow (0)
					idw_rules.SetItem (ll_row_new, "profile_id", ll_profile_id)
					idw_rules.SetItem (ll_row_new, "rule_id", ll_rule_id)
					idw_rules.SetItem (ll_row_new, "rule_name", ls_rule_name)
					idw_rules.SetItem (ll_row_new, "rule_description", ls_rule_desc)
					idw_rules.SetItem (ll_row_new, "date_added", DateTime(Today(),Now()))
					idw_rules.SetItem (ll_row_new, "added_by", gs_user_id)
					idw_rules.SetItem (ll_row_new, "date_modified", DateTime(Today(),Now()))
					idw_rules.SetItem (ll_row_new, "modified_by", gs_user_id)
				end if
			NEXT
			// Sort to order
			idw_rules.Sort()
		END IF

	CASE "b_delete"
		
		if MessageBox (gs_app_name + ":  Remove Rule", "Are you sure you want to remove ~"" + this.GetItemString(row, "rule_name") + "~"?", Question!, YesNo!, 2) = 2 then return

		// Audit and Remove the pricing for this approval
		li_rc = wf_audit(idw_rules, ll_profile_id, row, TRUE)
		IF li_rc <> gi_success THEN
			MessageBox(gs_app_name + ":  Rule Removal", "Audit failed; Rule cannot not removed.", Exclamation!)
		ELSE
			This.DeleteRow(row)
		END IF

	CASE "b_delete_all"
		
			if MessageBox (gs_app_name + ": Remove ALL Rules", + &
				"Are you sure you want to remove ALL rules?  (To remove only one, click on the minus button next to the rule you wish to remove.)", &
				Question!, YesNo!, 2) = 2 then return
			
			li_rc = wf_audit(idw_rules, ll_profile_id, 0, TRUE)
			IF li_rc <> gi_success THEN
				MessageBox(gs_app_name + ":  Rule Removal", "Audit failed; Rule cannot not removed.", Exclamation!)
			ELSE
				for li_idx = this.RowCount() to 1 step -1
					this.DeleteRow (li_idx)
				next
			END IF
			
	Case "b_info"	
		ll_reg_rule_id = GetItemNumber(Row,'rule_id')
		lstr_pass.s_action = "regulatory rule"
		lstr_pass.s_dataobject = "d_regulatory_rule_print"
		lstr_pass.l[1] = ll_reg_rule_id
		OpenWithParm(w_popup_info, lstr_pass)

END CHOOSE
end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
END IF
end event

event rowfocuschanging;// Prevent going to new row
IF This.Rowcount() > 0 AND currentrow > 0 THEN
	IF newrow > This.RowCount() THEN
		RETURN 1
	END IF
END IF


end event

event itemerror;// rb prevent double-error-message on duplicate entry
if dwo.name = "rule_id" then return 1

end event

type tabpage_category from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Category"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_category dw_category
end type

on tabpage_category.create
this.dw_category=create dw_category
this.Control[]={this.dw_category}
end on

on tabpage_category.destroy
destroy(this.dw_category)
end on

type dw_category from datawindow within tabpage_category
integer width = 4411
integer height = 2068
integer taborder = 67
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_merchandise_category"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;long		ll_row_header, ll_row_new
long		ll_quote_id, ll_profile_id, ll_customer_id, ll_category_id
string	ls_desc
string	ls_access
int li_rc
datetime	ldt_today
str_pick lstr_pick
int li_idx
long		ll_disposition_id
string	ls_disposition_desc
string	ls_msg
string ls_err, ls_err2
long ll_find

////////////////////////////////////
IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN

// Can user change merchandise rules?
li_rc = wf_access_waste_const()
IF li_rc = gi_failure THEN
	MessageBox(gs_app_name+": Category", "You do not have access to change merchandise categories.", Exclamation!)
	RETURN
END IF	

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
ELSEIF idw_header.Object.curr_status_code[ll_row_header] <> "A" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "H" &
	AND idw_header.Object.curr_status_code[ll_row_header] <> "P" THEN
	RETURN
END IF
////////////////////////////////////


// Set row to the button clicked row
IF this.GetRow() <> row THEN
	this.ScrolltoRow(row)
END IF
ll_quote_id = idw_header.Object.quote_id[ll_row_header]
ll_profile_id = idw_header.Object.profile_id[ll_row_header]
ll_customer_id = idw_header.Object.customer_id[ll_row_header]
ldt_today = DateTime(Today(), Now())

CHOOSE CASE Lower(dwo.name)		
		
	CASE "b_insert"
		
		lstr_pick.s_window_title			= "Category Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= TRUE
		lstr_pick.i_tab_count				= 1
		lstr_pick.s_button_text[1]			= "Select"
		lstr_pick.s_button_text[2]			= "All"
		lstr_pick.i_return_column_count	= 4
		lstr_pick.to_transaction			= itr_share
		
		FOR li_idx = 1 to 1
			CHOOSE CASE li_idx
				CASE 1
					lstr_pick.s_tab_title[li_idx]	= 'Categories'
					lstr_pick.s_dataobject[li_idx] = "d_quick_select_merchandise_category"
					lstr_pick.s_where[li_idx] = ""
			END CHOOSE
			lstr_pick.i_tabpage_type[li_idx]	= 1
			lstr_pick.s_new_reference[li_idx] = ""
		NEXT
		
		for li_idx = 1 to this.RowCount()
			ll_category_id = this.Object.category_id[li_idx]
			if not IsNull(ll_category_id) then
				ll_row_new = UpperBound(lstr_pick.s_assigned) + 1
				lstr_pick.s_assigned[ll_row_new] = "category_id=" + string(ll_category_id)
			end if
		next
		lstr_pick.s_initial_modify = "category_id.Height.AutoSize='Yes' category_desc.Height.AutoSize='Yes'"

		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
			
			// rb, only retrieve customer dispositions if categories are added. And then
			//     ony retrieve them one time
			if not IsValid (ids_customer_dispositions) then
				ids_customer_dispositions = create datastore
				ids_customer_dispositions.Create (itr_share.Syntaxfromsql ("select mcc.category_id as category_id, d.disposition_id as disposition_id, d.disposition_desc as disposition_desc from MerchandiseCategoryCustomer mcc, Disposition d where mcc.customer_id = " + string(wf_get_customer_id()) + " and mcc.disposition_id = d.disposition_id", "", ls_err), ls_err2)
				ids_customer_dispositions.SetTransObject (itr_share)
				ids_customer_dispositions.Retrieve ()
			end if
			
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				// Get return values
				ll_category_id = lstr_pick.return1[li_idx]
				ls_desc = lstr_pick.return2[li_idx]
				ll_disposition_id = lstr_pick.return3[li_idx]
				ls_disposition_desc = lstr_pick.return4[li_idx]
				
				// look for a customer overriden disposition
				ll_find = ids_customer_dispositions.Find ("category_id=" + string(ll_category_id), &
																		1, ids_customer_dispositions.RowCount())
				if ll_find > 0 then
					ll_disposition_id = ids_customer_dispositions.Object.disposition_id[ll_find]
					ls_disposition_desc = ids_customer_dispositions.Object.disposition_desc[ll_find]
				end if

				// Generate warning message if disposition differs from Profile disposition
				if not isnull(idw_detail.Object.disposition_id[ll_row_header]) then
					if idw_detail.Object.disposition_id[ll_row_header] <> ll_disposition_id then
						if Len (ls_msg) = 0 then
							ls_msg = "The following categories were selected with dispositions that do not match the Profile disposition:~r~n"
						end if
						ls_msg += "~r~n   " + ls_desc
					end if
				end if
				
				if idw_category.Find ("category_id=" + string(ll_category_id), &
											1, idw_category.RowCount()) < 1 then
					ll_row_new = idw_category.InsertRow (0)
					idw_category.SetItem (ll_row_new, "profile_id", ll_profile_id)
					idw_category.SetItem (ll_row_new, "category_id", ll_category_id)
					idw_category.SetItem (ll_row_new, "category_desc", ls_desc)
					idw_category.SetItem (ll_row_new, "date_added", DateTime(Today(),Now()))
					idw_category.SetItem (ll_row_new, "added_by", gs_user_id)
					idw_category.SetItem (ll_row_new, "date_modified", DateTime(Today(),Now()))
					idw_category.SetItem (ll_row_new, "modified_by", gs_user_id)
					if ll_find > 0 then
						idw_category.SetItem (ll_row_new, "cust_disposition_desc", ls_disposition_desc)
					else
						idw_category.SetItem (ll_row_new, "base_disposition_desc", ls_disposition_desc)
					end if
					
				end if
			NEXT
			// Sort to order
			idw_category.Sort()
		END IF

	CASE "b_delete"
		
		if MessageBox (gs_app_name + ":  Remove Category", "Are you sure you want to remove ~"" + this.GetItemString (row, "category_desc") + "~"?", Question!, YesNo!, 2) = 2 then return

		// Audit and Remove the pricing for this approval
		li_rc = wf_audit(idw_category, ll_profile_id, row, TRUE)
		IF li_rc <> gi_success THEN
			MessageBox(gs_app_name + ":  Category Removal", "Audit failed; Category cannot not removed.", Exclamation!)
		ELSE
			This.DeleteRow(row)
		END IF

	CASE "b_delete_all"
		
			if MessageBox (gs_app_name + ": Remove ALL Categories", + &
				"Are you sure you want to remove ALL categories?  (To remove only one, click on the minus button next to the category you wish to remove.)", &
				Question!, YesNo!, 2) = 2 then return
			
			li_rc = wf_audit(idw_category, ll_profile_id, 0, TRUE)
			IF li_rc <> gi_success THEN
				MessageBox(gs_app_name + ":  Category Removal", "Audit failed; Category cannot not removed.", Exclamation!)
			ELSE
				for li_idx = this.RowCount() to 1 step -1
					this.DeleteRow (li_idx)
				next
			END IF

END CHOOSE

end event

event editchanged;IF Right(This.GetText(), 1) = "'" THEN
	MessageBox(gs_app_name + ":  Error", "Cannot enter single quote in this field.", StopSign!)
	This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
END IF
end event

event rowfocuschanging;// Prevent going to new row
IF This.Rowcount() > 0 AND currentrow > 0 THEN
	IF newrow > This.RowCount() THEN
		RETURN 1
	END IF
END IF


end event

event itemerror;// rb prevent double-error-message on duplicate entry
if dwo.name = "category_id" then return 1

end event

type tabpage_recipe from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Recipe"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_recipe dw_recipe
end type

on tabpage_recipe.create
this.dw_recipe=create dw_recipe
this.Control[]={this.dw_recipe}
end on

on tabpage_recipe.destroy
destroy(this.dw_recipe)
end on

type dw_recipe from datawindow within tabpage_recipe
integer width = 4430
integer height = 2064
integer taborder = 30
string title = "none"
string dataobject = "d_profile_recipe"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;long		ll_row_header,  ll_profile_id,ll_recipe_id,ll_row_new,ll_reagent_id,ll_rowcount,ll_count,ll_row,ll_new
string	ls_desc, ls_find_approval, ls_access, ls_find, ls_company_string,ls_profit_string,ls_status,ls_recipe_desc
string ls_filter,ls_step_status,ls_reagent_desc,ls_step_description,ls_batch_location,ls_primary_flag,ls_find_primary_flag
int li_rc,li_profit_ctr_id,li_company_id,i
datetime	ldt_today
double ld_proposed_reagent_percentage,ld_lab_reagent_percentage
datastore lds_recipe
str_pick lstr_pick
int li_idx

////////////////////////////////////
IF is_access = "V"  THEN RETURN

// Check for header record		
idw_header.AcceptText()
ll_row_header = idw_header.GetRow()
IF ll_row_header <= 0 THEN
	RETURN
END IF
////////////////////////////////////

// Set row to the button clicked row
IF this.GetRow() <> row THEN
	this.ScrolltoRow(row)
END IF

ll_profile_id = idw_header.Object.profile_id[ll_row_header]
ldt_today = DateTime(Today(), Now())

CHOOSE CASE Lower(dwo.name)		
		
	CASE "b_insert"
		idw_approval.Accepttext()
		 	FOR i = 1 to  idw_approval.Rowcount() 
					li_company_id = idw_approval.object.company_id[i]
					li_profit_ctr_id =  idw_approval.object.profit_ctr_id[i]
					IF i = 1 THEN
						ls_company_string = string (li_company_id)
						ls_profit_string = string (li_profit_ctr_id)
					ELSE
					    ls_company_string = String (ls_company_string + ',' + string (li_company_id) )
					    ls_profit_string = String ( ls_profit_string + ',' + string(li_profit_ctr_id ) )
					END IF
		   NEXT
			
		lstr_pick.s_window_title			= "Recipe Select"
		lstr_pick.i_window_width			= 0
		lstr_pick.b_multipick				= FALSE
		lstr_pick.i_tab_count				= 1
		lstr_pick.s_button_text[1]			= "Select"
		lstr_pick.s_button_text[2]			= "All"
		lstr_pick.i_return_column_count	= 6
		lstr_pick.to_transaction			= itr_share
		lstr_pick.s_tab_title[1]	= 'Recipes'
		lstr_pick.s_dataobject[1] = "d_quick_select_recipe"
		lstr_pick.s_where[1] = "RecipeHeader.company_id in ( " + string(ls_company_string ) + ')' + "AND RecipeHeader.profit_ctr_id in ( " + string(ls_profit_string) + ')' + " AND RecipeHeader.recipe_validated = 'Y' "
		lstr_pick.i_tabpage_type[1]	= 1
		lstr_pick.s_new_reference[1] = ""

		// Open the popup
		OpenWithParm(w_popup_quick_select, lstr_pick)
		idw_recipe.SetRedraw(FALSE)
		// Get the return values
		lstr_pick = Message.PowerObjectParm
		IF IsValid(lstr_pick) THEN
			SetPointer(HourGlass!)
						
			FOR li_idx = 1 TO lstr_pick.i_return_record_count
				
				// Get return values
				ll_recipe_id = lstr_pick.return1[li_idx]				
				ls_desc = lstr_pick.return2[li_idx]		
				li_company_id =  lstr_pick.return3[li_idx]		
				li_profit_ctr_id =  lstr_pick.return4[li_idx]	
				ls_status = 	lstr_pick.return5[li_idx]	
				ls_recipe_desc =	lstr_pick.return6[li_idx]
//  				ls_step_description = lstr_pick.return7[li_idx]
//       			ll_reagent_id =	lstr_pick.return8[li_idx]
//				ls_step_status = lstr_pick.return9[li_idx]
//    				ld_proposed_reagent_percentage = lstr_pick.return10[li_idx]
//                  ld_lab_reagent_percentage = lstr_pick.return11[li_idx]
//                  ls_batch_location =  lstr_pick.return12[li_idx]
//		         ls_reagent_desc =  lstr_pick.return13[li_idx]
		
			NEXT
			    lds_recipe = CREATE DATASTORE
	   			lds_recipe.DataObject = "d_profile_recipe_detail"
	   			lds_recipe.SetTransObject(gtr_share)
			    ll_rowcount = lds_recipe.Retrieve(ll_recipe_id)			

				  ls_find = "company_id=" + string(li_company_id ) + "AND profit_ctr_id=" + string(li_profit_ctr_id) + " AND recipe_id =" + string(ll_recipe_id)
				  ls_find_primary_flag = "company_id=" + string(li_company_id ) + "AND profit_ctr_id=" + string(li_profit_ctr_id) + " AND primary_flag = 'Y' " 
				  IF idw_recipe.Find ( ls_find , 1, idw_recipe.RowCount() ) < 1 then
					  
					   IF  idw_recipe.Find ( ls_find_primary_flag , 1, idw_recipe.RowCount() ) < 1 then
							ls_primary_flag = 'Y'
					   ELSE
							ls_primary_flag = 'N'
					   END IF
						ll_new = idw_recipe_update.InsertRow (0)
						idw_recipe_update.SetItem (ll_new, "profile_id", ll_profile_id)
						idw_recipe_update.SetItem (ll_new, "recipe_id", ll_recipe_id)
						idw_recipe_update.SetItem (ll_new, "company_id", li_company_id)
						idw_recipe_update.SetItem (ll_new, "profit_ctr_id", li_profit_ctr_id)	
						idw_recipe_update.SetItem ( ll_new, "primary_flag",  ls_primary_flag )
						idw_recipe_update.SetItem (ll_new, "date_added", DateTime(Today(),Now()))
						idw_recipe_update.SetItem (ll_new, "added_by", gs_user_id)
						idw_recipe_update.SetItem (ll_new, "date_modified", DateTime(Today(),Now()))
						idw_recipe_update.SetItem (ll_new, "modified_by", gs_user_id)
						
					FOR i = 1 to ll_rowcount
						ls_step_description =  lds_recipe.object.recipedetail_step_description[i]
					      ll_row_new =     idw_recipe.InsertRow (0)
							idw_recipe.object.facility_name[ll_row_new] = string ( li_company_id, "00" ) + "-" + string ( li_profit_ctr_id, "00" + '-' +  lds_recipe.object.profitcenter_profit_ctr_name[i] ) 
							//profitcenter_profit_ctr_name 
						idw_recipe.SetItem (ll_row_new, "profile_id", ll_profile_id)
						idw_recipe.SetItem (ll_row_new, "recipe_id", ll_recipe_id)
						idw_recipe.SetItem (ll_row_new, "company_id", li_company_id)
						idw_recipe.SetItem (ll_row_new, "profit_ctr_id", li_profit_ctr_id)					
						idw_recipe.SetItem (ll_row_new, "recipedetail_step_description",ls_step_description)
						idw_recipe.SetItem (ll_row_new, "recipedetail_step_status", lds_recipe.object.recipedetail_step_status[i] )
						idw_recipe.SetItem (ll_row_new, "recipedetail_reagent_uid",lds_recipe.object.recipedetail_reagent_uid[i] )
						idw_recipe.SetItem (ll_row_new, "reagent_reagent_desc",lds_recipe.object.reagent_reagent_desc[i] )
						idw_recipe.SetItem (ll_row_new, "mix_order_sequence_id", lds_recipe.object.mix_order_sequence_id[i] )
						idw_recipe.SetItem ( ll_row_new, "proposed_reagent_percentage",  lds_recipe.object.proposed_reagent_percentage[i] )
						idw_recipe.SetItem (ll_row_new, "lab_reagent_percentage",  lds_recipe.object.lab_reagent_percentage[i] )
//						idw_recipe.SetItem (ll_row_new, "profileapprovalrecipe_location",  lds_recipe.object.recipedetail_batch_location[i] )
						idw_recipe.SetItem (ll_row_new, "date_added", DateTime(Today(),Now()))
						idw_recipe.SetItem (ll_row_new, "added_by", gs_user_id)
						idw_recipe.SetItem (ll_row_new, "date_modified", DateTime(Today(),Now()))
						idw_recipe.SetItem ( ll_row_new, "primary_flag",  ls_primary_flag )
						idw_recipe.SetItem ( ll_row_new, "mix_order_sequence_id",  lds_recipe.object.mix_order_sequence_id[i] )
						idw_recipe.SetItem (ll_row_new, "modified_by", gs_user_id)
						
							idw_recipe.SetItem ( ll_row_new, "recipeheader_recipe_name",  lds_recipe.object.recipeheader_recipe_name[i] )
							idw_recipe.SetItem ( ll_row_new, "recipeheader_recipe_status",  lds_recipe.object.recipeheader_recipe_status[i] )
							idw_recipe.SetItem ( ll_row_new, "recipeheader_batch_location",  lds_recipe.object.recipeheader_batch_location[i] )
							idw_recipe.SetItem ( ll_row_new, "recipeheader_effective_date",  lds_recipe.object.recipeheader_effective_date[i] )
							idw_recipe.SetItem ( ll_row_new, "recipeheader_expiration_date",  lds_recipe.object.recipeheader_expiration_date[i] )
							idw_recipe.SetItem ( ll_row_new, "recipeheader_recipe_validated",  lds_recipe.object.recipeheader_recipe_validated[i] )
							idw_recipe.SetItem ( ll_row_new, "recipeheader_recipe_reviewed_date",  lds_recipe.object.recipeheader_recipe_reviewed_date[i] )

					NEXT
					
				END IF
			// Sort to order
			idw_recipe.SetSort("facility A, recipe_id A, mix_order_sequence_id A")
			idw_recipe.Sort()
			idw_recipe.groupcalc()
			//idw_recipe.Sort()
		END IF
     	idw_recipe.SetRedraw(TRUE)
	CASE "b_delete"
		  ll_row   =	 this.GetSelectedRow(0)
			 IF ll_row > 0 THEN 
				ll_recipe_id = idw_recipe.object.recipe_id[ll_row]
				li_company_id = idw_recipe.object.company_id[ll_row]
				li_profit_ctr_id = idw_recipe.object.profit_ctr_id[ll_row]			
				
				IF MessageBox (gs_app_name + ":  Remove Recipe", "Are you sure you want to remove Recipe " + string (ll_recipe_id ) + " (" + string(li_company_id) + " - " + string(li_profit_ctr_id) + ") ?", Question!, YesNo!, 2) = 2 then return
				// Audit and Remove the pricing for this approval	
						ls_filter ="recipe_id = " + string(ll_recipe_id) + " AND company_id = " + string(li_company_id) + " AND profit_ctr_id = " + string(li_profit_ctr_id)
						dw_recipe_update.setfilter(ls_filter)
						dw_recipe_update.filter()
						ll_count = dw_recipe_update.rowcount()
						ll_row = dw_recipe_update.Getrow()
			    	li_rc = wf_audit(dw_recipe_update, ll_profile_id, ll_row, TRUE)
					IF li_rc <> gi_success THEN
						MessageBox(gs_app_name + ":  Recipe Removal", "Audit failed; Recipe cannot not removed.", Exclamation!)
					ELSE		
						dw_recipe_update.setfilter("")
						dw_recipe_update.filter()
						ls_filter ="recipe_id = " + string(ll_recipe_id) + " AND company_id = " + string(li_company_id) + " AND profit_ctr_id = " + string(li_profit_ctr_id)
						idw_recipe.setfilter(ls_filter)
						idw_recipe.filter()
						ll_count = idw_recipe.rowcount()
						 for i = ll_count to 1 step -1
								 this.DeleteRow (i)
						 next
						 
					  idw_recipe_update.setfilter(ls_filter)
					  idw_recipe_update.filter()
						ll_count = idw_recipe_update.rowcount()
						 for i = ll_count to 1 step -1
								 idw_recipe_update.DeleteRow (i)
						 next
						 
					END IF
				 idw_recipe.setfilter("")
				idw_recipe.filter()
				
				 idw_recipe_update.setfilter("")
				idw_recipe_update.filter()
		END IF
	CASE "b_primary"
		long ll_selected_row,li_selected_company_id,li_selected_profit_ctr_id,ll_selected_recipe
		 ll_selected_row   = this.GetSelectedRow(0)
		IF ll_selected_row > 0 THEN  
			 ll_selected_recipe = idw_recipe.object.recipe_id[ll_selected_row]
			 li_selected_company_id = idw_recipe.object.company_id[ll_selected_row]
			 li_selected_profit_ctr_id = idw_recipe.object.profit_ctr_id[ll_selected_row]	
			 ls_filter = "company_id = " + string(li_selected_company_id) + " and recipe_id = " + string (ll_selected_recipe) + " AND profit_ctr_id = " + string (li_selected_profit_ctr_id)
			 
			 idw_recipe_update.setfilter (ls_filter)
			 idw_recipe_update.filter()
			 
			ll_count =  idw_recipe_update.rowcount ()
			
			 FOR  i = 1 to idw_recipe_update.rowcount()
			   idw_recipe_update.object.primary_flag[i] = 'Y'
			NEXT
			
			 idw_recipe.setfilter(ls_filter)
			 idw_recipe.filter()
	
				FOR i = 1 to idw_recipe.rowcount()
					idw_recipe.object.primary_flag[i] = 'Y'
				NEXT
				
			 idw_recipe.setfilter('')
			 idw_recipe.filter()
			 
			 idw_recipe_update.setfilter('')
			 idw_recipe_update.filter()
			 
			 ls_filter = "company_id =" + string(li_selected_company_id) + "and recipe_id <> " + string (ll_selected_recipe) + " AND profit_ctr_id = " + string (li_selected_profit_ctr_id)
			
			idw_recipe.setfilter(ls_filter)			 
			 idw_recipe.filter()
			 
			 	FOR i = 1 to idw_recipe.rowcount()
					idw_recipe.object.primary_flag[i] = 'N'
				NEXT
				
			 idw_recipe_update.setfilter (ls_filter)
			 idw_recipe_update.filter()
			 
			 FOR  i = 1 to idw_recipe_update.rowcount()
			   idw_recipe_update.object.primary_flag[i] = 'N'
			NEXT
			  
			 idw_recipe.setfilter('')
			 idw_recipe.filter()
			 
			 idw_recipe_update.setfilter('')
			 idw_recipe_update.filter()
			 
		END IF			
END CHOOSE
DESTROY lds_recipe;


end event

event clicked;if row < 1 then return

this.ScrollToRow (row)
this.SetRow (row)

if this.GetSelectedRow(0) < 1 then
	this.SelectRow(row, true)
end if

end event

event rowfocuschanged;int ll_i

currentrow = getclickedrow()
If currentrow > 0 then
	if not KeyDown(keyControl!) and not KeyDown(keyShift!) then
		this.SelectRow (0, false)
	end if

	if il_last_row_clicked_transporter = 0 and this.GetSelectedRow (0) > 0 then
		il_last_row_clicked_transporter = this.GetSelectedRow (0)
	end if

	if KeyDown (keyShift!) and il_last_row_clicked_transporter > 0 then
		for ll_i = Min(currentrow,il_last_row_clicked_transporter) to Max(currentrow,il_last_row_clicked_transporter)
			this.SelectRow (ll_i, true)
		next
	end if

	il_last_row_clicked_transporter = currentrow
	if KeyDown(keyControl!) and this.IsSelected (currentrow) then
		this.SelectRow (currentrow, false)
	else	
		this.SelectRow (currentrow, true)
	end if
	if this.Rowcount() < currentrow then return

END IF

end event

type tabpage_import from userobject within tab_2
event create ( )
event destroy ( )
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Import"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
tab_import_waste tab_import_waste
end type

on tabpage_import.create
this.tab_import_waste=create tab_import_waste
this.Control[]={this.tab_import_waste}
end on

on tabpage_import.destroy
destroy(this.tab_import_waste)
end on

type tab_import_waste from tab within tabpage_import
integer x = 5
integer width = 4411
integer height = 2064
integer taborder = 60
integer textsize = -9
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 67108864
boolean raggedright = true
boolean focusonbuttondown = true
boolean boldselectedtext = true
integer selectedtab = 1
end type

type tabpage_statistics from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Stats"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_statistics dw_statistics
end type

on tabpage_statistics.create
this.dw_statistics=create dw_statistics
this.Control[]={this.dw_statistics}
end on

on tabpage_statistics.destroy
destroy(this.dw_statistics)
end on

type dw_statistics from datawindow within tabpage_statistics
integer width = 4411
integer height = 2072
integer taborder = 50
string dataobject = "d_profile_statistics"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event clicked;string	ls_object, ls_sort, ls_search
integer	li_tab, li_idx, li_const_id
long		ll_row, ll_curr_row

ls_object = this.GetObjectAtPointer()
if len(ls_object) > 0 then
	li_tab = Pos(ls_object, "~t", 1)
	ls_object = lower(left(ls_object, li_tab - 1))
	if ls_object = "sort_1" then
		ls_sort = this.Object.sort_1.Tag
		this.SetSort(ls_sort)
		this.Sort()
	elseif ls_object = "sort_2" then
		ls_sort = this.Object.sort_2.Tag
		this.SetSort(ls_sort)
		this.Sort()
	elseif ls_object = "sort_3" then
		ls_sort = this.Object.sort_3.Tag
		this.SetSort(ls_sort)
		this.Sort()
	End IF
End IF
end event

type tabpage_note from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Note"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
u_tabpage_note u_tabpage_note
end type

on tabpage_note.create
this.u_tabpage_note=create u_tabpage_note
this.Control[]={this.u_tabpage_note}
end on

on tabpage_note.destroy
destroy(this.u_tabpage_note)
end on

type u_tabpage_note from uo_tabpage_note within tabpage_note
integer width = 3547
integer height = 1336
integer taborder = 50
end type

on u_tabpage_note.destroy
call uo_tabpage_note::destroy
end on

type tabpage_document from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Docs"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
tab_3 tab_3
end type

on tabpage_document.create
this.tab_3=create tab_3
this.Control[]={this.tab_3}
end on

on tabpage_document.destroy
destroy(this.tab_3)
end on

type tab_3 from tab within tabpage_document
integer width = 4663
integer height = 2024
integer taborder = 20
integer textsize = -10
integer weight = 400
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
long backcolor = 67108864
boolean raggedright = true
boolean focusonbuttondown = true
boolean boldselectedtext = true
integer selectedtab = 1
tabpage_document_document tabpage_document_document
tabpage_form tabpage_form
tabpage_availability tabpage_availability
end type

on tab_3.create
this.tabpage_document_document=create tabpage_document_document
this.tabpage_form=create tabpage_form
this.tabpage_availability=create tabpage_availability
this.Control[]={this.tabpage_document_document,&
this.tabpage_form,&
this.tabpage_availability}
end on

on tab_3.destroy
destroy(this.tabpage_document_document)
destroy(this.tabpage_form)
destroy(this.tabpage_availability)
end on

event selectionchanged;integer	li_rc
long		ll_row, ll_profile_id, ll_rows

wf_AcceptText()
ll_row = idw_header.GetRow()
IF ll_row <= 0 THEN RETURN
ll_profile_id = idw_header.Object.profile_id[ll_row]

CHOOSE CASE newindex
	CASE ii_tabpage_document_document
		IF IsNull(ll_profile_id) OR ll_profile_id = 0 THEN
			RETURN 1
		ELSE
			//DevOps:19083
			this.setredraw(false)
			ll_rows = wf_retrieve_documents(il_curr_row, ll_profile_id)
			this.setredraw(true)
		END IF
		
	CASE ii_tabpage_form
		IF IsNull(ll_profile_id) OR ll_profile_id = 0 THEN
			RETURN 1
		ELSE
			IF NOT ib_added_wcr THEN
				ll_rows = idw_form.Retrieve(ll_profile_id)
			END IF
		END IF
	
	CASE ELSE
END CHOOSE

SetPointer(Arrow!)
end event

type tabpage_document_document from userobject within tab_3
integer x = 18
integer y = 112
integer width = 4626
integer height = 1896
long backcolor = 67108864
string text = "Document"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
uo_documents uo_documents
end type

on tabpage_document_document.create
this.uo_documents=create uo_documents
this.Control[]={this.uo_documents}
end on

on tabpage_document_document.destroy
destroy(this.uo_documents)
end on

type uo_documents from udw_document within tabpage_document_document
integer width = 4640
integer height = 1856
integer taborder = 10
end type

on uo_documents.destroy
call udw_document::destroy
end on

type tabpage_form from userobject within tab_3
integer x = 18
integer y = 112
integer width = 4626
integer height = 1896
boolean border = true
long backcolor = 67108864
string text = "Form"
borderstyle borderstyle = stylelowered!
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_form dw_form
end type

on tabpage_form.create
this.dw_form=create dw_form
this.Control[]={this.dw_form}
end on

on tabpage_form.destroy
destroy(this.dw_form)
end on

type dw_form from datawindow within tabpage_form
integer width = 4357
integer height = 1840
integer taborder = 20
string dataobject = "d_profile_form_dragon"
boolean vscrollbar = true
boolean border = false
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;blob		b_image
boolean	lb_insert = FALSE
double	ll_form_id, ldb_null, ldb_concentration, ldb_wcr_concentration
integer	li_rc, li_pos, li_revision_id, li_revision_id_new, li_exempt_id, li_exempt_id_orig
integer	li_current_form_version, li_form_version_id, li_connect, li_profit_ctr_id
integer	li_file_num, li_loops, li_i, li_company_id
long		ll_i, ll_row, ll_rowcount, ll_customer_id, ll_generator_id, ll_row_header, ll_image_id, ll_pos
long		ll_wcr_cust, ll_wcr_gen, ll_wcr_srec_exempt_id, ll_row_waste, ll_const_id, ll_row_const, ll_audit_row
long		ll_wcr_const_id, ll_null, ll_ref_form_id, ll_tracking_id, ll_profile_id, ll_rc, ll_row_technical
string	ls_temp, ls_results, ls_db_type, ls_form_type, ls_approval_code, ls_modified_by
string	ls_amendment_orig, ls_amendment, ls_wcr_waste_common_name
string	ls_manifest_orig, ls_manifest, ls_doc, ls_assigned, ls_wcr_color, ls_unit
string	ls_locked, ls_cust_name, ls_path, ls_wcr_sr_exempt, ls_wcr_waste_code, ls_waste_code
string	ls_filename, ls_document_name, ls_wcr_dot_shipping_name, ls_primary_wcr
string	ls_wcr_unit, ls_wcr_uhc, ls_find, ls_file, ls_gen_name, ls_epa_id
string	ls_odor, ls_free_liquids, ls_ignitability, ls_frequency
string	ls_consistency_solid, ls_consistency_dust, ls_consistency_liquid, ls_consistency_sludge
string	ls_consistency, ls_curr_status_code
string	ls_ra_profile_change_type, ls_ra_profile_change_type_orig   //DZ 08/08/2012
string	ls_tracking_type
boolean lb_filedelete

dwitemstatus	ldwitemstatus
str_pass	lstr
str_wcr_params	lst_params
argv		lstr_arg

ll_row_header 		= idw_header.GetRow()
ll_profile_id 		= idw_header.Object.profile_id[ll_row_header]
ll_customer_id 	= idw_header.Object.customer_id[ll_row_header]
ls_cust_name 		= idw_header.Object.customer_name[ll_row_header]
ls_curr_status_code = idw_header.Object.curr_status_code[ll_row_header]
ls_tracking_type 		= idw_header.Object.tracking_type[ll_row_header]
//ll_generator_id = idw_header.Object.generator_id[ll_row_header]
ll_generator_id 	= This.Object.generator_id[row]
ls_form_type 		= Upper(This.Object.form_type[row])
ls_approval_code 	= Upper(This.Object.approval_code[row])
li_company_id 		= This.Object.company_id[row]
li_profit_ctr_id 	= This.Object.profit_ctr_id[row]
SetNull(ll_null)

CHOOSE CASE Lower(dwo.name)
	CASE "b_edit"
		// Check access
		IF is_access = "V" OR is_access = "P" /*OR is_access = "B"*/ THEN
			MessageBox(gs_app_name + ":  Edit Forms", "You do not have access to Edit Forms.", Exclamation!)
			RETURN
		END IF

		CHOOSE CASE ls_form_type
			CASE "GWA"
				ll_form_id = This.Object.form_id[row]
				li_revision_id = This.Object.revision_id[row]
				lstr_arg.arg_title = "Generator Waste Amendment"
				ls_amendment_orig = This.Object.amendment[row]
				ls_ra_profile_change_type_orig = Upper(this.object.reapproval_profile_change_type[row])
				IF IsNull(ls_amendment_orig) THEN ls_amendment_orig = ""
				IF IsNull(ls_ra_profile_change_type_orig) THEN ls_ra_profile_change_type_orig = "PC"
				lstr_arg.arg_str1 = ls_amendment_orig
				lstr_arg.arg_str2 = ls_ra_profile_change_type_orig
				
				// Get the text for the "Amendment"
				OpenWithParm(w_popup_get_values_gwa, lstr_arg)
				
				lstr_arg = Message.PowerObjectParm
				IF IsValid(lstr_arg) THEN
					IF lstr_arg.arg_num1 = 1 THEN
						ls_amendment = lstr_arg.arg_str1
						ls_ra_profile_change_type = Upper(lstr_arg.arg_str2)
						IF (ls_amendment_orig <> ls_amendment) OR (ls_ra_profile_change_type_orig <> ls_ra_profile_change_type) THEN
							li_revision_id_new = f_get_next_form_revision_id(ll_form_id, li_revision_id, gs_user_id)
							IF li_revision_id_new > li_revision_id THEN
								lb_insert = TRUE
							ELSEIF li_revision_id_new = li_revision_id THEN
								lb_insert = FALSE
							END IF
							li_rc = wf_populate_GWA(ll_profile_id, ll_form_id, li_revision_id_new, ls_amendment, "update", lb_insert, ls_ra_profile_change_type)
						END IF
						
						IF li_rc = gi_success THEN
							COMMIT USING itr_forms;

							This.Reset()
							This.Retrieve(ll_profile_id)
							SetPointer(Arrow!)
						ELSE
							MessageBox(gs_app_name + ":  Error", "Could not create new Re-approval Notice And/Or Profile Changes form.~r~rPlease contact the I.T. department.", Exclamation!)
						END IF
					END IF
				END IF
				
			CASE "LDR"
				ll_form_id = This.Object.form_id[row]
				li_revision_id = This.Object.revision_id[row]
				ls_manifest = This.Object.state_manifest_no[row]
				ls_doc = This.Object.manifest_doc_no[row]
				
				// Title
				lstr.s_win_title = "Land Disposal Restriction"
								
				//	Profit Center / Revision / Company
				lstr.i[1] = li_profit_ctr_id
				lstr.i[2] = li_revision_id
				lstr.i[3] = li_company_id
				
				// Generator / Customer

				lstr.l[1] = ll_generator_id
				lstr.l[2] = ll_customer_id
				lstr.l[3] = ll_form_id
				lstr.l[4] = ll_profile_id
				
				lstr.s[1] = ls_approval_code
				lstr.s[2] = "update"
				lstr.s[3] = ls_manifest
				lstr.s[4] = ls_doc
				
				IF ib_connected_forms THEN					
					lstr.tr_trans = itr_forms
				
					OpenWithParm(w_popup_get_values_ldr, lstr)
					
					lstr = Message.PowerObjectParm
					IF IsValid(lstr) THEN
						IF lstr.i[2] = -1 THEN
							// User canceled; do nothing
						ELSEIF lstr.i[2] = 1 THEN
							COMMIT USING itr_forms;
									
							This.Reset()
							This.Retrieve(ll_profile_id)
							
							SetPointer(Arrow!)
						END IF
					END IF
				END IF
			
			// SK 01302012 - Added new form - NORM
//			CASE "NORMTENORM"
//				ll_form_id 		= This.Object.form_id[row]
//				li_revision_id = This.Object.revision_id[row]
//				
//				// Title
//				lstr.s_win_title 	= "NORM / TENORM / EXEMPTED WASTE ADDENDUM"
//				lstr.l[1] 			= ll_profile_id
//				lstr.l[2] 			= ll_generator_id
//				lstr.l[3] 			= ll_form_id
//				lstr.l[4] 			= li_revision_id
//				lstr.s[1] 			= ls_approval_code
//				lstr.s[2] 			= "update"
//								
//				IF ib_connected_forms THEN					
//					lstr.tr_trans = itr_forms
//					OpenWithParm(w_popup_get_values_norm, lstr)
//					lstr = Message.PowerObjectParm
//					IF IsValid(lstr) THEN
//						IF lstr.i[2] = -1 THEN
//							// User canceled; do nothing
//						ELSEIF lstr.i[2] = 1 THEN
//							COMMIT USING itr_forms;
//							This.Reset()
//							This.Retrieve(ll_profile_id)
//							SetPointer(Arrow!)
//						END IF
//					END IF
//				END IF
//				
			CASE "PQ"
				ll_form_id = This.Object.form_id[row]
				li_revision_id = This.Object.revision_id[row]
				ll_tracking_id = This.Object.tracking_id[row]
				
				li_rc = wf_populate_PQ(ll_profile_id, ls_approval_code, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, ll_row_header, "update", ll_null, ll_tracking_id,ll_generator_id)
				IF li_rc = -2 THEN
					// User canceled; do nothing
				ELSE
					IF li_rc = gi_success THEN
						COMMIT USING itr_forms;

						This.Reset()
						This.Retrieve(ll_profile_id)
						
						SetPointer(Arrow!)
					ELSE
						ROLLBACK USING itr_forms;
						MessageBox(gs_app_name + ":  Error", "Could not create new Pending Questions form.~r~rPlease contact the I.T. department.", Exclamation!)
					END IF
				END IF
				
			CASE "SREC"
				ll_form_id = This.Object.form_id[row]
				li_revision_id = This.Object.revision_id[row]
				li_exempt_id_orig = This.Object.exempt_id[row]
				ls_manifest_orig = This.Object.manifest[row]
				IF IsNull(li_exempt_id_orig) THEN li_exempt_id_orig = 0
				IF IsNull(ls_manifest_orig) THEN ls_manifest_orig = ""
				lstr.i[1] = li_exempt_id_orig
				lstr.s[1] = ls_manifest_orig
				
				IF ib_connected_forms THEN
			
					SELECT current_form_version
						INTO :li_current_form_version
						FROM FormType
						WHERE form_type = 'SREC'
					USING itr_forms;
					
					// Setup quick select popup
					lstr.i[2] = li_current_form_version
					lstr.tr_trans = itr_forms
			
					// Get the information for the "Surcharge Exemption"
					OpenWithParm(w_popup_get_values_srec_manifest, lstr)
					
					lstr = Message.PowerObjectParm
					IF IsValid(lstr) THEN
						IF lstr.i[1] > 0 THEN
							li_exempt_id = lstr.i[1]
							ls_manifest = lstr.s[1]
							
							IF (li_exempt_id_orig <> li_exempt_id) &
								OR (ls_manifest_orig <> ls_manifest) THEN
									li_revision_id_new = f_get_next_form_revision_id(ll_form_id, li_revision_id, gs_user_id)
									IF li_revision_id_new > li_revision_id THEN

										lb_insert = TRUE
									ELSEIF li_revision_id_new = li_revision_id THEN
										lb_insert = FALSE
									ELSE
										
									END IF
									li_rc = wf_populate_SREC(ll_profile_id, ls_approval_code, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id_new, li_exempt_id, ls_manifest, "update", lb_insert)
							END IF
							
							IF li_rc = gi_success THEN
								COMMIT USING itr_forms;
								COMMIT USING itr_forms;
								
								This.Reset()
								This.Retrieve(ll_profile_id)
								SetPointer(Arrow!)
							ELSE
								ROLLBACK USING itr_forms;
								MessageBox(gs_app_name + ":  Error", "Could not create new State Of Michigan Surcharge Exemption Certification form.~r~rPlease contact the I.T. department.", Exclamation!)
							END IF
						END IF
					END IF
				END IF
				
			CASE "WCR"
//				ll_form_id = This.Object.form_id[row]
//				li_revision_id = This.Object.revision_id[row]
//				lst_params.al_form_id = ll_form_id
//				lst_params.ai_revision_id = li_revision_id
//				lst_params.as_function = "edit"
//				lst_params.as_assign_target = "profile"
//				ls_locked = This.Object.locked[row]
//				IF (IsNull(ls_locked) OR ls_locked = "U") THEN
//					lst_params.ab_can_change_customer = TRUE
//				ELSE
//					lst_params.ab_can_change_customer = FALSE
//				END IF
//				ib_wcr = TRUE
//				
//				SetPointer(HourGlass!)
//				iuo_wcr_form.wf_init_window(lst_params.as_assign_target, iw_profile)
//				iuo_wcr_form.wf_open(lst_params)
//				// 01042012 SK User object "Edit WCR" sits on its own tabpage now
//				//iuo_wcr_form.SetPosition(ToTop!)
//				tab_1.tabpage_view.tab_2.SelectTab ( ii_tabpage_wcr )
				
				
			CASE "WWA"
				ll_form_id = This.Object.form_id[row]
				li_revision_id = This.Object.revision_id[row]
				
				li_rc = wf_populate_WWA(ll_profile_id, ls_approval_code, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, ll_row_header, "update")
				IF li_rc = -2 THEN
					// User canceled; do nothing
				ELSE
					IF li_rc = gi_success THEN
						COMMIT USING itr_forms;

						This.Reset()
						This.Retrieve(ll_profile_id)
						
						SetPointer(Arrow!)
					ELSE
						ROLLBACK USING itr_forms;
						MessageBox(gs_app_name + ":  Error", "Could not create new WWA form.~r~rPlease contact the I.T. department.", Exclamation!)
					END IF
				END IF
		END CHOOSE
				
	CASE "b_view"
		//DevOps 16721 use FormWCR.form_version_id instead of locked column  to determine if COR vs Online services
		// Note: form_version_id = null => COR; form_version_id NOT null => Online Services. fhc. 8/31/20
		li_form_version_id 	= This.Object.form_version_id[row]
		//ls_locked		= This.Object.locked[row]
		
		ll_form_id 		= This.Object.form_id[row]
		li_revision_id = This.Object.revision_id[row]
		
		IF IsNull(li_form_version_id)  THEN	// COR
//		IF Upper(ls_locked) = 'U' THEN		// DevOps 16721 Don't use locked column to determine if COR vs Online services
			// Show form datawindows
			SetMicroHelp("Getting Report")

			lstr.s[1] = ls_form_type
			lstr.l[1] = ll_form_id
			lstr.l[2] = li_revision_id
			lstr.l[3] = ll_customer_id
			lstr.l[4] = ll_generator_id
			//DevOps 12427
			lstr.l[5] = ll_profile_id
			setnull(lstr.l[6])
			
			CHOOSE CASE ls_form_type
				CASE "PQ", "SREC", "WWA", "PA"
					ls_approval_code = Upper(This.Object.approval_code[row])
					// only for forms that use co-pc, approvals
					lstr.s[2] = ls_approval_code
					lstr.i[1] = li_company_id
					lstr.i[2] = li_profit_ctr_id
				
				CASE "LDR"
					ls_approval_code = ""
					// 08/14/2014 SK LDR was modified to take co-pc args on 7/9/2014 in w_popup_form_view.
					lstr.i[1] = li_profit_ctr_id
					lstr.i[2] = li_company_id
					
				CASE "CC", "GN", "RA", "GWA", "NORMTENORM", "WCR"
					ls_approval_code = ""
								
			END CHOOSE
			
			if ls_form_type = 'WCR' then
				select added_by
				into :lstr.s[2]
				from plt_ai.dbo.FormWCRStatusAudit
				where form_id = :ll_form_id
				and revision_id = :li_revision_id using gtr_share;
				
				OpenWithParm(w_popup_form_view_dragon, lstr)
			else
				//DevOps 12427
				if upperbound(lstr.s) < 2 then
					setnull(lstr.s[2])
				end if
				if ls_form_type = 'CC' then
					OpenWithParm(w_popup_form_view_dragon, lstr)
				else
//					OpenWithParm(w_popup_form_view, lstr)
					OpenWithParm(w_popup_form_view_dragon, lstr)
				end if
			end if
			SetPointer(Arrow!)
		ELSE		// Online Services
			// Retrieve this signed form from the image database and save as PDF
			SetPointer(HourGlass!)

			// rb 07/07/2015 New Citrix...this hard-coded path needs to reference the global instead	
			//ls_path = "C:\EQAI\PDF"
			ls_path = gs_pdf_path

			itr_image.AutoCommit = TRUE
		
			// rb 05/21/2013 Add form type because attachments can share form_id/revision_id
			SELECT image_id, document_name
				INTO :ll_image_id, :ls_document_name
				FROM Scan
				WHERE form_id = :ll_form_id
				AND revision_id = :li_revision_id
				AND isnull(form_type,'') = :ls_form_type
			USING itr_image;
			IF Upper(Right(ls_document_name, 4)) <> ".PDF" THEN
				ls_document_name += ".PDF"
			END IF
//			ls_filename = ls_path + "\" + ls_document_name

			ls_filename = ls_path + "\image_" + string(ll_image_id) + "_" + ls_document_name
			
			if fileexists(ls_filename) then
				lb_filedelete = filedelete(ls_filename)
			end if
			
			// rb 05/22/2014 PB 12.5
			//SELECTBLOB image_blob
			//	INTO :b_image
			//	FROM ScanImage
			//	WHERE image_id = :ll_image_id
			//USING itr_image;
			//
			//IF itr_image.SQLNRows <> 1 THEN
			if not f_get_image ("S", ll_image_id, itr_image, b_image) then
				MessageBox("Error", "SQLNRows <> 1", Information!)
				RETURN
			END IF
			
//			IF Len(b_image) <= 0 THEN 
//				MessageBox("Error", "Len(b_image) <= 0", Information!)
//				RETURN
//			END IF

			IF Len(b_image) <= 0 THEN 
				//MessageBox("Error", "Image length <= 0", Information!)  DevOps 26884 info_gde 01/12/2022; Prod EQAI - Profile Tracking > Docs > Forms Tab - Error Message: "Len(b_image) <=0"
				   MessageBox("Information!", "At this time No image has been saved for printing.") 
				RETURN
			END IF
			
			wf_blobtofile(ls_filename, b_image)
			
			IF FileExists(ls_filename) THEN
				ll_rc = ShellExecute (0, "open", ls_filename, "", "", SW_SHOWNORMAL)
			END IF
			SetPointer(Arrow!)
		END IF
		
	CASE "b_sign_info"
		ll_form_id = This.Object.form_id[row]
		li_revision_id = This.Object.revision_id[row]
		
		lstr.i[1] = li_profit_ctr_id
		lstr.l[1] = ll_form_id
		lstr.l[2] = li_revision_id
		
		OpenWithParm(w_popup_form_sign_manual_info, lstr)

// SK - 03082012 Forms are not signed in EQAI, only on web , so commented below unused code!
//	CASE "b_sign"
//		// Check access
//		IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
//			MessageBox(gs_app_name+": Sign Forms", "You do not have access to Sign Forms.", Exclamation!)
//			RETURN
//		END IF
//
//		IF gs_connect_type = "DEV" THEN
//			ls_db_type = "dev"
//		ELSEIF gs_connect_type = "TEST" THEN
//			ls_db_type = "tst"
//		ELSE
//			ls_db_type = ""
//		END IF
//
//		ll_form_id = This.Object.form_id[row]
//		li_revision_id = This.Object.revision_id[row]
//		li_form_version_id = This.Object.form_version_id[row]
//		ls_form_type = This.Object.form_type[row]
//		
//		lstr.l[1] = ll_form_id
//		lstr.l[2] = li_revision_id
//		lstr.l[3] = ll_customer_id
//		lstr.l[4] = li_form_version_id
		
//		lstr.i[2] = ii_profit_ctr_id
//		
//		lstr.s[1] = ls_approval_code
//		lstr.s[2] = ls_form_type
//		lstr.s[3] = ls_db_type
//		lstr.s[4] = ls_cust_name
//		OpenWithParm(w_popup_form_sign_manual, lstr)
//
//		lstr = Message.PowerObjectParm
//		IF lstr.i[1] = 1 THEN
//			This.Object.locked[row] = "M"
//		END IF
		
	CASE "b_delete"
		// Check access
		IF is_access = "V" OR is_access = "P" /*OR is_access = "B"*/ THEN
			MessageBox(gs_app_name + ":  Unlink Forms", "You do not have access to Remove Forms.", Exclamation!)
			RETURN
		END IF
		
		// Check the status of the profile, unlinking is not allowed on approved, approved pending prices profiles
		IF Upper(ls_curr_status_code) = 'A' OR (Upper(ls_curr_status_code) = 'P' AND Upper(ls_tracking_type) = 'APRC')THEN
			MessageBox(gs_app_name + ":  Unlink Forms", "Forms cannot be unlinked when the profile is in approved status.", Exclamation!)
			RETURN
		END IF
		
		// If there are unsaved changes, return
		IF wf_check_changes() < 0 THEN RETURN
		
		li_rc = MessageBox("Remove Assignment", "Are you sure you want to remove this assignment?", Question!, YesNo!, 2)
		IF li_rc = 1 THEN
			ll_form_id = This.Object.form_id[row]
			IF idw_header.Object.form_id_wcr[ll_row_header] = ll_form_id THEN
				idw_header.Object.form_id_wcr[ll_row_header] = ll_null
				tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"
			END IF
			This.object.profile_id[row] = ll_null
			// Write Audit to this Profile
			wf_audit(idw_form, ll_profile_id, row, TRUE)
			// Delete the record here
			This.DeleteRow(row)
			
			// Update FormWCR to remove profile_id
			UPDATE FormWCR
				SET profile_id = NULL
				WHERE form_id = :ll_form_id
			USING itr_forms;

			// SK 10/9 Update the Scan record and remove attachments
			UPDATE SCAN
				SET profile_id = NULL
				WHERE form_id = :ll_form_id
			USING itr_image;
			
			COMMIT USING itr_forms;
			COMMIT USING itr_image;
			
			iw_profile.TriggerEvent("ue_save")
		END IF

	CASE "b_pdf"
	
		
	CASE "b_compare"
		 //Check access
		IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
			MessageBox(gs_app_name + ":  Replace Profile Data", "You do not have access to Replace Profile Data.", Exclamation!)
			RETURN
		END IF
		
		// SK 09242012 Lab access user cannot change data on approved Profile
		IF Upper(is_access) = 'L' AND Upper(ls_curr_status_code) = 'A' THEN
			MessageBox(gs_app_name+": Replace Profile Data", "You do not have access to compare and replace profile data on an approved profile.", Exclamation!)
			RETURN 
		END IF
		
		IF ib_new_record OR IsNull(ll_profile_id) OR ll_profile_id = 0 THEN
			// Force save
			ib_changed_profile = TRUE
		END IF

		// If there are unsaved changes, return
		IF wf_check_changes() < 0 THEN RETURN
		
		ll_form_id 				= This.Object.form_id[row]
		li_revision_id 		= This.Object.revision_id[row]
		li_form_version_id 	= This.Object.form_version_id[row]
		il_profile_form_compare=1 //DevOps 19144 info_gde 03/04/2021; Section C1 'Waste' Checkbox Functionality During Amendment/Renewal
	
		lstr.l[1] = ll_form_id
		lstr.l[2] = li_revision_id
		lstr.l[3] = li_form_version_id  //not used in compare
		lstr.l[4] = ll_profile_id
		lstr.l[5] = ll_null
		lstr.l[6] = ll_null
		lstr.l[7] = il_profile_form_compare //DevOps 19144
		
		lstr.s[1] = is_access
		
		// DevOps 14241/14841 - 3/27/2020 - MPM - Modified the line below to open w_popup_wcr_profile_compare_dragon instead of the non-Dragon version
		OpenWithParm(w_popup_wcr_profile_compare_dragon, lstr)
		
		//SK 10022012 Missing code ?
		lstr = Message.powerobjectparm
		IF IsValid( lstr ) Then
			// DevOps 14241/14841 - 3/27/2020 - MPM - Modified the line below to call w_popup_wcr_dragon instead of the non-Dragon version
			wf_copy_wcr_dragon(lstr)
		End If	
       il_profile_form_compare=0 //DevOps 19144 info_gde 03/04/2021; Section C1 'Waste' Checkbox Functionality During Amendment/Renewal
	   ib_reject_resubmit_flag=TRUE //DevOps 20789 info_gde 07/07/2021; Form Rejection - Bucket Table Update Process

	//	li_rc = Message.DoubleParm
	//	IF li_rc = 1 THEN
			// force retrieve on profile
			
			// rb 06/27/2012 Try to re-retrieve current row instead
			//// rb 05/14/2012
			//wf_retrieve ()
//			ib_retrieving = TRUE
//			idw_header.ReselectRow (idw_header.GetRow())
//			ib_retrieving = FALSE
//
//			ib_has_retrieved = TRUE
//			ib_can_quote = TRUE
//			idw_header.TriggerEvent(RowFocusChanged!)
			
			//DZ 08/14/2012  The generator may be changed, display the new value
//			SELECT Profile.generator_id, generator.epa_id, generator.generator_name
//		  	INTO :ll_generator_id, :ls_epa_id, :ls_gen_name
//		  	FROM Profile
//		  	INNER JOIN generator ON Profile.generator_id = generator.generator_id
//		  	WHERE profile.profile_id = :ll_profile_id
//		  	USING itr_share;
//			idw_header.Object.generator_id[ll_row_header] = ll_generator_id
//			idw_header.Object.generator_name[ll_row_header] = ls_gen_name
//			idw_header.Object.generator_epa_id[ll_row_header] = ls_epa_id
//			idw_header.SetItemStatus( ll_row_header, "generator_id", Primary!, NotModified!)
//			idw_header.SetItemStatus( ll_row_header, "generator_name", Primary!, NotModified!)
//			idw_header.SetItemStatus( ll_row_header, "generator_epa_id", Primary!, NotModified!)
						
//			// Check access
//			IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
//				MessageBox(gs_app_name + ":  Replace Profile Data", "You do not have access to Replace Profile Data.", Exclamation!)
//				RETURN
//			END IF
			
			// User wants to replace profile data with WCR data
//			SELECT customer_id, generator_id, waste_common_name, 
//					color, surcharge_exempt, srec_exempt_id, dot_shipping_name,
//					frequency, odor, free_liquids, ignitability,
//					consistency_solid, consistency_dust, consistency_liquid, consistency_sludge
//				INTO :ll_wcr_cust, :ll_wcr_gen, :ls_wcr_waste_common_name, 
//					:ls_wcr_color, :ls_wcr_sr_exempt, :ll_wcr_srec_exempt_id, :ls_wcr_dot_shipping_name,
//					:ls_frequency, :ls_odor, :ls_free_liquids, :ls_ignitability,
//					:ls_consistency_solid, :ls_consistency_dust, :ls_consistency_liquid, :ls_consistency_sludge
//				FROM FormWCR
//				WHERE form_id = :ll_form_id
//				AND revision_id = :li_revision_id
//			USING itr_forms;
			
//			IF itr_forms.SQLCode = 0 THEN
//				SELECT cust_name
//					INTO :ls_cust_name
//					FROM Customer
//					WHERE customer_id = :ll_wcr_cust
//				USING itr_share;
//				
//				IF itr_share.SQLCode = 0 THEN
//					idw_header.Object.customer_id[ll_row_header] = ll_wcr_cust
//					idw_header.Object.customer_name[ll_row_header] = ls_cust_name
//				ELSE
//					MessageBox(gs_app_name + ":  Replace Data Error", "Customer from WCR invalid!  It will not replace Profile Data.", Exclamation!)
//				END IF
								
//				SELECT generator_name, EPA_ID
//					INTO :ls_gen_name, :ls_epa_id
//					FROM Generator
//					WHERE generator_id = :ll_wcr_gen
//				USING itr_share;
				
//				IF itr_share.SQLCode = 0 THEN
//					idw_header.Object.generator_id[ll_row_header] = ll_wcr_gen
//					idw_header.Object.generator_name[ll_row_header] = ls_gen_name
//					idw_header.Object.generator_epa_id[ll_row_header] = ls_epa_id
//				ELSE
//					MessageBox(gs_app_name + ":  Replace Data Error", "Generator from WCR invalid!  It will not replace Profile Data.", Exclamation!)
//				END IF
				
				// Profile info
//				idw_header.Object.approval_desc[ll_row_header] = ls_wcr_waste_common_name
//				idw_header.Object.dot_shipping_name[ll_row_header] = ls_wcr_dot_shipping_name
//				IF ls_frequency = "1" THEN
//					idw_header.Object.one_time_only[ll_row_header] = "T"
//					idw_header.Object.reapproval_allowed[ll_row_header] = "F"
//				END IF
//				// Lab info
//				ll_row_technical = idw_technical.GetRow()
//				IF ll_row_technical > 0 THEN
//					idw_technical.Object.color[ll_row_technical] = ls_wcr_color
//					idw_technical.Object.ignitability[ll_row_technical] = ls_ignitability
//					IF NOT IsNull(ls_odor) AND ls_odor > "" THEN
//						idw_technical.Object.odor[ll_row_technical] = "T"
//						idw_technical.Object.odor_desc[ll_row_technical] = ls_odor
//					END IF
//					IF ls_free_liquids = "T" THEN
//						idw_technical.Object.free_liquid[ll_row_technical] = ls_free_liquids
//					END IF
					
//					ls_consistency = ""
//					IF ls_consistency_solid = "T" THEN
//						ls_consistency = "SOLID"
//					END IF
//					IF ls_consistency_dust = "T" THEN
//						IF ls_consistency = "" THEN
//							ls_consistency = "DUST"
//						ELSE
//							ls_consistency += ":DUST"
//						END IF
//					END IF
//					IF ls_consistency_liquid = "T" THEN
//						IF ls_consistency = "" THEN
//							ls_consistency = "LIQUID"
//						ELSE
//							IF Pos(ls_consistency, ":") = 0 THEN
//								ls_consistency += ":LIQUID"
//							END IF
//						END IF
//					END IF
//					IF ls_consistency_sludge = "T" THEN
//						IF ls_consistency = "" THEN
//							ls_consistency = "SLUDGE"
//						ELSE
//							IF Pos(ls_consistency, ":") = 0 THEN
//								ls_consistency += ":SLUDGE"
//							END IF
//						END IF
//					END IF
//					IF ls_consistency > "" THEN
//						idw_technical.Object.consistency[ll_row_technical] = ls_consistency
//					END IF
//				END IF
				
				// Delete Secondaries
//				ll_rowcount = idw_waste.RowCount()
//				FOR ll_row = ll_rowcount TO 1 STEP -1
//					IF idw_waste.Object.primary_flag[ll_row] = "F" THEN
//						ldwItemStatus = This.GetItemStatus(ll_row, 0, Primary!)
//						IF (ldwItemStatus = New! OR ldwItemStatus = NewModified!) then
//							idw_waste.RowsDiscard(ll_row, ll_row, Primary!)
//						ELSE
//							idw_waste.DeleteRow(ll_row)
//						END IF
//						ib_changed_waste_code = TRUE
//					END IF
//				NEXT
	
				// Delete primary
//				ll_rowcount = idw_waste.RowCount()
//				FOR ll_row = ll_rowcount TO 1 STEP -1
//					IF idw_waste.Object.primary_flag[ll_row] = "T" THEN
//						SetNull(ls_waste_code)
//						idw_header.Object.waste_code[ll_row_header] = ls_waste_code
//						ib_changed_profile = TRUE
//					
//						ldwItemStatus = This.GetItemStatus(ll_row, 0, Primary!)
//						if ldwItemStatus = New! OR ldwItemStatus = NewModified! then
//							idw_waste.RowsDiscard(ll_row, ll_row, Primary!)
//						ELSE
//							idw_waste.DeleteRow (ll_row)
//						END IF
//						ib_changed_waste_code = TRUE
//						EXIT
//					END IF
//				NEXT
		
//				// Delete Constituents
//				SetNull(ldb_null)
//				ll_rowcount = idw_const.RowCount()
//				FOR ll_i = ll_rowcount TO 1 STEP -1
//					ls_unit = idw_const.Object.unit[ll_i]
//					ll_const_id = idw_const.Object.const_id[ll_i]
//			
//					This.DeleteRow(ll_i)
//				NEXT
//				ib_changed_const = TRUE	
		
//				// Load the WCR Waste Codes
//				DECLARE wcr_waste_code_cursor CURSOR FOR  
//					SELECT DISTINCT waste_code
//					FROM FormXWasteCode
//					WHERE form_id = :ll_form_id
//					AND revision_id = :li_revision_id
//					ORDER BY waste_code 
//				USING itr_forms;
//				
//				OPEN wcr_waste_code_cursor;
//	
//				DO WHILE itr_forms.SQLCode = 0
//					FETCH wcr_waste_code_cursor INTO :ls_wcr_waste_code;
//					IF itr_forms.SQLCode = 0 THEN
//						ll_row_waste = idw_waste.InsertRow(0)
//						idw_waste.Object.profile_id[ll_row_waste] = ll_profile_id
//						idw_waste.Object.waste_code[ll_row_waste] = ls_wcr_waste_code
//						idw_waste.Object.primary_flag[ll_row_waste] = "F"
//						idw_waste.Object.sequence_id[ll_row_waste] = ll_null
//						ib_changed_waste_code = TRUE
//						
//					ELSEIF itr_forms.SQLCode = -1 THEN
//						MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Waste Codes" + &
//							"~nPress OK to Continue.", StopSign!)
//						CLOSE wcr_waste_code_cursor;
//
//						RETURN -1
//					END IF
//
//				LOOP
//				CLOSE wcr_waste_code_cursor;
				
//				IF ll_row_waste = 1 THEN
//					// There was only one waste code on the WCR, set it as primary
//					idw_waste.Object.primary_flag[ll_row_waste] = "T"
//					idw_waste.Object.sequence_id[ll_row_waste] = 1
//					idw_header.Object.waste_code[ll_row_header] = ls_wcr_waste_code
//				END IF
						
				// Load the WCR Constituents
//				DECLARE wcr_const_cursor CURSOR FOR  
//					SELECT DISTINCT FormXConstituent.const_id, FormXConstituent.concentration, FormXConstituent.unit, FormXConstituent.UHC
//					FROM FormXConstituent, Constituents
//					WHERE FormXConstituent.const_id = Constituents.const_id
//					AND form_id = :ll_form_id
//					AND revision_id = :li_revision_id
//					ORDER BY FormXConstituent.const_id 
//				USING itr_forms;
//				
//				OPEN wcr_const_cursor;
	
//				DO WHILE itr_forms.SQLCode = 0
//					FETCH wcr_const_cursor INTO :ll_wcr_const_id, :ldb_wcr_concentration, :ls_wcr_unit, :ls_wcr_UHC;
//					IF itr_forms.SQLCode = 0 THEN				
//						ll_row_const = idw_const.InsertRow(0)
//						
//						IF Lower(ls_wcr_unit) = "percent" THEN ls_wcr_unit = "%"
//						
//						idw_const.Object.profile_id[ll_row_const] = ll_profile_id
//						idw_const.Object.const_id[ll_row_const] = ll_wcr_const_id
//						idw_const.Object.concentration[ll_row_const] = ldb_wcr_concentration
//						idw_const.Object.unit[ll_row_const] = ls_wcr_unit
//						idw_const.Object.UHC[ll_row_const] = ls_wcr_UHC
//						ib_changed_const = TRUE
//						
//					ELSEIF itr_forms.SQLCode = -1 THEN
//						MessageBox(gs_app_name + ":  SQL Cursor Error", "An error has occurred loading WCR Constituents" + &
//							"~nPress OK to Continue.", StopSign!)
//						CLOSE wcr_const_cursor;
//
//						RETURN -1
//					END IF
//				LOOP
//				CLOSE wcr_const_cursor;
//			END IF
	//	END IF
		
	CASE "b_pq"
		// Open popup displaying PQ forms associated with this Form, and ability to create new PQ.
		ll_form_id = This.Object.form_id[row]
		li_revision_id = This.Object.revision_id[row]
		
		lstr.l[1] = ll_form_id
		lstr.l[2] = li_revision_id
		lstr.tr_trans = itr_forms
		
		OpenWithParm(w_popup_form_pq_list, lstr)
		
		lstr = Message.PowerObjectParm
		IF IsValid(lstr) THEN
			
			IF lstr.i[1] < 0 THEN
				// User canceled
				RETURN
				
			ELSEIF lstr.i[1] = 0 THEN
				// Check access
				IF is_access = "V" OR is_access = "P" /*OR is_access = "B"*/ THEN
					MessageBox(gs_app_name+": Forms", "You do not have access to create a New Form.", Exclamation!)
					RETURN
				END IF
			
				// User wants to create new PQ form
				ll_form_id = 0
				li_revision_id = 0
				ll_form_id = f_get_next_form_id("p") // permanent
				IF ll_form_id = 0 THEN
					MessageBox(gs_app_name + ":  EQAI", "Could not get next form id")
					RETURN 0
				END IF
				ll_ref_form_id = This.Object.form_id[row]
				li_revision_id = f_get_next_form_revision_id(ll_form_id, li_revision_id, gs_user_id)
				
				li_rc = wf_populate_PQ(ll_profile_id, ls_approval_code, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, ll_row_header, "new", ll_ref_form_id, ll_null,ll_generator_id)
				
				IF li_rc = -2 THEN
					// User canceled; do nothing
				ELSE
			
					IF li_rc = gi_success THEN
						COMMIT USING itr_forms;
						
						lstr.s[1] = "PQ"
						lstr.s[2] = ls_approval_code
						lstr.i[1] = li_company_id
						lstr.i[2] = li_profit_ctr_id
						lstr.l[1] = ll_form_id
						lstr.l[2] = li_revision_id
						lstr.l[3] = ll_customer_id
						lstr.l[4] = ll_generator_id
						OpenWithParm(w_popup_form_view, lstr)
						
						SetPointer(Arrow!)
					ELSE
						ROLLBACK USING itr_forms;
						MessageBox(gs_app_name + ":  Error", "Could not create new form.~r~rPlease contact the I.T. department.", Exclamation!)
					END IF
					This.Reset()
					This.Retrieve(ll_profile_id)
				END IF
			
			ELSEIF lstr.i[1] = 1 THEN
				// User wants to view/print existing PQ form

				SetMicroHelp("Getting Report")

				ll_form_id = lstr.l[1]
				li_revision_id = lstr.l[2]
				ls_form_type = "PQ"
						
				lstr.s[1] = ls_form_type
				lstr.s[2] = ls_approval_code
				lstr.i[1] = li_company_id
				lstr.i[2] = li_profit_ctr_id
				lstr.l[1] = ll_form_id
				lstr.l[2] = li_revision_id
				lstr.l[3] = ll_customer_id
				lstr.l[4] = ll_generator_id
				
				OpenWithParm(w_popup_form_view, lstr)
				
				SetPointer(Arrow!)

			ELSEIF lstr.i[1] = 2 THEN
				// Check access
				IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN
					MessageBox(gs_app_name+": Forms", "You do not have access to edit a Form.", Exclamation!)
					RETURN
				END IF
			
				// User wants to edit existing PQ form
				ll_form_id = lstr.l[1]
				li_revision_id = lstr.l[2]
				
				li_rc = wf_populate_PQ(ll_profile_id, ls_approval_code, li_company_id, li_profit_ctr_id, ll_form_id, li_revision_id, ll_row_header, "update", ll_null, ll_null,ll_generator_id)
				IF li_rc = -2 THEN
					// User canceled; do nothing
				ELSE
					IF li_rc = gi_success THEN
						COMMIT USING itr_forms;
			
						SetPointer(Arrow!)
					ELSE
						ROLLBACK USING itr_forms;

						MessageBox(gs_app_name + ":  Error", "Could not save edited PQ form.~r~rPlease contact the I.T. department.", Exclamation!)
					END IF
				END IF
			END IF
		END IF

	CASE "b_revision"
					
		ll_form_id = This.Object.form_id[row]
		li_revision_id = This.Object.revision_id[row]
		
		lst_params.al_form_id = ll_form_id
		lst_params.ai_revision_id = li_revision_id

		OpenWithParm(w_popup_wcr_assignment_dragon, lst_params)

END CHOOSE
end event

event itemchanged;long		ll_null, ll_row

// Check access
IF is_access = 'V' OR is_access = 'P' OR is_access = 'B' THEN 
	MessageBox(gs_app_name+": Forms", "You do not have access to change Forms.", Exclamation!)
	This.Object.Data[row] = This.Object.Data.Original[row]
	RETURN 2
END IF

SetNull(ll_null)
CHOOSE CASE Lower(dwo.name)
	CASE "primary_wcr"
		IF data = "T" THEN
			FOR ll_row = 1 TO This.RowCount()
				IF ll_row <> row THEN
					This.Object.primary_wcr[ll_row] = "F"
				END IF
			NEXT
			idw_header.Object.form_id_wcr[il_curr_row] = This.Object.form_id[row]
			tab_1.tabpage_view.st_form_id_wcr.Text = String(This.Object.form_id[row])
		ELSE
			idw_header.Object.form_id_wcr[il_curr_row] = ll_null
			tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"
		END IF
		ib_changed_profile = TRUE
		ib_changed_primary_wcr = TRUE
END CHOOSE
end event

type tabpage_availability from userobject within tab_3
boolean visible = false
integer x = 18
integer y = 112
integer width = 4626
integer height = 1896
boolean enabled = false
boolean border = true
long backcolor = 67108864
string text = "Form Availability"
borderstyle borderstyle = stylelowered!
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_form_availability dw_form_availability
end type

on tabpage_availability.create
this.dw_form_availability=create dw_form_availability
this.Control[]={this.dw_form_availability}
end on

on tabpage_availability.destroy
destroy(this.dw_form_availability)
end on

type dw_form_availability from datawindow within tabpage_availability
boolean visible = false
integer width = 4357
integer height = 1840
integer taborder = 20
boolean enabled = false
string title = "none"
string dataobject = "d_profile_form_availability"
boolean vscrollbar = true
boolean border = false
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;// 05/25/2012 SK Tab page Form Availability is NOT USED, HIDDEN

//long		ll_i, ll_rowcount
//
//IF is_access = 'V' OR is_access = 'P' THEN RETURN
//
//ll_rowcount = This.RowCount()
//
//CHOOSE CASE Lower(dwo.name)
//	CASE "b_all"
//		FOR ll_i = 1 TO ll_rowcount
//			This.Object.include[ll_i] = 1
//		NEXT
//		ib_changed_form = TRUE
//		
//END CHOOSE
end event

event itemchanged;// 05/25/2012 SK Tab page Form Availability is NOT USED, HIDDEN

//ib_changed_form = TRUE
end event

type tabpage_audit from userobject within tab_2
integer x = 18
integer y = 112
integer width = 4654
integer height = 2020
long backcolor = 67108864
string text = "Audit"
long tabtextcolor = 33554432
long picturemaskcolor = 536870912
dw_audit dw_audit
end type

on tabpage_audit.create
this.dw_audit=create dw_audit
this.Control[]={this.dw_audit}
end on

on tabpage_audit.destroy
destroy(this.dw_audit)
end on

type dw_audit from datawindow within tabpage_audit
integer width = 4411
integer height = 2004
integer taborder = 20
string dataobject = "d_profile_audit"
boolean hscrollbar = true
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event buttonclicked;OpenWithParm(w_print_specs, This)


end event

type dw_header from anc_dw within tabpage_view
event ue_mouse_scroll pbm_vscroll
integer width = 4439
integer height = 284
integer taborder = 30
string dataobject = "d_profile_dragon"
boolean livescroll = false
end type

event ue_mouse_scroll;//DevOps 17351 info_gde 11/02/2020; PROD EQAI - Format - Profile Tracking - Header is Scrolling
Message.Processed = TRUE



end event

event buttonclicked;datetime	ldt_null
decimal	lc_cust_discount, lb_delete_ok
integer	li_idx, li_revision_id, li_department
long		ll_row_header, ll_rowcount, ll_temp, ll_profile_id, ll_customer_id, ll_generator_id
long		ll_null, ll_row, ll_tracking_id, ll_tracking_id_compare
string	ls_terms, ls_status, ls_null, ls_tracking_status
string	ls_department, ls_tracking_EQ_contact, ls_user_name, ls_text
str_pass			lstr_pass
str_pick			lstr
datawindowchild	ldwc
w_popup_info	lw_info

This.AcceptText()
ll_row_header = il_curr_row
IF ll_row_header <= 0 THEN RETURN
SetNull(ls_null)
SetNull(ll_null)
SetNull(ldt_null)

CHOOSE CASE Lower(dwo.name)
	CASE "b_types"
		il_customer_id = GetItemNumber(GetRow(),'customer_id')
		Openwithparm(w_popup_select_profile_site_type,iw_profile)
		ll_rowcount = idw_site_type.RowCount()
		If ll_rowcount > 0 Then
			ls_text = String(ll_rowcount) + " Type(s).."
		Else
			ls_text = 'All Types..'
		End If
		This.object.b_types.text = ls_text
		
// agc 10/14/19 temp comment out
//	CASE "b_locations"
//		il_customer_id = GetItemNumber(GetRow(),'customer_id')
//		Openwithparm(w_popup_select_profile_location,iw_profile)
//		ll_rowcount = idw_generator_locations.RowCount()
//		If ll_rowcount > 0 Then
//			ls_text = String(ll_rowcount) + " Loc(s).."
//		Else
//			ls_text = 'All Locs..'
//		End If
//		This.object.b_locations.text = ls_text
		
	CASE "b_customer_taxes"
		ll_customer_id = This.Object.customer_id[row]
		IF ll_customer_id > 0 THEN
			lstr_pass.s_dataobject = "d_customer_sales_tax"
			lstr_pass.s_action = "customer sales tax"
			lstr_pass.l[1] = ll_customer_id
			OpenWithParm(lw_info, lstr_pass)
		END IF
		
	CASE "b_generator_taxes"
		ll_generator_id = This.Object.generator_id[row]
		IF ll_generator_id > 0 THEN
			lstr_pass.s_dataobject = "d_generator_sales_tax"
			lstr_pass.s_action = "generator sales tax"
			lstr_pass.l[1] = ll_generator_id
			OpenWithParm(lw_info, lstr_pass)
		END IF

	CASE "b_tracking"
		//IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN
		IF is_access = "P" OR is_access = "B" THEN RETURN
		// Must save changes
		IF wf_check_changes() < 0 THEN RETURN
		
		// If user says No to save changes on a new record, there will be no header
		ll_row_header = This.GetRow()
		IF ll_row_header <= 0 THEN RETURN
		
		// Nothing can be edited
		FOR ll_temp = 1 TO idw_tracking.RowCount()
			idw_tracking.Object.editable[ll_temp] = 0
			idw_tracking.SetItemStatus(ll_temp, "editable", Primary!, NotModified!)
		NEXT
		idw_tracking.Sort()
		ll_profile_id = This.Object.profile_id[ll_row_header]
		
		// Open popup to allow user to send this profile to the next tracking contact
		lstr_pass.l[1] = ll_profile_id
		lstr_pass.s[1] = This.Object.tracking_type[ll_row_header]
		lstr_pass.s[2] = This.Object.urgent_flag[ll_row_header]
		lstr_pass.s[3] = This.Object.curr_status_code[ll_row_header]
		lstr_pass.s[4] = is_access
		lstr_pass.po[1] = idw_tracking
		// rb
		lstr_pass.po[2] = itr_share
		OpenWithParm(w_popup_profile_tracking, lstr_pass)
		
		lstr_pass = Message.PowerObjectParm
		IF IsValid(lstr_pass) THEN
			IF UpperBound(lstr_pass.b) = 1 THEN
				IF lstr_pass.b[1] = TRUE THEN
					ib_changed_tracking = TRUE
					
					li_department = idw_tracking.Object.department_id[1]
					IF li_department > 0 THEN
						SELECT department_code
							INTO :ls_department
							FROM Department
							WHERE department_id = :li_department
						USING itr_share;
					END IF
					
					ls_tracking_EQ_contact = Trim(idw_tracking.Object.EQ_contact[1])

					IF ls_tracking_EQ_contact > "" THEN
						SELECT user_name
							INTO :ls_user_name
							FROM Users
							WHERE user_code = :ls_tracking_EQ_contact
						USING itr_share;
					END IF
					
					IF IsNull(ls_user_name) OR ls_user_name = "" THEN
						This.Object.tracking_EQ_contact[row] = ls_department
					ELSE
						This.Object.tracking_EQ_contact[row] = ls_department + "/" + ls_user_name
					END IF
					
					// Set new profile_tracking_id field on header.  10/30/06 JDB
					ll_tracking_id = This.Object.profile_tracking_id[row]
					FOR ll_row = 1 TO idw_tracking.RowCount()
						ll_tracking_id_compare = idw_tracking.Object.tracking_id[ll_row]
						IF IsNull(ll_tracking_id_compare) THEN ll_tracking_id_compare = 0
						ll_tracking_id = Max(ll_tracking_id, ll_tracking_id_compare)
					NEXT
					This.Object.profile_tracking_id[row] = ll_tracking_id
					
					//DevOps 18077 info_gde 01/13/2021; Profile Tracking Queue Issues 
					// MPM - 1/22/2021 - DevOps 18942 - Corrected to reference the first (most recent) row in idw_tracking
//					ls_tracking_status=idw_tracking.object.tracking_status[1]
					// MPM - 3/30/2021 - DevOps 19913 - Undo/revert the changes that were previously made under DevOps 18077/19118
//					if ls_tracking_status='COMP' AND len(trim(ls_tracking_EQ_contact)) = 0 then
//						idw_header.Object.tracking_EQ_contact[row] = ""
//						idw_header.Object.eq_contact[row] = ""
//					elseif ls_tracking_status='COMP' AND len(trim(ls_tracking_EQ_contact))>0 then
//						idw_header.Object.tracking_EQ_contact[row] = ls_department + "/" + ls_user_name
//						idw_header.Object.eq_contact[row] =ls_tracking_EQ_contact
//					end if
					// MPM - 5/3/2021 - DevOps 19118 - Commented out the following IF block
//					if ls_tracking_status='COMP' then
//						idw_header.Object.tracking_EQ_contact[row] = ""
//					end if					
					If ib_changed_tracking = TRUE Then
						wf_save()
					End If
				END IF
			END IF
		END IF
END CHOOSE
end event

event rowfocuschanged;call super::rowfocuschanged;integer	li_response, li_rc, li_column_count, li_idx, li_company_id, li_profit_ctr_id, i
long		ll_quote_id, ll_rowcount, ll_row_quote, ll_contact_id
long		ll_row_tran, ll_row_service, ll_profile_id, ll_form_id_wcr
long		ll_row_approval, ll_row, ll_row_disposal, ll_generator_id, ll_customer_id, ll_null
string	ls_approval_code, ls_status_quote, ls_filter, ls_mod, ls_access, ls_protect
string	ls_transporter_code, ls_transporter_name, ls_bill_unit_code, ls_outbound_restricted
string	ls_text, ls_category, ls_desc, ls_code, ls_tracking_type, ls_various_type_flag
long		ll_wastetype, ll_template_form_id, ll_source_form_id
datawindowchild dwc
str_price_adjustment lstr_price_adjustment
datetime	ldt_expired_not_received

integer li_HEADER, li_display_status_uid
long ll_form_id
string ls_docs, ls_copy_source, ls_doc_status_reason,ls_log_text
dwItemStatus ldwstatus  //Subhrajyoti - Begin - Devops# 63667 

SetNull(ll_null)
// Show profile details
IF This.RowCount() <= 0 THEN RETURN
IF ib_retrieving = FALSE THEN
	//Devops 18072 Venu for performance check	 -Start
	If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
		 ls_log_text = "Profile Retrival-Header Rowfocuschanged-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
		 FileWrite(ii_filenum, ls_log_text)
	End If	 
	//Devops 18072 Venu for performance check	 -End
	il_curr_row = This.GetRow()
	IF il_curr_row > 0 THEN
		// MPM - 4/28/2021 - DevOps 19944 - If the "expired not received" date is not null, only Approve (A) and Superuser (S) access
		// can edit the expiration date on idw_detail.  
		// MPM - 7/13/2021 - DevOps 21391 - Since we're now allowing any user to edit the expiration date if the Inactive checkbox is unchecked,
		// I commented out the IF block below and added that functionality to dw_detail.
//		IF idw_detail.Object.DataWindow.ReadOnly = 'no' THEN // If idw_detail is already read-only, we don't need to do anything
//			ldt_expired_not_received = idw_header.Object.expired_not_received_date[il_curr_row]
//			IF IsNull(ldt_expired_not_received) THEN
//				idw_detail.Object.ap_expiration_date.Protect = 0
//				idw_detail.Object.ap_expiration_date.Background.Color = WHITE
//			ELSE
//				IF is_access = 'A' OR is_access = 'S' THEN
//					idw_detail.Object.ap_expiration_date.Protect = 0
//					idw_detail.Object.ap_expiration_date.Background.Color = WHITE
//				ELSE
//					idw_detail.Object.ap_expiration_date.Protect = 1
//					idw_detail.Object.ap_expiration_date.Background.Color = TRANSPARENT
//				END IF
//			END IF
//		END IF

		// In the Profile Header - Broker can change orig_customer_id only
		IF is_access = "B" THEN
			ls_protect = "1"
		ELSE
			ls_protect = "0"
		END IF
		li_column_count = Integer(idw_header.Object.Datawindow.Column.Count)
		FOR li_idx = 1 TO li_column_count
			ls_mod = idw_header.Modify("#" + String(li_column_count) + ".protect = " + ls_protect)
		NEXT
		idw_header.Object.orig_customer_id.Protect = Integer(ls_protect)
	
		ll_profile_id = idw_header.Object.profile_id[il_curr_row]
// agc 10/14/19 temp comment out
//		ls_various_type_flag = idw_header.Object.various_type_flag[il_curr_row]
		ll_form_id_wcr = idw_header.Object.form_id_wcr[il_curr_row]
		is_profile_status_orig = idw_header.Object.curr_status_code[il_curr_row]
		ib_changed_primary_wcr = TRUE
	
		// Scroll the row of the shared DWs
		IF idw_detail.RowCount() > 0 THEN
			idw_detail.ScrollToRow(il_curr_row)
		END IF
		IF idw_comment.RowCount() > 0 THEN
			idw_comment.ScrollToRow(il_curr_row)
		END IF
		// SK 07242012
		IF idw_composition_epa.RowCount() > 0 THEN
			idw_composition_epa.ScrollToRow(il_curr_row)
		END IF
		// Sk 11122013
		IF idw_waste_other.RowCount() > 0 THEN
			idw_waste_other.ScrollToRow(il_curr_row)
		END IF
		IF idw_shipping.RowCount() > 0 THEN
			idw_shipping.ScrollToRow(il_curr_row)
	
			// Set the transporter names
			ls_transporter_code = idw_shipping.Object.transporter_code_1[il_curr_row]
			IF NOT IsNull(ls_transporter_code) AND ls_transporter_code > "" THEN
				SELECT transporter_name 
					INTO :ls_transporter_name 
					FROM Transporter 
					WHERE transporter_code = :ls_transporter_code 
				USING itr_share;
				idw_shipping.Object.txt_transport_1_name.Text = ls_transporter_name
			ELSE
				idw_shipping.Object.txt_transport_1_name.Text = ""
			END IF
			ls_transporter_code = idw_shipping.Object.transporter_code_2[il_curr_row]
			IF NOT IsNull(ls_transporter_code) AND ls_transporter_code > "" THEN
				SELECT transporter_name 
					INTO :ls_transporter_name 
					FROM Transporter 
					WHERE transporter_code = :ls_transporter_code 
				USING itr_share;
				idw_shipping.Object.txt_transport_2_name.Text = ls_transporter_name
			ELSE
				idw_shipping.Object.txt_transport_2_name.Text = ""
			END IF
			
			// SK 09262012 retrieve template & locked fields information if applicable
			ll_template_form_id 	= idw_header.Object.template_form_id[il_curr_row]
			ll_source_form_id 	= idw_header.Object.source_form_id[il_curr_row]
			// does Profile currently match a template
			IF ll_template_form_id > 0 THEN //DevOps 16458 added isvalid() check before trying to retrieve
				if isvalid(ids_profile_lock_item) then ids_profile_lock_item.retrieve(ll_template_form_id)
				if isvalid(ids_template_data) then ids_template_data.retrieve(ll_template_form_id, 1)
			// Profile does not currently match a template, but was created from one!			
			ELSEIF ll_source_form_id > 0 THEN 
				if isvalid(ids_profile_lock_item) then ids_profile_lock_item.retrieve(ll_source_form_id)
				// retrieve the template data
				if isvalid(ids_template_data) then ids_template_data.retrieve(ll_source_form_id, 1)
			END IF
		
		END IF
		
		// If a Profile was being copied, it already contains the copied (new) records
		IF NOT ib_copy THEN
			// Reset
			idw_waste.Reset()
			idw_const.Reset()
			idw_composition.Reset()

			IF NOT ib_new_record THEN
				idw_quoteheader.Reset()
				idw_form_availability.Reset()
			END IF
			idw_approval.Reset()
			idw_form.Reset()
			//Devops 18072 Venu for performance check	 -Start
				If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				   ls_log_text = "Profile Retrival-CLOSEPRICETABS-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				   FileWrite(ii_filenum, ls_log_text)
				End If 
				//Devops 18072 Venu for performance check	 -End
			wf_price("CLOSEPRICETABS", 0)
			  //Devops 18072 Venu for performance check	 -Start
				 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-CLOSEPRICETABS-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
			      End If
				//Devops 18072 Venu for performance check	 -End
			wf_import_waste("CLOSEPRICETABS", 0)
			
			// Retrieve Profile datawindows
			IF NOT IsNull(ll_profile_id) AND ll_profile_id > 0 THEN
				//Devops 18072 Venu for performance check  -Start
				 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-dw_statistics-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
				 End If	 
				//Devops 18072 Venu for performance check	 -End				
				ll_rowcount = idw_statistics.Retrieve(ll_profile_id)
				 //Devops 18072 Venu for performance check  -Start
				 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-dw_statistics-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
				 End If	 				
				 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-dw_tracking-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
				 End If	 
				//Devops 18072 Venu for performance check	 -End
				ll_rowcount = idw_tracking.Retrieve(ll_profile_id)
				//Devops 18072 Venu for performance check  -Start
				If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-dw_tracking-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
				 End If	
			 	//Devops 18072 Venu for performance check	 -End
				 
				 // MPM - 1/20/2023 - DevOps 61051 - UNcommented the idw_audit retrieve line below. This is needed! If idw_header has more than one profile
				 // and the user navigates to a different profile, idw_audit needs to be retrieved!
				 // MPM - 1/23/2023 - DevOps 61051 - After discussion with the dev team, modified the retrieve below to be done only if idw_header has more than one row.
				IF idw_header.RowCount() > 1 THEN
					ll_rowcount = idw_audit.Retrieve(ll_profile_id)	//Devops 18072 Commented by Venu, since Audit retrival called in Audit tab selection as well,hence commenting here. This is will improve the performance minmal.
				END IF
				
				//Devops 18072 Venu for performance check  -Start
				 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-dw_site_type-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
				 End If	 
				//Devops 18072 Venu for performance check	 -End
				ll_rowcount = idw_site_type.Retrieve(ll_profile_id)
                  //Devops 18072 Venu for performance check  -Start
				 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-dw_site_type-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
				 End If	 
				//Devops 18072 Venu for performance check	 -End
				setnull(is_various_type)
				If ll_rowcount > 0 Then
					ls_text = String(ll_rowcount) + " Type(s).."
					is_various_type = 'Site Types'
				Else
					// MPM - DevOps 16705
//					if ls_various_type_flag = 'S' then
						ls_text = 'All Types..'
						is_various_type = 'Site Types'
//					else
//						ls_text = 'Types..'
//					end if
				End If
				This.object.b_types.text = ls_text
				
// agc 10/14/19 temp comment out
//				ll_rowcount = idw_generator_locations.Retrieve(ll_profile_id)
//
//				If ll_rowcount > 0 Then
//					ls_text = String(ll_rowcount) + " Loc(s).."
//					is_various_type = 'Locations'
//				Else
//					if ls_various_type_flag = 'L' then
//						ls_text = 'All Locs..'
//						is_various_type = 'Locations'
//					else
//						ls_text = 'Locs..'
//					end if
//				End If
//				This.object.b_locations.text = ls_text
				
				//Devops 18072 Venu for performance check  -Start
				 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
				 ls_log_text = "Profile Retrival-Other Sections/DW-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
				 FileWrite(ii_filenum, ls_log_text)
				 End If	 
				//Devops 18072 Venu for performance check	 -End
				
				IF is_access = "S" THEN
					ll_rowcount = idw_technical.Retrieve(ll_profile_id, "A", "A")
					ll_rowcount = idw_lab.Retrieve(ll_profile_id, "L", "L")
				ELSEIF is_access = "L" THEN
					ll_rowcount = idw_technical.Retrieve(ll_profile_id, "A", "L")
					ll_rowcount = idw_lab.Retrieve(ll_profile_id, "L", "L")
				ELSE
					ll_rowcount = idw_technical.Retrieve(ll_profile_id, "A", "A")
					ll_rowcount = idw_lab.Retrieve(ll_profile_id, "L", "A")
				END IF
				// 12/04/2012 set share data for technical
				idw_technical.Sharedata(idw_waste_profilelab)
				idw_technical.Sharedata(idw_composition_other)
//				//Subhrajyoti - Begin - Devops# 63667 
//				ldwstatus =  idw_technical.GetItemStatus(ll_rowcount,0,PRIMARY!)
//				wf_set_ph_from_to()
//				IF ldwstatus = NOTMODIFIED! THEN	idw_technical.SetItemStatus(ll_rowcount,0,PRIMARY!,NOTMODIFIED!)
//				//Subhrajyoti - End - Devops# 63667 
				// rb 04/27/2012 Shipping Units
				idw_shipping_unit.Retrieve (ll_profile_id)
				idw_ship_volume.Retrieve (ll_profile_id)
				// SK 06/06/2012 Profile WCR facility
				//idw_profile_wcr_facility.Retrieve(ll_profile_id)
				
				// SK 09/10/2012 Profile Contacts
				ll_rowcount = idw_profile_gen_contact_form.Retrieve (ll_profile_id)
				IF ll_rowcount = 0 THEN idw_profile_gen_contact_form.Insertrow(0)
				ll_rowcount = idw_wcr_display_3.Retrieve (ll_profile_id)
				IF ll_rowcount = 0 THEN idw_wcr_display_3.Insertrow(0)
//				ll_rowcount = idw_wcr_display_4.Retrieve (ll_profile_id)
//				IF ll_rowcount = 0 THEN idw_wcr_display_4.Insertrow(0)

				// Retrieve Waste Codes
				ll_rowcount = idw_waste.Retrieve(ll_profile_id)
				// SK-TX WC 08/01/2013
				// Share data or retrieve individual ? trying retrieve first
				idw_waste_code_fed.Retrieve(ll_profile_id)
				idw_waste_code_state.Retrieve(ll_profile_id)
				idw_waste_code_eq.Retrieve(ll_profile_id)
							
				wf_top6_show()
	//			ib_changed_waste_code = FALSE - SCC I don't think these flags need to be set
				
				// Retrieve Constituents
					ll_rowcount = idw_const.Retrieve(ll_profile_id)
					 wf_calculate_constituent () 
					 wf_calculate_vapor_pressure_density()
					
				// Retrieve Composition
		
					ll_rowcount = idw_composition.Retrieve(ll_profile_id)
			
				// COR2 - MPM
				// Retrieve LDR Subcategory
				ll_rowcount = idw_ldr_subcategory.Retrieve(ll_profile_id)
				
				// Retrieve container size
				ll_rowcount = idw_container_size.Retrieve(ll_profile_id)
				
				// Retrieve WCR facility
				ll_rowcount = idw_wcr_facility.Retrieve(ll_profile_id)

				// rb - Retrieve new rules and category tabs
				ll_rowcount = idw_rules.Retrieve(ll_profile_id)
				ll_rowcount = idw_category.Retrieve(ll_profile_id)
				ll_rowcount = idw_recipe_update.retrieve(ll_profile_id)
				ll_rowcount = idw_recipe.Retrieve(ll_profile_id)
				//idw_recipe_update.sharedata(idw_recipe)
				idw_waste_import_supplement.Retrieve(ll_profile_id)
				idw_benzene_waste_ops_supplemen.Retrieve(ll_profile_id)
				idw_profile_thermal_supplement_form.Retrieve(ll_profile_id)
				idw_profile_cylinder_supplement_dragon.Retrieve(ll_profile_id) 
				idw_profile_debris_certification_dragon.Retrieve(ll_profile_id)
				idw_profile_used_oil_supplement_dragon.Retrieve(ll_profile_id)
				idw_profile_illinois_disposal_supplemen.Retrieve(ll_profile_id)
				idw_profile_ldr_form_dragon.Retrieve(ll_profile_id)
				idw_profile_pcb_supplement_dragon.Retrieve(ll_profile_id) //COR2-JXM
				idw_profile_radioactive_supplement_page_1.Retrieve(ll_profile_id)
				idw_profile_radioactive_supplement_page_2.Retrieve(ll_profile_id)
				//DevOps:19924
	         	idw_gen_knowledge_supplement.Retrieve(ll_profile_id)				
	         	idw_profile_fuels_blending.Retrieve(ll_profile_id) // Dipankar - 08/31/2023 - Added for DevOps 69393
					
				// MPM - 4/19/2020 - DevOps 15205 - Share page_1 with page_3, instead of retrieving page_3:
				idw_profile_radioactive_supplement_page_1.ShareData(idw_profile_radioactive_supplement_page_3)
				idw_profile_radioactive_supplement_3sub.Retrieve(ll_profile_id)
				idw_profile_radioactive_supplement_page_1.sharedata (idw_profile_radioactive_waste)
				// Retrieve Notes
				IF il_curr_row > 0 THEN
					ll_customer_id = idw_header.Object.customer_id[il_curr_row]
					ll_generator_id = idw_header.Object.generator_id[il_curr_row]
					ll_contact_id = idw_header.Object.contact_id[il_curr_row]
					ls_tracking_type = idw_header.Object.tracking_type[il_curr_row]
					itp_note.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, ll_contact_id, TRUE)
				END IF
				
				// Retrieve primary WCR information
				ll_rowcount = wf_retrieve_primary_wcr(ll_form_id_wcr)
				
				// Retrieve Documents and Forms
				IF il_curr_row > 0 THEN
					IF tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_document &
						AND tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectedTab = ii_tabpage_document_document THEN
						// Only retrieve documents if they're already on the Document tab;
						// Otherwise, save time by skipping this retrieve until they click the Document tab
						ll_customer_id = idw_header.Object.customer_id[il_curr_row]
						ll_generator_id = idw_header.Object.generator_id[il_curr_row]
						iudw_document.uf_set_profile(ll_profile_id, ll_customer_id, ll_generator_id, TRUE)
					ELSE
						wf_reset_documents()
					END IF
					
					IF tab_1.tabpage_view.tab_2.SelectedTab = ii_tabpage_document &
						AND tab_1.tabpage_view.tab_2.tabpage_document.tab_3.SelectedTab = ii_tabpage_form THEN
						// Only retrieve forms if they're already on the Form tab;
						// Otherwise, save time by skipping this retrieve until they click the Form tab
						ll_rowcount = idw_form.Retrieve(ll_profile_id)
					ELSE
						wf_reset_forms()
					END IF
				END IF
				
				ll_rowcount = idw_form_availability.Retrieve(ll_profile_id)
				// 01052012 SK WCR User Edit Object has its own tabpage!
				// iuo_wcr_form.SetPosition(ToBottom!)
				ib_wcr = FALSE
				
				// Retrieve QuoteHeader
				ll_rowcount = idw_quoteheader.Retrieve(ll_profile_id)
				IF ll_rowcount <= 0 THEN
					MessageBox(gs_app_name + ":  Profile Quote", "Cannot retrieve Profile Quote.~rPlease contact the I.T. Department.", Exclamation!)
				ELSE
	//				ib_unconfirm = FALSE
					ll_row_quote = idw_quoteheader.GetRow()
					ll_quote_id = idw_quoteheader.Object.quote_id[ll_row_quote]
					
					// Retrieve All Approvals
					ib_retrieve = TRUE
					ll_rowcount = idw_approval.Retrieve(ll_quote_id)
					
					// Set the access to approvals by company
					FOR ll_row_approval = ll_rowcount TO 1 STEP -1
						li_company_id = idw_approval.Object.company_id[ll_row_approval]
						ls_access = wf_profile_access(li_company_id)
						idw_approval.Object.screen_access[ll_row_approval] = ls_access
						idw_approval.SetItemStatus(ll_row_approval, "screen_access", Primary!, NotModified!)
					NEXT
					
//					ls_access = wf_profile_access(li_company_id)
					IF  is_access = "A" OR is_access = "S"  THEN
						idw_detail.object.annual_recertification_date.protect = 0
						idw_detail.object.epa_consent_date.protect = 0
					ELSE
						idw_detail.object.annual_recertification_date.protect = 1
						idw_detail.object.epa_consent_date.protect = 1
					END IF
					//Devops 18072 Venu for performance check  -Start
					 If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
					 ls_log_text = "Profile Retrival-Other Sections/DW-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
					 FileWrite(ii_filenum, ls_log_text)
					 End If	 
					
					If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
					 ls_log_text = "Profile Retrival-Price Sections-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
					 FileWrite(ii_filenum, ls_log_text)
					 End If	 
					//Devops 18072 Venu for performance check	 -End
		
					// Must have approvals to retrieve prices
					IF idw_approval.RowCount() > 0 THEN
						wf_price("RETRIEVE", 0)
						wf_import_waste("RETRIEVE", 0)
					END IF
					COMMIT USING itr_share;		// This is here to stop Open Trans 8/11/06 JDB
					//Devops 18072 Venu for performance check  -Start
					If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
					 ls_log_text = "Profile Retrival-Price Sections-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
					 FileWrite(ii_filenum, ls_log_text)
					 End If	 
					
					If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
					 ls_log_text = "Profile Retrival-After Price Section Process-Start=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
					 FileWrite(ii_filenum, ls_log_text)
					 End If	 
					//Devops 18072 Venu for performance check	 -End
					// Check for Voided Quote
					ls_status_quote = idw_quoteheader.Object.curr_status_code[ll_row_quote]
					IF ls_status_quote <> "A" THEN
						is_approval_readonly = "YES"
						idw_quoteheader.Object.DataWindow.ReadOnly = is_approval_readonly
						idw_approval.Object.DataWindow.ReadOnly = is_approval_readonly
						wf_price("READONLY_YES", 0)
//					ELSE		// Section commented because this allowed users with any access to update pricing.  2/21/07 JDB
//						is_approval_readonly = "NO"
//						idw_quoteheader.Object.DataWindow.ReadOnly = is_approval_readonly
//						idw_approval.Object.DataWindow.ReadOnly = is_approval_readonly
//						wf_price("READONLY_NO", 0)
					END IF
					
					// Show generator outbound restricted?
					wf_generator_knowledge_acceptable_check(ll_generator_id) // sagar 29969	
					wf_generator_foreign_generator(ll_generator_id) 
					
					ls_outbound_restricted = idw_header.Object.generator_outbound_restricted[il_curr_row]
					IF ls_outbound_restricted = "T" THEN
						idw_approval.Object.t_outbound_restricted.visible = 1
						idw_approval.Object.b_outbound_restricted_info.visible = 1
					ELSE
						idw_approval.Object.t_outbound_restricted.visible = 0
						idw_approval.Object.b_outbound_restricted_info.visible = 0
					END IF
				END IF
				
				// Get list of receipts using this OTS approval
				IF idw_detail.GetRow() > 0 THEN
					IF idw_detail.Object.ots_flag[idw_detail.GetRow()] = "T" THEN
						ll_rowcount = dw_receipt_ots_approval_list.Retrieve(ll_profile_id)
						IF ll_rowcount > 0 THEN
							idw_detail.Object.b_update_receipt_for_ots.Visible = 1
						ELSE
							idw_detail.Object.b_update_receipt_for_ots.Visible = 0
						END IF
					ELSE
						idw_detail.Object.b_update_receipt_for_ots.Visible = 0
					END IF
				END IF
			END IF
		END IF
	
		// MPM - 6/8/2020 - DevOps 16210
		is_po = idw_header.Object.purchase_order_from_form[il_curr_row]
		
		// rb 06/25/2012 If new profile scrolled to, adjust WPF tab
		tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.Event rowfocuschanged (tab_1.tabpage_view.tab_2.tabpage_wcr.dw_profile_wcr_sections.GetRow())
		//DevOps 17341 info_gde 10/13/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
//		if this.object.document_update_status[il_curr_row] = 'P' then
//			ib_docs_pending=True
//		end if
	END IF
	
	if IsValid (ids_customer_dispositions) then destroy ids_customer_dispositions
	This.SetFocus()
	            //Devops 18072 Venu for performance check  -Start
				If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
					 ls_log_text = "Profile Retrival-After Price Section Process-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
					 FileWrite(ii_filenum, ls_log_text)
				End If	 
				//Devops 18072 Venu for performance check	 -End
					
	//DevOps 17341 info_gde; 09/30/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
	//DevOps 17126 copied code from tab_1.selectionchanged to dw_header.rowfocuschanged because it should fire for all rows selected, not just the first row
//	SetNull(ls_doc_status_reason)
//
//	//DevOps 16592 info_gde 07/06/2020; PROD EQAI - Docs Pending - Wrong Validation Message Prompted 
////		li_HEADER=idw_header.rowcount()
//		li_HEADER=idw_header.getrow()
//		If li_HEADER>0 Then  
//			ls_docs=idw_header.object.document_update_status.primary[li_HEADER]
//			ll_profile_id=idw_header.object.profile_id.primary[li_HEADER]
//			ll_form_id=idw_header.object.form_id_wcr.primary[li_HEADER]
//			If ls_docs='P' Then  
//				SELECT TOP 1 copy_source,display_status_uid
//				INTO :ls_copy_source,:li_display_status_uid 
//				FROM dbo.FormWCR
//				WHERE profile_id  = :ll_profile_id
//				AND display_status_uid in (1,2,5,7,8) 
//				Order By date_created desc
//				USING itr_share;
//				
//				SELECT TOP 1 doc_status_reason 
//				INTO :ls_doc_status_reason 
//				FROM dbo.Profile
//				WHERE profile_id  = :ll_profile_id
//				AND lower(doc_status_reason) not in ('amendment in process','renewal in process','rejection in process', 'profile sync required') 
//				Order By date_added desc
//				USING itr_share;
//				
//				IF NOT isNull(ll_form_id) AND ll_form_id >0 THEN  
//				//Dev 17338 info_gde 09/24/2020;Profile Tracking - Missing 'Reject Form' Button
//				idw_detail.SetRedraw(false)
//  				choose case  lower(ls_copy_source)
//					case 'amendment'
//						//IF copy_source = 'amendment'  then show MESSAGE for B
//						MessageBox("Docs Pending - Amendment in Process.","A Form has been generated and sent to the customer for completion."+'~n~r'+"Edits should not be made to the profile until the Form has been processed.")
////					   	idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////						idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////						idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//					case 'renewal'
//						//IF copy_source = 'amendment'  then show MESSAGE for A
//						MessageBox("Docs Pending - Renewal in Process.","A Form has been generated and sent to the customer for completion.  Edits should not be made to the profile until the Form has been processed.")				
////					    idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////						idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////						idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//					case else 
//						If li_display_status_uid=7 Then  
//						// then show MESSAGE for C
//							MessageBox("Docs Pending - Rejection in Process.","This profile has been rejected and sent to the customer for review.  Edits should not be made to the profile until the customer has resubmitted from COR.")			
////				              idw_detail.object.b_reject_form.visible=true  //DevOps 16668 info_gde 07/15/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////							idw_detail.object.form_ids.visible=true   //DevOps 16668 info_gde 07/15/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////							idw_detail.object.compute_10.visible=true   //DevOps 16668 info_gde 07/15/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						ElseIf not IsNull(ls_doc_status_reason) AND ls_doc_status_reason<>'' Then
//							MessageBox("Docs Pending - " +ls_doc_status_reason, "This profile has documents pending.  This profile should not be approved until the customer has provided the requested documents.")  
////							idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////							idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////							idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//						End If  
//				end choose
//			ELSEIF not IsNull(ls_doc_status_reason) AND ls_doc_status_reason<>'' Then
//							MessageBox("Docs Pending - " +ls_doc_status_reason, "This profile has documents pending.  This profile should not be approved until the customer has provided the requested documents.")  
////							idw_detail.object.b_reject_form.visible=false  //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////							idw_detail.object.form_ids.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
////							idw_detail.object.compute_10.visible=false   //DevOps 16864 info_gde 07/22/2020; PROD EQAI - Docs Pending - Renewal/Rejection/New
//			END IF  
//				  idw_detail.SetRedraw(true)
//				 // Dev 17338 info_gde 09/24/2020;Profile Tracking - Missing 'Reject Form' Button
//		End If   
//		End If  
//			//DevOps 16592 info_gde 07/06/2020; PROD EQAI - Docs Pending - Wrong Validation Message Prompted 
//DevOps 17341 info_gde; 09/30/2020; PROD EQAI - Profile - Docs Pending Message - Timing Off
	// MPM - 9/21/2020 - DevOps 17259
	//ib_docs_pending=True
	POST wf_build_dot_shipping_desc()
	//Devops 18072 Venu for performance check	 -Start
	If upper(gs_user_id) ='OSWIN_E' or  	upper(gs_user_id) ='VENUGOPA' Then
		 ls_log_text = "Profile Retrival-Header Rowfocuschanged-End=" + string(Today(), "m/d/yyyy h:mm:ss")+ "~r"
		 FileWrite(ii_filenum, ls_log_text)
	End If	 
	//Devops 18072 Venu for performance check	 -End
END IF
end event

event itemchanged;boolean	lb_authorized, lb_ret, lb_found_row = FALSE
datetime	ldt_null, ldt_today, ld_annual_recertification_date, ld_epa_consent_date
decimal	lc_cust_discount,ld_min_concentration,ld_max_concentration, ld_specific_gravity
integer	li_rc, li_i, li_response, li_idx, li_ans, i, j, ll_price_company_id, li_air_permit_status_uid,li_profit_ctr_id,li_company_id, li_price_group_id
integer      li_pos,li_revision_id
long		ll_profile_id, ll_rowcount, ll_customer_id, ll_rows, ll_composition_epa_row, ll_treatment_process_id, ll_price_rowcount,li_last_tab,ll_row_const
long		ll_company_id, ll_profit_ctr_id, ll_row_approval, ll_count, ll_temp, ll_row, ll_form_id, ll_find_bulk_billing_unit,ll_price_bundle_rowcount
long		ll_row_waste, ll_rc, ll_generator_id, ll_generator_type_id, ll_null, ll_row_quotedetail, ll_const_count, ll_consolidation_profile_id
long		ll_orig_customer_id, ll_initial_customer_id, ll_row_child, ll_document_rows, ll_row_header, ll_composition_other_row,ll_quote_id
long		ll_customer_tax_count, ll_generator_tax_count, ll_naics_code, ll_dw_waste_code_fed, ll_technical_row, ll_pricing_disposal_rowcount,li_department
long		ll_document_rowcount, ll_row_document, ll_process_code_id
string	ls_search, ls_curr_status_code, ls_customer_eq_flag, ls_foreign_generator_flag, ls_consistency, ls_free_liquid,ls_facility_tabpage,ls_price_find
string	ls_waste_type_code, ls_haz_flag, ls_tmp, ls_null, ls_filter, ls_waste_code, ls_SPOC_flag,ls_appr_purchase_order,ls_department
string	ls_cust_name, ls_gen_name, ls_terms_code, ls_territory, ls_generator_eq_flag,ls_access,ls_transporter_code,ls_labpack_template_flag
string	ls_treatment_desc, ls_customer_type, ls_find, ls_tracking_type, ls_requested_technology, ls_process_code, ls_site_location_flag
string	ls_generator_status, ls_epa_id, ls_outbound_restricted, ls_epa_source_code, ls_epa_form_code
string	ls_profile_status, ls_customer_ins_sr_flag, ls_customer_ensr_flag,ls_purchase_id,ls_customer,ls_revision_id
string	ls_approval_code, ls_customer_cost_flag, ls_initial_customer_name, ls_territory_code, ls_status, ls_sql, ls_user_name
string	ls_cust_addr1, ls_cust_city, ls_cust_state, ls_cust_zip_code, ls_cust_country, ls_air_permit_flag,ls_d365_go_live_date
string	ls_gen_addr1, ls_gen_city, ls_gen_state, ls_gen_zip_code, ls_gen_emergency_phone, ls_facility, ls_state_reviewed_flag,ls_tracking_EQ_contact
string	ls_gen_mail_addr1, ls_gen_mail_city, ls_gen_mail_state, ls_gen_mail_zip_code, ls_currency_code, ls_state_profile_review_required_flag
string	ls_consolidate_cont_approval, ls_customerbilling_consolidate_cont_flag, ls_customer_consolidate_cont_flag,ls_price_filter, ls_approval_status, ls_tracking_contact
datawindowchild	ldwc
string		ls_bill_to_addr1, ls_bill_to_city, ls_bill_to_state, ls_bill_to_zip_code, ls_bill_to_country,ls_form_approval_code,ls_form_id,ls_source_form_id

//Added this line for TFS issue for 17658 - Per Oswin
str_pick	lstr
datastore	lds, dw_profile_quote_bundled
u_tabpage_profile_price ltabpage_profile_price
u_tabpage_profile_price_bundled ltabpage_profile_bundle
u_tabpage_profile_price_bundled luo_tab

ldt_today = DateTime(Today(), Now())
ll_profile_id = This.Object.profile_id[row]
SetNull(ls_null)
SetNull(ll_null)
SetNull(ldt_null)
	
// Prevent change
IF is_access = "V" OR is_access = "P" then
	RETURN 1
ELSEIF is_access = "B" AND lower(dwo.name) <> "orig_customer_id" THEN
	RETURN 1
END IF
	
SELECT  dbo.fn_get_D365_live()
INTO :ls_d365_go_live_date
FROM Company
WHERE company_id = :gi_company_id
USING gtr_share;
		
// Don't allow change to a rejected, canceled or voided profile
ls_profile_status = This.Object.curr_status_code[row]
IF Lower(dwo.name) <> "tracking_type" &
	AND Lower(dwo.name) <> "curr_status_code" &
	AND (ls_profile_status = "C" OR ls_profile_status = "R" OR ls_profile_status = "V") THEN
	MessageBox(gs_app_name + ":  Profile Change", "Canceled, Rejected or Voided Profiles may not be modified.", Exclamation!)
	RETURN 1
END IF

FOR li_i = 1 TO Len(data)
	IF Mid(data, li_i, 1) = "'" THEN
		MessageBox(gs_app_name + ":  Profile Change", "Cannot enter single quote in this field.", StopSign!)
		This.SetText(Left(This.GetText(), Len(This.GetText()) - 1))
	END IF
NEXT

CHOOSE CASE Lower(dwo.name)
	CASE "tracking_type"
		// Check access to see if this can be changed
		ls_tracking_type = This.Object.tracking_type[row]
		is_tracking_type=ls_tracking_type
		ls_curr_status_code = This.Object.curr_status_code[row]
		ls_tracking_contact=This.Object.tracking_eq_contact[row]
		// 14112
		IF idw_approval.GetRow() <= 0 THEN
		   IF ( data = 'APRC' OR data = 'A'  ) THEN 
			 MessageBox (gs_app_name + ":  Profile Status Change", "A profile cannot be set to Approved OR Approved - Pending Pricing status when an approval for a facility has not been entered.", Exclamation!)
			 This.Object.curr_status_code[row] = ls_curr_status_code
			 This.Object.tracking_type[row] = ls_tracking_type
			RETURN 2
		   END IF
			
		ELSEIF ( data = 'A'  ) THEN //DevOps 18322 info_gde 01/11/2021; EQAI-Compare Profile is not pulling over constituents correctly
			If wf_constituent_validate()=0 Then 
				This.Object.curr_status_code[row] = ls_curr_status_code
				This.Object.tracking_type[row] = ls_tracking_type
			RETURN 2
			End If
		 END IF
			
		// add code to set the "tracking person" right after the profile status is changed to Approved
		//DevOps 18077 info_gde 01/12/2021; Profile Tracking Queue Issues
		// MPM - 6/11/2021 - DevOps 21506 - Commented out the block below
//		IF (  data = 'A'  ) THEN
//				li_department = idw_tracking.Object.department_id[1]
//					IF li_department > 0 THEN
//						SELECT department_code
//							INTO :ls_department
//							FROM Department
//							WHERE department_id = :li_department
//						USING itr_share;
//					END IF
//					
//					ls_tracking_EQ_contact = Trim(idw_tracking.Object.EQ_contact[1])
//
//					IF ls_tracking_EQ_contact > "" THEN
//						SELECT user_name
//							INTO :ls_user_name
//							FROM Users
//							WHERE user_code = :ls_tracking_EQ_contact
//						USING itr_share;
//					END IF
//					
//					IF IsNull(ls_user_name) OR ls_user_name = "" THEN
//						This.Object.tracking_EQ_contact[row] = ls_department
//					ELSE
//						This.Object.tracking_EQ_contact[row] = ls_department + "/" + ls_user_name
//					END IF
//					
//		  END IF
		
 		// MPM - 7/27/2022 - DevOps 30230 - Don't allow the status to be changed to Approved if the Customer terms are "No Admit"
		IF data = 'A' THEN
			IF This.Object.customer_terms_code[row] = 'NOADMIT' THEN
				MessageBox(gs_app_name + ":  Profile Change", 'The profile status may not be changed to "Approved" because the customer~'s terms are "No Admit".', Exclamation!)
				// The "RETURN 2" below will reject the change as expected, but we also need to have the Status dropdown show the previous status value on the window.
				// I noticed that that value would properly display after I lost focus to that dropdown, so I added the 2 POST statements below to lose and regain focus to 
				// the dropdown.
				POST SetColumn('approval_desc')
				POST SetColumn('tracking_type')
				RETURN 2
			END IF
		END IF
		
		// Prevent change on Approved Profile when loads have been received
		IF (ls_curr_status_code = "A" AND ls_tracking_type = "A") THEN
			IF data <> "H" AND data <> "RA" THEN
				// Check for approval usage
				lds = CREATE DATASTORE
				lds.DataObject = "d_profile_approval_usage"
				lds.SetTransObject(itr_share)
				
				ll_count = 0
				FOR ll_row_approval = 1 TO idw_approval.RowCount()
					ls_approval_code = idw_approval.Object.approval_code[ll_row_approval]
					ll_company_id = idw_approval.Object.company_id[ll_row_approval]
					ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
					IF NOT IsNull(ls_approval_code) THEN
						ll_rowcount = lds.Retrieve(gi_debug, ll_company_id, ll_profit_ctr_id, ls_approval_code, gs_connect_type)
						IF ll_rowcount > 0 THEN
							ll_count = lds.Object.usage_count[1]
						ELSE
							ll_count = 0
						END IF
						IF ll_count > 0 THEN
							EXIT
						END IF
					END IF
				NEXT
				DESTROY lds;
				IF ll_count > 0 THEN
					MessageBox(gs_app_name + ":  Profile Status Change", "Profile has been used in the system and the status cannot be changed.", Exclamation!)
					This.Object.curr_status_code[row] = ls_curr_status_code
					This.Object.tracking_type[row] = ls_tracking_type
					RETURN 2

				END IF
			END IF
		END IF
//44672 
	ls_purchase_id = idw_header.Object.purchase_order_from_form[idw_header.getrow()]
	li_last_tab = upperbound(itab_price.control)
	 IF data = "A"  THEN
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
				ll_company_id = idw_approval.Object.company_id[ll_row_approval]
				ll_quote_id = idw_approval.Object.quote_id[ll_row_approval]
				ls_status =  idw_approval.Object.status[ll_row_approval]
				IF ls_purchase_id <> "" OR Not Isnull ( ls_purchase_id) THEN 
					ls_appr_purchase_order = idw_approval.Object.purchase_order[ll_row_approval]
					IF ls_appr_purchase_order = "" OR IsNull (ls_appr_purchase_order) THEN 
						 idw_approval.Object.purchase_order[ll_row_approval] = ls_purchase_id
				    END IF
				END IF
		IF ls_status = 'A' THEN 		
		  IF ll_company_id = 22 THEN
			 ll_rowcount = idw_waste_code_fed.Rowcount ()
			 IF ll_rowcount > 0 THEN
				FOR li_idx = 2 TO li_last_tab
					ltabpage_profile_price = itab_price.control[li_idx]
					IF IsValid(ltabpage_profile_price) THEN
						IF ltabpage_profile_price.visible = true THEN
							ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
							 ls_facility_tabpage = left ( ls_facility_tabpage,2)							
							 IF  ls_facility_tabpage = '22' THEN  
								ll_price_rowcount = ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.rowcount()
								IF ll_price_rowcount = 0 THEN 
									//DevOps:16352 - Check Bundled rows too	
									FOR i = 1 to ltabpage_profile_price.dw_split_group.Rowcount()
										li_profit_ctr_id = ltabpage_profile_price.dw_split_group.object.profit_ctr_id [i]
										li_company_id = ltabpage_profile_price.dw_split_group.object.company_id [i]
										ls_transporter_code =  ltabpage_profile_price.dw_split_group.object.transporter_code [i]
										li_price_group_id = ltabpage_profile_price.dw_split_group.Object.price_group_id[i]
                                     for j = 1 to UpperBound (ltabpage_profile_price.iuo_bundled[]) 
								              ll_price_rowcount=   ltabpage_profile_price.iuo_bundled[j].dw_profile_quote_bundled.Rowcount ()  
													ls_price_find = "product_code =  'FEEFLHAZ'  " 
													ll_price_bundle_rowcount =  ltabpage_profile_price.iuo_bundled[j].dw_profile_quote_bundled.Find(ls_price_find, 1, ll_price_rowcount )
													IF  ll_price_bundle_rowcount = 0 then EXIT
									NEXT		
										IF ll_price_bundle_rowcount = 0 then EXIT
									NEXT	
											IF ll_price_bundle_rowcount = 0 THEN 
												MessageBox (gs_app_name + ":  Profile Status Change",   "The Florida 3% hazardous surcharge (FEEFLHAZ) should be added as the profile has Federal waste codes and is for a TSDF in the state of Florida.", Exclamation!)
												This.Object.curr_status_code[row] = ls_curr_status_code
												This.Object.tracking_type[row] = ls_tracking_type 
												 RETURN 2
											ELSE												
												FOR i = 1 to ll_price_rowcount
														ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
														ls_facility_tabpage = left ( ls_facility_tabpage,2)							
													 IF  ls_facility_tabpage = '22' THEN  
														ls_price_filter = "product_code =  'FEEFLHAZ'"
														ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Setfilter (ls_price_filter)
														ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Filter ()
														ll_price_rowcount = ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.rowcount()
														IF ll_price_rowcount = 0 AND ll_price_bundle_rowcount = 0 THEN
															MessageBox (gs_app_name + ":  Profile Status Change",   "The Florida 3% hazardous surcharge (FEEFLHAZ) should be added as the profile has Federal waste codes and is for a TSDF in the state of Florida.", Exclamation!)
															 This.Object.curr_status_code[row] = ls_curr_status_code
															 This.Object.tracking_type[row] = ls_tracking_type
															
															 ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Setfilter ("")
															 ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Filter()	
															  ltabpage_profile_price.uof_filter_bundled ()
															 RETURN 2
														END IF
													  ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Setfilter ("")
													  ltabpage_profile_price.tab_pricing_line.tabpage_unbundled.dw_unbundled.Filter()	
													END IF
												NEXT
											END IF
//									END IF		
//										END IF
								END IF
							END IF
						END IF
					END IF
				NEXT
			 END IF
		END IF
	END IF
		NEXT
	 END IF
//		IF   ( data = 'APRC' OR data = 'A'  )  THEN 
//			IF is_access = "A" OR is_access = "S"  THEN
//			    lb_authorized = TRUE
//			END IF
////			IF data = 'A' AND (is_access = "C" and ls_tracking_type = "APRC") OR &
////				is_access = "A" OR is_access = "S" THEN
////				lb_authorized = TRUE
////			ELSEIF data = "APRC"  THEN
////				IF is_access = "A" OR is_access = "S" THEN
////					lb_authorized = TRUE
////				END IF	
////			 END IF
//			IF lb_authorized = TRUE THEN  
//				idw_detail.Accepttext ()
//				 ll_row = idw_detail.getRow( )
//					IF ll_row > 0 Then
//					ll_generator_id = this.object.generator_id[row]
//					SELECT foreign_generator_flag
//					INTO :ls_foreign_generator_flag
//					FROM Generator
//					WHERE generator_id = :ll_generator_id
//					USING itr_share;
//		
//					ld_annual_recertification_date =  idw_detail.Object.annual_recertification_date[ll_row]
//					ld_epa_consent_date =  idw_detail.Object.epa_consent_date[ll_row]
//					 IF IsNull (ld_annual_recertification_date)  AND ls_foreign_generator_flag = 'T' THEN
//						MessageBox(gs_app_name + ":  Profile Status", "This profile is for a foreign generator and requires a date in the Annual Recertification field.", Exclamation!)
//						 This.Object.tracking_type[row] = ls_tracking_type
//						 This.Object.curr_status_code[row] = ls_curr_status_code
//						Return 2
//					 ELSEIF IsNull (ld_epa_consent_date)  AND ls_foreign_generator_flag = 'T' THEN
//						MessageBox(gs_app_name + ":  Profile Status", "This profile is for a foreign generator and requires a date in the Epa Consent field.", Exclamation!)
//						This.Object.tracking_type[row] = ls_tracking_type
//						This.Object.curr_status_code[row] = ls_curr_status_code
//						Return 2
//					 END IF
//				  END IF
//			ELSE
//					MessageBox(gs_app_name + ":  Profile Status", "You are not authorized to change to this status.", Exclamation!)
//				 This.Object.tracking_type[row] = ls_tracking_type
//				 This.Object.curr_status_code[row] = ls_curr_status_code
//				 RETURN 2		
//		    END IF
//		END IF
		
		IF NOT IsNull(data) THEN
			lb_authorized = FALSE
			IF data = "A" OR data = "RA" THEN
				IF (is_access = "C" and ls_tracking_type = "APRC") OR &
					is_access = "A" OR is_access = "S" THEN
					lb_authorized = TRUE
				END IF
			ELSEIF data = "APRC"  THEN
				IF is_access = "A" OR is_access = "S" THEN
					lb_authorized = TRUE
				END IF
				
				// SK 08/13/2012 set the pending status and pending available on web date
				This.object.pending_profile_available_web[row] = 'T'
				This.object.pending_profile_available_date[row] = DateTime(Today(), Now())
			ELSE
				// All other tracking types ok for these 
				IF is_access = "A" OR is_access = "S" OR is_access = "C" OR is_access = "L" THEN
					lb_authorized = TRUE
				END IF
				// SK 08/13/2012 set the pending status and pending available on web date
				This.object.pending_profile_available_web[row] = 'F'
				This.object.pending_profile_available_date[row] = ldt_null
			END IF
			IF lb_authorized = FALSE THEN
				MessageBox(gs_app_name + ":  Profile Status", "You are not authorized to change to this status.", Exclamation!)
				This.Object.tracking_type[row] = ls_tracking_type
				This.Object.curr_status_code[row] = ls_curr_status_code
				RETURN 2
			END IF

// 10/16/2015 foreign generator check
			IF data = "A" or data = "APRC" THEN
				idw_detail.Accepttext ()
				 ll_row = idw_detail.getRow( )
				IF ll_row > 0 Then
					ll_generator_id = this.object.generator_id[row]
					SELECT foreign_generator_flag
					INTO :ls_foreign_generator_flag
					FROM Generator
					WHERE generator_id = :ll_generator_id
					USING itr_share;
		
					ld_annual_recertification_date =  idw_detail.Object.annual_recertification_date[ll_row]
					ld_epa_consent_date =  idw_detail.Object.epa_consent_date[ll_row]
					 IF IsNull (ld_annual_recertification_date)  AND ls_foreign_generator_flag = 'T' THEN
						MessageBox(gs_app_name + ":  Profile Status", "This profile is for a foreign generator and requires a date in the Annual Recertification field.", Exclamation!)
						 This.Object.tracking_type[row] = ls_tracking_type
						 This.Object.curr_status_code[row] = ls_curr_status_code
						Return 2
					 ELSEIF IsNull (ld_epa_consent_date)  AND ls_foreign_generator_flag = 'T' THEN
						MessageBox(gs_app_name + ":  Profile Status", "This profile is for a foreign generator and requires a date in the Epa Consent field.", Exclamation!)
						This.Object.tracking_type[row] = ls_tracking_type
						This.Object.curr_status_code[row] = ls_curr_status_code
						Return 2
					 END IF
				END IF
			END IF
// 10/16/2015 end

// GEM:35153
	IF data = "A" or data = "APRC" THEN
		ll_generator_id = this.object.generator_id[row]
		IF  ll_generator_id <> 0 THEN 
			SELECT naics_code
			INTO :ll_naics_code
			FROM Generator
			WHERE generator_id = :ll_generator_id
			USING itr_share;
			IF IsNull( ll_naics_code ) OR ll_naics_code = 0 THEN
				MessageBox(gs_app_name + ":  Profile Status", "The generator on this profile is missing a NAICS code. The profile cannot be approved until this is corrected." , Exclamation!)
				This.Object.tracking_type[row] = ls_tracking_type
				This.Object.curr_status_code[row] = ls_curr_status_code
				Return 2
			 END IF
		END IF
	END IF
   //35878
	IF data = "A" or data = "APRC" THEN
		idw_waste_code_fed.Accepttext ()
		idw_composition_epa.Accepttext ()
		ll_dw_waste_code_fed = idw_waste_code_fed.Rowcount()
		ll_composition_epa_row = idw_composition_epa.GetRow ()
		//DevOps:13023
		IF ll_composition_epa_row > 0 THEN 
			ls_epa_source_code = idw_composition_epa.Object.epa_source_code[ll_composition_epa_row]
			ls_epa_form_code =  idw_composition_epa.Object.epa_form_code[ll_composition_epa_row]
			IF ll_dw_waste_code_fed > 0 AND (( IsNull (ls_epa_source_code ) OR ls_epa_source_code = "" )  OR ( IsNull (ls_epa_form_code ) OR ls_epa_form_code = "" )  ) THEN
				MessageBox(gs_app_name + ":  Profile Status", "You must have an EPA Source Code and EPA Form Code before this profile can be set to approved.", Exclamation!)
				This.Object.tracking_type[row] = ls_tracking_type
				This.Object.curr_status_code[row] = ls_curr_status_code
				Return 2
			END IF
		END IF
    END IF
	 
	IF data = "A" or data = "APRC" THEN
		tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile.Accepttext ()
		idw_composition_other.Accepttext ()
         ll_technical_row =   tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile.GetRow ()
			
// DevOps 17186 - ls_consistency & ls_free_liquid populated from different columns. fhc 8/24/20			
//		ll_composition_other_row =  idw_composition_other.GetRow()
//		ls_consistency = tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile.GetItemString (ll_technical_row, "consistency" )
//		ls_free_liquid = idw_composition_other.GetItemString (ll_composition_other_row, "free_liquid" )
		ls_consistency = tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile.GetItemString (ll_technical_row, "consistency_liquid" )
		ls_free_liquid = tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile.GetItemString (ll_technical_row, "paint_filter_solid_flag" )
		
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
		    ll_company_id =  idw_approval.Object.company_id[ll_row_approval]
		    ll_treatment_process_id =  idw_approval.Object.treatment_process_id[ll_row_approval]
			 
			IF ( ls_consistency = 'T' OR ls_free_liquid = 'F'  )  AND ( ll_company_id = 3 OR ll_treatment_process_id = 6  ) THEN
				MessageBox(gs_app_name + ":  Profile Status", "This profile indicates liquids (Section D3 and/or D6) and cannot be approved for direct landfill disposal.", Exclamation!)
				This.Object.tracking_type[row] = ls_tracking_type
				This.Object.curr_status_code[row] = ls_curr_status_code
				Return 2
				EXIT
			END IF
			
		NEXT
     END IF
	 
	// MPM - 6/15/2020 - DevOps 16348 - Don't allow the status to be changed to Approved or Approved Pending Pricing if H1 = Yes but neither 
	// H2 or H5 are populated on the Profile tab.
	IF data = "A" or data = "APRC" THEN 
		IF This.Object.specific_technology_requested[row] = 'T' THEN
			ls_requested_technology = This.Object.requested_technology[row]
			IF IsNull(ls_requested_technology) THEN ls_requested_technology = ''
			IF Len(ls_requested_technology) < 1 AND idw_wcr_facility.RowCount() < 1 THEN
				MessageBox(gs_app_name + ":  Profile Status", 'This profile cannot be approved because the value of H1 on the Profile tab is "Yes" but neither H2 nor H5 have values entered.', Exclamation!)
				This.Object.tracking_type[row] = ls_tracking_type
				This.Object.curr_status_code[row] = ls_curr_status_code
				Return 2
			END IF
		END IF
	END IF
	
	IF data = "A" or data = "APRC" THEN 
		// MPM - 2/16/17 - Pass a true value to function to indicate that we need an answer back
	    lb_ret = wf_calculate_uts_constituent(TRUE)
		 IF lb_ret = FALSE THEN
		  This.Object.tracking_type[row] = ls_tracking_type
	   	  This.Object.curr_status_code[row] = ls_curr_status_code
			  Return 2
		 END IF
	END IF
	//DevOps:20991 - profile is in Approved or Approved Pending Prices, the process code should not be editable. 
	IF data = "A" or data = "APRC" THEN 
	    idw_detail.object.process_code_uid.protect = 1
	ELSE
		idw_detail.object.process_code_uid.protect = 0
	END IF

	// MPM - 11/7/2018 - Task 5205 - Consolidation profile management
	IF data = "A" or data = "APRC" THEN 
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			ls_state_profile_review_required_flag =  idw_approval.Object.state_profile_review_required_flag[ll_row_approval]
			ll_consolidation_profile_id =  idw_approval.Object.consolidation_profile_id[ll_row_approval]
			ll_company_id = idw_approval.Object.company_id[ll_row_approval] 
			ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
			ls_state_reviewed_flag = idw_approval.Object.state_reviewed_flag[ll_row_approval]
			ls_facility = string(ll_company_id, '00') + '-' + String(ll_profit_ctr_id, '00')
			ls_approval_status = idw_approval.Object.status[ll_row_approval]
			// Don't allow the profile to be approved if the facility for an approval requires state review and the approval has Bulk or Bulk N/A billing units and
			// there is a consolidation profile assigned
			// MPM - 12/17/2018 - GEM 57609 - Skip the following validations if the approval is not Active
			IF ls_state_profile_review_required_flag = 'T' AND ls_approval_status = 'A' THEN
				IF NOT IsNull(ll_consolidation_profile_id) THEN
					li_last_tab = upperbound(itab_price.control)
					FOR li_idx = 2 TO li_last_tab
						ltabpage_profile_price = itab_price.control[li_idx]
						IF IsValid(ltabpage_profile_price) THEN
							IF ltabpage_profile_price.visible THEN
								ls_facility_tabpage = ltabpage_profile_price.uof_get_facility()
								IF ls_facility = ls_facility_tabpage THEN
									ll_pricing_disposal_rowcount = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.RowCount()
									IF ll_pricing_disposal_rowcount > 0 THEN
										ll_find_bulk_billing_unit = ltabpage_profile_price.tab_pricing_line.tabpage_disposal.dw_disposal.Find("IsNull(bulk_flag) OR bulk_flag in ('T', 'U')", 1, ll_pricing_disposal_rowcount + 1)
									END IF
									EXIT
								END IF
							END IF
						end if
					NEXT
					IF ll_find_bulk_billing_unit > 0 THEN
						MessageBox(gs_app_name + ":  Profile Status", "This profile cannot be approved because the approval into " + ls_facility + " has bulk units and a consolidation profile, and bulk units cannot be used with a consolidation profile.", Exclamation!)
						This.Object.tracking_type[row] = ls_tracking_type
						This.Object.curr_status_code[row] = ls_curr_status_code
						Return 2
					END IF
				ELSE
					// If the profile contains an approval into a facility that uses the state review logic, if the approval is not linked to a consolidation profile and the profile doesn't
					// have a 'State Review Confirmation' document scanned or attached to the profile, warn the user that they should upload this documentation.
					ll_document_rowcount = iudw_document.uf_get_rowcount()
					IF ll_document_rowcount > 0 THEN
						FOR ll_row_document = 1 TO ll_document_rowcount
							IF iudw_document.uf_get_type_id(ll_row_document) = ii_state_review_confirmation_type_id THEN
								lb_found_row = TRUE
								EXIT
							END IF
						NEXT
					END IF
					IF NOT lb_found_row THEN
						MessageBox(gs_app_name + ":  Warning","This profile does not have a state review confirmation document uploaded.  Please attach your documentation.")
					END IF
				END IF
				IF IsNull(ls_state_reviewed_flag) OR ls_state_reviewed_flag = 'F' THEN
					MessageBox(gs_app_name + ":  Profile Status", "This profile cannot be approved because the approval into " + ls_facility + " requires state review and the state review flag is not set.", Exclamation!)
					This.Object.tracking_type[row] = ls_tracking_type
					This.Object.curr_status_code[row] = ls_curr_status_code
					Return 2
				END IF
				// Don't allow the profile to be approved if the facility for an approval requires state review and the approval doesn't have either a consolidation profile
				// linked to the approval or or the "state reviewed" flag set to True
				IF IsNull(ll_consolidation_profile_id) AND (IsNull(ls_state_reviewed_flag) OR ls_state_reviewed_flag = 'F') THEN
					MessageBox(gs_app_name + ":  Profile Status", "This profile cannot be approved because the approval into " + ls_facility + " requires either a linked consolidation profile or the State Review checkbox to be checked.", Exclamation!)
					This.Object.tracking_type[row] = ls_tracking_type
					This.Object.curr_status_code[row] = ls_curr_status_code
					Return 2
				END IF
			END IF
		NEXT
	END IF
	
//Task - 10960
IF data = "A" or data = "APRC" THEN 
		FOR ll_row_approval = 1 TO idw_approval.RowCount()
			ll_company_id = idw_approval.Object.company_id[ll_row_approval]
			ll_profit_ctr_id  = idw_approval.Object.profit_ctr_id[ll_row_approval]
			ll_technical_row =   tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile.GetRow ()
			// MPM - 8/11/2021 - DevOps 22013 - Changed specific gravity variable from long to decimal
			ld_specific_gravity = tab_1.tabpage_view.tab_2.tabpage_technical.dw_active_profile.GetItemNumber (ll_technical_row, "specific_gravity" )
			IF ll_company_id = 55 AND ll_profit_ctr_id = 0 THEN 
				IF (IsNull(ld_specific_gravity) OR ld_specific_gravity = 0)  THEN
				    MessageBox(gs_app_name + ":  Profile Status", "This profile cannot be approved because the approval into " + ls_facility + " requires specific gravity.", Exclamation!)
					This.Object.tracking_type[row] = ls_tracking_type
					This.Object.curr_status_code[row] = ls_curr_status_code
					Return 2
				END IF
			END IF
		NEXT
END IF
//DevOps:12378 	
ls_labpack_template_flag =  This.Object.labpack_template_flag[row]
IF  IsNull(ls_labpack_template_flag) OR ls_labpack_template_flag <>  'T' THEN
	IF  ls_d365_go_live_date = '1'  THEN 
		IF ( data = 'A'  ) THEN   // DevOps:12640 -   data = 'APRC' OR
			 ll_customer_id = This.Object.customer_id[row]
				 li_rc = f_chk_cust_status(ll_customer_id, FALSE) 
			 IF li_rc <> 1 then
				  MessageBox(gs_app_name+": Profile Status", "The profile may not be approved because the customer is currently on inactive status", exclamation!)
				This.Object.tracking_type[row] = ls_tracking_type
				This.Object.curr_status_code[row] = ls_curr_status_code
				Return 2
			END IF
		END IF
	END IF
END IF

//DevOps:16251
IF data = 'A' THEN
	FOR ll_row_const = 1 TO idw_const.Rowcount()
		ld_min_concentration 	= idw_const.object.min_concentration [ll_row_const]
		ld_max_concentration 	= idw_const.object.concentration [ll_row_const]
		//DevOps 16461 changed from <= 0 to < 0
		 IF  isnull( ld_min_concentration ) OR  ld_min_concentration <  0 OR  isnull( ld_max_concentration ) OR ld_max_concentration <  0  THEN 
			MessageBox(gs_app_name + ":  Profile Change", "Please review the constituents on the profile as some do not have a minimum and maximum concentration entered. This must be corrected before this profile may be used.", Exclamation!)
			RETURN 2
		END IF
	NEXT
END IF
IF data = 'A' or data = "APRC" THEN
	FOR ll_row_approval = 1 TO idw_approval.RowCount()
		IF idw_approval.object.status[ll_row_approval] = 'A' THEN
				ls_air_permit_flag = idw_approval.Object.air_permit_flag[ll_row_approval]
				ll_company_id = idw_approval.Object.company_id[ll_row_approval]
				ll_profit_ctr_id = idw_approval.Object.profit_ctr_id[ll_row_approval]
						
				IF ls_air_permit_flag = 'T' THEN
					li_air_permit_status_uid = idw_approval.Object.air_permit_status_uid[ll_row_approval]
					ll_treatment_process_id  = idw_approval.Object.treatment_process_id[ll_row_approval] 
					
						ls_filter =  "air_permit_restricted='T'"
							idw_const.SetFilter (ls_filter)
								idw_const.Filter ()
						ll_const_count = idw_const.RowCount ()	
						
						IF  (IsNull(li_air_permit_status_uid) OR li_air_permit_status_uid = 0) AND &
									(IsNull( ll_treatment_process_id) OR  ( ll_treatment_process_id <> 6 AND ll_treatment_process_id <> 16 )) AND &
									  ll_const_count > 0 THEN
							 MessageBox(gs_app_name + ":  Profile Change", "Air Permit Status is missing (for " + String(ll_company_id,"00") + "-" + String(ll_profit_ctr_id,"00") + ")" , Exclamation!)
							 This.Object.tracking_type[row] = ls_tracking_type
							 This.Object.curr_status_code[row] = ls_curr_status_code
							  idw_const.SetFilter ("")
							  idw_const.Filter ()  
							  RETURN 2
						END IF			
				  END IF
				 idw_const.SetFilter ("")
				 idw_const.Filter ()  
			 END IF
		NEXT
END IF
	
	This.GetChild("tracking_type", ldwc)
		ll_row_child = ldwc.GetRow()
		IF ll_row_child > 0 THEN
			ls_curr_status_code = ldwc.GetItemString(ll_row_child, "curr_status_code")
			
			IF ls_curr_status_code = "V" THEN
				ll_count = wf_void()
				IF ll_count < 0 THEN
					MessageBox(gs_app_name + ":  Profile Change", "You are not authorized to Void a Profile.", Exclamation!)
					This.Object.tracking_type[row] = ls_tracking_type
					This.Object.curr_status_code[row] = ls_curr_status_code
					RETURN 2
				ELSEIF ll_count > 0 THEN
					MessageBox(gs_app_name + ":  Profile Change", "Loads have been received against approval(s) defined for this Profile; Profile cannot be Voided.", Exclamation!)
					This.Object.tracking_type[row] = ls_tracking_type
					This.Object.curr_status_code[row] = ls_curr_status_code
					RETURN 2
				END IF
			END IF
				
				// Set the profile status based on the tracking_type
				This.Object.curr_status_code[row] = ls_curr_status_code
			END IF
		END IF
		
	CASE "customer_id"
		ll_customer_id = Long(data)
		
		POST wf_set_caution_text() // Dipankar - 7/3/2023 - Added for #66431
		
		// rb 06/14/2012 - No matter how this turns out, refresh WPF tab afterwards
		if idw_wcr_display_1.dataobject = "d_profile_generator_form_dragon" then
			Post wf_wcr_profile_map_load_wcr_sect ()
		end if

		// Save current
		
		li_ans = wf_clear_client_types()
		If li_ans = -1 then
			Return 1
		End If
		
		if iudw_document.uf_Get_RowCount() = 0 then
			ll_row_header = idw_header.GetRow()
			if ll_row_header > 0 then
				ll_profile_id = idw_header.Object.profile_id[ll_row_header]
				IF not IsNull(ll_profile_id) and  ll_profile_id <> 0 THEN
					ll_rows = wf_retrieve_documents(il_curr_row, ll_profile_id)
				END IF
			end if
		end if	

		IF ib_new_record = TRUE THEN
			SetNull(ll_initial_customer_id)
			SetNull(ls_initial_customer_name)
		ELSE
			ll_initial_customer_id = This.Object.orig_customer_id[row]
			ls_initial_customer_name = This.Object.orig_customer_name[row]
		END IF
		
		// User changed customer_id
		li_rc = gi_success
		FOR ll_row_approval = 1 TO idw_approval.Rowcount()
			IF NOT IsNull(idw_approval.Object.confirm_update_date[ll_row_approval]) THEN
				li_rc = MessageBox(gs_app_name + ":  Customer ID", "Changing customers will unconfirm all pricing!~rDo you want to continue?", Question!, YesNo!, 1)
				EXIT
			END IF
		NEXT
		IF li_rc = 2 THEN
			This.Object.customer_id[row] = This.Object.customer_id.original[row]
			RETURN 2
		END IF
					
		// Check for WCRs on this profile
		ll_temp = This.Object.customer_id.Original[row]
		ll_customer_id = Long(data)
		IF ll_temp <> ll_customer_id THEN
			ll_rowcount = idw_form.RowCount()
			IF ll_rowcount > 0 THEN
				ls_find = "form_type = 'WCR'"
				ll_row = idw_form.Find(ls_find, 1, ll_rowcount)
				IF ll_row > 0 THEN
					li_rc = MessageBox(gs_app_name, "Changing customers will remove all Waste Profile Forms for this customer!!!~r~rIs this OK?", Question!, YesNo!, 2)
					IF li_rc = 1 THEN
						FOR ll_row = ll_rowcount TO 1 STEP -1
							// Remove this profile_id from all WCRs that match ll_temp
							IF idw_form.Object.form_type[ll_row] = "WCR" THEN
								ll_form_id = idw_form.Object.form_id[ll_row]
								
								// Update FormWCR to remove profile_id
								UPDATE FormWCR
									SET profile_id = NULL
									WHERE form_id = :ll_form_id
									AND customer_id = :ll_temp
								USING itr_forms;
								IF itr_forms.SQLNRows > 0 THEN
								
									// Delete the record here
									idw_form.DeleteRow(ll_row)
									
									COMMIT USING itr_forms;
									
									// If we delete the primary wcr, set the data correctly
									IF This.Object.form_id_wcr[row] = ll_form_id THEN
										// Set the primary wcr to NULL
										This.Object.form_id_wcr[row] = ll_null
										tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"
									END IF
								END IF
							END IF
						NEXT
					ELSE
						This.Object.customer_id[row] = ll_temp
						RETURN 2
					END IF
				END IF
			END IF
		END IF

		IF NOT IsNull(data) THEN
			ll_customer_id = Long(data)
			IF f_chk_customer(ll_customer_id, TRUE) <> 0 THEN
				This.Object.customer_id[row] = ll_null
				This.Object.customer_name[row] = ls_null
				This.Object.customer_type[row] = ls_null
				This.Object.customer_terms_code[row] = ls_null
				This.Object.customer_eq_flag[row] = "F"
				// SK 12/19/2012 IF it's not EQ Customer, then wipe the orig cust
				This.Object.orig_customer_id[row] = ll_null
				This.Object.orig_customer_name[row] = ls_null
				This.Object.broker_flag[row] = "D"
				This.Object.customer_tax_count[row] = 0
				This.Object.cust_addr1[row] = ls_null
				This.Object.cust_city[row] = ls_null
				This.Object.cust_state[row] = ls_null
				This.Object.cust_zip_code[row] = ls_null
				This.Object.cust_country[row] = ls_null
				This.Object.currency_code[row] = ls_null
				// MPM - 5/16/2022 - DevOps 41846
				This.Object.bill_to_addr1[row] = ls_null
				This.Object.bill_to_city[row] = ls_null
				This.Object.bill_to_state[row] = ls_null
				This.Object.bill_to_zip_code[row] = ls_null
				This.Object.bill_to_country[row] = ls_null
				RETURN 2
			ELSEIF f_chk_cust_status(ll_customer_id, FALSE) <> 1 THEN
				IF  ls_d365_go_live_date = '1'   THEN 
					//DevOps:12378 - Allow for a profile to be assigned to an inactive customer with warrning msg 
					SELECT isnull(cust_name,'')
					 INTO :ls_customer
					 FROM Customer
					 Where customer_id = :ll_customer_id
					 Using gtr_share;
					 
					This.Object.customer_id[row] = ll_customer_id
					This.object.customer_id.color = RED
					This.Object.customer_name[row] = ls_customer
					This.object.customer_name.color = RED
					 MessageBox(gs_app_name + " Warning:  NOADMIT Customer", "The customer you have selected is currently inactive. This will need to be set to Active before you can approve this profile or proceed with scheduling", Exclamation!)

					This.Object.customer_type[row] = ls_null
					This.Object.customer_terms_code[row] = ls_null
					This.Object.customer_eq_flag[row] = "F"
					// SK 12/19/2012 IF it's not EQ Customer, then wipe the orig cust
					This.Object.orig_customer_id[row] = ll_null
					This.Object.orig_customer_name[row] = ls_null
					This.Object.broker_flag[row] = "D"
					This.Object.customer_tax_count[row] = 0
					This.Object.cust_addr1[row] = ls_null
					This.Object.cust_city[row] = ls_null
					This.Object.cust_state[row] = ls_null
					This.Object.cust_zip_code[row] = ls_null
					This.Object.cust_country[row] = ls_null
					This.Object.currency_code[row] = ls_null
					// MPM - 5/16/2022 - DevOps 41846
					This.Object.bill_to_addr1[row] = ls_null
					This.Object.bill_to_city[row] = ls_null
					This.Object.bill_to_state[row] = ls_null
					This.Object.bill_to_zip_code[row] = ls_null
					This.Object.bill_to_country[row] = ls_null
					RETURN 1
			    ELSE
					MessageBox(gs_app_name + ":  NOADMIT Customer", "Customer ID is not valid.", Exclamation!)
					This.Object.customer_id[row] = ll_null
					This.Object.customer_name[row] = ls_null
					This.Object.customer_type[row] = ls_null
					This.Object.customer_terms_code[row] = ls_null
					This.Object.customer_eq_flag[row] = "F"
					// SK 12/19/2012 IF it's not EQ Customer, then wipe the orig cust
					This.Object.orig_customer_id[row] = ll_null
					This.Object.orig_customer_name[row] = ls_null
					This.Object.broker_flag[row] = "D"
					This.Object.customer_tax_count[row] = 0
					This.Object.cust_addr1[row] = ls_null
					This.Object.cust_city[row] = ls_null
					This.Object.cust_state[row] = ls_null
					This.Object.cust_zip_code[row] = ls_null
					This.Object.cust_country[row] = ls_null
					This.Object.currency_code[row] = ls_null
					// MPM - 5/16/2022 - DevOps 41846
					This.Object.bill_to_addr1[row] = ls_null
					This.Object.bill_to_city[row] = ls_null
					This.Object.bill_to_state[row] = ls_null
					This.Object.bill_to_zip_code[row] = ls_null
					This.Object.bill_to_country[row] = ls_null
					RETURN 2
				END IF
			ELSE
				SELECT Customer.cust_name, 
					Customer.terms_code, 
					Customer.customer_type, 
					IsNull(Customer.eq_flag,'F'), 
					IsNull(Customer.SPOC_flag,'F'),
					Customer.customer_cost_flag,
					Customer.cust_addr1,
					Customer.cust_city,
					Customer.cust_state,
					Customer.cust_zip_code,
					Customer.cust_country,
					Customer.currency_code,
					Customer.bill_to_addr1,
					Customer.bill_to_city,
					Customer.bill_to_state,
					Customer.bill_to_zip_code,
					Customer.bill_to_country
				INTO :ls_cust_name, :ls_terms_code, :ls_customer_type, &
					:ls_customer_eq_flag, :ls_SPOC_flag,
					:ls_customer_cost_flag,
					:ls_cust_addr1, :ls_cust_city, :ls_cust_state, :ls_cust_zip_code, :ls_cust_country, :ls_currency_code,
					:ls_bill_to_addr1, :ls_bill_to_city, :ls_bill_to_state, :ls_bill_to_zip_code, :ls_bill_to_country
				FROM Customer
				WHERE Customer.customer_id = :ll_customer_id
				USING itr_share;
				IF itr_share.SQLCode < 0 THEN
					MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLErrText, Exclamation!)
					This.Object.customer_id[row] = ll_null
					This.Object.customer_name[row] = ls_null
					This.Object.customer_type[row] = ls_null
					This.Object.customer_terms_code[row] = ls_null
					This.Object.customer_eq_flag[row] = "F"
					// SK 12/19/2012 IF it's not EQ Customer, then wipe the orig cust
					This.Object.orig_customer_id[row] = ll_null
					This.Object.orig_customer_name[row] = ls_null
					This.Object.broker_flag[row] = "D" 
					This.Object.SPOC_flag[row] = "F"
					This.Object.customer_tax_count[row] = 0
					This.Object.cust_addr1[row] = ls_null
					This.Object.cust_city[row] = ls_null
					This.Object.cust_state[row] = ls_null
					This.Object.cust_zip_code[row] = ls_null
					This.Object.cust_country[row] = ls_null
					This.Object.currency_code[row] = ls_null
					// MPM - 5/16/2022 - DevOps 41846
					This.Object.bill_to_addr1[row] = ls_null
					This.Object.bill_to_city[row] = ls_null
					This.Object.bill_to_state[row] = ls_null
					This.Object.bill_to_zip_code[row] = ls_null
					This.Object.bill_to_country[row] = ls_null
					RETURN 2
				ELSEIF itr_share.SQLCode = 100 THEN
					MessageBox(gs_app_name + ":  Profile Change", "Customer ID is not valid.", Exclamation!)
					This.Object.customer_id[row] = ll_null
					This.Object.customer_name[row] = ls_null
					This.Object.customer_type[row] = ls_null
					This.Object.customer_terms_code[row] = ls_null
					This.Object.customer_eq_flag[row] = "F"
					// SK 12/19/2012 IF it's not EQ Customer, then wipe the orig cust
					This.Object.orig_customer_id[row] = ll_null
					This.Object.orig_customer_name[row] = ls_null
					This.Object.broker_flag[row] = "D" 
					This.Object.SPOC_flag[row] = "F"
					This.Object.customer_tax_count[row] = 0
					This.Object.cust_addr1[row] = ls_null
					This.Object.cust_city[row] = ls_null
					This.Object.cust_state[row] = ls_null
					This.Object.cust_zip_code[row] = ls_null
					This.Object.cust_country[row] = ls_null
					This.Object.currency_code[row] = ls_null
					// MPM - 5/16/2022 - DevOps 41846
					This.Object.bill_to_addr1[row] = ls_null
					This.Object.bill_to_city[row] = ls_null
					This.Object.bill_to_state[row] = ls_null
					This.Object.bill_to_zip_code[row] = ls_null
					This.Object.bill_to_country[row] = ls_null
					RETURN 2
				ELSE
					This.Object.customer_name[row] = ls_cust_name
					This.object.customer_id.color = BLACK
					This.object.customer_name.color = BLACK
					This.Object.customer_terms_code[row] = ls_terms_code
					This.Object.customer_type[row] = ls_customer_type
					This.Object.pending_customer_name[row] = ls_null
					This.Object.customer_eq_flag[row] = ls_customer_eq_flag
					This.Object.SPOC_flag[row] = ls_SPOC_flag
					This.Object.cust_addr1[row] = ls_cust_addr1
					This.Object.cust_city[row] = ls_cust_city
					This.Object.cust_state[row] = ls_cust_state
					This.Object.cust_zip_code[row] = ls_cust_zip_code
					This.Object.cust_country[row] = ls_cust_country
					This.Object.currency_code[row] = ls_currency_code
					// MPM - 5/16/2022 - DevOps 41846
					This.Object.bill_to_addr1[row] = ls_bill_to_addr1
					This.Object.bill_to_city[row] = ls_bill_to_city
					This.Object.bill_to_state[row] = ls_bill_to_state
					This.Object.bill_to_zip_code[row] = ls_bill_to_zip_code
					This.Object.bill_to_country[row] = ls_bill_to_country
                       
					ll_customer_id = long(data)
					ll_generator_id = this.object.generator_id[row]
					ll_profile_id = this.object.profile_id[row]
					iudw_document.uf_set_profile(ll_profile_id,ll_customer_id,ll_generator_id,false) 
					
					IF ls_customer_eq_flag = "F" THEN
						// SK 12/19/2012 IF it's not EQ Customer, then wipe the orig cust
						This.Object.orig_customer_id[row] = ll_null
						This.Object.orig_customer_name[row] = ls_null
						This.Object.broker_flag[row] = "D" 
					ELSE
						ls_generator_eq_flag = This.Object.generator_eq_flag[row]
						IF ls_generator_eq_flag = "T" THEN
							This.Object.broker_flag[row] = "I" 
						ELSE
							This.Object.broker_flag[row] = "O" 
						END IF
					END IF
			
					ll_customer_tax_count = wf_get_salestax_count_customer(ll_customer_id)
					This.Object.customer_tax_count[row] = ll_customer_tax_count
					
					// Set the territory and customer discounts on all approval lines
					FOR ll_row_approval = 1 TO idw_approval.RowCount()
						// Show/Hide customer cost field
						idw_approval.Object.customer_cost_flag[ll_row_approval] = ls_customer_cost_flag
						
						// Customer change unconfirms all approvals
						idw_approval.Object.confirm_author[ll_row_approval] = ls_null
						idw_approval.Object.confirm_update_by[ll_row_approval] = ls_null
						idw_approval.Object.confirm_update_date[ll_row_approval] = ldt_null
						
						ll_company_id = idw_approval.Object.company_id[ll_row_approval]
						SELECT territory_code,
								cust_discount,
								insurance_surcharge_flag,
								ensr_flag,
								consolidate_containers_flag
							INTO :ls_territory_code,
								:lc_cust_discount,
								:ls_customer_ins_sr_flag,
								:ls_customer_ensr_flag,
								:ls_customerbilling_consolidate_cont_flag
							FROM CustomerBilling
							WHERE CustomerBilling.customer_ID = :ll_customer_id
							AND CustomerBilling.billing_project_id = :gl_billing_project_id
							AND CustomerBilling.status = 'A'
						USING itr_share;

						IF itr_share.SQLcode < 0 THEN
							MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
							idw_approval.Object.billing_project_id[ll_row_approval] = ll_null
							idw_approval.Object.po_sequence_id[ll_row_approval] = ll_null
							idw_approval.Object.purchase_order[ll_row_approval] = ls_null
							idw_approval.Object.release[ll_row_approval] = ls_null
							idw_approval.Object.territory_code[ll_row_approval] = ls_null
							idw_approval.Object.cust_discount[ll_row_approval] = ll_null
							idw_approval.Object.customerbilling_insurance_surcharge_flag[ll_row_approval] = ls_null
							idw_approval.Object.customerbilling_ensr_flag[ll_row_approval] = ls_null
							idw_approval.Object.customerbillingpo_po_amt[ll_row_approval] = ll_null
							idw_approval.Object.consolidate_containers_flag[ll_row_approval] = ls_null
							RETURN 2
						ELSEIF itr_share.SQLcode = 100 THEN
							idw_approval.Object.billing_project_id[ll_row_approval] = ll_null
							idw_approval.Object.po_sequence_id[ll_row_approval] = ll_null
							idw_approval.Object.purchase_order[ll_row_approval] = ls_null
							idw_approval.Object.release[ll_row_approval] = ls_null
							idw_approval.Object.territory_code[ll_row_approval] = ls_null
							idw_approval.Object.cust_discount[ll_row_approval] = ll_null
							idw_approval.Object.customerbilling_insurance_surcharge_flag[ll_row_approval] = ls_null
							idw_approval.Object.customerbilling_ensr_flag[ll_row_approval] = ls_null
							idw_approval.Object.customerbillingpo_po_amt[ll_row_approval] = ll_null
							idw_approval.Object.consolidate_containers_flag[ll_row_approval] = ls_null
						ELSE
							idw_approval.Object.billing_project_id[ll_row_approval] = ll_null
							idw_approval.Object.po_sequence_id[ll_row_approval] = ll_null
							idw_approval.Object.purchase_order[ll_row_approval] = ls_null
							idw_approval.Object.release[ll_row_approval] = ls_null
							idw_approval.Object.territory_code[ll_row_approval] = ls_territory_code
							idw_approval.Object.cust_discount[ll_row_approval] = lc_cust_discount
							idw_approval.Object.customerbilling_insurance_surcharge_flag[ll_row_approval] = ls_customer_ins_sr_flag
							idw_approval.Object.customerbilling_ensr_flag[ll_row_approval] = ls_customer_ensr_flag
							idw_approval.Object.customerbillingpo_po_amt[ll_row_approval] = ll_null
							idw_approval.Object.consolidate_containers_flag[ll_row_approval] = ls_customerbilling_consolidate_cont_flag
							POST wf_billing_project_select(ll_row_approval)
						END IF
					NEXT
					wf_price("REFRESH", 0)
					wf_import_waste("REFRESH", 0)
				END IF
			END IF	
		END IF
		
		//reset Disposition
		ll_row = idw_detail.getRow( )
		If ll_row > 0 Then
			If IsNull( data )  OR idw_detail.object.type_code[ll_row] = 'C' Then
				idw_detail.object.disposition_id[ll_row] = ll_null
				idw_detail.object.disposition_desc[ll_row] = ls_null
				idw_detail.object.type_code[ll_row] = ls_null
			End IF
		End IF
		
	CASE "orig_customer_id"
		IF ib_new_record = TRUE THEN
			SetNull(ll_initial_customer_id)
			SetNull(ls_initial_customer_name)
		ELSE
			ll_initial_customer_id = This.Object.orig_customer_id[row]
			ls_initial_customer_name = This.Object.orig_customer_name[row]
		END IF
		
		// validate entry
		IF NOT IsNull(data) THEN
			ll_customer_id = Long(data)
			IF f_chk_customer(ll_customer_id, TRUE) <> 0 THEN
				This.Object.orig_customer_id[row] = ll_initial_customer_id
				RETURN 2
			ELSEIF f_chk_cust_status(ll_customer_id, TRUE) <> 1 THEN
				This.Object.orig_customer_id[row] = ll_initial_customer_id
				RETURN 2
			ELSE
				// Check for WCRs on this profile
				ll_temp = This.Object.orig_customer_id.Original[row]
				IF ll_temp <> ll_customer_id THEN
					ll_rowcount = idw_form.RowCount()
					IF ll_rowcount > 0 THEN
						ls_find = "form_type = 'WCR'"
						ll_row = idw_form.Find(ls_find, 1, ll_rowcount)
						IF ll_row > 0 THEN
							li_rc = MessageBox(gs_app_name, "Changing orig customers will remove all Waste Profile Forms for this customer!!!~r~rIs this OK?", Question!, YesNo!, 2)
							IF li_rc = 1 THEN
								FOR ll_row = ll_rowcount TO 1 STEP -1
									// Remove this profile_id from all WCRs that match ll_temp
									IF idw_form.Object.form_type[ll_row] = "WCR" THEN
										ll_form_id = idw_form.Object.form_id[ll_row]
										
										// Update FormWCR to remove profile_id
										UPDATE FormWCR
											SET profile_id = NULL
											WHERE form_id = :ll_form_id
											AND customer_id = :ll_temp
										USING itr_forms;
										IF itr_forms.SQLNRows > 0 THEN
										
											// Delete the record here
											idw_form.DeleteRow(ll_row)
											
											COMMIT USING itr_forms;
											
											// If we delete the primary wcr, set the data correctly
											IF This.Object.form_id_wcr[row] = ll_form_id THEN
												// Set the primary wcr to NULL
												This.Object.form_id_wcr[row] = ll_null
												tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"
											END IF
										END IF
									END IF
								NEXT
							ELSE
								This.Object.customer_id[row] = ll_temp
								RETURN 2
							END IF
						END IF
					END IF
				END IF
		
				// Retrieve the customer name
				SELECT cust_name, IsNull(eq_flag,'F')
					INTO :ls_cust_name, :ls_customer_eq_flag
					FROM Customer
					WHERE customer_id = :ll_customer_id
				USING itr_share;
				IF itr_share.SQLCode <> 0 THEN
					SetNull(ls_null)
					This.Object.orig_customer_name[row] = ls_null
				ELSEIF ls_customer_eq_flag = "T" THEN
					// Original customer ID must not be an EQ customer ID
					MessageBox(gs_app_name + ":  Original Customer", "Original Customer cannot be an EQ Facility.", Exclamation!)
					This.Object.orig_customer_id[row] = ll_initial_customer_id
					This.Object.orig_customer_name[row] = ls_initial_customer_name
					RETURN 2
				ELSE
					This.Object.orig_customer_name[row] = ls_cust_name
				END IF
			END IF
			IF NOT ib_new_record THEN
				MessageBox(gs_app_name+": Original Customer Change", "Please verify original customer prices for this new original customer.", Exclamation!)
			END IF
		ELSE
			This.Object.orig_customer_name[row] = ls_null
		END IF

	CASE "pending_customer_name"
		IF NOT IsNull(data) THEN
			This.Object.customer_id[row] = ll_null
			This.Object.customer_name[row] = ls_null
			This.Object.customer_type[row] = ls_null
			This.Object.customer_terms_code[row] = ls_null
			This.Object.customer_eq_flag[row] = "F"
			This.Object.broker_flag[row] = "D"
		END IF
		
	CASE "various_type_flag"

		li_ans = wf_clear_client_types()
		If li_ans = -1 then
			Return 1
		End If
		
		if data = 'S' then
			is_various_type = 'Site Types'
			This.object.b_types.text = 'All Types..'
// agc 10/14/19 temp comment out
//			This.object.b_locations.text = 'Locs..'
		else
// agc 10/14/19 temp comment out
//			if data = 'L' then
//				is_various_type = 'Locations'
//				This.object.b_types.text = 'Types..'
//				This.object.b_locations.text = 'All Locs..'
//			end if
		end if
	
	CASE "generator_epa_id"

		li_ans = wf_clear_client_types()
		If li_ans = -1 then
			Return 1
		End If
		
		if iudw_document.uf_Get_RowCount() = 0 then
			ll_row_header = idw_header.RowCount()
			if ll_row_header > 0 then
				ll_profile_id = idw_header.Object.profile_id[ll_row_header]
				IF not IsNull(ll_profile_id) and ll_profile_id <> 0 THEN
					ll_rows = wf_retrieve_documents(il_curr_row, ll_profile_id)
				END IF
			end if
		end if
		
		IF IsNull(data) THEN
			// Removed the entry
			wf_populate_generator_info (0, "")
			
			// Used the VARIOUS Dropdown
		ELSEIF data = 'VARIOUS' Then
			ll_customer_id = This.Object.customer_id[row]
			If isNull(ll_customer_id) then
				MessageBox(gs_app_name + ":  Need Customer First", "Before using the 'Various' feature, a Customer must first be entered.", Exclamation!)
				Return 2
			End If
			Select count(*)
				into :ll_count
				from CustomerGenerator
			where customer_id = :ll_customer_id
			using gtr_share ;
			
// rb 04/22/2015 The validation should actually be that at least one generator exists on either the customer, or the original customer if one is specified
//			If ll_count < 2 Then
			If ll_count < 1 Then
				ll_initial_customer_id = this.Object.orig_customer_id[row]

				if not IsNull (ll_initial_customer_id) and ll_initial_customer_id <> 0 then
					long ll_orig_count
					select count(*)
					into :ll_orig_count
					from CustomerGenerator
					where customer_id = :ll_initial_customer_id
					using gtr_share;
					
					if ll_orig_count > 0 then
						ll_count += ll_orig_count
					end if
				end if
			End If
			
			If ll_count < 1 Then
// rb end
				MessageBox(gs_app_name + ":  Customer Not Qualified", "This customer must have more than one Generator before they can use this feature.", Exclamation!)
				Return 2
			End If
			wf_populate_generator_info (0, "")
			Select generator_name
				into :ls_gen_name
				from generator
			where generator_id = 0
			using gtr_share ;
			This.Object.generator_name[row] = ls_gen_name
		ELSE
			// Check the entry
			ll_rc = f_chk_epa_id(data, TRUE)
			IF ll_rc <= 0 THEN
				wf_populate_generator_info (0, "")
				RETURN 2
			ELSEIF ll_rc = 1 THEN
				// Only one generator exists with this EPA ID
				
				// MPM - 3/10/2023 - DevOps 46932
				
				SELECT site_location_flag
				INTO :ls_site_location_flag
				FROM Generator
				WHERE epa_id = :data
				USING gtr_share;
				
				IF gtr_share.SQLCode < 0 then
					MessageBox (gs_app_name + ": SQL Error", gtr_share.SQLErrText, exclamation!)
					RETURN 2
				END IF
				
				IF ls_site_location_flag = 'T' THEN
					MessageBox(gs_app_name + ": Generator Select", "You selected a generator who does not generate waste; please select another generator.")
					RETURN 2
				END IF

				wf_populate_generator_info (0, data)
				
			ELSEIF ll_rc > 1 THEN
						// Show popup of generators for this EPA ID
						lstr.s_window_title			= "Generator Select"
						lstr.i_window_width			= 0
						lstr.b_multipick				= FALSE
						lstr.i_tab_count				= 1
						lstr.to_transaction			= itr_share
						lstr.s_retrieve_by[1]		= ""
						lstr.i_return_column_count	= 13
						lstr.s_tab_title[1]			= "Generators (EPA ID:  " + data + ")"
						lstr.i_tabpage_type[1]		= 1
						lstr.s_dataobject[1]			= "d_quick_select_epa_id"
						lstr.s_where[1]				= "generator.EPA_ID = '" + data + "' AND generator.status = 'A'"
						lstr.s_new_reference[1]		= ""
						
						OpenWithParm(w_popup_quick_select, lstr)
		
						lstr = Message.PowerObjectParm
						IF IsValid(lstr) THEN
							IF UpperBound(lstr.return1) = 1 THEN
								// MPM - 3/10/2023 - DevOps 46932
								IF String(lstr.return13[1]) = 'T' THEN
									MessageBox(gs_app_name + ": Generator Select", "You selected a generator who does not generate waste; please select another generator.")
									RETURN 2
								END IF
								ll_generator_id = Long (lstr.return1[1])
								wf_populate_generator_info (ll_generator_id, "")
								// rb 06/14/2012 Left this commented in case something was different?
		//						This.Object.generator_id[row] = lstr.return1[1]
		//						This.Object.generator_epa_id[row] = String(lstr.return2[1])
		//						This.Object.generator_name[row] = String(lstr.return3[1])
		//						This.Object.generator_type_id[row] = lstr.return4[1]
		//						This.Object.generator_status[row] = String(lstr.return5[1])
		//						ls_outbound_restricted  = String(lstr.return8[1])
		//						IF ls_outbound_restricted = "T" THEN
		//							idw_approval.Object.t_outbound_restricted.visible = 1
		//	 						idw_approval.Object.b_outbound_restricted_info.visible = 1
		//						ELSE
		//							idw_approval.Object.t_outbound_restricted.visible = 0
		//							idw_approval.Object.b_outbound_restricted_info.visible = 0
		//						END IF
		//						
		//						This.Object.generator_outbound_restricted[row] = ls_outbound_restricted
		//						ls_generator_eq_flag = String(lstr.return9[1])
		//						This.Object.generator_eq_flag[row] = ls_generator_eq_flag
		//						ls_customer_eq_flag = This.Object.customer_eq_flag[row]
		//						IF IsNull(ls_customer_eq_flag) OR ls_customer_eq_flag = "F" THEN
		//							This.Object.broker_flag[row] = "D"
		//						ELSEIF ls_customer_eq_flag = "T" THEN
		//							IF ls_generator_eq_flag = "T" THEN
		//								This.Object.broker_flag[row] = "I"
		//							ELSE
		//								This.Object.broker_flag[row] = "O"
		//							END IF
		//						END IF
		//						
		//						ll_customer_id = this.object.customer_id[row]
		//						ll_generator_id = this.object.generator_id[row]
		//						ll_profile_id = this.object.profile_id[row]
		//						iudw_document.uf_set_profile(ll_profile_id,ll_customer_id,ll_generator_id,false) 
		//
		//						ll_generator_tax_count = wf_get_salestax_count_generator(ll_generator_id)
		//						This.Object.generator_tax_count[row] = ll_generator_tax_count
		
								ib_changed_profile = TRUE
							END IF
						ELSE
							wf_populate_generator_info (0, "")
						END IF
					END IF
			END IF
		
		// rb 06/14/2012 - No matter how this turns out, refresh WPF tab afterwards
		if idw_wcr_display_1.dataobject = "d_profile_generator_form_dragon" then
			Post wf_wcr_profile_map_load_wcr_sect ()
		end if
		
		// MPM - 7/25/2023 - DevOps 68965
		POST wf_set_caution_text()

	CASE "generator_id"

		// rb 06/14/2012 - No matter how this turns out, refresh WPF tab afterwards
		if idw_wcr_display_1.dataobject = "d_profile_generator_form_dragon" then
			Post wf_wcr_profile_map_load_wcr_sect ()
		end if

		if iudw_document.uf_Get_RowCount() = 0 then
			ll_row_header = idw_header.GetRow()
			if ll_row_header > 0 then
				ll_profile_id = idw_header.Object.profile_id[ll_row_header]
				IF not IsNull(ll_profile_id) and ll_profile_id <> 0 THEN
					ll_rows = wf_retrieve_documents(il_curr_row, ll_profile_id)
				END IF
			end if
		end if
		
		// Validate entry
		IF IsNull(data) THEN
//			This.Post SetItem(row, "generator_id", gl_na_generator_id)
//			This.SetItem(row, "generator_epa_id", "N/A")
//			This.SetItem(row, "generator_name", "N/A")
			wf_populate_generator_info (0, "")
		ELSE
			IF NOT IsNumber(data) THEN
				wf_populate_generator_info (0, "")
				RETURN
			ELSE
				ll_generator_id = Long(data)
				
				// MPM - 3/10/2023 - DevOps 46932
				
				SELECT site_location_flag
				INTO :ls_site_location_flag
				FROM Generator
				WHERE generator_id = :ll_generator_id
				USING gtr_share;
				
				IF gtr_share.SQLCode < 0 then
					MessageBox (gs_app_name + ": SQL Error", gtr_share.SQLErrText, exclamation!)
					RETURN 2
				END IF
				
				IF ls_site_location_flag = 'T' THEN
					MessageBox(gs_app_name + ": Generator Select", "You selected a generator who does not generate waste; please select another generator.")
					RETURN 2
				END IF
				
				wf_populate_generator_info (ll_generator_id, "")
			END IF
		END IF

		// MPM - 7/25/2023 - DevOps 68965
		POST wf_set_caution_text()

	CASE "document_update_status"
		//DevOps:16546
		   This.Object.doc_status_reason[row] = ls_null	
	CASE "labpack_template_flag"  
		//DevOps 29169 AGC 10/26/2021 limit access to IT Group temporarily
		if gi_group_id <> 1099 then
			return 2
		end if
		ls_tracking_type = This.object.tracking_type [row]
		//DevOps 29169 AGC 10/26/2021 prevent checking or unchecking labpack template flag if status <> NEW
		if ls_tracking_type <> 'NEW' then
			MessageBox('LabPack Template','The profile must be in New status to set it as a Lab Pack Template profile.')
			return 2
		end if
		IF ( ls_tracking_type = 'A' OR  ls_tracking_type = 'APRC' ) THEN
		    RETURN 2
		ELSE
			ll_row = idw_detail.getRow( )
//			IF data = 'T' AND ll_row > 0 Then
//			   idw_detail.Object.process_code_uid.protect = 0
//			ELSE
//			  idw_detail.Object.process_code_uid.protect = 1
//		    END IF
					ll_customer_id = This.Object.customer_id[row] 
					ll_generator_id = This.Object.generator_id[row] 
			IF data = 'T' THEN 
				IF Not IsNull(ll_customer_id) OR ll_customer_id > 0 OR Not IsNull(ll_generator_id) OR ll_generator_id > 0 THEN 
					li_rc = Messagebox(gs_app_name + ": Profile Changed", "Lab Pack Template should NOT have a Customer ID or Generator ID assigned.", Exclamation!)
					This.Object.customer_id[row] = ll_null
					This.Object.generator_epa_id[row] = ls_null
					This.Object.customer_name[row] = ls_null
					This.Object.generator_id[row] = ll_null
					This.Object.generator_name[row] = ls_null
				END IF
			ELSE
				//idw_detail.Object.process_code_uid[ll_row] = ll_null 
			END IF
	   END IF
	CASE "pending_generator_name"
		IF NOT IsNull(data) THEN
			This.Object.generator_epa_id[row] = ls_null
			This.Object.generator_id[row] = ll_null
			This.Object.generator_type_id[row] = ll_null
			This.Object.generator_status[row] = ls_null
			This.Object.generator_name[row] = ls_null
			This.Object.generator_outbound_restricted[row] = "F"
			idw_approval.Object.t_outbound_restricted.visible = 0
			idw_approval.Object.b_outbound_restricted_info.visible = 0
			wf_generator_knowledge_acceptable_check(0) // sagar 29969		
			This.Object.generator_eq_flag[row] = "F"
			ls_customer_eq_flag = This.Object.customer_eq_flag[row]
			IF IsNull(ls_customer_eq_flag) OR ls_customer_eq_flag = "F" THEN
				This.Object.broker_flag[row] = "D"
			ELSEIF ls_customer_eq_flag = "T" THEN
				This.Object.broker_flag[row] = "O"
			END IF
		END IF
		
	CASE ELSE
		
END CHOOSE

// Something changed
ib_changed_profile = TRUE
end event

event rowfocuschanging;if not Ib_copy and not ib_new_record then 
	if wf_check_changes() < 0 then
  		return 1
	end if
end if

end event

event itemerror;
return 1
end event

event ue_report;call super::ue_report;long	ll_customer_id, ll_generator_id, ll_row
str_pass	lstr_pass
string	ls_status
w_popup_info	lw_info


ll_row = GetRow()

Choose Case as_col_name

	CASE "customer_id"
		If ai_indicate < 3 then
			Return 1
		Else
			ll_customer_id = This.Object.customer_id[ll_row]
			IF (NOT IsNull(ll_customer_id)) AND ll_customer_id > 0 THEN
				lstr_pass.s_dataobject = "d_customer_info"
				lstr_pass.s_action = "customer"
				lstr_pass.d[1] = ll_customer_id
				lstr_pass.s_win_parms = ls_status
				OpenWithParm(lw_info, lstr_pass)
			END IF
		End If

	CASE "generator_id",'epa_id'
		If ai_indicate < 3 then
			Return 1
		Else
			ll_generator_id = This.Object.generator_id[ll_row]
			IF (NOT IsNull(ll_generator_id)) THEN
				lstr_pass.s_dataobject = "d_generator_info"
				lstr_pass.s_action = "generator"
				lstr_pass.s_win_parms = "X"	// Prevent changes to directions
				lstr_pass.d[1] = ll_generator_id
				OpenWithParm(lw_info, lstr_pass)
			END IF
		End IF
End Choose
		
return 0
		
end event

event ue_lookup;call super::ue_lookup;datetime ldt_null
decimal	lc_cust_discount
integer	li_ans, li_idx, li_rc, li_gen
long		ll_row_approval, ll_customer_id, ll_temp, ll_rowcount, ll_row, ll_form_id, ll_null, ll_row_header
long		ll_row_profile, ll_rows, ll_profile_id, ll_company_id, ll_generator_id, ll_curr_row
long		ll_customer_tax_count, ll_generator_tax_count
string	ls_where, ls_customer, ls_terms, ls_cust_type, ls_customer_cost_flag, ls_customer_eq_flag,ls_labpack_template_flag
string	ls_spoc_flag, ls_question, ls_find, ls_null, ls_generator_eq_flag, ls_territory_code,ls_d365_go_live_date
string	ls_customer_ins_sr_flag, ls_customer_ensr_flag, ls_outbound_restricted
string	ls_cust_addr1, ls_cust_city, ls_cust_state, ls_cust_zip_code, ls_currency_code
str_pick	lstr
string		ls_bill_to_addr1, ls_bill_to_city, ls_bill_to_state, ls_bill_to_zip_code, ls_bill_to_country

SetNull(ls_null)
SetNull(ll_null)
SetNull(ldt_null)
ll_curr_row = getRow()

SELECT  dbo.fn_get_D365_live()
INTO :ls_d365_go_live_date
FROM Company
WHERE company_id = :gi_company_id
USING gtr_share;

if ll_curr_row < 1 then return 0

Choose case as_col_name
		
	CASE "customer_id", "orig_customer_id"
		//DevOps:20993 - If profile is lab pack then return
		ls_labpack_template_flag = This.object.labpack_template_flag[ll_curr_row]
		IF  ls_labpack_template_flag = 'T' THEN 
		   return 1
		END IF
		
		if ai_indicate < 3 then
			return 1
		Else
			If as_col_name = 'customer_id' then
				li_ans = wf_clear_client_types()
				If li_ans = -1 then
					Return 0
				End If
				
				// SK 12/19/2012 - No matter how this turns out, refresh WPF tab afterwards
				if idw_wcr_display_1.dataobject = "d_profile_generator_form_dragon" then
					Post wf_wcr_profile_map_load_wcr_sect ()
				end if
			End If
			
			// Brokers have access to original customer only
			IF is_access = "V" OR is_access = "P" OR &
				(Lower(as_col_name) = "customer_id" AND is_access = "B") THEN 
				RETURN 0
			END IF
			
			IF Lower(as_col_name) = "orig_customer_id" THEN
				ls_where = "ISNULL(Customer.eq_flag, 'F') = 'F' AND cust_prospect_flag = 'C'"
			ELSE
				ls_where = ""
			END IF
	
			lstr.s_window_title		= "Customer Select"
			lstr.i_window_width		= 2650
			lstr.b_multipick			= False
			lstr.i_tab_count			= 27
			lstr.s_retrieve_by[1]		= "cust_name"
			lstr.s_button_text[1]		= "Alphabetize by Name"
			lstr.i_return_column_count	= 27
			FOR li_idx = 1 TO 26
				lstr.s_tab_title[li_idx]		= Char(li_idx + 64)
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]		= "d_quick_select_customer_with_address"
				lstr.s_where[li_idx]				= ls_where
				lstr.s_new_reference[li_idx]	= ""
			NEXT
			lstr.s_tab_title[li_idx]		= "0-9"
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_customer_with_address"
			lstr.s_where[li_idx]				= ls_where
			lstr.s_new_reference[li_idx]	= ""
	
			lstr.to_transaction = itr_share
	
			OpenWithParm(w_popup_quick_select, lstr)
	
			lstr = Message.PowerObjectParm
			IF IsValid(lstr) THEN
			
				// Notify approval will be unconfirmed
				li_rc = gi_success
				FOR ll_row_approval = 1 TO idw_approval.Rowcount()
					IF Not IsNull(idw_approval.Object.confirm_update_date[ll_row_approval]) THEN
						li_rc = MessageBox(gs_app_name + ":  Customer ID", "Changing customers will unconfirm all pricing!~rDo you want to continue?", Question!, YesNo!, 1)
						EXIT
					END IF
				NEXT
				IF li_rc = 2 THEN
					RETURN 0
				END IF
				
				FOR li_idx = 1 TO lstr.i_return_record_count
					ll_customer_id = Long(lstr.return1[li_idx])
					ls_customer = string(lstr.return2[li_idx])
					ls_terms = string(lstr.return3[li_idx])
					ls_cust_type = string(lstr.return4[li_idx])
					ls_customer_cost_flag = string(lstr.return5[li_idx])
					ls_customer_eq_flag = string(lstr.return14[li_idx])
					ls_spoc_flag = string(lstr.return15[li_idx])
					//get customer address too
					ls_cust_addr1 = string(lstr.return6[li_idx])
					ls_cust_city	= string(lstr.return11[li_idx])
					ls_cust_state	= string(lstr.return12[li_idx])
					ls_cust_zip_code	= string(lstr.return13[li_idx])
					ls_currency_code	= string(lstr.return17[li_idx])
					// MPM - 5/16/2022 - DevOps 41846
					ls_bill_to_addr1 =  string(lstr.return19[li_idx])
					ls_bill_to_city = string(lstr.return24[li_idx])
					ls_bill_to_state = string(lstr.return25[li_idx])
					ls_bill_to_zip_code = string(lstr.return26[li_idx])
					ls_bill_to_country = string(lstr.return27[li_idx])
					
					/////////////////////////////////////////////////////////////////////////////
					// Check for WCR customer change
					/////////////////////////////////////////////////////////////////////////////
					IF Lower(as_col_name) = "orig_customer_id" THEN
						ll_temp = This.Object.orig_customer_id[ll_curr_row]
						ls_question = "Changing orig customer will remove all Waste Profile Forms for this customer!!!~r~rIs this OK?"
					ELSE
						ll_temp = This.Object.customer_id[ll_curr_row]
						ls_question = "Changing customers will remove all Waste Profile Forms for this customer!!!~r~rIs this OK?"
					END IF
					IF ll_temp <> ll_customer_id THEN
						// User changed customer_id
		
						// Check for WCRs on this profile
						ll_rowcount = idw_form.RowCount()
						IF ll_rowcount > 0 THEN
							ls_find = "form_type = 'WCR'"
							ll_row = idw_form.Find(ls_find, 1, ll_rowcount)
							IF ll_row > 0 THEN
								li_rc = MessageBox(gs_app_name + ":  Waste Profile Form", ls_question, Question!, YesNo!, 1)
								IF li_rc = 1 THEN
									FOR ll_row = ll_rowcount TO 1 STEP -1
										// Remove this profile_id from all WCRs that match ll_temp
										IF idw_form.Object.form_type[ll_row] = "WCR" THEN
											ll_form_id = idw_form.Object.form_id[ll_row]
											
											// Update FormWCR to remove profile_id
											UPDATE FormWCR
												SET profile_id = NULL
												WHERE form_id = :ll_form_id
												AND customer_id = :ll_temp
											USING itr_forms;
											IF itr_forms.SQLNRows > 0 THEN
											
												// Delete the record here
												idw_form.DeleteRow(ll_row)
												
												COMMIT USING itr_forms;
										
												// If we delete the primary wcr, set the data correctly
												IF This.Object.form_id_wcr[ll_curr_row] = ll_form_id THEN
													// Set the primary wcr to NULL
													This.Object.form_id_wcr[ll_curr_row] = ll_null
													tab_1.tabpage_view.st_form_id_wcr.Text = "(None)"
												END IF
											END IF
										END IF
									NEXT
								ELSE
									This.Object.customer_id[ll_curr_row] = ll_temp
									RETURN 2
								END IF
							END IF
						END IF
					END IF
					/////////////////////////////////////////////////////////////////////////////
					// End WCR check
					/////////////////////////////////////////////////////////////////////////////
					
					// Check original customer
					IF Lower(as_col_name) = "orig_customer_id" THEN
						IF f_chk_customer(ll_customer_id, TRUE) <> 0 THEN
							RETURN 0
						ELSEIF f_chk_cust_status(ll_customer_id, TRUE) <> 1 THEN
							RETURN 0
						ELSE
							// Cannot be an EQ customer
							IF NOT IsNull(ls_customer_eq_flag) AND ls_customer_eq_flag = "T" THEN
								MessageBox(gs_app_name + ":  Original Customer", "Original Customer cannot be an EQ customer.", Exclamation!)
								RETURN 0
							ELSE
								This.Object.orig_customer_id[ll_curr_row] = ll_customer_id
								This.Object.orig_customer_name[ll_curr_row] = ls_customer
							END IF
						END IF
	
					// Check Profile customer
					ELSE
						// Check terms
							IF Upper(ls_terms) = "NOADMIT" THEN
								IF  ls_d365_go_live_date = '0'   THEN 
									MessageBox(gs_app_name + ":  NOADMIT Customer", "This Customer is not valid", Exclamation!)
									EXIT
								ELSE
								  IF f_chk_cust_status(ll_customer_id, FALSE) <> 1 THEN
									//DevOps:12378 - Allow for a profile to be assigned to an inactive customer with warrning msg 
									This.Object.customer_id[ll_curr_row] = ll_customer_id
									This.object.customer_id.color =  RED 
									This.Object.customer_name[ll_curr_row] = ls_customer
									This.object.customer_name.color = RED
									MessageBox(gs_app_name + " Warning:  NOADMIT Customer", "The customer you have selected is currently inactive. This will need to be set to Active before you can approve this profile or proceed with scheduling", Exclamation!)
									Return 1
								END IF
								END IF
						   END IF
						
						// Check for valid customer
						IF f_chk_customer(ll_customer_id, TRUE) <> 0 THEN
							RETURN 0
						ELSEIF f_chk_cust_status(ll_customer_id, TRUE) <> 1 THEN
							RETURN 0
						ELSE
							POST wf_set_caution_text() // Dipankar - 7/3/2023 - Added for #66431
							
							if iudw_document.uf_Get_RowCount() = 0 then
								ll_row_header = idw_header.GetRow()
								if ll_row_header > 0 then
									ll_profile_id = idw_header.Object.profile_id[ll_row_header]
									IF not IsNull(ll_profile_id) and ll_profile_id <> 0 THEN
										ll_rows = wf_retrieve_documents(il_curr_row, ll_profile_id)
									END IF
								end if
							end if
							
							This.Object.customer_id[ll_curr_row] = ll_customer_id
							This.Object.customer_name[ll_curr_row] = ls_customer
							This.object.customer_id.color =  BLACK
					         This.object.customer_name.color = BLACK
							This.Object.customer_terms_code[ll_curr_row] = ls_terms
							This.Object.customer_type[ll_curr_row] = ls_cust_type
							// set address
							This.Object.cust_addr1[ll_curr_row] = ls_cust_addr1
							This.Object.cust_city[ll_curr_row] = ls_cust_city
							This.Object.cust_state[ll_curr_row] = ls_cust_state
							This.Object.cust_zip_code[ll_curr_row] = ls_cust_zip_code
							This.Object.pending_customer_name[ll_curr_row] = ls_null
							ls_customer_cost_flag = ls_customer_cost_flag
							
							IF IsNull(ls_SPOC_flag) THEN ls_SPOC_flag = "F"
							This.Object.SPOC_flag[ll_curr_row] = ls_SPOC_flag
							This.Object.customer_eq_flag[ll_curr_row] = ls_customer_eq_flag
							IF ls_customer_eq_flag = "F" THEN
								// SK 12/19/2012 IF it's not EQ Customer, then wipe the orig cust
								This.Object.orig_customer_id[ll_curr_row] = ll_null
								This.Object.orig_customer_name[ll_curr_row] = ls_null
								This.Object.broker_flag[ll_curr_row] = "D" 
							ELSE
								ls_generator_eq_flag = This.Object.generator_eq_flag[ll_curr_row]
								IF ls_generator_eq_flag = "T" THEN
									This.Object.broker_flag[ll_curr_row] = "I" 
								ELSE
									This.Object.broker_flag[ll_curr_row] = "O" 
								END IF
							END IF

							ll_customer_tax_count = wf_get_salestax_count_customer(ll_customer_id)
							This.Object.customer_tax_count[ll_curr_row] = ll_customer_tax_count
							This.Object.currency_code[ll_curr_row] = ls_currency_code

							// MPM - 5/16/2022 - DevOps 41846
							This.Object.bill_to_addr1[ll_curr_row] = ls_bill_to_addr1
							This.Object.bill_to_city[ll_curr_row] = ls_bill_to_city
							This.Object.bill_to_state[ll_curr_row] = ls_bill_to_state
							This.Object.bill_to_zip_code[ll_curr_row] = ls_bill_to_zip_code
							This.Object.bill_to_country[ll_curr_row] = ls_bill_to_country

						END IF
						
						IF Upper(ls_terms) = "COD" THEN
							MessageBox(gs_app_name + ":  COD Customer", "This is a C.O.D. Customer", Information!)
						END IF
						
						// Set the territory and customer discounts on all approval lines
						FOR ll_row_approval = 1 TO idw_approval.RowCount()
							// Show/Hide customer cost field
							idw_approval.Object.customer_cost_flag[ll_row_approval] = ls_customer_cost_flag
							
							// Customer changed, no approvals are confirmed
							idw_approval.Object.confirm_author[ll_row_approval] = ls_null
							idw_approval.Object.confirm_update_by[ll_row_approval] = ls_null
							idw_approval.Object.confirm_update_date[ll_row_approval] = ldt_null
							
							ll_company_id = idw_approval.Object.company_id[ll_row_approval]
							SELECT territory_code,
									cust_discount,
									insurance_surcharge_flag,
									ensr_flag
								INTO :ls_territory_code,
									:lc_cust_discount,
									:ls_customer_ins_sr_flag,
									:ls_customer_ensr_flag
								FROM CustomerBilling
								WHERE CustomerBilling.customer_ID = :ll_customer_id
								AND CustomerBilling.billing_project_id = :gl_billing_project_id
								AND CustomerBilling.status = 'A'
							USING itr_share;
							IF itr_share.SQLcode < 0 THEN
								MessageBox(gs_app_name + ":  SQL Error", itr_share.SQLerrtext, Exclamation!)
								idw_approval.Object.territory_code[ll_row_approval] = ls_null
								idw_approval.Object.cust_discount[ll_row_approval] = ll_null
								idw_approval.Object.customerbilling_insurance_surcharge_flag[ll_row_approval] = ls_null
								idw_approval.Object.customerbilling_ensr_flag[ll_row_approval] = ls_null
							ELSEIF itr_share.SQLcode = 100 THEN
								idw_approval.Object.territory_code[ll_row_approval] = ls_null
								idw_approval.Object.cust_discount[ll_row_approval] = ll_null
								idw_approval.Object.customerbilling_insurance_surcharge_flag[ll_row_approval] = ls_null
								idw_approval.Object.customerbilling_ensr_flag[ll_row_approval] = ls_null
							ELSE
								idw_approval.Object.territory_code[ll_row_approval] = ls_territory_code
								idw_approval.Object.cust_discount[ll_row_approval] = lc_cust_discount
								idw_approval.Object.customerbilling_insurance_surcharge_flag[ll_row_approval] = ls_customer_ins_sr_flag
								idw_approval.Object.customerbilling_ensr_flag[ll_row_approval] = ls_customer_ensr_flag
							END IF
						NEXT		
					END IF
				NEXT
				ib_changed_profile = TRUE
				This.AcceptText()
				idw_header.AcceptText()
				idw_header.SetRedraw(TRUE)
				
				wf_price("REFRESH", 0)
					wf_import_waste("REFRESH", 0)
			END IF
		End If
		// rb 06/26/2012 If WPF tab is active, set the ID there
		if tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.dataobject = "d_profile_generator_form_dragon" then
			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.customer_id[1] = This.Object.customer_id[ll_curr_row]
			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.cust_name[1] = This.Object.customer_name[ll_curr_row]
			// MPM - 5/16/2022 - DevOps 41846 - changed the customer address columns to customer "bill to" address columns
			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.bill_to_addr1[1] = This.Object.bill_to_addr1[ll_curr_row]
			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.bill_to_city[1] = This.Object.bill_to_city[ll_curr_row]
			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.bill_to_state[1] = This.Object.bill_to_state[ll_curr_row]
			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.bill_to_zip_code[1] = This.Object.bill_to_zip_code[ll_curr_row]
			// MPM - 5/1/2020 - DevOps 15360
			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.generator_phone[1] = This.Object.generator_phone[ll_curr_row]
		end if

	CASE "epa_id","generator_id"
			//DevOps:20993 - If profile is lab pack then return
		ls_labpack_template_flag = This.object.labpack_template_flag[ll_curr_row]
		IF ls_labpack_template_flag = 'T' THEN 
		   return 1
		END IF
		
		if ai_indicate < 3 then
			return 1
		Else
			IF is_access = "V" OR is_access = "P" OR is_access = "B" THEN RETURN 0
	
			li_ans = wf_clear_client_types()
			If li_ans = -1 then
				Return 0
			End If
	
			lstr.s_window_title			= "Generator Select"
			lstr.i_window_width			= 0
			lstr.b_multipick				= FALSE
			lstr.s_retrieve_by[1]		= "generator_name"
			lstr.s_retrieve_by[2]		= "epa_id"
			lstr.s_button_text[1]		= "Alphabetize by Name"
			lstr.s_button_text[2]		= "Alphabetize by ID"
			lstr.i_return_column_count	= 28
			lstr.to_transaction			= itr_share
			
			// If we know the customer ID, we can present a tab with the
			// generators that are linked to the customer
			li_idx = 0
			ll_customer_id = This.Object.customer_id[ll_curr_row]
			IF NOT IsNull(ll_customer_id) AND ll_customer_id > 0 THEN
				li_idx++
				lstr.s_tab_title[li_idx]		= "Cust " + String(ll_customer_id) + " Generators"
				lstr.i_tabpage_type[li_idx]	= 1
	
				lstr.s_dataobject[li_idx]		= "d_quick_select_generator_with_address"
				lstr.s_where[li_idx]				= "Generator.status = 'A' AND Generator.generator_id IN (SELECT generator_id FROM CustomerGenerator WHERE customer_id = " + string(ll_customer_id) + ")"
				lstr.s_new_reference[li_idx]	= "generator"
			END IF
			FOR li_gen = 1 TO 26
				li_idx++
				lstr.s_tab_title[li_idx]		= Char(li_gen + 64)
	
				lstr.i_tabpage_type[li_idx]	= 1
				lstr.s_dataobject[li_idx]		= "d_quick_select_generator_with_address"
				lstr.s_where[li_idx]				= "generator.status = 'A'"
				lstr.s_new_reference[li_idx]	= "generator"
			NEXT
			
			// Add numbered generators
			// rb 06/03/2016 GEM:37781 - This pass passing d_quick_select_generator...should be passing the same one with address
			li_idx++
			lstr.s_tab_title[li_idx]		= "0-9"
			lstr.i_tabpage_type[li_idx]	= 1
			lstr.s_dataobject[li_idx]		= "d_quick_select_generator_with_address"
			lstr.s_where[li_idx]				= "generator.status = 'A'"
			lstr.s_new_reference[li_idx]	= "generator"
	
			lstr.i_tab_count				= li_idx
			OpenWithParm(w_popup_quick_select, lstr)
	
			lstr = Message.PowerObjectParm
			
			  IF IsValid(lstr) THEN
				//DevOPs:63656 - Check i_return_record_count to avoid app termination.
				FOR li_idx = 1 TO lstr.i_return_record_count
					// MPM - 3/10/2023 - DevOps 46932
					IF String(lstr.return28[1]) = 'T' THEN
						MessageBox(gs_app_name + ": Generator Select", "You selected a generator who does not generate waste; please select another generator.")
						RETURN 0
					END IF
					if iudw_document.uf_Get_RowCount() = 0 then
						ll_row_header = idw_header.GetRow()
						if ll_row_header > 0 then
							ll_profile_id = idw_header.Object.profile_id[ll_row_header]
							IF not IsNull(ll_profile_id) and ll_profile_id <> 0 THEN
								ll_rows = wf_retrieve_documents(il_curr_row, ll_profile_id)
							END IF
						end if
					end if
				
					IF UpperBound(lstr.return1[]) > 0 THEN
						ll_generator_id = lstr.return1[1]
						This.Object.generator_id[ll_curr_row] = ll_generator_id
						This.Object.generator_epa_id[ll_curr_row] = String(lstr.return2[1])
						This.Object.generator_name[ll_curr_row] = String(lstr.return3[1])
						This.Object.generator_type_id[ll_curr_row] = Double(lstr.return4[1])
						This.Object.generator_status[ll_curr_row] = String(lstr.return5[1])
						ls_outbound_restricted = String(lstr.return8[1])
						This.Object.generator_outbound_restricted[ll_curr_row] = ls_outbound_restricted
						wf_generator_knowledge_acceptable_check(ll_generator_id) // sagar 29969	
						wf_generator_foreign_generator(ll_generator_id) 
						IF ls_outbound_restricted = "T" THEN
							idw_approval.Object.t_outbound_restricted.visible = 1
							idw_approval.Object.b_outbound_restricted_info.visible = 1
						ELSE
							idw_approval.Object.t_outbound_restricted.visible = 0
							idw_approval.Object.b_outbound_restricted_info.visible = 0
						END IF
						ls_generator_eq_flag = String(lstr.return9[1])
						This.Object.generator_eq_flag[ll_curr_row] = ls_generator_eq_flag
						ls_customer_eq_flag = This.Object.customer_eq_flag[ll_curr_row]
						IF IsNull(ls_customer_eq_flag) OR ls_customer_eq_flag = 'F' THEN
							This.Object.broker_flag[ll_curr_row] = "D"
						ELSEIF ls_customer_eq_flag = "T" THEN
							IF ls_generator_eq_flag = "T" THEN
								This.Object.broker_flag[ll_curr_row] = "I"
							ELSE
								This.Object.broker_flag[ll_curr_row] = "O"
							END IF
						END IF
						
						ll_generator_tax_count = wf_get_salestax_count_generator(ll_generator_id)
						This.Object.generator_tax_count[ll_curr_row] = ll_generator_tax_count
						
						ib_changed_profile = TRUE
						
						// dz 07/11/2012 - populate generator info and refresh WPF tab afterwards
						wf_populate_generator_info (ll_generator_id, "")
						// COR2-MPM
						if idw_wcr_display_1.dataobject = "d_profile_generator_form_dragon" then
							Post wf_wcr_profile_map_load_wcr_sect ()
						end if
					END IF
				 NEXT
			  END IF
		END IF
		
		// MPM - 7/25/2023 - DevOps 68965
		POST wf_set_caution_text()

		// rb 06/26/2012 If WPF tab is active, set the ID there
//		if tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.dataobject = "d_profile_generator_form" then
//			tab_1.tabpage_view.tab_2.tabpage_wcr.dw_wcr_display_1.object.generator_id[1] = This.Object.generator_id[ll_curr_row]
//		end if
END CHOOSE

RETURN 0
end event

event retrievestart;call super::retrievestart;

If ib_append_rows Then //DevOps 16786 info_gde 07/20/2020; Profile Tracking - 'List' Tab
   ib_append_rows= false
	
  Return 2
Else
  Return 0
End If
end event

event getfocus;call super::getfocus;long ll_customer

IF idw_header.getrow()>0 THEN //DevOps 42057 info-gde 07/20/2022; Customer Text > 'Inactive' Status Color Coding
	ll_customer = wf_get_customer_id()
IF ll_customer > 0 THEN
IF f_chk_cust_status(ll_customer, FALSE) <> 1 THEN
	idw_header.object.customer_id.color = RED
	idw_header.object.customer_name.color = RED
ELSE
	idw_header.object.customer_id.color = BLACK
	idw_header.object.customer_name.color = BLACK
END IF
END IF
END IF
end event

event ue_navigate;call super::ue_navigate;//Subhrajyoti - Begin - 01/30/2024 - Devops# 74695 - Profile Tracking - Application Termination when navigating on the Lab Pack Template field - Profile tracking window should get opened one instance (opening instance from ue_navigate of anc_dw)


////Devops:21586 - Copy - Commented for now until 92 label going to prod
//long				ll_row, ll_id
//str_navigate		lstr_nav
//window			lw_window
//string				ls_status
//
//ll_row = getRow()
//

//Choose Case as_col_name
//		
//	Case 'created_from_template_profile_id'
//		if ai_indicate  < 3 Then
//			return 1
//		Else
//			lstr_nav.s_windowname = 'w_profile_dragon'
//			lstr_nav.s_column_name[1] = 'profile_id_from'
//			lstr_nav.s_column_value[1] = String(this.object.created_from_template_profile_id[idw_header.getrow()])
//
//			if Not IsNull(lstr_nav.s_column_value[1]) then
//				OpenSheetWithParm(lw_window, lstr_nav, 'w_profile_dragon', w_frame, gi_win_menu_loc, Layered!)
//			End If	
//		End If
//
//End Choose

//Subhrajyoti - End - 01/30/2024 - Devops# 74695 - Profile Tracking - Application Termination when navigating on the Lab Pack Template field - Profile tracking window should get opened one instance (opening instance from ue_navigate of anc_dw)

// MPM - 9/27/2021 - 28871 - Need to extend ancestor script and return AncestorReturnValue instead of 0
RETURN AncestorReturnValue

end event

type dw_profile_pharmaceutical_supplement from datawindow within tabpage_view
boolean visible = false
integer x = 4535
integer y = 664
integer width = 686
integer height = 400
integer taborder = 40
string title = "none"
string dataobject = "d_profile_pharmaceutical_supplement_dragon"
boolean border = false
boolean livescroll = true
end type

event constructor;idw_profile_pharmaceutical_supplement = This
end event

type tabpage_3 from userobject within tab_1
integer x = 18
integer y = 112
integer width = 4690
integer height = 2428
long backcolor = 67108864
string text = "List with Pricing"
long tabtextcolor = 33554432
string picturename = "Custom017!"
long picturemaskcolor = 536870912
dw_list_prices dw_list_prices
end type

on tabpage_3.create
this.dw_list_prices=create dw_list_prices
this.Control[]={this.dw_list_prices}
end on

on tabpage_3.destroy
destroy(this.dw_list_prices)
end on

type dw_list_prices from datawindow within tabpage_3
integer width = 4448
integer height = 2340
integer taborder = 50
string title = "none"
string dataobject = "d_profile_list_prices_dragon"
boolean hscrollbar = true
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;long	ll_profile_id, ll_row

IF row > 0 THEN
	ll_profile_id = GetItemNumber(row, "profile_id")
	ll_row = idw_header.Find("profile_id = " + String(ll_profile_id), 1, idw_header.RowCount())
	
	IF ll_row > 0 THEN
		idw_header.ScrollToRow(ll_row)
		idw_header.SetColumn("approval_desc")
		tab_1.SelectTab(ii_tabpage_view)
	END IF
END IF
end event

type tabpage_4 from userobject within tab_1
integer x = 18
integer y = 112
integer width = 4690
integer height = 2428
long backcolor = 67108864
string text = "List"
long tabtextcolor = 33554432
string picturename = "ListBox!"
long picturemaskcolor = 536870912
dw_list dw_list
end type

on tabpage_4.create
this.dw_list=create dw_list
this.Control[]={this.dw_list}
end on

on tabpage_4.destroy
destroy(this.dw_list)
end on

type dw_list from datawindow within tabpage_4
integer width = 4448
integer height = 2460
integer taborder = 40
string title = "none"
string dataobject = "d_profile_list_dragon"
boolean hscrollbar = true
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event doubleclicked;long	ll_profile_id, ll_row

IF row > 0 THEN
	ll_profile_id = GetItemNumber(row, "profile_id")
	ll_row = idw_header.Find("profile_id = " + String(ll_profile_id), 1, idw_header.RowCount())
	
	IF ll_row > 0 THEN
		idw_header.ScrollToRow(ll_row)
		idw_header.SetColumn("approval_desc")
		tab_1.SelectTab(ii_tabpage_view)
		ib_append_rows=true //DevOps 16786 info_gde 07/20/2020; Profile Tracking - 'List' Tab
	END IF
END IF
end event

type cb_view from commandbutton within w_profile_dragon
integer x = 3191
integer y = 204
integer width = 347
integer height = 76
integer taborder = 230
integer textsize = -8
integer weight = 400
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "&View"
end type

event clicked;if ii_clicked_tab1 <> ii_tabpage_view then
	tab_1.SelectedTab = ii_tabpage_view
end if

end event

type cb_select from commandbutton within w_profile_dragon
integer x = 3191
integer y = 124
integer width = 347
integer height = 76
integer taborder = 300
integer textsize = -8
integer weight = 400
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "&Select"
end type

event clicked;if ii_clicked_tab1 <> ii_tabpage_select then
	tab_1.SelectedTab = ii_tabpage_select
end if

end event

type cb_list_prices from commandbutton within w_profile_dragon
integer x = 3191
integer y = 280
integer width = 347
integer height = 76
integer taborder = 40
integer textsize = -8
integer weight = 400
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "List Pr&ices"
end type

event clicked;if ii_clicked_tab1 <> ii_tabpage_list_prices then
	tab_1.SelectedTab = ii_tabpage_list_prices
end if

end event

type cb_list from commandbutton within w_profile_dragon
integer x = 3191
integer y = 356
integer width = 347
integer height = 76
integer taborder = 190
integer textsize = -8
integer weight = 400
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "&List"
end type

event clicked;if ii_clicked_tab1 <> ii_tabpage_list then
	tab_1.SelectedTab = ii_tabpage_list
end if

end event

type dw_waste_import_supplement from datawindow within w_profile_dragon
boolean visible = false
integer x = 4622
integer y = 112
integer width = 361
integer height = 280
integer taborder = 350
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_waste_import_supplement"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_waste_import_supplement = This
end event

type dw_benzene_waste_ops_supplemen from datawindow within w_profile_dragon
boolean visible = false
integer x = 5102
integer y = 856
integer width = 270
integer height = 200
integer taborder = 150
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_benzene_waste_ops_supplement"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_benzene_waste_ops_supplemen = This
end event

type dw_profile_thermal_supplement_form from datawindow within w_profile_dragon
boolean visible = false
integer x = 4654
integer y = 176
integer width = 686
integer height = 400
integer taborder = 340
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_thermal_supplement_form"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_thermal_supplement_form = This
end event

type dw_profile_cylinder_supplement_dragon from datawindow within w_profile_dragon
boolean visible = false
integer x = 5024
integer y = 612
integer width = 347
integer height = 296
integer taborder = 100
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_cylinder_supplement_dragon"
boolean border = false
boolean livescroll = true
end type

event constructor;idw_profile_cylinder_supplement_dragon = This
end event

type dw_profile_pcb_supplement_dragon from datawindow within w_profile_dragon
boolean visible = false
integer x = 4942
integer y = 1100
integer width = 686
integer height = 400
integer taborder = 290
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_pcb_supplement_dragon"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_pcb_supplement_dragon = This 
end event

type dw_profile_used_oil_supplement_dragon from datawindow within w_profile_dragon
boolean visible = false
integer x = 4567
integer y = 472
integer width = 347
integer height = 236
integer taborder = 240
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_used_oil_supplement_dragon"
boolean border = false
boolean livescroll = true
end type

event constructor;idw_profile_used_oil_supplement_dragon = This
end event

type dw_profile_debris_certification_dragon from datawindow within w_profile_dragon
boolean visible = false
integer x = 5070
integer y = 612
integer width = 686
integer height = 400
integer taborder = 160
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_debris_certification_dragon"
boolean border = false
boolean livescroll = true
end type

event constructor;idw_profile_debris_certification_dragon = This 
end event

type dw_profile_illinois_disposal_supplemen from datawindow within w_profile_dragon
boolean visible = false
integer x = 4855
integer y = 664
integer width = 535
integer height = 268
integer taborder = 60
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_illinois_disposal_supplement_dragon"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_illinois_disposal_supplemen = This
end event

type dw_profile_ldr_form_dragon from datawindow within w_profile_dragon
boolean visible = false
integer x = 4663
integer y = 228
integer width = 686
integer height = 400
integer taborder = 80
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_ldr_form_dragon"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_ldr_form_dragon = This

end event

type dw_profile_radioactive_supplement_page_3 from datawindow within w_profile_dragon
boolean visible = false
integer x = 5490
integer y = 360
integer width = 443
integer height = 256
integer taborder = 360
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_radioactive_supplement_page_3"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_radioactive_supplement_page_3 = This 
end event

type dw_profile_radioactive_supplement_page_1 from datawindow within w_profile_dragon
boolean visible = false
integer x = 4567
integer y = 928
integer width = 443
integer height = 256
integer taborder = 370
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_radioactive_supplement_page_1"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_radioactive_supplement_page_1 = This
end event

type dw_profile_radioactive_supplement_page_2 from datawindow within w_profile_dragon
boolean visible = false
integer x = 4567
integer y = 1524
integer width = 443
integer height = 256
integer taborder = 130
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_radioactive_supplement_page_2"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_radioactive_supplement_page_2 = This
end event

type dw_profile_radioactive_supplement_3sub from datawindow within w_profile_dragon
boolean visible = false
integer x = 4567
integer y = 2576
integer width = 443
integer height = 256
integer taborder = 200
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_radioactive_supplement_page_3sub"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_profile_radioactive_supplement_3sub = This
end event

type dw_appr_notification from datawindow within w_profile_dragon
boolean visible = false
integer x = 2373
integer y = 2648
integer width = 686
integer height = 400
integer taborder = 220
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_appr_notifi_dragon"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_appr_renewal_notification from datawindow within w_profile_dragon
boolean visible = false
integer x = 1376
integer y = 2664
integer width = 686
integer height = 400
integer taborder = 260
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_appr_renewal_notifi_dragon"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_generator_locations from datawindow within w_profile_dragon
boolean visible = false
integer x = 5115
integer y = 1788
integer width = 686
integer height = 400
integer taborder = 50
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_various_locations"
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type cb_pdf from commandbutton within w_profile_dragon
boolean visible = false
integer x = 4325
integer y = 608
integer width = 119
integer height = 92
integer taborder = 250
boolean bringtotop = true
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string text = "PDF"
end type

event clicked;// ************************************************************************
//
// 20191113 jcb #12448 Add a button to get PDF for whichever tabpage user is looking at
// 20191113 jcb #12448 Only show on Profile Tab                       
//
// ************************************************************************

long 	ll_rc, ll_rows, ll_display_row, ll_row_header, ll_profile_id, ll_row_wcr_sections
string	ls_wcr_section


ll_row_wcr_sections =   idw_section_select.getrow()
ls_wcr_section 		   = idw_section_select.getitemstring(ll_row_wcr_sections,'description')

ll_row_header = idw_header.GetRow()
if ll_row_header > 0 then
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]
	if not IsNull(ll_profile_id) and ll_profile_id <> 0 THEN
         ll_rc = wf_get_ssrs_report(ls_wcr_section, ll_profile_id)
	end if
end if

Return ll_rc
end event

type pb_pdf from picturebutton within w_profile_dragon
boolean visible = false
integer x = 4261
integer y = 508
integer width = 119
integer height = 104
integer taborder = 110
boolean bringtotop = true
integer textsize = -8
integer weight = 700
fontcharset fontcharset = ansi!
fontpitch fontpitch = variable!
fontfamily fontfamily = swiss!
string facename = "Arial"
string picturename = "C:\EQAI-Dev\Resources\pdf.bmp"
string disabledname = "C:\EQAI-Dev\Resources\pdfinactive.bmp"
alignment htextalign = left!
string powertiptext = "Get Approval PDF"
end type

event clicked;// ************************************************************************
// 20191114 jcb #12448 This is a picture button clone of cb_pdf, only show on Profile tab
// 20191114 jcb #12448 Add a button to get PDF for whichever tabpage user is looking at
// 20191114 jcb #12448 Only show on Profile Tab                       
//
// ************************************************************************

long 	ll_rc, ll_rows, ll_display_row, ll_row_header, ll_profile_id, ll_row_wcr_sections, ll_row_find, ll_fed_haz_waste_code_count
string	ls_wcr_section, ls_facility_instruction,ls_specific_tech_req, ls_filter,ls_rcra_haz_flag,ls_doc_reason
int		li_response
datastore lds

// MPM - 5/29/2020 - DevOps 16039 - Modified to save pending changes before generating the PDF
wf_accepttext()

////DevOps 17566 info_gde 11/02/2020; EQAI Illinois Supplement Generation - Add Validations
//IF idw_wcr_display_1.dataobject = 'd_profile_illinois_disposal_supplement_dragon' THEN
//	//DevOps 17566 info_gde 11/13/2020; EQAI Illinois Supplement Generation - Add Validations
//	lds = CREATE datastore
//	lds.DataObject = "d_profile_dragon"
//	lds.SetTransObject(itr_share)
//
//	ll_row_header=idw_header.rowcount()
//	ls_specific_tech_req=idw_header.Object.specific_technology_requested[ll_row_header] 
//
//	idw_header.RowsCopy(idw_header.GetRow(), idw_header.RowCount(), Primary!, lds, 1, Primary!)
//	ls_filter =  "facility_instruction like '%Chicago%'"
//	lds.SetFilter (ls_filter)
//	lds.Filter ()
//	ll_rows=lds.rowcount()		
//	
//	//lds.SetFilter ("")
//	//lds.Filter()
//	
//    If ll_rows = 0 Then
//		MessageBox(gs_app_name+": Get PDF", "The Illinois Supplement cannot be generated.  Update section H1 to 'Yes' and add 26-00 'US Ecology Chicago' to section H5.", Exclamation!)
//		RETURN gi_failure
//	End If
//	
//	If 	(ls_specific_tech_req='F' OR ls_specific_tech_req='U' OR isNull(ls_specific_tech_req)) AND (ll_rows = 0) Then
//		MessageBox(gs_app_name+": Get PDF", "The Illinois Supplement cannot be generated.  Update section H1 to 'Yes' and add 26-00 'US Ecology Chicago' to section H5.", Exclamation!)
//		RETURN gi_failure
//	End If
//	
//	If ls_specific_tech_req='F' OR ls_specific_tech_req='U' OR isNull(ls_specific_tech_req) Then
//		MessageBox(gs_app_name+": Get PDF", "The Illinois Supplement cannot be generated.  Update section H1 to 'Yes' and add 26-00 'US Ecology Chicago' to section H5.", Exclamation!)
//		RETURN gi_failure
//	End If

// MPM - 4/15/2021 - DevOps 19741 - Reworked DevOps 17566 changes
IF idw_wcr_display_1.dataobject = 'd_profile_illinois_disposal_supplement_dragon' THEN
	ll_row_header = idw_header.GetRow()
	IF ll_row_header > 0 THEN
		ls_specific_tech_req = idw_header.Object.specific_technology_requested[ll_row_header]
		IF IsNull(ls_specific_tech_req) THEN ls_specific_tech_req = 'F'
		ll_row_find = idw_wcr_facility.Find("company_id = 26 and profit_ctr_id = 0", 1, idw_wcr_facility.RowCount() + 1)
		IF NOT (ls_specific_tech_req = 'T' AND ll_row_find > 0) THEN
			MessageBox(gs_app_name+": Get PDF", "The Illinois Supplement cannot be generated.  Update section H1 to 'Yes' and add 26-00 'US Ecology Chicago' to section H5.", Exclamation!)
			RETURN gi_failure
		END IF
	END IF
END IF

//DevOps:68227 -  AM - 09/27/2023 - Don't attempt to generate LDR if data is incomplete
IF idw_wcr_display_1.dataobject = 'd_profile_ldr_form_dragon' THEN
	ll_row_header = idw_header.GetRow()
	IF ll_row_header > 0 THEN
	 ls_rcra_haz_flag = idw_header.Object.rcra_haz_flag[ll_row_header] 
	 ll_fed_haz_waste_code_count = idw_waste_code_fed.Find("haz_flag = 'T'", 1, idw_waste_code_fed.RowCount() + 1)
		IF ls_rcra_haz_flag = 'H' AND ll_fed_haz_waste_code_count = 0 THEN
		   MessageBox(gs_app_name+": Get PDF", "The profile has the RCRA Hazardous flag set on E3 as Hazardous, but there are no Federal hazardous waste codes assigned on the profile.", Exclamation!)
		   RETURN gi_failure
		  END IF
    END IF
END IF

IF wf_modifiedcount() > 0 THEN
	// Prompt user to save
	li_response = MessageBox(gs_app_name+": Get PDF", "Pending changes must be saved before generating the PDF.  Do you want to save changes?", Question!, YesNo!, 1)
	CHOOSE CASE li_response 
		CASE 1
			Parent.TriggerEvent("ue_save")
			IF wf_modifiedcount() > 0 THEN
				MessageBox(gs_app_name+": Get PDF", "Pending changes were not saved.  Please contact the I.T. Department.", Exclamation!)
				RETURN gi_failure
			ELSE
				//DevOps 18424
				// MPM - 1/22/2021 - DevOps 18942 - Commenting out the 2 commits below because I don't want this change in EQAI 7.4.75.  It can be included in a deploy after that.
				commit using itr_share;
				commit using itr_image;
			END IF
		CASE 2
			// User doesn't want to save changes, so inform that they can't generate the PDF, then return
			MessageBox(gs_app_name+": Get PDF", "Pending changes must be saved before generating the PDF.")
			RETURN gi_no_action
	END CHOOSE
ELSE
	//DevOps 18424
	// MPM - 1/22/2021 - DevOps 18942 - Commenting out the 2 commits below because I don't want this change in EQAI 7.4.75.  It can be included in a deploy after that.
	commit using itr_share;
	commit using itr_image;
END IF

ll_row_wcr_sections =  idw_section_select.getrow()
ls_wcr_section 		   =  idw_section_select.getitemstring(ll_row_wcr_sections,'description')

ll_row_header = idw_header.GetRow()
if ll_row_header > 0 then
	ll_profile_id = idw_header.Object.profile_id[ll_row_header]	
	if not IsNull(ll_profile_id) and ll_profile_id <> 0 THEN
			ll_rc = wf_get_ssrs_report(ls_wcr_section, ll_profile_id)
			//DevOps 18424
			// MPM - 1/22/2021 - DevOps 18942 - Commenting out the 2 commits below because I don't want this change in EQAI 7.4.75.  It can be included in a deploy after that.
			commit using itr_share;
			commit using itr_image;
	end if
end if

Return ll_rc
end event

type dw_profile_consolidation_group from datawindow within w_profile_dragon
boolean visible = false
integer x = 4553
integer y = 1904
integer width = 535
integer height = 400
integer taborder = 330
boolean bringtotop = true
string title = "none"
string dataobject = "dddw_profile_consolidation_group"
boolean resizable = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

type dw_ship_volume from datawindow within w_profile_dragon
boolean visible = false
integer x = 4946
integer y = 24
integer width = 850
integer height = 260
integer taborder = 120
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_ship_pkg_info_form_volume_dragon"
boolean border = false
boolean livescroll = true
end type

event sqlpreview;//messagebox ('test',sqlsyntax )
end event

type dw_gen_knowledge_supplement from datawindow within w_profile_dragon
boolean visible = false
integer x = 4608
integer y = 88
integer width = 686
integer height = 400
integer taborder = 360
boolean bringtotop = true
string title = "none"
string dataobject = "d_profile_gen_knowledge_supplement_form"
boolean vscrollbar = true
boolean livescroll = true
borderstyle borderstyle = stylelowered!
end type

event constructor;idw_gen_knowledge_supplement = This
end event

